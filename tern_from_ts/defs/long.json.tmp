{
  "Long": {
    "!type": "fn(low: number, high?: number, unsigned?: bool)",
    "MAX_UNSIGNED_VALUE": "Long",
    "MAX_VALUE": "Long",
    "MIN_VALUE": "Long",
    "NEG_ONE": "Long",
    "ONE": "Long",
    "UONE": "Long",
    "UZERO": "Long",
    "ZERO": "Long",
    "fromBits": "fn(lowBits: number, highBits: number, unsigned?: bool) -> Long",
    "fromInt": "fn(value: number, unsigned?: bool) -> Long",
    "fromNumber": "fn(value: number, unsigned?: bool) -> Long",
    "fromString": "fn(str: string, unsigned?: bool, number: ?, radix?: number) -> Long",
    "isLong": "fn(obj: ?) -> bool",
    "fromValue": "fn(val: Long, number: ?, string: ?)",
    "prototype": {
      "high": "number",
      "low": "number",
      "unsigned": "bool",
      "Long": "?",
      "add": "fn(addend: number, Long: ?, string: ?) -> Long",
      "and": "fn(other: Long, number: ?, string: ?) -> Long",
      "compare": "fn(other: Long, number: ?, string: ?) -> number",
      "comp": "fn(other: Long, number: ?, string: ?) -> number",
      "divide": "fn(divisor: Long, number: ?, string: ?) -> Long",
      "div": "fn(divisor: Long, number: ?, string: ?) -> Long",
      "equals": "fn(other: Long, number: ?, string: ?) -> bool",
      "eq": "fn(other: Long, number: ?, string: ?) -> bool",
      "getHighBits": "fn() -> number",
      "getHighBitsUnsigned": "fn() -> number",
      "getLowBits": "fn() -> number",
      "getLowBitsUnsigned": "fn() -> number",
      "getNumBitsAbs": "fn() -> number",
      "greaterThan": "fn(other: Long, number: ?, string: ?) -> bool",
      "gt": "fn(other: Long, number: ?, string: ?) -> bool",
      "greaterThanOrEqual": "fn(other: Long, number: ?, string: ?) -> bool",
      "gte": "fn(other: Long, number: ?, string: ?) -> bool",
      "isEven": "fn() -> bool",
      "isNegative": "fn() -> bool",
      "isOdd": "fn() -> bool",
      "isPositive": "fn() -> bool",
      "isZero": "fn() -> bool",
      "lessThan": "fn(other: Long, number: ?, string: ?) -> bool",
      "lt": "fn(other: Long, number: ?, string: ?) -> bool",
      "lessThanOrEqual": "fn(other: Long, number: ?, string: ?) -> bool",
      "lte": "fn(other: Long, number: ?, string: ?) -> bool",
      "modulo": "fn(other: Long, number: ?, string: ?) -> Long",
      "mod": "fn(other: Long, number: ?, string: ?) -> Long",
      "multiply": "fn(multiplier: Long, number: ?, string: ?) -> Long",
      "mul": "fn(multiplier: Long, number: ?, string: ?) -> Long",
      "negate": "fn() -> Long",
      "neg": "fn() -> Long",
      "not": "fn() -> Long",
      "notEquals": "fn(other: Long, number: ?, string: ?) -> bool",
      "neq": "fn(other: Long, number: ?, string: ?) -> bool",
      "or": "fn(other: Long, number: ?, string: ?) -> Long",
      "shiftLeft": "fn(numBits: number, Long: ?) -> Long",
      "shl": "fn(numBits: number, Long: ?) -> Long",
      "shiftRight": "fn(numBits: number, Long: ?) -> Long",
      "shr": "fn(numBits: number, Long: ?) -> Long",
      "shiftRightUnsigned": "fn(numBits: number, Long: ?) -> Long",
      "shru": "fn(numBits: number, Long: ?) -> Long",
      "subtract": "fn(subtrahend: number, Long: ?, string: ?) -> Long",
      "sub": "fn(subtrahend: number, Long: ?, string: ?) -> Long",
      "toInt": "fn() -> number",
      "toNumber": "fn() -> number",
      "toSigned": "fn() -> Long",
      "toUnsigned": "fn() -> Long",
      "xor": "fn(other: Long, number: ?, string: ?) -> Long"
    }
  },
  "'long'": "Long",
  "!name": "long.d.ts"
}
