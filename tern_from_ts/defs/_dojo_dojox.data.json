{
  "dojox": {
    "data": {
      "restListener": {},
      "AndOrReadStore": {
        "!type": "fn(keywordParameters: Object)",
        "prototype": {
          "clearOnClose": "bool",
          "data": "Object",
          "failOk": "bool",
          "hierarchical": "bool",
          "typeMap": "Object",
          "url": "string",
          "urlPreventCache": "bool",
          "close": "fn(request: dojo.data.api.Request)",
          "containsValue": "fn(item: dojo.data.api.Item, attribute: String, value: ?) -> ?",
          "emit": "fn(type: ?, event: ?) -> ?",
          "errorHandler": "fn(errorData: Object, requestObject: Object)",
          "fetch": "fn(request: Object)",
          "fetchHandler": "fn(items: [?], requestObject: Object)",
          "fetchItemByIdentity": "fn(keywordArgs: Object)",
          "filter": "fn(requestArgs: ?, arrayOfItems: ?, findCallback: ?)",
          "getAttributes": "fn(item: dojo.data.api.Item) -> [?]",
          "getFeatures": "fn() -> ?",
          "getIdentity": "fn(item: dojo.data.api.Item) -> ?",
          "getIdentityAttributes": "fn(item: dojo.data.api.Item) -> ?",
          "getLabel": "fn(item: dojo.data.api.Item) -> ?",
          "getLabelAttributes": "fn(item: dojo.data.api.Item) -> ?",
          "getValue": "fn(item: dojo.data.api.Item, attribute: String, defaultValue: ?) -> ?",
          "getValues": "fn(item: dojo.data.api.Item, attribute: String) -> ?",
          "hasAttribute": "fn(item: dojo.data.api.Item, attribute: String) -> bool",
          "isItem": "fn(something: ?) -> bool",
          "isItemLoaded": "fn(something: ?) -> ?",
          "loadItem": "fn(keywordArgs: Object)",
          "on": "fn(type: ?, listener: ?) -> ?"
        }
      },
      "AndOrWriteStore": {
        "!type": "fn(keywordParameters: Object)",
        "prototype": {
          "clearOnClose": "bool",
          "data": "Object",
          "failOk": "bool",
          "hierarchical": "bool",
          "referenceIntegrity": "bool",
          "typeMap": "Object",
          "url": "string",
          "urlPreventCache": "bool",
          "close": "fn(request: Object)",
          "containsValue": "fn(item: dojo.data.api.Item, attribute: String, value: ?) -> ?",
          "deleteItem": "fn(item: dojo.data.api.Item) -> bool",
          "emit": "fn(type: ?, event: ?) -> ?",
          "errorHandler": "fn(errorData: Object, requestObject: Object)",
          "fetch": "fn(request: Object)",
          "fetchHandler": "fn(items: [?], requestObject: Object)",
          "fetchItemByIdentity": "fn(keywordArgs: Object)",
          "filter": "fn(requestArgs: Object, arrayOfItems: [?], findCallback: Function)",
          "getAttributes": "fn(item: dojo.data.api.Item) -> [?]",
          "getFeatures": "fn() -> ?",
          "getIdentity": "fn(item: dojo.data.api.Item) -> ?",
          "getIdentityAttributes": "fn(item: dojo.data.api.Item) -> ?",
          "getLabel": "fn(item: dojo.data.api.Item) -> ?",
          "getLabelAttributes": "fn(item: dojo.data.api.Item) -> ?",
          "getValue": "fn(item: dojo.data.api.Item, attribute: String, defaultValue: ?) -> ?",
          "getValues": "fn(item: dojo.data.api.Item, attribute: String) -> ?",
          "hasAttribute": "fn(item: dojo.data.api.Item, attribute: String) -> bool",
          "isDirty": "fn(item: ?) -> ?",
          "isItem": "fn(something: ?) -> bool",
          "isItemLoaded": "fn(something: ?) -> ?",
          "loadItem": "fn(keywordArgs: Object)",
          "newItem": "fn(keywordArgs: Object, parentInfo: Object) -> Object",
          "on": "fn(type: ?, listener: ?) -> ?",
          "revert": "fn() -> bool",
          "save": "fn(keywordArgs: Object)",
          "setValue": "fn(item: dojo.data.api.Item, attribute: String, value: ?) -> ?",
          "setValues": "fn(item: dojo.data.api.Item, attribute: String, values: [?]) -> ?",
          "unsetAttribute": "fn(item: dojo.data.api.Item, attribute: String) -> ?",
          "onDelete": "fn(deletedItem: dojo.data.api.Item)",
          "onNew": "fn(newItem: dojo.data.api.Item, parentInfo: Object)",
          "onSet": "fn(item: dojo.data.api.Item, attribute: String, oldValue: Object, newValue: Object)"
        }
      },
      "AppStore": {
        "!type": "fn(args: Object)",
        "prototype": {
          "url": "string",
          "urlPreventCache": "bool",
          "xmethod": "bool",
          "close": "fn(request: dojo.data.api.Request)",
          "containsValue": "fn(item: ?, attribute: String, value: ?) -> ?",
          "deleteItem": "fn(item: ?) -> bool",
          "fetchItemByIdentity": "fn(keywordArgs: ?)",
          "getAttributes": "fn(item: ?) -> [?]",
          "getFeatures": "fn() -> Object",
          "getIdentity": "fn(item: ?) -> ?",
          "getIdentityAttributes": "fn(item: ?) -> [?]",
          "getLabel": "fn(item: ?) -> ?",
          "getLabelAttributes": "fn(item: ?) -> [?]",
          "getValue": "fn(item: ?, attribute: String, defaultValue: ?) -> ?",
          "getValues": "fn(item: ?, attribute: String) -> ?",
          "hasAttribute": "fn(item: ?, attribute: String) -> bool",
          "isDirty": "fn(item: ?) -> bool",
          "isItem": "fn(something: ?) -> ?",
          "isItemLoaded": "fn(something: ?) -> ?",
          "loadItem": "fn(keywordArgs: Object)",
          "newItem": "fn(keywordArgs: Object) -> bool",
          "revert": "fn() -> bool",
          "save": "fn(keywordArgs: Object)",
          "setValue": "fn(item: ?, attribute: String, value: ?) -> bool",
          "setValues": "fn(item: ?, attribute: String, values: [?]) -> ?",
          "unsetAttribute": "fn(item: ?, attribute: String) -> bool"
        }
      },
      "AtomReadStore": {
        "!type": "fn(args: Object)",
        "prototype": {
          "label": "string",
          "sendQuery": "bool",
          "unescapeHTML": "bool",
          "url": "string",
          "urlPreventCache": "bool",
          "close": "fn(request: dojo.data.api.Request)",
          "containsValue": "fn(item: dojo.data.api.Item, attribute: Attr, value: ?) -> ?",
          "getAttributes": "fn(item: dojo.data.api.Item) -> ?",
          "getFeatures": "fn() -> ?",
          "getFeedValue": "fn(attribute: ?, defaultValue: ?) -> ?",
          "getFeedValues": "fn(attribute: ?, defaultValue: ?) -> ?",
          "getLabel": "fn(item: dojo.data.api.Item) -> ?",
          "getLabelAttributes": "fn(item: dojo.data.api.Item) -> ?",
          "getValue": "fn(item: dojo.data.api.Item, attribute: Attr, defaultValue: ?) -> ?",
          "getValues": "fn(item: dojo.data.api.Item, attribute: Attr) -> ?",
          "hasAttribute": "fn(item: dojo.data.api.Item, attribute: Attr) -> ?",
          "isItem": "fn(something: ?) -> ?",
          "isItemLoaded": "fn(something: ?) -> ?",
          "loadItem": "fn(keywordArgs: Object)"
        }
      },
      "CdfStore": {
        "!type": "fn(args: Object)",
        "prototype": {
          "data": "Object",
          "identity": "string",
          "label": "string",
          "mode": "number",
          "url": "string",
          "xmlStr": "string",
          "byId": "fn(args: Object)",
          "close": "fn(request: dojo.data.api.Request)",
          "containsValue": "fn(item: ?, property: String, value: ?) -> bool",
          "deleteItem": "fn(item: ?) -> bool",
          "fetch": "fn(request: String) -> ?",
          "fetchItemByIdentity": "fn(args: Object) -> ?",
          "getAttributes": "fn(item: ?) -> ?",
          "getFeatures": "fn() -> Object",
          "getIdentity": "fn(item: ?) -> ?",
          "getIdentityAttributes": "fn(item: ?) -> [?]",
          "getLabel": "fn(item: ?) -> ?",
          "getLabelAttributes": "fn(item: ?) -> ?",
          "getValue": "fn(item: ?, property: String, defaultValue: ?) -> ?",
          "getValues": "fn(item: ?, property: String) -> [?]",
          "hasAttribute": "fn(item: ?, property: String) -> bool",
          "hasProperty": "fn(item: ?, property: String) -> ?",
          "isDirty": "fn(item: ?) -> bool",
          "isItem": "fn(something: ?) -> bool",
          "isItemLoaded": "fn(something: ?) -> ?",
          "loadItem": "fn(keywordArgs: Object)",
          "newItem": "fn(keywordArgs: Object, parentInfo: Object) -> ?",
          "revert": "fn() -> bool",
          "setValue": "fn(item: ?, property: String, value: ?) -> bool",
          "setValues": "fn(item: ?, property: String, values: [?]) -> ?",
          "unsetAttribute": "fn(item: ?, property: String) -> bool"
        }
      },
      "ClientFilter": {
        "!type": "fn()",
        "prototype": {
          "cacheByDefault": "bool",
          "serverVersion": "number",
          "cachingFetch": "fn(args: ?) -> ?",
          "clearCache": "fn()",
          "clientSideFetch": "fn(request: Object, baseResults: [?]) -> ?",
          "clientSidePaging": "fn(request: Object, baseResults: [?]) -> [?]",
          "isUpdateable": "fn(request: Object) -> bool",
          "makeComparator": "fn(sort: ?) -> Function",
          "matchesQuery": "fn(item: ?, request: ?) -> bool",
          "querySuperSet": "fn(argsSuper: ?, argsSub: ?) -> ?",
          "updateResultSet": "fn(resultSet: [?], request: Object) -> ?",
          "onUpdate": "fn()"
        }
      },
      "CouchDBRestStore": {
        "!type": "fn()",
        "prototype": {
          "fetch": "fn(args: ?) -> ?",
          "getStores": "fn(couchServerUrl: ?)",
          "save": "fn(kwArgs: ?)"
        }
      },
      "CssClassStore": {
        "!type": "fn(keywordParameters: Object)",
        "prototype": {
          "close": "fn()",
          "containsValue": "fn(item: ?, attribute: String, value: ?) -> ?",
          "fetch": "fn(request: ?) -> String",
          "fetchItemByIdentity": "fn(request: Object) -> String",
          "getAttributes": "fn(item: ?) -> [?]",
          "getFeatures": "fn() -> Object",
          "getIdentity": "fn(item: ?) -> ?",
          "getIdentityAttributes": "fn(item: ?) -> [?]",
          "getLabel": "fn(item: ?) -> ?",
          "getLabelAttributes": "fn(item: ?) -> [?]",
          "getValue": "fn(item: ?, attribute: ?, defaultValue: ?) -> ?",
          "getValues": "fn(item: ?, attribute: ?) -> [?]",
          "hasAttribute": "fn(item: ?, attribute: ?) -> bool",
          "isItem": "fn(item: ?) -> bool",
          "isItemLoaded": "fn(something: ?) -> ?",
          "loadItem": "fn(keywordArgs: Object)",
          "setContext": "fn(context: [?])"
        }
      },
      "CssRuleStore": {
        "!type": "fn(keywordParameters: Object)",
        "prototype": {
          "close": "fn()",
          "containsValue": "fn(item: ?, attribute: String, value: ?) -> ?",
          "fetch": "fn(request: ?) -> String",
          "getAttributes": "fn(item: ?) -> [?]",
          "getFeatures": "fn() -> Object",
          "getLabel": "fn(item: ?) -> ?",
          "getLabelAttributes": "fn(item: ?) -> [?]",
          "getValue": "fn(item: ?, attribute: ?, defaultValue: ?) -> ?",
          "getValues": "fn(item: ?, attribute: ?) -> [?]",
          "hasAttribute": "fn(item: ?, attribute: ?) -> bool",
          "isItem": "fn(item: ?) -> bool",
          "isItemLoaded": "fn(something: ?) -> ?",
          "loadItem": "fn(keywordArgs: Object)",
          "setContext": "fn(context: [?])"
        }
      },
      "CsvStore": {
        "!type": "fn(keywordParameters: Object)",
        "prototype": {
          "identifier": "string",
          "label": "string",
          "separator": "string",
          "url": "string",
          "urlPreventCache": "bool",
          "close": "fn(request: dojo.data.api.Request)",
          "containsValue": "fn(item: ?, attribute: Attr, value: ?) -> ?",
          "errorHandler": "fn(errorData: Object, requestObject: Object)",
          "fetch": "fn(request: Object)",
          "fetchHandler": "fn(items: [?], requestObject: Object)",
          "fetchItemByIdentity": "fn(keywordArgs: Object)",
          "getAttributes": "fn(item: ?) -> [?]",
          "getFeatures": "fn() -> ?",
          "getIdentity": "fn(item: ?) -> ?",
          "getIdentityAttributes": "fn(item: ?) -> ?",
          "getLabel": "fn(item: ?) -> ?",
          "getLabelAttributes": "fn(item: ?) -> ?",
          "getValue": "fn(item: ?, attribute: Attr, defaultValue: ?) -> ?",
          "getValues": "fn(item: ?, attribute: Attr) -> [?]",
          "hasAttribute": "fn(item: ?, attribute: String) -> bool",
          "isItem": "fn(something: ?) -> bool",
          "isItemLoaded": "fn(something: ?) -> ?",
          "loadItem": "fn(item: ?)"
        }
      },
      "FileStore": {
        "!type": "fn(args: Object)",
        "prototype": {
          "failOk": "bool",
          "label": "string",
          "options": "[?]",
          "pathAsQueryParam": "bool",
          "pathSeparator": "string",
          "url": "string",
          "urlPreventCache": "string",
          "close": "fn(request: ?)",
          "containsValue": "fn(item: ?, attribute: ?, value: ?) -> bool",
          "fetch": "fn(request: ?)",
          "fetchItemByIdentity": "fn(keywordArgs: ?)",
          "getAttributes": "fn(item: ?) -> ?",
          "getFeatures": "fn() -> Object",
          "getIdentity": "fn(item: ?) -> ?",
          "getIdentityAttributes": "fn(item: ?) -> [?]",
          "getLabel": "fn(item: ?) -> ?",
          "getLabelAttributes": "fn(item: ?) -> [?]",
          "getValue": "fn(item: ?, attribute: ?, defaultValue: ?) -> ?",
          "getValues": "fn(item: ?, attribute: ?) -> [?]",
          "hasAttribute": "fn(item: ?, attribute: ?) -> bool",
          "isItem": "fn(item: ?) -> bool",
          "isItemLoaded": "fn(item: ?) -> bool",
          "loadItem": "fn(keywordArgs: ?)"
        }
      },
      "FlickrRestStore": {
        "!type": "fn(args: Object)",
        "prototype": {
          "label": "string",
          "urlPreventCache": "bool",
          "close": "fn(request: ?)",
          "containsValue": "fn(item: ?, attribute: ?, value: ?) -> bool",
          "errorHandler": "fn(errorData: Object, requestObject: Object)",
          "fetch": "fn(request: Object)",
          "fetchHandler": "fn(items: [?], requestObject: Object)",
          "getAttributes": "fn(item: ?) -> [?]",
          "getFeatures": "fn() -> Object",
          "getLabel": "fn(item: ?) -> ?",
          "getLabelAttributes": "fn(item: ?) -> [?]",
          "getValue": "fn(item: ?, attribute: ?, defaultValue: ?) -> ?",
          "getValues": "fn(item: ?, attribute: ?) -> ?",
          "hasAttribute": "fn(item: ?, attribute: ?) -> bool",
          "isItem": "fn(item: ?) -> bool",
          "isItemLoaded": "fn(item: ?) -> ?",
          "loadItem": "fn(keywordArgs: ?)"
        }
      },
      "FlickrStore": {
        "!type": "fn(args: Object)",
        "prototype": {
          "label": "string",
          "urlPreventCache": "bool",
          "urlRegistry": "Object",
          "close": "fn(request: ?)",
          "containsValue": "fn(item: ?, attribute: ?, value: ?) -> bool",
          "errorHandler": "fn(errorData: Object, requestObject: Object)",
          "fetch": "fn(request: Object)",
          "fetchHandler": "fn(items: [?], requestObject: Object)",
          "getAttributes": "fn(item: ?) -> [?]",
          "getFeatures": "fn() -> Object",
          "getLabel": "fn(item: ?) -> ?",
          "getLabelAttributes": "fn(item: ?) -> [?]",
          "getValue": "fn(item: ?, attribute: ?, defaultValue: ?) -> ?",
          "getValues": "fn(item: ?, attribute: ?) -> ?",
          "hasAttribute": "fn(item: ?, attribute: ?) -> bool",
          "isItem": "fn(item: ?) -> bool",
          "isItemLoaded": "fn(item: ?) -> ?",
          "loadItem": "fn(keywordArgs: ?)"
        }
      },
      "GoogleFeedStore": {
        "!type": "fn(args: Object)",
        "prototype": {
          "label": "string",
          "urlPreventCache": "bool",
          "close": "fn(request: ?)",
          "containsValue": "fn(item: ?, attribute: ?, value: ?) -> bool",
          "fetch": "fn(request: ?)",
          "getAttributes": "fn(item: ?) -> ?",
          "getFeatures": "fn() -> Object",
          "getFeedValue": "fn(attribute: ?, defaultValue: ?) -> ?",
          "getFeedValues": "fn(attribute: ?, defaultValue: ?) -> ?",
          "getLabel": "fn(item: ?) -> ?",
          "getLabelAttributes": "fn(item: ?) -> [?]",
          "getValue": "fn(item: ?, attribute: ?, defaultValue: ?) -> ?",
          "getValues": "fn(item: ?, attribute: ?) -> ?",
          "hasAttribute": "fn(item: ?, attribute: ?) -> bool",
          "isItem": "fn(item: ?) -> bool",
          "isItemLoaded": "fn(item: ?) -> ?",
          "loadItem": "fn(keywordArgs: ?)"
        }
      },
      "HtmlStore": {
        "!type": "fn(args: Object)",
        "prototype": {
          "dataId": "string",
          "fetchOnCreate": "bool",
          "trimWhitespace": "bool",
          "url": "string",
          "urlPreventCache": "bool",
          "close": "fn(request: dojo.data.api.Request)",
          "containsValue": "fn(item: ?, attribute: String, value: ?) -> ?",
          "errorHandler": "fn(errorData: Object, requestObject: Object)",
          "fetch": "fn(request: Object)",
          "fetchHandler": "fn(items: [?], requestObject: Object)",
          "fetchItemByIdentity": "fn(keywordArgs: ?)",
          "getAttributes": "fn(item: ?) -> [?]",
          "getFeatures": "fn() -> Object",
          "getIdentity": "fn(item: ?) -> ?",
          "getIdentityAttributes": "fn(item: ?) -> ?",
          "getLabel": "fn(item: ?) -> ?",
          "getLabelAttributes": "fn(item: ?) -> ?",
          "getValue": "fn(item: ?, attribute: String, defaultValue: ?) -> ?",
          "getValues": "fn(item: ?, attribute: String) -> [?]",
          "hasAttribute": "fn(item: ?, attribute: String) -> bool",
          "isItem": "fn(something: ?) -> ?",
          "isItemLoaded": "fn(something: ?) -> ?",
          "loadItem": "fn(keywordArgs: Object)"
        }
      },
      "HtmlTableStore": {
        "!type": "fn(args: Object)",
        "prototype": {
          "tableId": "string",
          "url": "string",
          "close": "fn(request: dojo.data.api.Request)",
          "containsValue": "fn(item: ?, attribute: String, value: ?) -> ?",
          "errorHandler": "fn(errorData: Object, requestObject: Object)",
          "fetch": "fn(request: Object)",
          "fetchHandler": "fn(items: [?], requestObject: Object)",
          "fetchItemByIdentity": "fn(keywordArgs: ?)",
          "getAttributes": "fn(item: ?) -> [?]",
          "getFeatures": "fn() -> Object",
          "getIdentity": "fn(item: ?) -> ?",
          "getIdentityAttributes": "fn(item: ?) -> ?",
          "getLabel": "fn(item: ?) -> ?",
          "getLabelAttributes": "fn(item: ?) -> ?",
          "getValue": "fn(item: ?, attribute: String, defaultValue: ?) -> ?",
          "getValues": "fn(item: ?, attribute: String) -> [?]",
          "hasAttribute": "fn(item: ?, attribute: String) -> bool",
          "isItem": "fn(something: ?) -> bool",
          "isItemLoaded": "fn(something: ?) -> ?",
          "loadItem": "fn(keywordArgs: Object)"
        }
      },
      "JsonQueryRestStore": {
        "!type": "fn(options?: ?)",
        "prototype": {
          "allowNoTrailingSlash": "bool",
          "estimateCountFactor": "number",
          "idAsRef": "bool",
          "idAttribute": "string",
          "jsonQueryPagination": "bool",
          "labelAttribute": "string",
          "loadLazyValues": "bool",
          "loadReferencedSchema": "bool",
          "referenceIntegrity": "bool",
          "schema": "Object",
          "service": "Object",
          "syncMode": "bool",
          "target": "string",
          "useFullIdInQueries": "bool",
          "cancelChanging": "fn(object: ?)",
          "changing": "fn(item: ?, _deleting: ?)",
          "clientSideFetch": "fn(request: Object, baseResults: [?]) -> ?",
          "close": "fn(request: ?) -> ?",
          "containsValue": "fn(item: Object, attribute: String, value: ?) -> bool",
          "deleteItem": "fn(item: ?)",
          "fetch": "fn(args: ?) -> String",
          "fetchItemByIdentity": "fn(args: ?) -> ?",
          "getAttributes": "fn(item: Object) -> [?]",
          "getConstructor": "fn() -> ?",
          "getFeatures": "fn() -> ?",
          "getIdentity": "fn(item: ?) -> ?",
          "getIdentityAttributes": "fn(item: ?) -> [?]",
          "getLabel": "fn(item: ?) -> ?",
          "getLabelAttributes": "fn(item: ?) -> [?]",
          "getParent": "fn(item: ?) -> ?",
          "getSchema": "fn() -> ?",
          "getValue": "fn(item: Object, property: String, defaultValue: ?) -> ?",
          "getValues": "fn(item: Object, property: String) -> [?]",
          "hasAttribute": "fn(item: Object, attribute: String) -> bool",
          "isDirty": "fn(item: ?) -> ?",
          "isItem": "fn(item: Object, anyStore: bool) -> ?",
          "isItemLoaded": "fn(item: Object) -> ?",
          "isUpdateable": "fn() -> bool",
          "loadItem": "fn(args: ?) -> ?",
          "matchesQuery": "fn(item: ?, request: ?) -> ?",
          "newItem": "fn(data: Object, parentInfo: ?) -> ?",
          "querySuperSet": "fn(argsSuper: ?, argsSub: ?) -> ?",
          "revert": "fn(kwArgs: ?)",
          "save": "fn(kwArgs: ?) -> ?",
          "setValue": "fn(item: ?, attribute: ?, value: ?)",
          "setValues": "fn(item: ?, attribute: ?, values: ?)",
          "unsetAttribute": "fn(item: ?, attribute: ?)",
          "onDelete": "fn()",
          "onNew": "fn()",
          "onSet": "fn()"
        }
      },
      "JsonRestStore": {
        "!type": "fn(options?: ?)",
        "prototype": {
          "allowNoTrailingSlash": "bool",
          "estimateCountFactor": "number",
          "idAsRef": "bool",
          "idAttribute": "string",
          "labelAttribute": "string",
          "loadLazyValues": "bool",
          "loadReferencedSchema": "bool",
          "referenceIntegrity": "bool",
          "schema": "Object",
          "service": "Object",
          "syncMode": "bool",
          "target": "string",
          "cancelChanging": "fn(object: ?)",
          "changing": "fn(item: ?, _deleting: ?)",
          "close": "fn(request: ?) -> ?",
          "containsValue": "fn(item: Object, attribute: String, value: ?) -> bool",
          "deleteItem": "fn(item: ?)",
          "fetch": "fn(args: ?) -> String",
          "fetchItemByIdentity": "fn(args: ?) -> ?",
          "getAttributes": "fn(item: Object) -> [?]",
          "getConstructor": "fn() -> ?",
          "getFeatures": "fn() -> ?",
          "getIdentity": "fn(item: ?) -> ?",
          "getIdentityAttributes": "fn(item: ?) -> [?]",
          "getLabel": "fn(item: ?) -> ?",
          "getLabelAttributes": "fn(item: ?) -> [?]",
          "getParent": "fn(item: ?) -> ?",
          "getSchema": "fn() -> ?",
          "getStore": "fn(options: ?, Class: ?)",
          "getValue": "fn(item: Object, property: String, defaultValue: ?) -> ?",
          "getValues": "fn(item: Object, property: String) -> [?]",
          "hasAttribute": "fn(item: Object, attribute: String) -> bool",
          "isDirty": "fn(item: ?) -> ?",
          "isItem": "fn(item: Object, anyStore?: bool) -> ?",
          "isItemLoaded": "fn(item: Object) -> ?",
          "loadItem": "fn(args: ?) -> ?",
          "newItem": "fn(data: Object, parentInfo: ?) -> ?",
          "revert": "fn(kwArgs: ?)",
          "save": "fn(kwArgs: ?) -> ?",
          "setValue": "fn(item: ?, attribute: ?, value: ?)",
          "setValues": "fn(item: ?, attribute: ?, values: ?)",
          "unsetAttribute": "fn(item: ?, attribute: ?)",
          "onDelete": "fn()",
          "onNew": "fn()",
          "onSet": "fn()"
        }
      },
      "KeyValueStore": {
        "!type": "fn(keywordParameters: Object)",
        "prototype": {
          "data": "string",
          "url": "string",
          "urlPreventCache": "bool",
          "close": "fn(request: dojo.data.api.Request)",
          "containsValue": "fn(item: ?, attribute: String, value: ?) -> ?",
          "errorHandler": "fn(errorData: Object, requestObject: Object)",
          "fetch": "fn(request: Object)",
          "fetchHandler": "fn(items: [?], requestObject: Object)",
          "fetchItemByIdentity": "fn(keywordArgs: Object)",
          "getAttributes": "fn(item: ?) -> [?]",
          "getFeatures": "fn() -> ?",
          "getIdentity": "fn(item: ?) -> ?",
          "getIdentityAttributes": "fn(item: ?) -> [?]",
          "getLabel": "fn(item: ?) -> ?",
          "getLabelAttributes": "fn(item: ?) -> [?]",
          "getValue": "fn(item: ?, attribute: String, defaultValue: ?) -> ?",
          "getValues": "fn(item: ?, attribute: String) -> [?]",
          "hasAttribute": "fn(item: ?, attribute: String) -> bool",
          "isItem": "fn(something: ?) -> bool",
          "isItemLoaded": "fn(something: ?) -> ?",
          "loadItem": "fn(keywordArgs: Object)"
        }
      },
      "OpenSearchStore": {
        "!type": "fn(args: Object)",
        "prototype": {
          "ATOM_CONTENT_TYPE": "number",
          "ATOM_CONTENT_TYPE_STRING": "string",
          "iframeElement": "Object",
          "itemPath": "string",
          "RSS_CONTENT_TYPE": "number",
          "RSS_CONTENT_TYPE_STRING": "string",
          "url": "string",
          "urlElement": "Object",
          "urlPreventCache": "bool",
          "XML_CONTENT_TYPE": "number",
          "XML_CONTENT_TYPE_STRING": "string",
          "close": "fn(request: ?)",
          "containsValue": "fn(item: ?, attribute: ?, value: ?) -> bool",
          "errorHandler": "fn(errorData: Object, requestObject: Object)",
          "fetch": "fn(request: Object)",
          "fetchHandler": "fn(items: [?], requestObject: Object)",
          "getAttributes": "fn(item: ?) -> [?]",
          "getFeatures": "fn() -> Object",
          "getLabel": "fn(item: ?) -> ?",
          "getLabelAttributes": "fn(item: ?) -> ?",
          "getValue": "fn(item: ?, attribute: ?, defaultValue: ?) -> ?",
          "getValues": "fn(item: ?, attribute: ?) -> ?",
          "hasAttribute": "fn(item: ?, attribute: ?) -> bool",
          "isItem": "fn(item: ?) -> bool",
          "isItemLoaded": "fn(item: ?) -> ?",
          "loadItem": "fn(keywordArgs: ?)",
          "process": "fn(data: ?) -> ?",
          "processItem": "fn(item: ?, attribute: ?) -> ?"
        }
      },
      "OpmlStore": {
        "!type": "fn(keywordParameters: Object)",
        "prototype": {
          "label": "string",
          "url": "string",
          "urlPreventCache": "bool",
          "close": "fn(request: dojo.data.api.Request)",
          "containsValue": "fn(item: ?, attribute: Attr, value: ?) -> ?",
          "errorHandler": "fn(errorData: Object, requestObject: Object)",
          "fetch": "fn(request: Object)",
          "fetchHandler": "fn(items: [?], requestObject: Object)",
          "fetchItemByIdentity": "fn(keywordArgs: Object)",
          "getAttributes": "fn(item: ?) -> [?]",
          "getFeatures": "fn() -> Object",
          "getIdentity": "fn(item: ?) -> ?",
          "getIdentityAttributes": "fn(item: ?) -> ?",
          "getLabel": "fn(item: ?) -> ?",
          "getLabelAttributes": "fn(item: ?) -> [?]",
          "getValue": "fn(item: ?, attribute: Attr, defaultValue: ?) -> ?",
          "getValues": "fn(item: ?, attribute: Attr) -> [?]",
          "hasAttribute": "fn(item: ?, attribute: Attr) -> bool",
          "isItem": "fn(something: ?) -> ?",
          "isItemLoaded": "fn(something: ?) -> ?",
          "loadItem": "fn(item: ?)"
        }
      },
      "PersevereStore": {
        "!type": "fn()",
        "prototype": {
          "jsonQueryPagination": "bool",
          "useFullIdInQueries": "bool",
          "addProxy": "fn()",
          "getStores": "fn(path: String, sync: bool) -> ?"
        }
      },
      "PicasaStore": {
        "!type": "fn(args: Object)",
        "prototype": {
          "label": "string",
          "maxResults": "number",
          "urlPreventCache": "bool",
          "close": "fn(request: ?)",
          "containsValue": "fn(item: ?, attribute: ?, value: ?) -> bool",
          "errorHandler": "fn(errorData: Object, requestObject: Object)",
          "fetch": "fn(request: Object)",
          "fetchHandler": "fn(items: [?], requestObject: Object)",
          "getAttributes": "fn(item: ?) -> [?]",
          "getFeatures": "fn() -> Object",
          "getLabel": "fn(item: ?) -> ?",
          "getLabelAttributes": "fn(item: ?) -> [?]",
          "getValue": "fn(item: ?, attribute: ?, defaultValue: ?) -> ?",
          "getValues": "fn(item: ?, attribute: ?) -> ?",
          "hasAttribute": "fn(item: ?, attribute: ?) -> bool",
          "isItem": "fn(item: ?) -> bool",
          "isItemLoaded": "fn(item: ?) -> ?",
          "loadItem": "fn(keywordArgs: ?)"
        }
      },
      "QueryReadStore": {
        "!type": "fn(params: Object)",
        "prototype": {
          "doClientPaging": "bool",
          "doClientSorting": "bool",
          "lastRequestHash": "Object",
          "requestMethod": "string",
          "url": "string",
          "close": "fn(request: dojo.data.api.Request)",
          "containsValue": "fn(item: ?, attribute: String, value: ?) -> bool",
          "fetch": "fn(request: Object) -> String",
          "fetchItemByIdentity": "fn(keywordArgs: Object)",
          "getAttributes": "fn(item: ?) -> [?]",
          "getFeatures": "fn() -> ?",
          "getIdentity": "fn(item: ?) -> ?",
          "getIdentityAttributes": "fn(item: ?) -> [?]",
          "getLabel": "fn(item: ?) -> ?",
          "getLabelAttributes": "fn(item: ?) -> ?",
          "getValue": "fn(item: ?, attribute: String, defaultValue: ?) -> ?",
          "getValues": "fn(item: ?, attribute: String) -> [?]",
          "hasAttribute": "fn(item: ?, attribute: String) -> ?",
          "isItem": "fn(something: ?) -> bool",
          "isItemLoaded": "fn(something: ?) -> ?",
          "loadItem": "fn(args: Object)"
        }
      },
      "RailsStore": {
        "!type": "fn()",
        "prototype": {
          "fetch": "fn(args: ?) -> ?",
          "preamble": "fn(options: ?)"
        }
      },
      "S3Store": {
        "!type": "fn(options?: ?)",
        "prototype": {
          "allowNoTrailingSlash": "bool",
          "estimateCountFactor": "number",
          "idAsRef": "bool",
          "idAttribute": "string",
          "labelAttribute": "string",
          "loadLazyValues": "bool",
          "loadReferencedSchema": "bool",
          "referenceIntegrity": "bool",
          "schema": "Object",
          "service": "Object",
          "syncMode": "bool",
          "target": "string",
          "cancelChanging": "fn(object: ?)",
          "changing": "fn(item: ?, _deleting: ?)",
          "close": "fn(request: ?) -> ?",
          "containsValue": "fn(item: Object, attribute: String, value: ?) -> bool",
          "deleteItem": "fn(item: ?)",
          "fetch": "fn(args: ?) -> String",
          "fetchItemByIdentity": "fn(args: ?) -> ?",
          "getAttributes": "fn(item: Object) -> [?]",
          "getConstructor": "fn() -> ?",
          "getFeatures": "fn() -> ?",
          "getIdentity": "fn(item: ?) -> ?",
          "getIdentityAttributes": "fn(item: ?) -> [?]",
          "getLabel": "fn(item: ?) -> ?",
          "getLabelAttributes": "fn(item: ?) -> [?]",
          "getParent": "fn(item: ?) -> ?",
          "getSchema": "fn() -> ?",
          "getValue": "fn(item: Object, property: String, defaultValue: ?) -> ?",
          "getValues": "fn(item: Object, property: String) -> [?]",
          "hasAttribute": "fn(item: Object, attribute: String) -> bool",
          "isDirty": "fn(item: ?) -> ?",
          "isItem": "fn(item: Object, anyStore: bool) -> ?",
          "isItemLoaded": "fn(item: Object) -> ?",
          "loadItem": "fn(args: ?) -> ?",
          "newItem": "fn(data: Object, parentInfo: ?) -> ?",
          "revert": "fn(kwArgs: ?)",
          "save": "fn(kwArgs: ?) -> ?",
          "setValue": "fn(item: ?, attribute: ?, value: ?)",
          "setValues": "fn(item: ?, attribute: ?, values: ?)",
          "unsetAttribute": "fn(item: ?, attribute: ?)",
          "onDelete": "fn()",
          "onNew": "fn()",
          "onSet": "fn()"
        }
      },
      "ServiceStore": {
        "!type": "fn(options?: ?)",
        "prototype": {
          "estimateCountFactor": "number",
          "idAttribute": "string",
          "labelAttribute": "string",
          "loadLazyValues": "bool",
          "schema": "Object",
          "service": "Object",
          "syncMode": "bool",
          "close": "fn(request: ?) -> ?",
          "containsValue": "fn(item: Object, attribute: String, value: ?) -> bool",
          "fetch": "fn(args: ?) -> String",
          "fetchItemByIdentity": "fn(args: ?) -> ?",
          "getAttributes": "fn(item: Object) -> [?]",
          "getFeatures": "fn() -> Object",
          "getIdentity": "fn(item: ?) -> ?",
          "getIdentityAttributes": "fn(item: ?) -> [?]",
          "getLabel": "fn(item: ?) -> ?",
          "getLabelAttributes": "fn(item: ?) -> [?]",
          "getSchema": "fn() -> ?",
          "getValue": "fn(item: Object, property: String, defaultValue: ?) -> ?",
          "getValues": "fn(item: Object, property: String) -> [?]",
          "hasAttribute": "fn(item: Object, attribute: String) -> bool",
          "isItem": "fn(item: Object) -> bool",
          "isItemLoaded": "fn(item: Object) -> ?",
          "loadItem": "fn(args: ?) -> ?"
        }
      },
      "SnapLogicStore": {
        "!type": "fn(args: Object)",
        "prototype": {
          "Parts": "Object",
          "url": "string",
          "close": "fn(request: ?)",
          "containsValue": "fn(item: ?, attribute: ?, value: ?) -> bool",
          "fetch": "fn(request: Object) -> Object",
          "getAttributes": "fn(item: ?) -> ?",
          "getFeatures": "fn() -> Object",
          "getLabel": "fn(item: ?) -> ?",
          "getLabelAttributes": "fn(item: ?) -> ?",
          "getValue": "fn(item: ?, attribute: ?, defaultValue: ?) -> ?",
          "getValues": "fn(item: ?, attribute: ?) -> [?]",
          "hasAttribute": "fn(item: ?, attribute: ?) -> bool",
          "isItem": "fn(item: ?) -> bool",
          "isItemLoaded": "fn(item: ?) -> ?",
          "loadItem": "fn(keywordArgs: ?)"
        }
      },
      "WikipediaStore": {
        "!type": "fn(options: ?)",
        "prototype": {
          "estimateCountFactor": "number",
          "idAttribute": "string",
          "labelAttribute": "string",
          "loadLazyValues": "bool",
          "schema": "Object",
          "service": "Object",
          "syncMode": "bool",
          "close": "fn(request: ?) -> ?",
          "containsValue": "fn(item: Object, attribute: String, value: ?) -> bool",
          "fetch": "fn(request: Object) -> ?",
          "fetchItemByIdentity": "fn(args: ?) -> ?",
          "getAttributes": "fn(item: Object) -> [?]",
          "getFeatures": "fn() -> Object",
          "getIdentity": "fn(item: ?) -> ?",
          "getIdentityAttributes": "fn(item: ?) -> [?]",
          "getLabel": "fn(item: ?) -> ?",
          "getLabelAttributes": "fn(item: ?) -> [?]",
          "getSchema": "fn() -> ?",
          "getValue": "fn(item: Object, property: String, defaultValue: ?) -> ?",
          "getValues": "fn(item: Object, property: String) -> [?]",
          "hasAttribute": "fn(item: Object, attribute: String) -> bool",
          "isItem": "fn(item: Object) -> bool",
          "isItemLoaded": "fn(item: Object) -> ?",
          "loadItem": "fn(args: ?) -> ?"
        }
      },
      "XmlItem": {
        "!type": "fn(element: ?, store: ?, query: ?)",
        "prototype": {}
      },
      "XmlStore": {
        "!type": "fn(args: Object)",
        "prototype": {
          "attributeMap": "Object",
          "keyAttribute": "string",
          "label": "string",
          "rootItem": "string",
          "sendQuery": "bool",
          "url": "string",
          "urlPreventCache": "bool",
          "close": "fn(request: dojo.data.api.Request)",
          "containsValue": "fn(item: dojo.data.api.Item, attribute: Attr, value: ?) -> ?",
          "deleteItem": "fn(item: dojo.data.api.Item) -> ?",
          "errorHandler": "fn(errorData: Object, requestObject: Object)",
          "fetch": "fn(request: Object)",
          "fetchHandler": "fn(items: [?], requestObject: Object)",
          "fetchItemByIdentity": "fn(keywordArgs: Object)",
          "getAttributes": "fn(item: dojo.data.api.Item) -> ?",
          "getFeatures": "fn() -> ?",
          "getIdentity": "fn(item: dojo.data.api.Item) -> ?",
          "getIdentityAttributes": "fn(item: dojo.data.api.Item) -> ?",
          "getLabel": "fn(item: dojo.data.api.Item) -> ?",
          "getLabelAttributes": "fn(item: dojo.data.api.Item) -> ?",
          "getValue": "fn(item: dojo.data.api.Item, attribute: Attr, defaultValue: ?) -> ?",
          "getValues": "fn(item: dojo.data.api.Item, attribute: Attr) -> ?",
          "hasAttribute": "fn(item: dojo.data.api.Item, attribute: Attr) -> ?",
          "isDirty": "fn(item: ?) -> ?",
          "isItem": "fn(something: ?) -> ?",
          "isItemLoaded": "fn(something: ?) -> ?",
          "loadItem": "fn(keywordArgs: Object)",
          "newItem": "fn(keywordArgs: Object, parentInfo: ?) -> ?",
          "revert": "fn() -> ?",
          "save": "fn(keywordArgs: Object)",
          "setValue": "fn(item: dojo.data.api.Item, attribute: Attr, value: ?) -> ?",
          "setValues": "fn(item: dojo.data.api.Item, attribute: Attr, values: [?]) -> ?",
          "unsetAttribute": "fn(item: dojo.data.api.Item, attribute: Attr) -> ?"
        }
      },
      "util": {
        "JsonQuery": {
          "!type": "fn()",
          "prototype": {
            "jsonQueryPagination": "bool",
            "useFullIdInQueries": "bool",
            "clientSideFetch": "fn(request: Object, baseResults: [?]) -> ?",
            "fetch": "fn(args: ?) -> ?",
            "isUpdateable": "fn() -> bool",
            "matchesQuery": "fn(item: ?, request: ?) -> ?",
            "querySuperSet": "fn(argsSuper: ?, argsSub: ?) -> ?"
          }
        }
      },
      "css": {
        "rules": {
          "forEach": "fn(fn: ?, ctx: ?, context: ?)"
        },
        "determineContext": "fn(initialStylesheets: ?) -> [?]",
        "findStyleSheet": "fn(sheet: ?) -> [?]",
        "findStyleSheets": "fn(sheets: ?) -> [?]"
      },
      "dom": {
        "createDocument": "fn(str: String, mimetype: String) -> ?",
        "innerXML": "fn(node: HTMLElement)",
        "removeChildren": "fn(node: HTMLElement)",
        "replaceChildren": "fn(node: HTMLElement, newChildren: HTMLElement)",
        "textContent": "fn(node: HTMLElement, text: String)"
      },
      "GoogleSearchStore": {
        "BlogSearch": {
          "!type": "fn(args: Object)",
          "prototype": {
            "label": "string",
            "urlPreventCache": "bool",
            "close": "fn(request: ?)",
            "containsValue": "fn(item: ?, attribute: ?, value: ?) -> bool",
            "fetch": "fn(request: ?)",
            "getAttributes": "fn(item: ?) -> ?",
            "getFeatures": "fn() -> Object",
            "getLabel": "fn(item: ?) -> ?",
            "getLabelAttributes": "fn(item: ?) -> [?]",
            "getValue": "fn(item: ?, attribute: ?, defaultValue: ?) -> ?",
            "getValues": "fn(item: ?, attribute: ?) -> ?",
            "hasAttribute": "fn(item: ?, attribute: ?) -> bool",
            "isItem": "fn(item: ?) -> bool",
            "isItemLoaded": "fn(item: ?) -> ?",
            "loadItem": "fn(keywordArgs: ?)"
          }
        },
        "BookSearch": {
          "!type": "fn(args: Object)",
          "prototype": {
            "label": "string",
            "urlPreventCache": "bool",
            "close": "fn(request: ?)",
            "containsValue": "fn(item: ?, attribute: ?, value: ?) -> bool",
            "fetch": "fn(request: ?)",
            "getAttributes": "fn(item: ?) -> ?",
            "getFeatures": "fn() -> Object",
            "getLabel": "fn(item: ?) -> ?",
            "getLabelAttributes": "fn(item: ?) -> [?]",
            "getValue": "fn(item: ?, attribute: ?, defaultValue: ?) -> ?",
            "getValues": "fn(item: ?, attribute: ?) -> ?",
            "hasAttribute": "fn(item: ?, attribute: ?) -> bool",
            "isItem": "fn(item: ?) -> bool",
            "isItemLoaded": "fn(item: ?) -> ?",
            "loadItem": "fn(keywordArgs: ?)"
          }
        },
        "ImageSearch": {
          "!type": "fn(args: Object)",
          "prototype": {
            "label": "string",
            "urlPreventCache": "bool",
            "close": "fn(request: ?)",
            "containsValue": "fn(item: ?, attribute: ?, value: ?) -> bool",
            "fetch": "fn(request: ?)",
            "getAttributes": "fn(item: ?) -> ?",
            "getFeatures": "fn() -> Object",
            "getLabel": "fn(item: ?) -> ?",
            "getLabelAttributes": "fn(item: ?) -> [?]",
            "getValue": "fn(item: ?, attribute: ?, defaultValue: ?) -> ?",
            "getValues": "fn(item: ?, attribute: ?) -> ?",
            "hasAttribute": "fn(item: ?, attribute: ?) -> bool",
            "isItem": "fn(item: ?) -> bool",
            "isItemLoaded": "fn(item: ?) -> ?",
            "loadItem": "fn(keywordArgs: ?)"
          }
        },
        "LocalSearch": {
          "!type": "fn(args: Object)",
          "prototype": {
            "label": "string",
            "urlPreventCache": "bool",
            "close": "fn(request: ?)",
            "containsValue": "fn(item: ?, attribute: ?, value: ?) -> bool",
            "fetch": "fn(request: ?)",
            "getAttributes": "fn(item: ?) -> ?",
            "getFeatures": "fn() -> Object",
            "getLabel": "fn(item: ?) -> ?",
            "getLabelAttributes": "fn(item: ?) -> [?]",
            "getValue": "fn(item: ?, attribute: ?, defaultValue: ?) -> ?",
            "getValues": "fn(item: ?, attribute: ?) -> ?",
            "hasAttribute": "fn(item: ?, attribute: ?) -> bool",
            "isItem": "fn(item: ?) -> bool",
            "isItemLoaded": "fn(item: ?) -> ?",
            "loadItem": "fn(keywordArgs: ?)"
          }
        },
        "NewsSearch": {
          "!type": "fn(args: Object)",
          "prototype": {
            "label": "string",
            "urlPreventCache": "bool",
            "close": "fn(request: ?)",
            "containsValue": "fn(item: ?, attribute: ?, value: ?) -> bool",
            "fetch": "fn(request: ?)",
            "getAttributes": "fn(item: ?) -> ?",
            "getFeatures": "fn() -> Object",
            "getLabel": "fn(item: ?) -> ?",
            "getLabelAttributes": "fn(item: ?) -> [?]",
            "getValue": "fn(item: ?, attribute: ?, defaultValue: ?) -> ?",
            "getValues": "fn(item: ?, attribute: ?) -> ?",
            "hasAttribute": "fn(item: ?, attribute: ?) -> bool",
            "isItem": "fn(item: ?) -> bool",
            "isItemLoaded": "fn(item: ?) -> ?",
            "loadItem": "fn(keywordArgs: ?)"
          }
        },
        "Search": {
          "!type": "fn(args: Object)",
          "prototype": {
            "label": "string",
            "urlPreventCache": "bool",
            "close": "fn(request: ?)",
            "containsValue": "fn(item: ?, attribute: ?, value: ?) -> bool",
            "fetch": "fn(request: ?)",
            "getAttributes": "fn(item: ?) -> ?",
            "getFeatures": "fn() -> Object",
            "getLabel": "fn(item: ?) -> ?",
            "getLabelAttributes": "fn(item: ?) -> [?]",
            "getValue": "fn(item: ?, attribute: ?, defaultValue: ?) -> ?",
            "getValues": "fn(item: ?, attribute: ?) -> ?",
            "hasAttribute": "fn(item: ?, attribute: ?) -> bool",
            "isItem": "fn(item: ?) -> bool",
            "isItemLoaded": "fn(item: ?) -> ?",
            "loadItem": "fn(keywordArgs: ?)"
          }
        },
        "VideoSearch": {
          "!type": "fn(args: Object)",
          "prototype": {
            "label": "string",
            "urlPreventCache": "bool",
            "close": "fn(request: ?)",
            "containsValue": "fn(item: ?, attribute: ?, value: ?) -> bool",
            "fetch": "fn(request: ?)",
            "getAttributes": "fn(item: ?) -> ?",
            "getFeatures": "fn() -> Object",
            "getLabel": "fn(item: ?) -> ?",
            "getLabelAttributes": "fn(item: ?) -> [?]",
            "getValue": "fn(item: ?, attribute: ?, defaultValue: ?) -> ?",
            "getValues": "fn(item: ?, attribute: ?) -> ?",
            "hasAttribute": "fn(item: ?, attribute: ?) -> bool",
            "isItem": "fn(item: ?) -> bool",
            "isItemLoaded": "fn(item: ?) -> ?",
            "loadItem": "fn(keywordArgs: ?)"
          }
        },
        "WebSearch": {
          "!type": "fn(args: Object)",
          "prototype": {
            "label": "string",
            "urlPreventCache": "bool",
            "close": "fn(request: ?)",
            "containsValue": "fn(item: ?, attribute: ?, value: ?) -> bool",
            "fetch": "fn(request: ?)",
            "getAttributes": "fn(item: ?) -> ?",
            "getFeatures": "fn() -> Object",
            "getLabel": "fn(item: ?) -> ?",
            "getLabelAttributes": "fn(item: ?) -> [?]",
            "getValue": "fn(item: ?, attribute: ?, defaultValue: ?) -> ?",
            "getValues": "fn(item: ?, attribute: ?) -> ?",
            "hasAttribute": "fn(item: ?, attribute: ?) -> bool",
            "isItem": "fn(item: ?) -> bool",
            "isItemLoaded": "fn(item: ?) -> ?",
            "loadItem": "fn(keywordArgs: ?)"
          }
        }
      }
    }
  },
  "dojox/data/restListener": "exp",
  "dojox/data/css": "exp",
  "dojox/data/css.rules": "exp",
  "dojox/data/dom": "exp",
  "dojox/data/GoogleSearchStore": "exp",
  "dojox/data/GoogleSearchStore.ImageSearch": "exp",
  "dojox/data/GoogleSearchStore.BookSearch": "exp",
  "dojox/data/GoogleSearchStore.LocalSearch": "exp",
  "dojox/data/GoogleSearchStore.BlogSearch": "exp",
  "dojox/data/GoogleSearchStore.VideoSearch": "exp",
  "dojox/data/GoogleSearchStore.Search": "exp",
  "dojox/data/GoogleSearchStore.WebSearch": "exp",
  "dojox/data/GoogleSearchStore.NewsSearch": "exp",
  "dojox/data/AndOrReadStore": "exp",
  "dojox/data/AppStore": "exp",
  "dojox/data/AndOrWriteStore": "exp",
  "dojox/data/AtomReadStore": "exp",
  "dojox/data/ClientFilter": "exp",
  "dojox/data/CouchDBRestStore": "exp",
  "dojox/data/CdfStore": "exp",
  "dojox/data/CssRuleStore": "exp",
  "dojox/data/CssClassStore": "exp",
  "dojox/data/CsvStore": "exp",
  "dojox/data/FileStore": "exp",
  "dojox/data/FlickrRestStore": "exp",
  "dojox/data/GoogleFeedStore": "exp",
  "dojox/data/FlickrStore": "exp",
  "dojox/data/HtmlStore": "exp",
  "dojox/data/HtmlTableStore": "exp",
  "dojox/data/KeyValueStore": "exp",
  "dojox/data/JsonRestStore": "exp",
  "dojox/data/JsonQueryRestStore": "exp",
  "dojox/data/PersevereStore": "exp",
  "dojox/data/OpenSearchStore": "exp",
  "dojox/data/PicasaStore": "exp",
  "dojox/data/OpmlStore": "exp",
  "dojox/data/RailsStore": "exp",
  "dojox/data/QueryReadStore": "exp",
  "dojox/data/S3Store": "exp",
  "dojox/data/SnapLogicStore": "exp",
  "dojox/data/XmlItem": "exp",
  "dojox/data/ServiceStore": "exp",
  "dojox/data/WikipediaStore": "exp",
  "dojox/data/XmlStore": "exp",
  "dojox/data/util/JsonQuery": "exp",
  "!name": "dojox.data"
}
