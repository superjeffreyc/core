{
  "KnockoutObservableArrayFunctions": {
    "each": "fn(iterator: ?, context?: ?) -> [TResult]",
    "forEach": "fn(iterator: ?, context?: ?) -> [TResult]",
    "map": "fn(iterator: ?, context?: ?) -> [TResult]",
    "collect": "fn(iterator: ?, context?: ?) -> [TResult]",
    "reduce": "fn(iterator: ?, memo: TResult, context?: ?) -> TResult",
    "inject": "fn(iterator: ?, memo: TResult, context?: ?) -> TResult",
    "foldl": "fn(iterator: ?, memo: TResult, context?: ?) -> TResult",
    "reduceRight": "fn(iterator: ?, memo: TResult, context?: ?) -> TResult",
    "foldr": "fn(iterator: ?, memo: TResult, context?: ?) -> TResult",
    "find": "fn(iterator: ?, context?: ?) -> T",
    "detect": "fn(iterator: ?, context?: ?) -> T",
    "filter": "fn(iterator: ?, context?: ?) -> [T]",
    "filter_": "fn(iterator: ?, context?: ?) -> [T]",
    "select": "fn(iterator: ?, context?: ?) -> [T]",
    "select_": "fn(iterator: ?, context?: ?) -> [T]",
    "where": "fn(properties: U) -> [T]",
    "reject": "fn(iterator: ?, context?: ?) -> [T]",
    "reject_": "fn(iterator: ?, context?: ?) -> [T]",
    "all": "fn(iterator: ?, context?: ?) -> bool",
    "every": "fn(iterator: ?, context?: ?) -> bool",
    "any": "fn(iterator?: ?, context?: ?) -> bool",
    "some": "fn(iterator?: ?, context?: ?) -> bool",
    "contains": "fn(value: T) -> bool",
    "include": "fn(value: T) -> bool",
    "invoke": "fn(methodName: string, arguments: [?]) -> ?",
    "invoke_": "fn(methodName: string, arguments: [?]) -> ?",
    "pluck": "fn(propertyName: string) -> [T]",
    "max": "fn(iterator: ?, context?: ?) -> ?",
    "min": "fn(iterator: ?, context?: ?) -> ?",
    "sortBy": "fn(iterator: ?, context?: ?) -> [T]",
    "sortBy_": "fn(iterator: ?, context?: ?) -> [T]",
    "groupBy": "fn(iterator: ?) -> ?",
    "groupBy_": "fn(iterator: ?) -> ?",
    "countBy": "fn(iterator: ?) -> ?",
    "shuffle": "fn() -> [T]",
    "shuffle_": "fn() -> [T]",
    "size": "fn() -> number",
    "first": "fn() -> T",
    "head": "fn() -> T",
    "take": "fn() -> T",
    "initial": "fn(n?: number) -> [T]",
    "last": "fn() -> T",
    "rest": "fn(n?: number) -> [T]",
    "rest_": "fn(n?: number) -> [T]",
    "tail": "fn(n?: number) -> [T]",
    "tail_": "fn(n?: number) -> [T]",
    "drop": "fn(n?: number) -> [T]",
    "drop_": "fn(n?: number) -> [T]",
    "compact": "fn() -> [T]",
    "compact_": "fn() -> [T]",
    "flatten": "fn(shallow?: bool) -> [?]",
    "flatten_": "fn(shallow?: bool) -> [?]",
    "without": "fn(values: [T]) -> [T]",
    "without_": "fn(values: [T]) -> [T]",
    "union": "fn(arrays: [[T]]) -> [T]",
    "union_": "fn(arrays: [[T]]) -> [T]",
    "intersection": "fn(arrays: [[T]]) -> [T]",
    "intersection_": "fn(arrays: [[T]]) -> [T]",
    "difference": "fn(others: [[T]]) -> [T]",
    "difference_": "fn(others: [[T]]) -> [T]",
    "uniq": "fn(isSorted?: bool, iterator?: ?) -> [T]",
    "uniq_": "fn(isSorted?: bool, iterator?: ?) -> [T]",
    "unique": "fn(isSorted?: bool, iterator?: ?) -> [T]",
    "unique_": "fn(isSorted?: bool, iterator?: ?) -> [T]",
    "zip": "fn(arrays: [?]) -> [?]",
    "zip_": "fn(arrays: [?]) -> [?]",
    "object": "fn() -> ?",
    "indexOf": "fn(value: T, isSorted?: bool) -> number",
    "lastIndexOf": "fn(value: T, fromIndex?: number) -> number",
    "sortedIndex": "fn(value: T, iterator?: ?) -> number",
    "range": "fn(stop: number) -> [?]",
    "chain": "fn(object: ?) -> ?"
  },
  "!name": "underscore-ko"
}
