{
  "DropzoneResizeInfo": {
    "srcX": "number",
    "srcY": "number",
    "trgX": "number",
    "trgY": "number",
    "srcWidth": "number",
    "srcHeight": "number",
    "trgWidth": "number",
    "trgHeight": "number",
    "optWidth": "number",
    "optHeight": "number"
  },
  "DropzoneFile": {
    "previewElement": "HTMLElement",
    "previewTemplate": "HTMLElement",
    "previewsContainer": "HTMLElement",
    "status": "string",
    "accepted": "bool"
  },
  "DropzoneOptions": {
    "url": "string",
    "method": "string",
    "withCredentials": "bool",
    "parallelUploads": "number",
    "uploadMultiple": "bool",
    "maxFilesize": "number",
    "paramName": "string",
    "createImageThumbnails": "bool",
    "maxThumbnailFilesize": "number",
    "thumbnailWidth": "number",
    "thumbnailHeight": "number",
    "filesizeBase": "number",
    "maxFiles": "number",
    "params": {},
    "headers": {},
    "clickable": "bool",
    "string": "?",
    "HTMLElement": "?",
    "ignoreHiddenFiles": "bool",
    "acceptedFiles": "string",
    "autoProcessQueue": "bool",
    "autoQueue": "bool",
    "addRemoveLinks": "bool",
    "previewsContainer": "bool",
    "capture": "string",
    "dictDefaultMessage": "string",
    "dictFallbackMessage": "string",
    "dictFallbackText": "string",
    "dictFileTooBig": "string",
    "dictInvalidFileType": "string",
    "dictResponseError": "string",
    "dictCancelUpload": "string",
    "dictCancelUploadConfirmation": "string",
    "dictRemoveFile": "string",
    "dictRemoveFileConfirmation": "string",
    "dictMaxFilesExceeded": "string",
    "accept": "fn(file: DropzoneFile, done: fn(error?: string, Error: ?))",
    "init": "fn()",
    "forceFallback": "bool",
    "fallback": "fn()",
    "resize": "fn(file: DropzoneFile) -> DropzoneResizeInfo",
    "drop": "fn(e: DragEvent)",
    "dragstart": "fn(e: DragEvent)",
    "dragend": "fn(e: DragEvent)",
    "dragenter": "fn(e: DragEvent)",
    "dragover": "fn(e: DragEvent)",
    "dragleave": "fn(e: DragEvent)",
    "paste": "fn(e: DragEvent)",
    "reset": "fn()",
    "addedfile": "fn(file: DropzoneFile)",
    "addedfiles": "fn(files: [DropzoneFile])",
    "removedfile": "fn(file: DropzoneFile)",
    "thumbnail": "fn(file: DropzoneFile, dataUrl: string)",
    "error": "fn(file: DropzoneFile, message: string, Error: ?, xhr: XMLHttpRequest)",
    "errormultiple": "fn(files: [DropzoneFile], message: string, Error: ?, xhr: XMLHttpRequest)",
    "processing": "fn(file: DropzoneFile)",
    "processingmultiple": "fn(files: [DropzoneFile])",
    "uploadprogress": "fn(file: DropzoneFile, progress: number, bytesSent: number)",
    "totaluploadprogress": "fn(totalProgress: number, totalBytes: number, totalBytesSent: number)",
    "sending": "fn(file: DropzoneFile, xhr: XMLHttpRequest, formData: ?)",
    "sendingmultiple": "fn(files: [DropzoneFile], xhr: XMLHttpRequest, formData: ?)",
    "success": "fn(file: DropzoneFile, responseText: string)",
    "successmultiple": "fn(files: [DropzoneFile], responseText: string)",
    "canceled": "fn(file: DropzoneFile)",
    "canceledmultiple": "fn(file: [DropzoneFile])",
    "complete": "fn(file: DropzoneFile)",
    "completemultiple": "fn(file: [DropzoneFile])",
    "maxfilesexceeded": "fn(file: DropzoneFile)",
    "maxfilesreached": "fn(files: [DropzoneFile])",
    "queuecomplete": "fn()",
    "previewTemplate": "string"
  },
  "Dropzone": {
    "!type": "fn(container: string, HTMLElement: ?, options?: DropzoneOptions)",
    "autoDiscover": "bool",
    "options": "?",
    "confirm": "fn(question: string, accepted: fn(), rejected?: fn())",
    "ADDED": "string",
    "QUEUED": "string",
    "ACCEPTED": "string",
    "UPLOADING": "string",
    "PROCESSING": "string",
    "CANCELED": "string",
    "ERROR": "string",
    "SUCCESS": "string",
    "prototype": {
      "files": "[DropzoneFile]",
      "enable": "fn()",
      "disable": "fn()",
      "destroy": "fn() -> Dropzone",
      "addFile": "fn(file: DropzoneFile)",
      "removeFile": "fn(file: DropzoneFile)",
      "removeAllFiles": "fn(cancelIfNecessary?: bool)",
      "processQueue": "fn()",
      "cancelUpload": "fn(file: DropzoneFile)",
      "processFiles": "fn(files: [DropzoneFile])",
      "processFile": "fn(file: DropzoneFile)",
      "uploadFile": "fn(file: DropzoneFile)",
      "getAcceptedFiles": "fn() -> [DropzoneFile]",
      "getRejectedFiles": "fn() -> [DropzoneFile]",
      "getQueuedFiles": "fn() -> [DropzoneFile]",
      "getUploadingFiles": "fn() -> [DropzoneFile]",
      "accept": "fn(file: DropzoneFile, done: fn(error?: string, Error: ?))",
      "getActiveFiles": "fn() -> [DropzoneFile]",
      "getFilesWithStatus": "fn(status: string) -> [DropzoneFile]",
      "enqueueFile": "fn(file: DropzoneFile)",
      "enqueueFiles": "fn(file: [DropzoneFile])",
      "createThumbnail": "fn(file: DropzoneFile, callback?: fn(args: [?])) -> ?",
      "createThumbnailFromUrl": "fn(file: DropzoneFile, url: string, callback?: fn(args: [?])) -> ?",
      "on": "fn(eventName: string, callback: fn(args: [?]))",
      "off": "fn(eventName: string)",
      "emit": "fn(eventName: string, args: [?])"
    }
  },
  "JQuery": {
    "dropzone": "fn(options: DropzoneOptions) -> Dropzone"
  },
  "dropzone": "Dropzone",
  "!name": "dropzone.d.ts"
}
