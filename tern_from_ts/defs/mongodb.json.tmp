{
  "mongodb": {
    "MongoClient": {
      "!type": "fn(serverConfig: ?, options: ?)",
      "connect": "fn(uri: string, options: ?, callback: fn(err: Error, db: Db))",
      "prototype": {}
    },
    "Server": {
      "!type": "fn(host: string, port: number, opts?: ServerOptions)",
      "prototype": {
        "connect": "fn() -> ?"
      }
    },
    "Db": {
      "!type": "fn(databaseName: string, serverConfig: Server, dbOptions?: DbCreateOptions)",
      "prototype": {
        "db": "fn(dbName: string) -> Db",
        "open": "fn(callback: fn(err: Error, db: Db))",
        "close": "fn(forceClose?: bool, callback?: fn(err: Error, result: ?))",
        "admin": "fn(callback: fn(err: Error, result: ?)) -> ?",
        "collectionsInfo": "fn(collectionName: string, callback?: fn(err: Error, result: ?))",
        "collectionNames": "fn(collectionName: string, options: ?, callback?: fn(err: Error, result: ?))",
        "collection": "fn(collectionName: string) -> Collection",
        "collections": "fn(callback: fn(err: Error, collections: [Collection]))",
        "eval": "fn(code: ?, parameters: [?], options?: ?, callback?: fn(err: Error, result: ?))",
        "logout": "fn(options: ?, callback?: fn(err: Error, result: ?))",
        "authenticate": "fn(userName: string, password: string, callback?: fn(err: Error, result: ?))",
        "addUser": "fn(username: string, password: string, callback?: fn(err: Error, result: ?))",
        "removeUser": "fn(username: string, callback?: fn(err: Error, result: ?))",
        "createCollection": "fn(collectionName: string, callback?: fn(err: Error, result: Collection))",
        "command": "fn(selector: Object, callback?: fn(err: Error, result: ?))",
        "dropCollection": "fn(collectionName: string, callback?: fn(err: Error, result: ?))",
        "renameCollection": "fn(fromCollection: string, toCollection: string, callback?: fn(err: Error, result: ?))",
        "lastError": "fn(options: Object, connectionOptions: ?, callback: fn(err: Error, result: ?))",
        "previousError": "fn(options: Object, callback: fn(err: Error, result: ?))",
        "executeDbCommand": "fn(command_hash: ?, callback?: fn(err: Error, result: ?))",
        "executeDbAdminCommand": "fn(command_hash: ?, callback?: fn(err: Error, result: ?))",
        "resetErrorHistory": "fn(callback?: fn(err: Error, result: ?))",
        "createIndex": "fn(collectionName: ?, fieldOrSpec: ?, options: IndexOptions, callback: Function)",
        "ensureIndex": "fn(collectionName: ?, fieldOrSpec: ?, options: IndexOptions, callback: Function)",
        "cursorInfo": "fn(options: ?, callback: Function)",
        "dropIndex": "fn(collectionName: string, indexName: string, callback: Function)",
        "reIndex": "fn(collectionName: string, callback: Function)",
        "indexInformation": "fn(collectionName: string, options: ?, callback: Function)",
        "dropDatabase": "fn(callback: fn(err: Error, result: ?))",
        "stats": "fn(options: ?, callback: Function)",
        "_registerHandler": "fn(db_command: ?, raw: ?, connection: ?, exhaust: ?, callback: Function)",
        "_reRegisterHandler": "fn(newId: ?, object: ?, callback: Function)",
        "_callHandler": "fn(id: ?, document: ?, err: ?) -> ?",
        "_hasHandler": "fn(id: ?) -> ?",
        "_removeHandler": "fn(id: ?) -> ?",
        "_findHandler": "fn(id: ?) -> ret",
        "__executeQueryCommand": "fn(self: ?, db_command: ?, options: ?, callback: ?)",
        "DEFAULT_URL": "string",
        "connect": "fn(url: string, options: ?, callback: fn(err: Error, result: ?))",
        "addListener": "fn(event: string, handler: fn(param: ?)) -> ?"
      }
    },
    "ObjectID": {
      "!type": "fn(s?: string)",
      "createFromTime": "fn(time: number) -> ObjectID",
      "createFromHexString": "fn(hexString: string) -> ObjectID",
      "isValid": "fn(id: string) -> Boolean",
      "prototype": {
        "toHexString": "fn() -> string",
        "equals": "fn(otherID: ObjectID) -> bool",
        "getTimestamp": "fn() -> Date",
        "generate": "fn(time?: number) -> string"
      }
    },
    "Binary": {
      "!type": "fn(buffer: Buffer, subType?: number)",
      "prototype": {
        "put": "fn(byte_value: ?)",
        "write": "fn(buffer: ?, offset: number)",
        "read": "fn(position: number, length: number) -> Buffer",
        "value": "fn() -> string",
        "length": "fn() -> number"
      }
    },
    "SocketOptions": {
      "timeout": "number",
      "noDelay": "bool",
      "keepAlive": "number",
      "encoding": "string"
    },
    "ServerOptions": {
      "auto_reconnect": "bool",
      "poolSize": "number",
      "socketOptions": "?"
    },
    "PKFactory": {
      "counter": "number",
      "createPk": "fn()"
    },
    "DbCreateOptions": {
      "w": "?",
      "wtimeout": "number",
      "fsync": "bool",
      "journal": "bool",
      "readPreference": "string",
      "native_parser": "bool",
      "forceServerObjectId": "bool",
      "pkFactory": "PKFactory",
      "serializeFunctions": "bool",
      "raw": "bool",
      "recordQueryStats": "bool",
      "retryMiliSeconds": "number",
      "numberOfRetries": "number",
      "logger": "Object",
      "slaveOk": "number",
      "promoteLongs": "bool"
    },
    "ReadPreference": {
      "PRIMARY": "string",
      "PRIMARY_PREFERRED": "string",
      "SECONDARY": "string",
      "SECONDARY_PREFERRED": "string",
      "NEAREST": "string",
      "prototype": {}
    },
    "CollectionCreateOptions": {
      "readPreference": "string",
      "slaveOk": "bool",
      "serializeFunctions": "bool",
      "raw": "bool",
      "pkFactory": "PKFactory"
    },
    "CollStats": {
      "ns": "string",
      "count": "number",
      "size": "number",
      "avgObjSize": "number",
      "storageSize": "number",
      "numExtents": "number",
      "nindexes": "number",
      "lastExtentSize": "number",
      "paddingFactor": "number",
      "flags": "number",
      "totalIndexSize": "number",
      "indexSizes": {
        "_id_": "number",
        "username": "number"
      }
    },
    "Collection": {
      "insert": "fn(query: ?, callback: fn(err: Error, result: ?))",
      "insertOne": "fn(doc: ?, callback: fn(err: Error, result: ?))",
      "insertMany": "fn(docs: ?, callback: fn(err: Error, result: ?))",
      "remove": "fn(selector: Object, callback?: fn(err: Error, result: ?))",
      "deleteOne": "fn(filter: ?, callback: fn(err: Error, result: ?))",
      "deleteMany": "fn(filter: ?, callback: fn(err: Error, result: ?))",
      "rename": "fn(newName: String, callback?: fn(err: Error, result: ?))",
      "save": "fn(doc: ?, callback: fn(err: Error, result: ?))",
      "update": "fn(selector: Object, document: ?, callback?: fn(err: Error, result: ?))",
      "updateOne": "fn(filter: Object, update: ?, callback: fn(err: Error, result: ?))",
      "updateMany": "fn(filter: Object, update: ?, callback: fn(err: Error, result: ?))",
      "distinct": "fn(key: string, query: Object, callback: fn(err: Error, result: ?))",
      "count": "fn(callback: fn(err: Error, result: ?))",
      "drop": "fn(callback?: fn(err: Error, result: ?))",
      "findAndModify": "fn(query: Object, sort: [?], doc: Object, callback: fn(err: Error, result: ?))",
      "findAndRemove": "fn(query: Object, sort?: [?], callback?: fn(err: Error, result: ?))",
      "findOneAndDelete": "fn(filter: ?, callback: fn(err: Error, result: ?))",
      "findOneAndReplace": "fn(filter: ?, replacement: ?, callback: fn(err: Error, result: ?))",
      "findOneAndUpdate": "fn(filter: ?, update: ?, callback: fn(err: Error, result: ?))",
      "find": "fn(callback?: fn(err: Error, result: Cursor)) -> Cursor",
      "findOne": "fn(callback?: fn(err: Error, result: ?)) -> Cursor",
      "createIndex": "fn(fieldOrSpec: ?, callback: fn(err: Error, indexName: string))",
      "ensureIndex": "fn(fieldOrSpec: ?, callback: fn(err: Error, indexName: string))",
      "indexInformation": "fn(options: ?, callback: Function)",
      "dropIndex": "fn(name: string, callback: Function)",
      "dropAllIndexes": "fn(callback: Function)",
      "reIndex": "fn(callback: Function)",
      "mapReduce": "fn(map: Function, reduce: Function, options: MapReduceOptions, callback: Function)",
      "group": "fn(keys: Object, condition: Object, initial: Object, reduce: Function, finalize: Function, command: bool, options: ?, callback: Function)",
      "options": "fn(callback: Function)",
      "isCapped": "fn(callback: Function)",
      "indexExists": "fn(indexes: string, callback: Function)",
      "geoNear": "fn(x: number, y: number, callback: Function)",
      "geoHaystackSearch": "fn(x: number, y: number, callback: Function)",
      "indexes": "fn(callback: Function)",
      "aggregate": "fn(pipeline: [?], callback: fn(err: Error, results: ?))",
      "stats": "fn(options: ?, callback: fn(err: Error, results: CollStats))",
      "hint": "?"
    },
    "MapReduceOptions": {
      "out": "Object",
      "query": "Object",
      "sort": "Object",
      "limit": "number",
      "keeptemp": "bool",
      "finalize": "?",
      "scope": "Object",
      "jsMode": "bool",
      "verbose": "bool",
      "readPreference": "string"
    },
    "IndexOptions": {
      "w": "?",
      "wtimeout": "number",
      "fsync": "bool",
      "journal": "bool",
      "unique": "bool",
      "sparse": "bool",
      "background": "bool",
      "dropDups": "bool",
      "min": "number",
      "max": "number",
      "v": "number",
      "expireAfterSeconds": "number",
      "name": "string"
    },
    "Cursor": {
      "INIT": "number",
      "OPEN": "number",
      "CLOSED": "number",
      "GET_MORE": "number",
      "prototype": {
        "rewind": "fn() -> Cursor",
        "toArray": "fn(callback: fn(err: Error, results: [?]))",
        "each": "fn(callback: fn(err: Error, item: ?))",
        "count": "fn(applySkipLimit: bool, callback: fn(err: Error, count: number))",
        "sort": "fn(keyOrList: ?, callback?: fn(err: Error, result: ?)) -> Cursor",
        "limit": "fn(limit: number, callback?: fn(err: Error, result: ?)) -> Cursor",
        "setReadPreference": "fn(preference: string, callback?: Function) -> Cursor",
        "skip": "fn(skip: number, callback?: fn(err: Error, result: ?)) -> Cursor",
        "batchSize": "fn(batchSize: number, callback?: fn(err: Error, result: ?)) -> Cursor",
        "nextObject": "fn(callback: fn(err: Error, doc: ?))",
        "explain": "fn(callback: fn(err: Error, result: ?))",
        "stream": "fn() -> CursorStream",
        "close": "fn(callback: fn(err: Error, result: ?))",
        "isClosed": "fn() -> bool"
      }
    },
    "CursorStream": {
      "!type": "fn(cursor: Cursor)",
      "prototype": {
        "pause": "fn() -> ?",
        "resume": "fn() -> ?",
        "destroy": "fn() -> ?"
      }
    },
    "CollectionFindOptions": {
      "limit": "number",
      "sort": "?",
      "fields": "Object",
      "skip": "number",
      "hint": "Object",
      "explain": "bool",
      "snapshot": "bool",
      "timeout": "bool",
      "tailtable": "bool",
      "tailableRetryInterval": "number",
      "numberOfRetries": "number",
      "awaitdata": "bool",
      "oplogReplay": "bool",
      "exhaust": "bool",
      "batchSize": "number",
      "returnKey": "bool",
      "maxScan": "number",
      "min": "number",
      "max": "number",
      "showDiskLoc": "bool",
      "comment": "String",
      "raw": "bool",
      "readPreference": "String",
      "partial": "bool"
    },
    "MongoCollectionOptions": {
      "safe": "?",
      "serializeFunctions": "?",
      "strict": "bool",
      "raw": "bool",
      "pkFactory": "?",
      "readPreference": "string"
    }
  },
  "!name": "mongodb.d.ts",
  "!define": {
    "ret": {
      "id": "string",
      "callback": "Function"
    }
  }
}
