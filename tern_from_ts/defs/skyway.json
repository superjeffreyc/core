{
  "PeerJs": {
    "PeerJSOption": {
      "key": "string",
      "host": "string",
      "port": "number",
      "path": "string",
      "secure": "bool",
      "turn": "bool",
      "config": "RTCPeerConnectionConfig",
      "debug": "number"
    },
    "PeerConnectOption": {
      "label": "string",
      "metadata": "?",
      "serialization": "string",
      "reliable": "bool"
    },
    "DataConnection": {
      "send": "fn(data: ?)",
      "close": "fn()",
      "on": "fn(event: string, cb: fn())",
      "off": "fn(event: string, fn: Function, once?: bool)",
      "bufferSize": "number",
      "dataChannel": "RTCDataChannel",
      "label": "string",
      "metadata": "?",
      "open": "bool",
      "peerConnection": "?",
      "peer": "string",
      "reliable": "bool",
      "serialization": "string",
      "type": "string"
    },
    "MediaConnection": {
      "answer": "fn(stream?: ?)",
      "close": "fn()",
      "on": "fn(event: string, cb: fn())",
      "off": "fn(event: string, fn: Function, once?: bool)",
      "open": "bool",
      "metadata": "?",
      "peer": "string",
      "type": "string"
    },
    "utilSupportsObj": {
      "audioVideo": "bool",
      "data": "bool",
      "binary": "bool",
      "reliable": "bool"
    },
    "util": {
      "browser": "string",
      "supports": "utilSupportsObj"
    },
    "Peer": {
      "connect": "fn(id: string, options?: PeerJs.PeerConnectOption) -> PeerJs.DataConnection",
      "call": "fn(id: string, stream: ?) -> PeerJs.MediaConnection",
      "on": "fn(event: string, cb: fn())",
      "off": "fn(event: string, fn: Function, once?: bool)",
      "disconnect": "fn()",
      "destroy": "fn()",
      "listAllPeers": "fn(callback: fn(peerIds: ?))",
      "id": "string",
      "connections": "?",
      "disconnected": "bool",
      "destroyed": "bool"
    }
  },
  "Peer": {
    "prototype": "RTCIceServer"
  },
  "!name": "skyway"
}
