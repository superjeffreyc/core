{
  "GLM": {
    "IArray": {}
  },
  "glMatrix": {
    "toRadian": "fn(a: number) -> number"
  },
  "vec2": {
    "create": "fn() -> GLM.IArray",
    "clone": "fn(a: GLM.IArray) -> GLM.IArray",
    "fromValues": "fn(x: number, y: number) -> GLM.IArray",
    "copy": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "set": "fn(out: GLM.IArray, x: number, y: number) -> GLM.IArray",
    "add": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "subtract": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "sub": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "multiply": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "mul": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "divide": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "div": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "min": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "max": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "scale": "fn(out: GLM.IArray, a: GLM.IArray, b: number) -> GLM.IArray",
    "scaleAndAdd": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray, scale: number) -> GLM.IArray",
    "distance": "fn(a: GLM.IArray, b: GLM.IArray) -> number",
    "dist": "fn(a: GLM.IArray, b: GLM.IArray) -> number",
    "squaredDistance": "fn(a: GLM.IArray, b: GLM.IArray) -> number",
    "sqrDist": "fn(a: GLM.IArray, b: GLM.IArray) -> number",
    "length": "fn(a: GLM.IArray) -> number",
    "len": "fn(a: GLM.IArray) -> number",
    "squaredLength": "fn(a: GLM.IArray) -> number",
    "sqrLen": "fn(a: GLM.IArray) -> number",
    "negate": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "inverse": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "normalize": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "dot": "fn(a: GLM.IArray, b: GLM.IArray) -> number",
    "cross": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "lerp": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray, t: number) -> GLM.IArray",
    "random": "fn(out: GLM.IArray) -> GLM.IArray",
    "transformMat2": "fn(out: GLM.IArray, a: GLM.IArray, m: GLM.IArray) -> GLM.IArray",
    "transformMat2d": "fn(out: GLM.IArray, a: GLM.IArray, m: GLM.IArray) -> GLM.IArray",
    "transformMat3": "fn(out: GLM.IArray, a: GLM.IArray, m: GLM.IArray) -> GLM.IArray",
    "transformMat4": "fn(out: GLM.IArray, a: GLM.IArray, m: GLM.IArray) -> GLM.IArray",
    "forEach": "fn(a: GLM.IArray, stride: number, offset: number, count: number, fn: fn(a: GLM.IArray, b: GLM.IArray, arg: ?), arg: ?) -> GLM.IArray",
    "str": "fn(a: GLM.IArray) -> string"
  },
  "vec3": {
    "create": "fn() -> GLM.IArray",
    "clone": "fn(a: GLM.IArray) -> GLM.IArray",
    "fromValues": "fn(x: number, y: number, z: number) -> GLM.IArray",
    "copy": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "set": "fn(out: GLM.IArray, x: number, y: number, z: number) -> GLM.IArray",
    "add": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "subtract": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "sub": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "multiply": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "mul": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "divide": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "div": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "min": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "max": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "scale": "fn(out: GLM.IArray, a: GLM.IArray, b: number) -> GLM.IArray",
    "scaleAndAdd": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray, scale: number) -> GLM.IArray",
    "distance": "fn(a: GLM.IArray, b: GLM.IArray) -> number",
    "dist": "fn(a: GLM.IArray, b: GLM.IArray) -> number",
    "squaredDistance": "fn(a: GLM.IArray, b: GLM.IArray) -> number",
    "sqrDist": "fn(a: GLM.IArray, b: GLM.IArray) -> number",
    "length": "fn(a: GLM.IArray) -> number",
    "len": "fn(a: GLM.IArray) -> number",
    "squaredLength": "fn(a: GLM.IArray) -> number",
    "sqrLen": "fn(a: GLM.IArray) -> number",
    "negate": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "inverse": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "normalize": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "dot": "fn(a: GLM.IArray, b: GLM.IArray) -> number",
    "cross": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "lerp": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray, t: number) -> GLM.IArray",
    "random": "fn(out: GLM.IArray) -> GLM.IArray",
    "rotateX": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray, c: number) -> GLM.IArray",
    "rotateY": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray, c: number) -> GLM.IArray",
    "rotateZ": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray, c: number) -> GLM.IArray",
    "transformMat3": "fn(out: GLM.IArray, a: GLM.IArray, m: GLM.IArray) -> GLM.IArray",
    "transformMat4": "fn(out: GLM.IArray, a: GLM.IArray, m: GLM.IArray) -> GLM.IArray",
    "transformQuat": "fn(out: GLM.IArray, a: GLM.IArray, q: GLM.IArray) -> GLM.IArray",
    "forEach": "fn(out: GLM.IArray, string: number, offset: number, count: number, fn: fn(a: GLM.IArray, b: GLM.IArray, arg: ?), arg: ?) -> GLM.IArray",
    "angle": "fn(a: GLM.IArray, b: GLM.IArray) -> number",
    "str": "fn(a: GLM.IArray) -> string"
  },
  "vec4": {
    "create": "fn() -> GLM.IArray",
    "clone": "fn(a: GLM.IArray) -> GLM.IArray",
    "fromValues": "fn(x: number, y: number, z: number, w: number) -> GLM.IArray",
    "copy": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "set": "fn(out: GLM.IArray, x: number, y: number, z: number, w: number) -> GLM.IArray",
    "add": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "subtract": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "sub": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "multiply": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "mul": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "divide": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "div": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "min": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "max": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "scale": "fn(out: GLM.IArray, a: GLM.IArray, b: number) -> GLM.IArray",
    "scaleAndAdd": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray, scale: number) -> GLM.IArray",
    "distance": "fn(a: GLM.IArray, b: GLM.IArray) -> number",
    "dist": "fn(a: GLM.IArray, b: GLM.IArray) -> number",
    "squaredDistance": "fn(a: GLM.IArray, b: GLM.IArray) -> number",
    "sqrDist": "fn(a: GLM.IArray, b: GLM.IArray) -> number",
    "length": "fn(a: GLM.IArray) -> number",
    "len": "fn(a: GLM.IArray) -> number",
    "squaredLength": "fn(a: GLM.IArray) -> number",
    "sqrLen": "fn(a: GLM.IArray) -> number",
    "negate": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "inverse": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "normalize": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "dot": "fn(a: GLM.IArray, b: GLM.IArray) -> number",
    "lerp": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray, t: number) -> GLM.IArray",
    "random": "fn(out: GLM.IArray) -> GLM.IArray",
    "transformMat4": "fn(out: GLM.IArray, a: GLM.IArray, mat: GLM.IArray) -> GLM.IArray",
    "transformQuat": "fn(out: GLM.IArray, a: GLM.IArray, quat: GLM.IArray) -> GLM.IArray",
    "forEach": "fn(out: GLM.IArray, string: number, offset: number, count: number, callback: fn(a: GLM.IArray, b: GLM.IArray, arg: ?), arg: ?) -> GLM.IArray",
    "str": "fn(a: GLM.IArray) -> string"
  },
  "mat2": {
    "create": "fn() -> GLM.IArray",
    "clone": "fn(a: GLM.IArray) -> GLM.IArray",
    "copy": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "identity": "fn(out: GLM.IArray) -> GLM.IArray",
    "transpose": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "invert": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "adjoint": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "determinant": "fn(a: GLM.IArray) -> number",
    "multiply": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "mul": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "rotate": "fn(out: GLM.IArray, a: GLM.IArray, rad: number) -> GLM.IArray",
    "scale": "fn(out: GLM.IArray, a: GLM.IArray, v: GLM.IArray) -> GLM.IArray",
    "str": "fn(a: GLM.IArray) -> string",
    "frob": "fn(a: GLM.IArray) -> number",
    "LDU": "fn(L: GLM.IArray, D: GLM.IArray, U: GLM.IArray, a: GLM.IArray) -> GLM.IArray"
  },
  "mat2d": {
    "create": "fn() -> GLM.IArray",
    "clone": "fn(a: GLM.IArray) -> GLM.IArray",
    "copy": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "identity": "fn(out: GLM.IArray) -> GLM.IArray",
    "invert": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "determinant": "fn(a: GLM.IArray) -> number",
    "multiply": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "mul": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "rotate": "fn(out: GLM.IArray, a: GLM.IArray, rad: number) -> GLM.IArray",
    "scale": "fn(out: GLM.IArray, a: GLM.IArray, v: GLM.IArray) -> GLM.IArray",
    "translate": "fn(out: GLM.IArray, a: GLM.IArray, v: GLM.IArray) -> GLM.IArray",
    "str": "fn(a: GLM.IArray) -> string",
    "frob": "fn(a: GLM.IArray) -> number"
  },
  "mat3": {
    "create": "fn() -> GLM.IArray",
    "clone": "fn(a: GLM.IArray) -> GLM.IArray",
    "copy": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "identity": "fn(out: GLM.IArray) -> GLM.IArray",
    "transpose": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "invert": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "adjoint": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "determinant": "fn(a: GLM.IArray) -> number",
    "multiply": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "mul": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "str": "fn(mat: GLM.IArray) -> string",
    "frob": "fn(a: GLM.IArray) -> number",
    "normalFromMat4": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "fromQuat": "fn(out: GLM.IArray, q: GLM.IArray) -> GLM.IArray",
    "fromMat4": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "scale": "fn(out: GLM.IArray, a: GLM.IArray, v: GLM.IArray) -> GLM.IArray",
    "fromMat2d": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "translate": "fn(out: GLM.IArray, a: GLM.IArray, v: GLM.IArray) -> GLM.IArray",
    "rotate": "fn(out: GLM.IArray, a: GLM.IArray, rad: number) -> GLM.IArray"
  },
  "mat4": {
    "create": "fn() -> GLM.IArray",
    "clone": "fn(a: GLM.IArray) -> GLM.IArray",
    "copy": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "identity": "fn(a: GLM.IArray) -> GLM.IArray",
    "transpose": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "invert": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "adjoint": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "determinant": "fn(a: GLM.IArray) -> number",
    "multiply": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "mul": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "translate": "fn(out: GLM.IArray, a: GLM.IArray, v: GLM.IArray) -> GLM.IArray",
    "scale": "fn(out: GLM.IArray, a: GLM.IArray, v: GLM.IArray) -> GLM.IArray",
    "rotate": "fn(out: GLM.IArray, a: GLM.IArray, rad: number, axis: GLM.IArray) -> GLM.IArray",
    "rotateX": "fn(out: GLM.IArray, a: GLM.IArray, rad: number) -> GLM.IArray",
    "rotateY": "fn(out: GLM.IArray, a: GLM.IArray, rad: number) -> GLM.IArray",
    "rotateZ": "fn(out: GLM.IArray, a: GLM.IArray, rad: number) -> GLM.IArray",
    "frustum": "fn(out: GLM.IArray, left: number, right: number, bottom: number, top: number, near: number, far: number) -> GLM.IArray",
    "perspective": "fn(out: GLM.IArray, fovy: number, aspect: number, near: number, far: number) -> GLM.IArray",
    "ortho": "fn(out: GLM.IArray, left: number, right: number, bottom: number, top: number, near: number, far: number) -> GLM.IArray",
    "lookAt": "fn(out: GLM.IArray, eye: GLM.IArray, center: GLM.IArray, up: GLM.IArray) -> GLM.IArray",
    "str": "fn(mat: GLM.IArray) -> string",
    "frob": "fn(a: GLM.IArray) -> number",
    "fromRotationTranslation": "fn(out: GLM.IArray, q: GLM.IArray, v: GLM.IArray) -> GLM.IArray",
    "fromQuat": "fn(out: GLM.IArray, q: GLM.IArray) -> GLM.IArray"
  },
  "quat": {
    "create": "fn() -> GLM.IArray",
    "clone": "fn(a: GLM.IArray) -> GLM.IArray",
    "fromValues": "fn(x: number, y: number, z: number, w: number) -> GLM.IArray",
    "copy": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "set": "fn(out: GLM.IArray, x: number, y: number, z: number, w: number) -> GLM.IArray",
    "identity": "fn(out: GLM.IArray) -> GLM.IArray",
    "setAxisAngle": "fn(out: GLM.IArray, axis: GLM.IArray, rad: number) -> GLM.IArray",
    "add": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "multiply": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "mul": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "scale": "fn(out: GLM.IArray, a: GLM.IArray, b: number) -> GLM.IArray",
    "length": "fn(a: GLM.IArray) -> number",
    "len": "fn(a: GLM.IArray) -> number",
    "squaredLength": "fn(a: GLM.IArray) -> number",
    "sqrLen": "fn(a: GLM.IArray) -> number",
    "normalize": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "dot": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> number",
    "lerp": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray, t: number) -> GLM.IArray",
    "slerp": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray, t: number) -> GLM.IArray",
    "invert": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "conjugate": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray",
    "str": "fn(a: GLM.IArray) -> string",
    "rotateX": "fn(out: GLM.IArray, a: GLM.IArray, rad: number) -> GLM.IArray",
    "rotateY": "fn(out: GLM.IArray, a: GLM.IArray, rad: number) -> GLM.IArray",
    "rotateZ": "fn(out: GLM.IArray, a: GLM.IArray, rad: number) -> GLM.IArray",
    "fromMat3": "fn(out: GLM.IArray, m: GLM.IArray) -> GLM.IArray",
    "setAxes": "fn(out: GLM.IArray, view: GLM.IArray, right: GLM.IArray, up: GLM.IArray) -> GLM.IArray",
    "rotationTo": "fn(out: GLM.IArray, a: GLM.IArray, b: GLM.IArray) -> GLM.IArray",
    "calculateW": "fn(out: GLM.IArray, a: GLM.IArray) -> GLM.IArray"
  },
  "!name": "gl-matrix"
}
