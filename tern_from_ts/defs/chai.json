{
  "Chai": {
    "ChaiStatic": {
      "expect": "ExpectStatic",
      "should": "fn() -> Should",
      "use": "fn(fn: fn(chai: ?, utils: ?)) -> ?",
      "assert": "AssertStatic",
      "config": "Config"
    },
    "ExpectStatic": {},
    "AssertStatic": {},
    "AssertionStatic": {},
    "ShouldAssertion": {
      "equal": "fn(value1: ?, value2: ?, message?: string)",
      "Throw": "ShouldThrow",
      "throw": "ShouldThrow",
      "exist": "fn(value: ?, message?: string)"
    },
    "Should": {
      "not": "ShouldAssertion",
      "fail": "fn(actual: ?, expected: ?, message?: string, operator?: string)"
    },
    "ShouldThrow": {},
    "Assertion": {
      "not": "Assertion",
      "deep": "Deep",
      "a": "TypeComparison",
      "an": "TypeComparison",
      "include": "Include",
      "contain": "Include",
      "ok": "Assertion",
      "true": "Assertion",
      "false": "Assertion",
      "null": "Assertion",
      "undefined": "Assertion",
      "exist": "Assertion",
      "empty": "Assertion",
      "arguments": "Assertion",
      "Arguments": "Assertion",
      "equal": "Equal",
      "equals": "Equal",
      "eq": "Equal",
      "eql": "Equal",
      "eqls": "Equal",
      "property": "Property",
      "ownProperty": "OwnProperty",
      "haveOwnProperty": "OwnProperty",
      "length": "Length",
      "lengthOf": "Length",
      "match": "fn(regexp: RegExp, string: ?, message?: string) -> Assertion",
      "string": "fn(string: string, message?: string) -> Assertion",
      "keys": "Keys",
      "key": "fn(string: string) -> Assertion",
      "throw": "Throw",
      "throws": "Throw",
      "Throw": "Throw",
      "respondTo": "fn(method: string, message?: string) -> Assertion",
      "itself": "Assertion",
      "satisfy": "fn(matcher: Function, message?: string) -> Assertion",
      "closeTo": "fn(expected: number, delta: number, message?: string) -> Assertion",
      "members": "Members"
    },
    "LanguageChains": {
      "to": "Assertion",
      "be": "Assertion",
      "been": "Assertion",
      "is": "Assertion",
      "that": "Assertion",
      "which": "Assertion",
      "and": "Assertion",
      "has": "Assertion",
      "have": "Assertion",
      "with": "Assertion",
      "at": "Assertion",
      "of": "Assertion",
      "same": "Assertion"
    },
    "NumericComparison": {
      "above": "NumberComparer",
      "gt": "NumberComparer",
      "greaterThan": "NumberComparer",
      "least": "NumberComparer",
      "gte": "NumberComparer",
      "below": "NumberComparer",
      "lt": "NumberComparer",
      "lessThan": "NumberComparer",
      "most": "NumberComparer",
      "lte": "NumberComparer",
      "within": "fn(start: number, finish: number, message?: string) -> Assertion"
    },
    "NumberComparer": {},
    "TypeComparison": {
      "instanceof": "InstanceOf",
      "instanceOf": "InstanceOf"
    },
    "InstanceOf": {},
    "Deep": {
      "equal": "Equal",
      "include": "Include",
      "property": "Property"
    },
    "Equal": {},
    "Property": {},
    "OwnProperty": {},
    "Length": {},
    "Include": {
      "keys": "Keys",
      "members": "Members"
    },
    "Keys": {},
    "Throw": {},
    "Members": {},
    "Assert": {
      "fail": "fn(actual?: ?, expected?: ?, msg?: string, operator?: string)",
      "ok": "fn(val: ?, msg?: string)",
      "notOk": "fn(val: ?, msg?: string)",
      "equal": "fn(act: ?, exp: ?, msg?: string)",
      "notEqual": "fn(act: ?, exp: ?, msg?: string)",
      "strictEqual": "fn(act: ?, exp: ?, msg?: string)",
      "notStrictEqual": "fn(act: ?, exp: ?, msg?: string)",
      "deepEqual": "fn(act: ?, exp: ?, msg?: string)",
      "notDeepEqual": "fn(act: ?, exp: ?, msg?: string)",
      "isTrue": "fn(val: ?, msg?: string)",
      "isFalse": "fn(val: ?, msg?: string)",
      "isNull": "fn(val: ?, msg?: string)",
      "isNotNull": "fn(val: ?, msg?: string)",
      "isUndefined": "fn(val: ?, msg?: string)",
      "isDefined": "fn(val: ?, msg?: string)",
      "isFunction": "fn(val: ?, msg?: string)",
      "isNotFunction": "fn(val: ?, msg?: string)",
      "isObject": "fn(val: ?, msg?: string)",
      "isNotObject": "fn(val: ?, msg?: string)",
      "isArray": "fn(val: ?, msg?: string)",
      "isNotArray": "fn(val: ?, msg?: string)",
      "isString": "fn(val: ?, msg?: string)",
      "isNotString": "fn(val: ?, msg?: string)",
      "isNumber": "fn(val: ?, msg?: string)",
      "isNotNumber": "fn(val: ?, msg?: string)",
      "isBoolean": "fn(val: ?, msg?: string)",
      "isNotBoolean": "fn(val: ?, msg?: string)",
      "typeOf": "fn(val: ?, type: string, msg?: string)",
      "notTypeOf": "fn(val: ?, type: string, msg?: string)",
      "instanceOf": "fn(val: ?, type: Function, msg?: string)",
      "notInstanceOf": "fn(val: ?, type: Function, msg?: string)",
      "include": "fn(exp: string, inc: ?, msg?: string)",
      "notInclude": "fn(exp: string, inc: ?, msg?: string)",
      "match": "fn(exp: ?, re: RegExp, msg?: string)",
      "notMatch": "fn(exp: ?, re: RegExp, msg?: string)",
      "property": "fn(obj: Object, prop: string, msg?: string)",
      "notProperty": "fn(obj: Object, prop: string, msg?: string)",
      "deepProperty": "fn(obj: Object, prop: string, msg?: string)",
      "notDeepProperty": "fn(obj: Object, prop: string, msg?: string)",
      "propertyVal": "fn(obj: Object, prop: string, val: ?, msg?: string)",
      "propertyNotVal": "fn(obj: Object, prop: string, val: ?, msg?: string)",
      "deepPropertyVal": "fn(obj: Object, prop: string, val: ?, msg?: string)",
      "deepPropertyNotVal": "fn(obj: Object, prop: string, val: ?, msg?: string)",
      "lengthOf": "fn(exp: ?, len: number, msg?: string)",
      "throw": "fn(fn: Function, msg?: string)",
      "throws": "fn(fn: Function, msg?: string)",
      "Throw": "fn(fn: Function, msg?: string)",
      "doesNotThrow": "fn(fn: Function, msg?: string)",
      "operator": "fn(val: ?, operator: string, val2: ?, msg?: string)",
      "closeTo": "fn(act: number, exp: number, delta: number, msg?: string)",
      "sameMembers": "fn(set1: [?], set2: [?], msg?: string)",
      "includeMembers": "fn(set1: [?], set2: [?], msg?: string)",
      "ifError": "fn(val: ?, msg?: string)"
    },
    "Config": {
      "includeStack": "bool"
    },
    "AssertionError": {
      "!type": "fn(message: string, _props?: ?, ssf?: Function)",
      "prototype": {
        "name": "string",
        "message": "string",
        "showDiff": "bool",
        "stack": "string"
      }
    }
  },
  "chai": "Chai.ChaiStatic",
  "Object": {
    "should": "Chai.Assertion"
  },
  "!name": "chai-2.0.0"
}
