{
  "sandbox": "fn(attributes?: ?) -> string",
  "readFixtures": "fn(uls: [string]) -> string",
  "preloadFixtures": "fn(uls: [string])",
  "loadFixtures": "fn(uls: [string])",
  "appendLoadFixtures": "fn(uls: [string])",
  "setFixtures": "fn(html: string) -> string",
  "appendSetFixtures": "fn(html: string)",
  "preloadStyleFixtures": "fn(uls: [string])",
  "loadStyleFixtures": "fn(uls: [string])",
  "appendLoadStyleFixtures": "fn(uls: [string])",
  "setStyleFixtures": "fn(html: string)",
  "appendSetStyleFixtures": "fn(html: string)",
  "loadJSONFixtures": "fn(uls: [string]) -> jasmine.JSONFixtures",
  "getJSONFixture": "fn(url: string) -> ?",
  "spyOnEvent": "fn(selector: string, eventName: string) -> jasmine.JQueryEventSpy",
  "jasmine": {
    "spiedEventsKey": "fn(selector: JQuery, eventName: string) -> string",
    "getFixtures": "fn() -> Fixtures",
    "getStyleFixtures": "fn() -> StyleFixtures",
    "getJSONFixtures": "fn() -> JSONFixtures",
    "Fixtures": {
      "fixturesPath": "string",
      "containerId": "string",
      "set": "fn(html: string) -> string",
      "appendSet": "fn(html: string)",
      "preload": "fn(uls: [string])",
      "load": "fn(uls: [string])",
      "appendLoad": "fn(uls: [string])",
      "read": "fn(uls: [string]) -> string",
      "clearCache": "fn()",
      "cleanUp": "fn()",
      "sandbox": "fn(attributes?: ?) -> string",
      "createContainer_": "fn(html: string) -> string",
      "addToContainer_": "fn(html: string)",
      "getFixtureHtml_": "fn(url: string) -> string",
      "loadFixtureIntoCache_": "fn(relativeUrl: string)",
      "makeFixtureUrl_": "fn(relativeUrl: string) -> string",
      "proxyCallTo_": "fn(methodName: string, passedArguments: ?) -> ?"
    },
    "StyleFixtures": {
      "fixturesPath": "string",
      "set": "fn(html: string) -> string",
      "appendSet": "fn(html: string)",
      "preload": "fn(uls: [string])",
      "load": "fn(uls: [string])",
      "appendLoad": "fn(uls: [string])",
      "read_": "fn(uls: [string]) -> string",
      "clearCache": "fn()",
      "cleanUp": "fn()",
      "createStyle_": "fn(html: string)",
      "getFixtureHtml_": "fn(url: string) -> string",
      "loadFixtureIntoCache_": "fn(relativeUrl: string)",
      "makeFixtureUrl_": "fn(relativeUrl: string) -> string",
      "proxyCallTo_": "fn(methodName: string, passedArguments: ?) -> ?"
    },
    "JSONFixtures": {
      "fixturesPath": "string",
      "load": "fn(uls: [string])",
      "read": "fn(uls: [string]) -> string",
      "clearCache": "fn()",
      "getFixtureData_": "fn(url: string) -> ?",
      "loadFixtureIntoCache_": "fn(relativeUrl: string)",
      "proxyCallTo_": "fn(methodName: string, passedArguments: ?) -> ?"
    },
    "Matchers": {
      "toHaveClass": "fn(className: string) -> bool",
      "toHaveCss": "fn(css: ?) -> bool",
      "toBeVisible": "fn() -> bool",
      "toBeHidden": "fn() -> bool",
      "toBeSelected": "fn() -> bool",
      "toBeChecked": "fn() -> bool",
      "toBeEmpty": "fn() -> bool",
      "toExist": "fn() -> bool",
      "toHaveLength": "fn(length: number) -> bool",
      "toHaveAttr": "fn(attributeName: string, expectedAttributeValue?: ?) -> bool",
      "toHaveProp": "fn(propertyName: string, expectedPropertyValue?: ?) -> bool",
      "toHaveId": "fn(id: string) -> bool",
      "toHaveHtml": "fn(html: string) -> bool",
      "toContainHtml": "fn(html: string) -> bool",
      "toHaveText": "fn(text: string) -> bool",
      "toContainText": "fn(text: string) -> bool",
      "toHaveValue": "fn(value: string) -> bool",
      "toHaveData": "fn(key: string, expectedValue: string) -> bool",
      "toBe": "fn(selector: JQuery) -> bool",
      "toContain": "fn(selector: JQuery) -> bool",
      "toContainElement": "fn(selector: string) -> bool",
      "toBeMatchedBy": "fn(selector: string) -> bool",
      "toBeDisabled": "fn() -> bool",
      "toBeFocused": "fn() -> bool",
      "toHandle": "fn(eventName: string) -> bool",
      "toHandleWith": "fn(eventName: string, eventHandler: JQueryCallback) -> bool",
      "toHaveBeenTriggered": "fn() -> bool",
      "toHaveBeenTriggeredOn": "fn(selector: string) -> bool",
      "toHaveBeenTriggeredOnAndWith": "fn(selector: string, args: [?]) -> bool",
      "toHaveBeenPrevented": "fn() -> bool",
      "toHaveBeenPreventedOn": "fn(selector: string) -> bool",
      "toHaveBeenStopped": "fn() -> bool",
      "toHaveBeenStoppedOn": "fn(selector: string) -> bool",
      "toBeInDOM": "fn() -> bool"
    },
    "JQueryEventSpy": {
      "selector": "string",
      "eventName": "string",
      "handler": "fn(eventObject: JQueryEventObject) -> ?",
      "reset": "fn() -> ?"
    },
    "JasmineJQuery": {
      "browserTagCaseIndependentHtml": "fn(html: string) -> string",
      "elementToString": "fn(element: JQuery) -> string",
      "matchersClass": "?",
      "events": "JasmineJQueryEvents"
    },
    "JasmineJQueryEvents": {
      "spyOn": "fn(selector: string, eventName: string) -> JQueryEventSpy",
      "args": "fn(selector: string, eventName: string) -> ?",
      "wasTriggered": "fn(selector: string, eventName: string) -> bool",
      "wasTriggeredWith": "fn(selector: string, eventName: string, expectedArgs: ?, env: jasmine.Env) -> bool",
      "wasPrevented": "fn(selector: string, eventName: string) -> bool",
      "wasStopped": "fn(selector: string, eventName: string) -> bool",
      "cleanUp": "fn()"
    },
    "JQuery": "JasmineJQuery"
  },
  "!name": "jasmine-jquery"
}
