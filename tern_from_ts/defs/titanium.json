{
  "Ti": {
    "apiName": "string",
    "bubbleParent": "bool",
    "buildDate": "string",
    "buildHash": "string",
    "userAgent": "string",
    "version": "string",
    "addEventListener": "fn(name: string, callback: fn(args: [?]))",
    "applyProperties": "fn(props: ?)",
    "createBuffer": "fn(params: CreateBufferArgs) -> Ti.Buffer",
    "fireEvent": "fn(name: string, event: ?)",
    "getApiName": "fn() -> string",
    "getBubbleParent": "fn() -> bool",
    "getBuildDate": "fn() -> string",
    "getBuildHash": "fn() -> string",
    "getUserAgent": "fn() -> string",
    "getVersion": "fn() -> string",
    "include": "fn(name: string)",
    "removeEventListener": "fn(name: string, callback: fn(args: [?]))",
    "setBubbleParent": "fn(bubbleParent: bool)",
    "setUserAgent": "fn(userAgent: string)",
    "XML": {
      "apiName": "string",
      "bubbleParent": "bool",
      "addEventListener": "fn(name: string, callback: fn(args: [?]))",
      "applyProperties": "fn(props: ?)",
      "fireEvent": "fn(name: string, event: ?)",
      "getApiName": "fn() -> string",
      "getBubbleParent": "fn() -> bool",
      "parseString": "fn(xml: string) -> Ti.XML.Document",
      "removeEventListener": "fn(name: string, callback: fn(args: [?]))",
      "serializeToString": "fn(node: Ti.XML.Node) -> string",
      "setBubbleParent": "fn(bubbleParent: bool)",
      "Entity": {
        "notationName": "string",
        "publicId": "string",
        "systemId": "string",
        "getNotationName": "fn() -> string",
        "getPublicId": "fn() -> string",
        "getSystemId": "fn() -> string"
      },
      "Node": {
        "ATTRIBUTE_NODE": "number",
        "CDATA_SECTION_NODE": "number",
        "COMMENT_NODE": "number",
        "DOCUMENT_FRAGMENT_NODE": "number",
        "DOCUMENT_NODE": "number",
        "DOCUMENT_TYPE_NODE": "number",
        "ELEMENT_NODE": "number",
        "ENTITY_NODE": "number",
        "ENTITY_REFERENCE_NODE": "number",
        "NOTATION_NODE": "number",
        "PROCESSING_INSTRUCTION_NODE": "number",
        "TEXT_NODE": "number",
        "attributes": "Ti.XML.NamedNodeMap",
        "childNodes": "Ti.XML.NodeList",
        "firstChild": "Ti.XML.Node",
        "lastChild": "Ti.XML.Node",
        "localName": "string",
        "namespaceURI": "string",
        "nextSibling": "Ti.XML.Node",
        "nodeName": "string",
        "nodeType": "number",
        "nodeValue": "string",
        "ownerDocument": "Ti.XML.Document",
        "parentNode": "Ti.XML.Node",
        "prefix": "string",
        "previousSibling": "Ti.XML.Node",
        "text": "string",
        "textContent": "string",
        "appendChild": "fn(newChild: Ti.XML.Node) -> Ti.XML.Node",
        "cloneNode": "fn(deep: bool) -> Ti.XML.Node",
        "getAttributes": "fn() -> Ti.XML.NamedNodeMap",
        "getChildNodes": "fn() -> Ti.XML.NodeList",
        "getFirstChild": "fn() -> Ti.XML.Node",
        "getLastChild": "fn() -> Ti.XML.Node",
        "getLocalName": "fn() -> string",
        "getNamespaceURI": "fn() -> string",
        "getNextSibling": "fn() -> Ti.XML.Node",
        "getNodeName": "fn() -> string",
        "getNodeType": "fn() -> number",
        "getNodeValue": "fn() -> string",
        "getOwnerDocument": "fn() -> Ti.XML.Document",
        "getParentNode": "fn() -> Ti.XML.Node",
        "getPrefix": "fn() -> string",
        "getPreviousSibling": "fn() -> Ti.XML.Node",
        "getText": "fn() -> string",
        "getTextContent": "fn() -> string",
        "hasAttributes": "fn() -> bool",
        "hasChildNodes": "fn() -> bool",
        "insertBefore": "fn(newChild: Ti.XML.Node, refChild: Ti.XML.Node) -> Ti.XML.Node",
        "isSupported": "fn(feature: string, version: string) -> bool",
        "normalize": "fn()",
        "removeChild": "fn(oldChild: Ti.XML.Node) -> Ti.XML.Node",
        "replaceChild": "fn(newChild: Ti.XML.Node, oldChild: Ti.XML.Node) -> Ti.XML.Node",
        "setLocalName": "fn(localName: string)",
        "setNodeValue": "fn(nodeValue: string)",
        "setPrefix": "fn(prefix: string)"
      },
      "EntityReference": "number",
      "CharacterData": {
        "data": "string",
        "length": "number",
        "appendData": "fn(arg: string)",
        "deleteData": "fn(offset: number, count: number)",
        "getData": "fn() -> string",
        "getLength": "fn() -> number",
        "insertData": "fn(offset: number, arg: string)",
        "replaceData": "fn(offset: number, count: number, arg: string)",
        "setData": "fn(data: string)",
        "substringData": "fn(offset: number, count: number) -> string"
      },
      "DOMImplementation": {
        "createDocument": "fn(namespaceURI: string, qualifiedName: string, doctype: Ti.XML.DocumentType) -> Ti.XML.Document",
        "createDocumentType": "fn(qualifiedName: string, publicId: string, systemId: string) -> Ti.XML.DocumentType",
        "hasFeature": "fn(feature: string, version: string) -> bool"
      },
      "Document": {
        "doctype": "Ti.XML.DocumentType",
        "documentElement": "Ti.XML.Element",
        "implementation": "Ti.XML.DOMImplementation",
        "createAttribute": "fn(name: string) -> Ti.XML.Attr",
        "createAttributeNS": "fn(namespaceURI: string, name: string) -> Ti.XML.Attr",
        "createCDATASection": "fn(data: string) -> Ti.XML.CDATASection",
        "createComment": "fn(data: string) -> Ti.XML.Comment",
        "createDocumentFragment": "fn() -> Ti.XML.DocumentFragment",
        "createElement": "fn(tagName: string) -> Ti.XML.Element",
        "createElementNS": "fn(namespaceURI: string, name: string) -> Ti.XML.Element",
        "createEntityReference": "fn(name: string) -> Ti.XML.EntityReference",
        "createProcessingInstruction": "fn(target: string, data: string) -> Ti.XML.ProcessingInstruction",
        "createTextNode": "fn(data: string) -> Ti.XML.Text",
        "getDoctype": "fn() -> Ti.XML.DocumentType",
        "getDocumentElement": "fn() -> Ti.XML.Element",
        "getElementById": "fn(elementId: string) -> Ti.XML.Element",
        "getElementsByTagName": "fn(tagname: string) -> Ti.XML.NodeList",
        "getElementsByTagNameNS": "fn(namespaceURI: string, localname: string) -> Ti.XML.NodeList",
        "getImplementation": "fn() -> Ti.XML.DOMImplementation",
        "importNode": "fn(importedNode: Ti.XML.Node, deep: bool) -> Ti.XML.Node"
      },
      "Attr": {
        "name": "string",
        "ownerElement": "Ti.XML.Element",
        "specified": "bool",
        "value": "string",
        "getName": "fn() -> string",
        "getOwnerElement": "fn() -> Ti.XML.Element",
        "getSpecified": "fn() -> bool",
        "getValue": "fn() -> string",
        "setValue": "fn(value: string)"
      },
      "ProcessingInstruction": {
        "data": "string",
        "target": "string",
        "getData": "fn() -> string",
        "getTarget": "fn() -> string",
        "setData": "fn(data: string)"
      },
      "NamedNodeMap": {
        "length": "number",
        "getLength": "fn() -> number",
        "getNamedItem": "fn(name: string) -> Ti.XML.Node",
        "getNamedItemNS": "fn(namespaceURI: string, localName: string) -> Ti.XML.Node",
        "item": "fn(index: number) -> Ti.XML.Node",
        "removeNamedItem": "fn(name: string) -> Ti.XML.Node",
        "removeNamedItemNS": "fn(namespaceURI: string, localName: string) -> Ti.XML.Node",
        "setNamedItem": "fn(node: Ti.XML.Node) -> Ti.XML.Node",
        "setNamedItemNS": "fn(node: Ti.XML.Node) -> Ti.XML.Node"
      },
      "CDATASection": "number",
      "Text": {
        "splitText": "fn(offset: number) -> Ti.XML.Text"
      },
      "Comment": "number",
      "DocumentFragment": "number",
      "Notation": {
        "publicId": "string",
        "systemId": "string",
        "getPublicId": "fn() -> string",
        "getSystemId": "fn() -> string"
      },
      "NodeList": {
        "length": "number",
        "getLength": "fn() -> number",
        "item": "fn(index: number) -> Ti.XML.Node"
      },
      "DocumentType": {
        "entities": "Ti.XML.NamedNodeMap",
        "internalSubset": "string",
        "name": "string",
        "notations": "Ti.XML.NamedNodeMap",
        "publicId": "string",
        "systemId": "string",
        "getEntities": "fn() -> Ti.XML.NamedNodeMap",
        "getInternalSubset": "fn() -> string",
        "getName": "fn() -> string",
        "getNotations": "fn() -> Ti.XML.NamedNodeMap",
        "getPublicId": "fn() -> string",
        "getSystemId": "fn() -> string"
      },
      "Element": {
        "tagName": "string",
        "getAttribute": "fn(name: string) -> string",
        "getAttributeNS": "fn(namespaceURI: string, localName: string) -> string",
        "getAttributeNode": "fn(name: string) -> Ti.XML.Attr",
        "getAttributeNodeNS": "fn(namespaceURI: string, localName: string) -> Ti.XML.Attr",
        "getElementsByTagName": "fn(name: string) -> Ti.XML.NodeList",
        "getElementsByTagNameNS": "fn(namespaceURI: string, localName: string) -> Ti.XML.NodeList",
        "getTagName": "fn() -> string",
        "hasAttribute": "fn(name: string) -> bool",
        "hasAttributeNS": "fn(namespaceURI: string, localName: string) -> bool",
        "removeAttribute": "fn(name: string)",
        "removeAttributeNS": "fn(namespaceURI: string, localName: string)",
        "removeAttributeNode": "fn(oldAttr: Ti.XML.Attr)",
        "setAttribute": "fn(name: string, value: string)",
        "setAttributeNS": "fn(namespaceURI: string, qualifiedName: string, value: string)",
        "setAttributeNode": "fn(newAttr: Ti.XML.Attr) -> Ti.XML.Attr",
        "setAttributeNodeNS": "fn(newAttr: Ti.XML.Attr) -> Ti.XML.Attr"
      }
    },
    "BlobStream": "number",
    "IOStream": {
      "close": "fn()",
      "isReadable": "fn() -> bool",
      "isWriteable": "fn() -> bool",
      "read": "fn(buffer: Ti.Buffer, offset?: number, length?: number) -> number",
      "write": "fn(buffer: Ti.Buffer, offset?: number, length?: number) -> number"
    },
    "UI": {
      "ANIMATION_CURVE_EASE_IN": "number",
      "ANIMATION_CURVE_EASE_IN_OUT": "number",
      "ANIMATION_CURVE_EASE_OUT": "number",
      "ANIMATION_CURVE_LINEAR": "number",
      "AUTODETECT_ADDRESS": "number",
      "AUTODETECT_ALL": "number",
      "AUTODETECT_CALENDAR": "number",
      "AUTODETECT_LINK": "number",
      "AUTODETECT_NONE": "number",
      "AUTODETECT_PHONE": "number",
      "AUTOLINK_ALL": "number",
      "AUTOLINK_CALENDAR": "number",
      "AUTOLINK_EMAIL_ADDRESSES": "number",
      "AUTOLINK_MAP_ADDRESSES": "number",
      "AUTOLINK_NONE": "number",
      "AUTOLINK_PHONE_NUMBERS": "number",
      "AUTOLINK_URLS": "number",
      "BLEND_MODE_CLEAR": "number",
      "BLEND_MODE_COLOR": "number",
      "BLEND_MODE_COLOR_BURN": "number",
      "BLEND_MODE_COLOR_DODGE": "number",
      "BLEND_MODE_COPY": "number",
      "BLEND_MODE_DARKEN": "number",
      "BLEND_MODE_DESTINATION_ATOP": "number",
      "BLEND_MODE_DESTINATION_IN": "number",
      "BLEND_MODE_DESTINATION_OUT": "number",
      "BLEND_MODE_DESTINATION_OVER": "number",
      "BLEND_MODE_DIFFERENCE": "number",
      "BLEND_MODE_EXCLUSION": "number",
      "BLEND_MODE_HARD_LIGHT": "number",
      "BLEND_MODE_HUE": "number",
      "BLEND_MODE_LIGHTEN": "number",
      "BLEND_MODE_LUMINOSITY": "number",
      "BLEND_MODE_MULTIPLY": "number",
      "BLEND_MODE_NORMAL": "number",
      "BLEND_MODE_OVERLAY": "number",
      "BLEND_MODE_PLUS_DARKER": "number",
      "BLEND_MODE_PLUS_LIGHTER": "number",
      "BLEND_MODE_SATURATION": "number",
      "BLEND_MODE_SCREEN": "number",
      "BLEND_MODE_SOFT_LIGHT": "number",
      "BLEND_MODE_SOURCE_ATOP": "number",
      "BLEND_MODE_SOURCE_IN": "number",
      "BLEND_MODE_SOURCE_OUT": "number",
      "BLEND_MODE_XOR": "number",
      "EXTEND_EDGE_ALL": "number",
      "EXTEND_EDGE_BOTTOM": "number",
      "EXTEND_EDGE_LEFT": "number",
      "EXTEND_EDGE_NONE": "number",
      "EXTEND_EDGE_RIGHT": "number",
      "EXTEND_EDGE_TOP": "number",
      "FACE_DOWN": "number",
      "FACE_UP": "number",
      "FILL": "string",
      "INHERIT": "string",
      "INPUT_BORDERSTYLE_BEZEL": "number",
      "INPUT_BORDERSTYLE_LINE": "number",
      "INPUT_BORDERSTYLE_NONE": "number",
      "INPUT_BORDERSTYLE_ROUNDED": "number",
      "INPUT_BUTTONMODE_ALWAYS": "number",
      "INPUT_BUTTONMODE_NEVER": "number",
      "INPUT_BUTTONMODE_ONBLUR": "number",
      "INPUT_BUTTONMODE_ONFOCUS": "number",
      "KEYBOARD_APPEARANCE_ALERT": "number",
      "KEYBOARD_APPEARANCE_DEFAULT": "number",
      "KEYBOARD_ASCII": "number",
      "KEYBOARD_DECIMAL_PAD": "number",
      "KEYBOARD_DEFAULT": "number",
      "KEYBOARD_EMAIL": "number",
      "KEYBOARD_NAMEPHONE_PAD": "number",
      "KEYBOARD_NUMBERS_PUNCTUATION": "number",
      "KEYBOARD_NUMBER_PAD": "number",
      "KEYBOARD_PHONE_PAD": "number",
      "KEYBOARD_URL": "number",
      "LANDSCAPE_LEFT": "number",
      "LANDSCAPE_RIGHT": "number",
      "LIST_ACCESSORY_TYPE_CHECKMARK": "number",
      "LIST_ACCESSORY_TYPE_DETAIL": "number",
      "LIST_ACCESSORY_TYPE_DISCLOSURE": "number",
      "LIST_ACCESSORY_TYPE_NONE": "number",
      "LIST_ITEM_TEMPLATE_CONTACTS": "number",
      "LIST_ITEM_TEMPLATE_DEFAULT": "number",
      "LIST_ITEM_TEMPLATE_SETTINGS": "number",
      "LIST_ITEM_TEMPLATE_SUBTITLE": "number",
      "NOTIFICATION_DURATION_LONG": "number",
      "NOTIFICATION_DURATION_SHORT": "number",
      "PICKER_TYPE_COUNT_DOWN_TIMER": "number",
      "PICKER_TYPE_DATE": "number",
      "PICKER_TYPE_DATE_AND_TIME": "number",
      "PICKER_TYPE_PLAIN": "number",
      "PICKER_TYPE_TIME": "number",
      "PORTRAIT": "number",
      "RETURNKEY_DEFAULT": "number",
      "RETURNKEY_DONE": "number",
      "RETURNKEY_EMERGENCY_CALL": "number",
      "RETURNKEY_GO": "number",
      "RETURNKEY_GOOGLE": "number",
      "RETURNKEY_JOIN": "number",
      "RETURNKEY_NEXT": "number",
      "RETURNKEY_ROUTE": "number",
      "RETURNKEY_SEARCH": "number",
      "RETURNKEY_SEND": "number",
      "RETURNKEY_YAHOO": "number",
      "SIZE": "string",
      "TEXT_ALIGNMENT_CENTER": "?",
      "TEXT_ALIGNMENT_LEFT": "?",
      "TEXT_ALIGNMENT_RIGHT": "?",
      "TEXT_AUTOCAPITALIZATION_ALL": "number",
      "TEXT_AUTOCAPITALIZATION_NONE": "number",
      "TEXT_AUTOCAPITALIZATION_SENTENCES": "number",
      "TEXT_AUTOCAPITALIZATION_WORDS": "number",
      "TEXT_STYLE_BODY": "string",
      "TEXT_STYLE_CAPTION1": "string",
      "TEXT_STYLE_CAPTION2": "string",
      "TEXT_STYLE_FOOTNOTE": "string",
      "TEXT_STYLE_HEADLINE": "string",
      "TEXT_STYLE_SUBHEADLINE": "string",
      "TEXT_VERTICAL_ALIGNMENT_BOTTOM": "?",
      "TEXT_VERTICAL_ALIGNMENT_CENTER": "?",
      "TEXT_VERTICAL_ALIGNMENT_TOP": "?",
      "UNIT_CM": "string",
      "UNIT_DIP": "string",
      "UNIT_IN": "string",
      "UNIT_MM": "string",
      "UNIT_PX": "string",
      "UNKNOWN": "number",
      "UPSIDE_PORTRAIT": "number",
      "URL_ERROR_AUTHENTICATION": "number",
      "URL_ERROR_BAD_URL": "number",
      "URL_ERROR_CONNECT": "number",
      "URL_ERROR_FILE": "number",
      "URL_ERROR_FILE_NOT_FOUND": "number",
      "URL_ERROR_HOST_LOOKUP": "number",
      "URL_ERROR_REDIRECT_LOOP": "number",
      "URL_ERROR_SSL_FAILED": "number",
      "URL_ERROR_TIMEOUT": "number",
      "URL_ERROR_UNKNOWN": "number",
      "URL_ERROR_UNSUPPORTED_SCHEME": "number",
      "apiName": "string",
      "backgroundColor": "string",
      "backgroundImage": "string",
      "bubbleParent": "bool",
      "currentTab": "Ti.UI.Tab",
      "currentWindow": "Ti.UI.Window",
      "orientation": "number",
      "addEventListener": "fn(name: string, callback: fn(args: [?]))",
      "applyProperties": "fn(props: ?)",
      "convertUnits": "fn(convertFromValue: string, convertToUnits: number) -> number",
      "create2DMatrix": "fn(parameters?: MatrixCreationDict) -> Ti.UI._2DMatrix",
      "create3DMatrix": "fn(parameters?: ?) -> Ti.UI._3DMatrix",
      "createActivityIndicator": "fn(parameters?: ?) -> Ti.UI.ActivityIndicator",
      "createAlertDialog": "fn(parameters?: ?) -> Ti.UI.AlertDialog",
      "createAnimation": "fn(parameters?: ?) -> Ti.UI.Animation",
      "createButton": "fn(parameters?: ?) -> Ti.UI.Button",
      "createButtonBar": "fn(parameters?: ?) -> Ti.UI.ButtonBar",
      "createCoverFlowView": "fn(parameters?: ?) -> Ti.UI.CoverFlowView",
      "createDashboardItem": "fn(parameters?: ?) -> Ti.UI.DashboardItem",
      "createDashboardView": "fn(parameters?: ?) -> Ti.UI.DashboardView",
      "createEmailDialog": "fn(parameters?: ?) -> Ti.UI.EmailDialog",
      "createImageView": "fn(parameters?: ?) -> Ti.UI.ImageView",
      "createLabel": "fn(parameters?: ?) -> Ti.UI.Label",
      "createListSection": "fn(parameters?: ?) -> Ti.UI.ListSection",
      "createListView": "fn(parameters?: ?) -> Ti.UI.ListView",
      "createMaskedImage": "fn(parameters?: ?) -> Ti.UI.MaskedImage",
      "createNotification": "fn(parameters?: ?) -> Ti.UI.Notification",
      "createOptionDialog": "fn(parameters?: ?) -> Ti.UI.OptionDialog",
      "createPicker": "fn(parameters?: ?) -> Ti.UI.Picker",
      "createPickerColumn": "fn(parameters?: ?) -> Ti.UI.PickerColumn",
      "createPickerRow": "fn(parameters?: ?) -> Ti.UI.PickerRow",
      "createProgressBar": "fn(parameters?: ?) -> Ti.UI.ProgressBar",
      "createRefreshControl": "fn(parameters?: ?) -> Ti.UI.RefreshControl",
      "createSMSDialog": "fn(parameters?: ?) -> Ti.UI.SMSDialog",
      "createScrollView": "fn(parameters?: ?) -> Ti.UI.ScrollView",
      "createScrollableView": "fn(parameters?: ?) -> Ti.UI.ScrollableView",
      "createSearchBar": "fn(parameters?: ?) -> Ti.UI.SearchBar",
      "createSlider": "fn(parameters?: ?) -> Ti.UI.Slider",
      "createSwitch": "fn(parameters?: ?) -> Ti.UI.Switch",
      "createTab": "fn(parameters?: ?) -> Ti.UI.Tab",
      "createTabGroup": "fn(parameters?: ?) -> Ti.UI.TabGroup",
      "createTabbedBar": "fn(parameters?: ?) -> Ti.UI.TabbedBar",
      "createTableView": "fn(parameters?: ?) -> Ti.UI.TableView",
      "createTableViewRow": "fn(parameters?: ?) -> Ti.UI.TableViewRow",
      "createTableViewSection": "fn(parameters?: ?) -> Ti.UI.TableViewSection",
      "createTextArea": "fn(parameters?: ?) -> Ti.UI.TextArea",
      "createTextField": "fn(parameters?: ?) -> Ti.UI.TextField",
      "createToolbar": "fn(parameters?: ?) -> Ti.UI.Toolbar",
      "createView": "fn(parameters?: ?) -> Ti.UI.View",
      "createWebView": "fn(parameters?: ?) -> Ti.UI.WebView",
      "createWindow": "fn(parameters?: ?) -> Ti.UI.Window",
      "fireEvent": "fn(name: string, event: ?)",
      "getApiName": "fn() -> string",
      "getBackgroundColor": "fn() -> string",
      "getBackgroundImage": "fn() -> string",
      "getBubbleParent": "fn() -> bool",
      "getCurrentTab": "fn() -> Ti.UI.Tab",
      "getCurrentWindow": "fn() -> Ti.UI.Window",
      "getOrientation": "fn() -> number",
      "removeEventListener": "fn(name: string, callback: fn(args: [?]))",
      "setBackgroundColor": "fn(backgroundColor: string)",
      "setBackgroundImage": "fn(backgroundImage: string)",
      "setBubbleParent": "fn(bubbleParent: bool)",
      "setCurrentTab": "fn(currentTab: Ti.UI.Tab)",
      "setOrientation": "fn(orientation: number)",
      "iPad": {
        "POPOVER_ARROW_DIRECTION_ANY": "number",
        "POPOVER_ARROW_DIRECTION_DOWN": "number",
        "POPOVER_ARROW_DIRECTION_LEFT": "number",
        "POPOVER_ARROW_DIRECTION_RIGHT": "number",
        "POPOVER_ARROW_DIRECTION_UNKNOWN": "number",
        "POPOVER_ARROW_DIRECTION_UP": "number",
        "apiName": "string",
        "bubbleParent": "bool",
        "addEventListener": "fn(name: string, callback: fn(args: [?]))",
        "applyProperties": "fn(props: ?)",
        "createDocumentViewer": "fn(parameters?: ?) -> Ti.UI.iPad.DocumentViewer",
        "createPopover": "fn(parameters?: ?) -> Ti.UI.iPad.Popover",
        "createSplitWindow": "fn(parameters?: ?) -> Ti.UI.iPad.SplitWindow",
        "fireEvent": "fn(name: string, event: ?)",
        "getApiName": "fn() -> string",
        "getBubbleParent": "fn() -> bool",
        "removeEventListener": "fn(name: string, callback: fn(args: [?]))",
        "setBubbleParent": "fn(bubbleParent: bool)",
        "SplitWindow": {
          "detailView": "Ti.UI.View",
          "masterView": "Ti.UI.View",
          "showMasterInPortrait": "bool",
          "getDetailView": "fn() -> Ti.UI.View",
          "getMasterView": "fn() -> Ti.UI.View",
          "getShowMasterInPortrait": "fn() -> bool",
          "setShowMasterInPortrait": "fn(showMasterInPortrait: bool)"
        },
        "DocumentViewer": {
          "setUrl": "fn(url: string)",
          "show": "fn()"
        },
        "Popover": {
          "arrowDirection": "number",
          "contentView": "Ti.UI.View",
          "height": "?",
          "leftNavButton": "?",
          "passthroughViews": "?",
          "rightNavButton": "?",
          "title": "string",
          "width": "?",
          "add": "fn()",
          "getArrowDirection": "fn() -> number",
          "getContentView": "fn() -> Ti.UI.View",
          "getHeight": "fn() -> ?",
          "getLeftNavButton": "fn() -> ?",
          "getPassthroughViews": "fn() -> ?",
          "getRightNavButton": "fn() -> ?",
          "getTitle": "fn() -> string",
          "getWidth": "fn() -> ?",
          "hide": "fn(options: PopoverParams)",
          "remove": "fn()",
          "setArrowDirection": "fn(arrowDirection: number)",
          "setContentView": "fn(contentView: Ti.UI.View)",
          "setHeight": "fn(height: number)",
          "setLeftNavButton": "fn(leftNavButton: ?)",
          "setPassthroughViews": "fn(passthroughViews: ?)",
          "setRightNavButton": "fn(rightNavButton: ?)",
          "setTitle": "fn(title: string)",
          "setWidth": "fn(width: number)",
          "show": "fn(params: PopoverParams)"
        }
      },
      "iOS": {
        "AD_SIZE_LANDSCAPE": "string",
        "AD_SIZE_PORTRAIT": "string",
        "ANIMATION_CURVE_EASE_IN": "number",
        "ANIMATION_CURVE_EASE_IN_OUT": "number",
        "ANIMATION_CURVE_EASE_OUT": "number",
        "ANIMATION_CURVE_LINEAR": "number",
        "ATTRIBUTE_BACKGROUND_COLOR": "number",
        "ATTRIBUTE_BASELINE_OFFSET": "number",
        "ATTRIBUTE_EXPANSION": "number",
        "ATTRIBUTE_FONT": "number",
        "ATTRIBUTE_FOREGROUND_COLOR": "number",
        "ATTRIBUTE_KERN": "number",
        "ATTRIBUTE_LETTERPRESS_STYLE": "number",
        "ATTRIBUTE_LIGATURE": "number",
        "ATTRIBUTE_LINK": "number",
        "ATTRIBUTE_OBLIQUENESS": "number",
        "ATTRIBUTE_SHADOW": "number",
        "ATTRIBUTE_STRIKETHROUGH_COLOR": "number",
        "ATTRIBUTE_STRIKETHROUGH_STYLE": "number",
        "ATTRIBUTE_STROKE_COLOR": "number",
        "ATTRIBUTE_STROKE_WIDTH": "number",
        "ATTRIBUTE_TEXT_EFFECT": "number",
        "ATTRIBUTE_UNDERLINES_STYLE": "number",
        "ATTRIBUTE_UNDERLINE_BY_WORD": "number",
        "ATTRIBUTE_UNDERLINE_COLOR": "number",
        "ATTRIBUTE_UNDERLINE_PATTERN_DASH": "number",
        "ATTRIBUTE_UNDERLINE_PATTERN_DASH_DOT": "number",
        "ATTRIBUTE_UNDERLINE_PATTERN_DASH_DOT_DOT": "number",
        "ATTRIBUTE_UNDERLINE_PATTERN_DOT": "number",
        "ATTRIBUTE_UNDERLINE_PATTERN_SOLID": "number",
        "ATTRIBUTE_UNDERLINE_STYLE_DOUBLE": "number",
        "ATTRIBUTE_UNDERLINE_STYLE_NONE": "number",
        "ATTRIBUTE_UNDERLINE_STYLE_SINGLE": "number",
        "ATTRIBUTE_UNDERLINE_STYLE_THICK": "number",
        "ATTRIBUTE_WRITING_DIRECTION": "number",
        "ATTRIBUTE_WRITING_DIRECTION_EMBEDDING": "number",
        "ATTRIBUTE_WRITING_DIRECTION_LEFT_TO_RIGHT": "number",
        "ATTRIBUTE_WRITING_DIRECTION_NATURAL": "number",
        "ATTRIBUTE_WRITING_DIRECTION_OVERRIDE": "number",
        "ATTRIBUTE_WRITING_DIRECTION_RIGHT_TO_LEFT": "number",
        "AUTODETECT_ADDRESS": "number",
        "AUTODETECT_ALL": "number",
        "AUTODETECT_CALENDAR": "number",
        "AUTODETECT_LINK": "number",
        "AUTODETECT_NONE": "number",
        "AUTODETECT_PHONE": "number",
        "BLEND_MODE_CLEAR": "number",
        "BLEND_MODE_COLOR": "number",
        "BLEND_MODE_COLOR_BURN": "number",
        "BLEND_MODE_COLOR_DODGE": "number",
        "BLEND_MODE_COPY": "number",
        "BLEND_MODE_DARKEN": "number",
        "BLEND_MODE_DESTINATION_ATOP": "number",
        "BLEND_MODE_DESTINATION_IN": "number",
        "BLEND_MODE_DESTINATION_OUT": "number",
        "BLEND_MODE_DESTINATION_OVER": "number",
        "BLEND_MODE_DIFFERENCE": "number",
        "BLEND_MODE_EXCLUSION": "number",
        "BLEND_MODE_HARD_LIGHT": "number",
        "BLEND_MODE_HUE": "number",
        "BLEND_MODE_LIGHTEN": "number",
        "BLEND_MODE_LUMINOSITY": "number",
        "BLEND_MODE_MULTIPLY": "number",
        "BLEND_MODE_NORMAL": "number",
        "BLEND_MODE_OVERLAY": "number",
        "BLEND_MODE_PLUS_DARKER": "number",
        "BLEND_MODE_PLUS_LIGHTER": "number",
        "BLEND_MODE_SATURATION": "number",
        "BLEND_MODE_SCREEN": "number",
        "BLEND_MODE_SOFT_LIGHT": "number",
        "BLEND_MODE_SOURCE_ATOP": "number",
        "BLEND_MODE_SOURCE_IN": "number",
        "BLEND_MODE_SOURCE_OUT": "number",
        "BLEND_MODE_XOR": "number",
        "CLIP_MODE_DEFAULT": "number",
        "CLIP_MODE_DISABLED": "number",
        "CLIP_MODE_ENABLED": "number",
        "COLLISION_MODE_ALL": "number",
        "COLLISION_MODE_BOUNDARY": "number",
        "COLLISION_MODE_ITEM": "number",
        "COLOR_GROUP_TABLEVIEW_BACKGROUND": "string",
        "COLOR_SCROLLVIEW_BACKGROUND": "string",
        "COLOR_UNDER_PAGE_BACKGROUND": "string",
        "COLOR_VIEW_FLIPSIDE_BACKGROUND": "string",
        "PUSH_MODE_CONTINUOUS": "number",
        "PUSH_MODE_INSTANTANEOUS": "number",
        "SCROLL_DECELERATION_RATE_FAST": "number",
        "SCROLL_DECELERATION_RATE_NORMAL": "number",
        "WEBVIEW_NAVIGATIONTYPE_BACK_FORWARD": "number",
        "WEBVIEW_NAVIGATIONTYPE_FORM_RESUBMITTED": "number",
        "WEBVIEW_NAVIGATIONTYPE_FORM_SUBMITTED": "number",
        "WEBVIEW_NAVIGATIONTYPE_LINK_CLICKED": "number",
        "WEBVIEW_NAVIGATIONTYPE_OTHER": "number",
        "WEBVIEW_NAVIGATIONTYPE_RELOAD": "number",
        "apiName": "string",
        "bubbleParent": "bool",
        "addEventListener": "fn(name: string, callback: fn(args: [?]))",
        "applyProperties": "fn(props: ?)",
        "create3DMatrix": "fn(parameters?: ?) -> Ti.UI.iOS._3DMatrix",
        "createAdView": "fn(parameters?: ?) -> Ti.UI.iOS.AdView",
        "createAnchorAttachmentBehavior": "fn(parameters?: ?) -> Ti.UI.iOS.AnchorAttachmentBehavior",
        "createAnimator": "fn(parameters?: ?) -> Ti.UI.iOS.Animator",
        "createAttributedString": "fn(parameters?: ?) -> Ti.UI.iOS.AttributedString",
        "createCollisionBehavior": "fn(parameters?: ?) -> Ti.UI.iOS.CollisionBehavior",
        "createCoverFlowView": "fn(parameters?: ?) -> Ti.UI.iOS.CoverFlowView",
        "createDocumentViewer": "fn(parameters?: ?) -> Ti.UI.iOS.DocumentViewer",
        "createDynamicItemBehavior": "fn(parameters?: ?) -> Ti.UI.iOS.DynamicItemBehavior",
        "createGravityBehavior": "fn(parameters?: ?) -> Ti.UI.iOS.GravityBehavior",
        "createNavigationWindow": "fn(parameters?: ?) -> Ti.UI.iOS.NavigationWindow",
        "createPushBehavior": "fn(parameters?: ?) -> Ti.UI.iOS.PushBehavior",
        "createSnapBehavior": "fn(parameters?: ?) -> Ti.UI.iOS.SnapBehavior",
        "createTabbedBar": "fn(parameters?: ?) -> Ti.UI.iOS.TabbedBar",
        "createToolbar": "fn(parameters?: ?) -> Ti.UI.iOS.Toolbar",
        "createTransitionAnimation": "fn(transition: transitionAnimationParam) -> Ti.Proxy",
        "createViewAttachmentBehavior": "fn(parameters?: ?) -> Ti.UI.iOS.ViewAttachmentBehavior",
        "fireEvent": "fn(name: string, event: ?)",
        "getApiName": "fn() -> string",
        "getBubbleParent": "fn() -> bool",
        "removeEventListener": "fn(name: string, callback: fn(args: [?]))",
        "setBubbleParent": "fn(bubbleParent: bool)",
        "Animator": {
          "behaviors": "?",
          "referenceView": "Ti.UI.View",
          "running": "bool",
          "addBehavior": "fn(behavior: Ti.Proxy)",
          "getBehaviors": "fn() -> ?",
          "getReferenceView": "fn() -> Ti.UI.View",
          "getRunning": "fn() -> bool",
          "removeAllBehaviors": "fn()",
          "removeBehavior": "fn(behavior: Ti.Proxy)",
          "setBehaviors": "fn(behaviors: ?)",
          "setReferenceView": "fn(referenceView: Ti.UI.View)",
          "startAnimator": "fn()",
          "stopAnimator": "fn()",
          "updateItemUsingCurrentState": "fn(item: Ti.UI.View)"
        },
        "DynamicItemBehavior": {
          "allowsRotation": "bool",
          "angularResistance": "number",
          "density": "number",
          "elasticity": "number",
          "friction": "number",
          "items": "?",
          "resistance": "number",
          "addAngularVelocityForItem": "fn(item: Ti.UI.View, velocity: number)",
          "addItem": "fn(item: Ti.UI.View)",
          "addLinearVelocityForItem": "fn(item: Ti.UI.View, velocity: Point)",
          "angularVelocityForItem": "fn(item: Ti.UI.View) -> number",
          "getAllowsRotation": "fn() -> bool",
          "getAngularResistance": "fn() -> number",
          "getDensity": "fn() -> number",
          "getElasticity": "fn() -> number",
          "getFriction": "fn() -> number",
          "getItems": "fn() -> ?",
          "getResistance": "fn() -> number",
          "linearVelocityForItem": "fn(item: Ti.UI.View) -> Point",
          "removeItem": "fn(item: Ti.UI.View)",
          "setAllowsRotation": "fn(allowsRotation: bool)",
          "setAngularResistance": "fn(angularResistance: number)",
          "setDensity": "fn(density: number)",
          "setElasticity": "fn(elasticity: number)",
          "setFriction": "fn(friction: number)",
          "setResistance": "fn(resistance: number)"
        },
        "SnapBehavior": {
          "damping": "number",
          "item": "Ti.UI.View",
          "snapPoint": "Point",
          "getDamping": "fn() -> number",
          "getItem": "fn() -> Ti.UI.View",
          "getSnapPoint": "fn() -> Point",
          "setDamping": "fn(damping: number)",
          "setItem": "fn(item: Ti.UI.View)",
          "setSnapPoint": "fn(snapPoint: Point)"
        },
        "GravityBehavior": {
          "angle": "number",
          "gravityDirection": "Point",
          "items": "?",
          "magnitude": "number",
          "addItem": "fn(item: Ti.UI.View)",
          "getAngle": "fn() -> number",
          "getGravityDirection": "fn() -> Point",
          "getItems": "fn() -> ?",
          "getMagnitude": "fn() -> number",
          "removeItem": "fn(item: Ti.UI.View)",
          "setAngle": "fn(angle: number)",
          "setGravityDirection": "fn(gravityDirection: Point)",
          "setMagnitude": "fn(magnitude: number)"
        },
        "CollisionBehavior": {
          "boundaryIdentifiers": "?",
          "collisionMode": "number",
          "items": "?",
          "referenceInsets": "ReferenceInsets",
          "treatReferenceAsBoundary": "bool",
          "addBoundary": "fn(boundary: BoundaryIdentifier)",
          "addItem": "fn(item: Ti.UI.View)",
          "getBoundaryIdentifiers": "fn() -> ?",
          "getCollisionMode": "fn() -> number",
          "getItems": "fn() -> ?",
          "getReferenceInsets": "fn() -> ReferenceInsets",
          "getTreatReferenceAsBoundary": "fn() -> bool",
          "removeAllBoundaries": "fn()",
          "removeBoundary": "fn(boundary: BoundaryIdentifier)",
          "removeItem": "fn(item: Ti.UI.View)",
          "setCollisionMode": "fn(collisionMode: number)",
          "setReferenceInsets": "fn(referenceInsets: ReferenceInsets)",
          "setTreatReferenceAsBoundary": "fn(treatReferenceAsBoundary: bool)"
        },
        "Toolbar": {
          "barColor": "string",
          "borderBottom": "bool",
          "borderTop": "bool",
          "extendBackground": "bool",
          "items": "?",
          "translucent": "bool",
          "getBarColor": "fn() -> string",
          "getBorderBottom": "fn() -> bool",
          "getBorderTop": "fn() -> bool",
          "getExtendBackground": "fn() -> bool",
          "getItems": "fn() -> ?",
          "getTranslucent": "fn() -> bool",
          "setBarColor": "fn(barColor: string)",
          "setBorderBottom": "fn(borderBottom: bool)",
          "setBorderTop": "fn(borderTop: bool)",
          "setItems": "fn(items: ?)",
          "setTranslucent": "fn(translucent: bool)"
        },
        "ViewAttachmentBehavior": {
          "anchorItem": "Ti.UI.View",
          "anchorOffset": "Point",
          "damping": "number",
          "distance": "number",
          "frequency": "number",
          "item": "Ti.UI.View",
          "itemOffset": "Point",
          "getAnchorItem": "fn() -> Ti.UI.View",
          "getAnchorOffset": "fn() -> Point",
          "getDamping": "fn() -> number",
          "getDistance": "fn() -> number",
          "getFrequency": "fn() -> number",
          "getItem": "fn() -> Ti.UI.View",
          "getItemOffset": "fn() -> Point",
          "setAnchorItem": "fn(anchorItem: Ti.UI.View)",
          "setAnchorOffset": "fn(anchorOffset: Point)",
          "setDamping": "fn(damping: number)",
          "setDistance": "fn(distance: number)",
          "setFrequency": "fn(frequency: number)",
          "setItem": "fn(item: Ti.UI.View)",
          "setItemOffset": "fn(itemOffset: Point)"
        },
        "PushBehavior": {
          "active": "bool",
          "angle": "number",
          "items": "?",
          "magnitude": "number",
          "pushDirection": "Point",
          "pushMode": "number",
          "addItem": "fn(item: Ti.UI.View)",
          "getActive": "fn() -> bool",
          "getAngle": "fn() -> number",
          "getItems": "fn() -> ?",
          "getMagnitude": "fn() -> number",
          "getPushDirection": "fn() -> Point",
          "getPushMode": "fn() -> number",
          "removeItem": "fn(item: Ti.UI.View)",
          "setActive": "fn(active: bool)",
          "setAngle": "fn(angle: number)",
          "setMagnitude": "fn(magnitude: number)",
          "setPushDirection": "fn(pushDirection: Point)",
          "setPushMode": "fn(pushMode: number)"
        },
        "CoverFlowView": {
          "images": "?",
          "selected": "number",
          "getImages": "fn() -> ?",
          "getSelected": "fn() -> number",
          "setImage": "fn(index: number, image: string)",
          "setImages": "fn(images: ?)",
          "setSelected": "fn(selected: number)"
        },
        "DocumentViewer": {
          "name": "string",
          "url": "string",
          "getName": "fn() -> string",
          "getUrl": "fn() -> string",
          "hide": "fn(options?: DocumentViewerOptions)",
          "setUrl": "fn(url: string)",
          "show": "fn(options?: DocumentViewerOptions)"
        },
        "NavigationWindow": {
          "window": "Ti.UI.Window",
          "closeWindow": "fn(window: Ti.UI.Window, options: ?)",
          "getWindow": "fn() -> Ti.UI.Window",
          "openWindow": "fn(window: Ti.UI.Window, options: ?)"
        },
        "AttributedString": {
          "attributes": "?",
          "text": "string",
          "addAttribute": "fn(attribute: Attribute)",
          "getAttributes": "fn() -> ?",
          "getText": "fn() -> string",
          "setAttributes": "fn(attributes: ?)",
          "setText": "fn(text: string)"
        },
        "AnchorAttachmentBehavior": {
          "anchor": "Point",
          "damping": "number",
          "distance": "number",
          "frequency": "number",
          "item": "Ti.UI.View",
          "offset": "Point",
          "getAnchor": "fn() -> Point",
          "getDamping": "fn() -> number",
          "getDistance": "fn() -> number",
          "getFrequency": "fn() -> number",
          "getItem": "fn() -> Ti.UI.View",
          "getOffset": "fn() -> Point",
          "setAnchor": "fn(anchor: Point)",
          "setDamping": "fn(damping: number)",
          "setDistance": "fn(distance: number)",
          "setFrequency": "fn(frequency: number)",
          "setItem": "fn(item: Ti.UI.View)",
          "setOffset": "fn(offset: Point)"
        },
        "TabbedBar": {
          "index": "number",
          "labels": "?",
          "style": "number",
          "getIndex": "fn() -> number",
          "getLabels": "fn() -> ?",
          "getStyle": "fn() -> number",
          "setIndex": "fn(index: number)",
          "setLabels": "fn(labels: ?)",
          "setStyle": "fn(style: number)"
        },
        "_3DMatrix": {
          "m11": "number",
          "m12": "number",
          "m13": "number",
          "m14": "number",
          "m21": "number",
          "m22": "number",
          "m23": "number",
          "m24": "number",
          "m31": "number",
          "m32": "number",
          "m33": "number",
          "m34": "number",
          "m41": "number",
          "m42": "number",
          "m43": "number",
          "m44": "number",
          "getM11": "fn() -> number",
          "getM12": "fn() -> number",
          "getM13": "fn() -> number",
          "getM14": "fn() -> number",
          "getM21": "fn() -> number",
          "getM22": "fn() -> number",
          "getM23": "fn() -> number",
          "getM24": "fn() -> number",
          "getM31": "fn() -> number",
          "getM32": "fn() -> number",
          "getM33": "fn() -> number",
          "getM34": "fn() -> number",
          "getM41": "fn() -> number",
          "getM42": "fn() -> number",
          "getM43": "fn() -> number",
          "getM44": "fn() -> number",
          "invert": "fn() -> Ti.UI._3DMatrix",
          "multiply": "fn(t2: Ti.UI._3DMatrix) -> Ti.UI._3DMatrix",
          "rotate": "fn(angle: number, x: number, y: number, z: number) -> Ti.UI._3DMatrix",
          "scale": "fn(sx: number, sy: number, sz: number) -> Ti.UI._3DMatrix",
          "setM11": "fn(m11: number)",
          "setM12": "fn(m12: number)",
          "setM13": "fn(m13: number)",
          "setM14": "fn(m14: number)",
          "setM21": "fn(m21: number)",
          "setM22": "fn(m22: number)",
          "setM23": "fn(m23: number)",
          "setM24": "fn(m24: number)",
          "setM31": "fn(m31: number)",
          "setM32": "fn(m32: number)",
          "setM33": "fn(m33: number)",
          "setM34": "fn(m34: number)",
          "setM41": "fn(m41: number)",
          "setM42": "fn(m42: number)",
          "setM43": "fn(m43: number)",
          "setM44": "fn(m44: number)",
          "translate": "fn(tx: number, ty: number, tz: number) -> Ti.UI._3DMatrix"
        },
        "AdView": {
          "adSize": "string",
          "cancelAction": "fn()",
          "getAdSize": "fn() -> string",
          "setAdSize": "fn(adSize: string)"
        }
      },
      "iPhone": {
        "MODAL_PRESENTATION_CURRENT_CONTEXT": "number",
        "MODAL_PRESENTATION_FORMSHEET": "number",
        "MODAL_PRESENTATION_FULLSCREEN": "number",
        "MODAL_PRESENTATION_PAGESHEET": "number",
        "MODAL_TRANSITION_STYLE_COVER_VERTICAL": "number",
        "MODAL_TRANSITION_STYLE_CROSS_DISSOLVE": "number",
        "MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL": "number",
        "MODAL_TRANSITION_STYLE_PARTIAL_CURL": "number",
        "apiName": "string",
        "appBadge": "number",
        "appSupportsShakeToEdit": "bool",
        "bubbleParent": "bool",
        "statusBarHidden": "bool",
        "statusBarStyle": "number",
        "addEventListener": "fn(name: string, callback: fn(args: [?]))",
        "applyProperties": "fn(props: ?)",
        "createNavigationGroup": "fn(parameters?: ?) -> Ti.UI.iPhone.NavigationGroup",
        "fireEvent": "fn(name: string, event: ?)",
        "getApiName": "fn() -> string",
        "getAppBadge": "fn() -> number",
        "getAppSupportsShakeToEdit": "fn() -> bool",
        "getBubbleParent": "fn() -> bool",
        "getStatusBarHidden": "fn() -> bool",
        "getStatusBarStyle": "fn() -> number",
        "hideStatusBar": "fn(params?: hideStatusBarParams)",
        "removeEventListener": "fn(name: string, callback: fn(args: [?]))",
        "setAppBadge": "fn(appBadge: number)",
        "setAppSupportsShakeToEdit": "fn(appSupportsShakeToEdit: bool)",
        "setBubbleParent": "fn(bubbleParent: bool)",
        "showStatusBar": "fn(params?: showStatusBarParams)",
        "ScrollIndicatorStyle": "number",
        "SystemButtonStyle": "number",
        "ListViewStyle": "number",
        "StatusBar": "number",
        "SystemButton": "number",
        "TableViewStyle": "number",
        "SystemIcon": "number",
        "ActivityIndicatorStyle": "number",
        "ProgressBarStyle": "number",
        "ListViewSeparatorStyle": "number",
        "RowAnimationStyle": "number",
        "AnimationStyle": "number",
        "NavigationGroup": {
          "window": "Ti.UI.Window",
          "close": "fn(window: Ti.UI.Window, options: ?)",
          "getWindow": "fn() -> Ti.UI.Window",
          "open": "fn(window: Ti.UI.Window, options: ?)"
        },
        "TableViewScrollPosition": "number",
        "AlertDialogStyle": "number",
        "ListViewScrollPosition": "number",
        "TableViewCellSelectionStyle": "number",
        "ListViewCellSelectionStyle": "number",
        "TableViewSeparatorStyle": "number"
      },
      "TextArea": {
        "appearance": "number",
        "attributedString": "Ti.UI.iOS.AttributedString",
        "autoLink": "number",
        "autocapitalization": "number",
        "autocorrect": "bool",
        "clearOnEdit": "bool",
        "color": "string",
        "editable": "bool",
        "ellipsize": "bool",
        "enableReturnKey": "bool",
        "font": "Font",
        "handleLinks": "bool",
        "hintText": "string",
        "keyboardToolbar": "?",
        "keyboardToolbarColor": "string",
        "keyboardToolbarHeight": "number",
        "keyboardType": "number",
        "maxLength": "number",
        "returnKeyType": "number",
        "scrollable": "bool",
        "scrollsToTop": "bool",
        "selection": "textAreaSelectedParams",
        "suppressReturn": "bool",
        "textAlign": "?",
        "value": "string",
        "verticalAlign": "?",
        "blur": "fn()",
        "focus": "fn()",
        "getAppearance": "fn() -> number",
        "getAttributedString": "fn() -> Ti.UI.iOS.AttributedString",
        "getAutoLink": "fn() -> number",
        "getAutocapitalization": "fn() -> number",
        "getAutocorrect": "fn() -> bool",
        "getClearOnEdit": "fn() -> bool",
        "getColor": "fn() -> string",
        "getEditable": "fn() -> bool",
        "getEllipsize": "fn() -> bool",
        "getEnableReturnKey": "fn() -> bool",
        "getFont": "fn() -> Font",
        "getHandleLinks": "fn() -> bool",
        "getHintText": "fn() -> string",
        "getKeyboardToolbar": "fn() -> ?",
        "getKeyboardToolbarColor": "fn() -> string",
        "getKeyboardToolbarHeight": "fn() -> number",
        "getKeyboardType": "fn() -> number",
        "getMaxLength": "fn() -> number",
        "getReturnKeyType": "fn() -> number",
        "getScrollable": "fn() -> bool",
        "getScrollsToTop": "fn() -> bool",
        "getSelection": "fn() -> textAreaSelectedParams",
        "getSuppressReturn": "fn() -> bool",
        "getTextAlign": "fn() -> ?",
        "getValue": "fn() -> string",
        "getVerticalAlign": "fn() -> ?",
        "hasText": "fn() -> bool",
        "setAppearance": "fn(appearance: number)",
        "setAttributedString": "fn(attributedString: Ti.UI.iOS.AttributedString)",
        "setAutoLink": "fn(autoLink: number)",
        "setAutocapitalization": "fn(autocapitalization: number)",
        "setAutocorrect": "fn(autocorrect: bool)",
        "setClearOnEdit": "fn(clearOnEdit: bool)",
        "setColor": "fn(color: string)",
        "setEditable": "fn(editable: bool)",
        "setEllipsize": "fn(ellipsize: bool)",
        "setEnableReturnKey": "fn(enableReturnKey: bool)",
        "setFont": "fn(font: Font)",
        "setHandleLinks": "fn(handleLinks: bool)",
        "setHintText": "fn(hintText: string)",
        "setKeyboardToolbar": "fn(keyboardToolbar: ?)",
        "setKeyboardToolbarColor": "fn(keyboardToolbarColor: string)",
        "setKeyboardToolbarHeight": "fn(keyboardToolbarHeight: number)",
        "setKeyboardType": "fn(keyboardType: number)",
        "setMaxLength": "fn(maxLength: number)",
        "setReturnKeyType": "fn(returnKeyType: number)",
        "setScrollable": "fn(scrollable: bool)",
        "setScrollsToTop": "fn(scrollsToTop: bool)",
        "setSelection": "fn(start: number, end: number)",
        "setSuppressReturn": "fn(suppressReturn: bool)",
        "setTextAlign": "fn(textAlign: string)",
        "setValue": "fn(value: string)",
        "setVerticalAlign": "fn(verticalAlign: number)"
      },
      "View": {
        "accessibilityHidden": "bool",
        "accessibilityHint": "string",
        "accessibilityLabel": "string",
        "accessibilityValue": "string",
        "anchorPoint": "Point",
        "animatedCenter": "Point",
        "backgroundColor": "string",
        "backgroundDisabledColor": "string",
        "backgroundDisabledImage": "string",
        "backgroundFocusedColor": "string",
        "backgroundFocusedImage": "string",
        "backgroundGradient": "Gradient",
        "backgroundImage": "string",
        "backgroundLeftCap": "number",
        "backgroundRepeat": "bool",
        "backgroundSelectedColor": "string",
        "backgroundSelectedImage": "string",
        "backgroundTopCap": "number",
        "borderColor": "string",
        "borderRadius": "number",
        "borderWidth": "number",
        "bottom": "?",
        "center": "Point",
        "children": "?",
        "clipMode": "number",
        "enabled": "bool",
        "focusable": "bool",
        "height": "?",
        "horizontalWrap": "bool",
        "keepScreenOn": "bool",
        "layout": "string",
        "left": "?",
        "opacity": "number",
        "overrideCurrentAnimation": "bool",
        "pullBackgroundColor": "string",
        "rect": "Dimension",
        "right": "?",
        "size": "Dimension",
        "softKeyboardOnFocus": "number",
        "tintColor": "?",
        "top": "?",
        "touchEnabled": "bool",
        "transform": "?",
        "viewShadowColor": "string",
        "viewShadowOffset": "Point",
        "viewShadowRadius": "number",
        "visible": "bool",
        "width": "?",
        "zIndex": "number",
        "add": "fn(view: Ti.UI.View)",
        "animate": "fn(animation: Ti.UI.Animation, callback: fn(args: [?]))",
        "convertPointToView": "fn(point: Point, destinationView: Ti.UI.View) -> Point",
        "finishLayout": "fn()",
        "getAccessibilityHidden": "fn() -> bool",
        "getAccessibilityHint": "fn() -> string",
        "getAccessibilityLabel": "fn() -> string",
        "getAccessibilityValue": "fn() -> string",
        "getAnchorPoint": "fn() -> Point",
        "getAnimatedCenter": "fn() -> Point",
        "getBackgroundColor": "fn() -> string",
        "getBackgroundDisabledColor": "fn() -> string",
        "getBackgroundDisabledImage": "fn() -> string",
        "getBackgroundFocusedColor": "fn() -> string",
        "getBackgroundFocusedImage": "fn() -> string",
        "getBackgroundGradient": "fn() -> Gradient",
        "getBackgroundImage": "fn() -> string",
        "getBackgroundLeftCap": "fn() -> number",
        "getBackgroundRepeat": "fn() -> bool",
        "getBackgroundSelectedColor": "fn() -> string",
        "getBackgroundSelectedImage": "fn() -> string",
        "getBackgroundTopCap": "fn() -> number",
        "getBorderColor": "fn() -> string",
        "getBorderRadius": "fn() -> number",
        "getBorderWidth": "fn() -> number",
        "getBottom": "fn() -> ?",
        "getCenter": "fn() -> Point",
        "getChildren": "fn() -> ?",
        "getClipMode": "fn() -> number",
        "getEnabled": "fn() -> bool",
        "getFocusable": "fn() -> bool",
        "getHeight": "fn() -> ?",
        "getHorizontalWrap": "fn() -> bool",
        "getKeepScreenOn": "fn() -> bool",
        "getLayout": "fn() -> string",
        "getLeft": "fn() -> ?",
        "getOpacity": "fn() -> number",
        "getOverrideCurrentAnimation": "fn() -> bool",
        "getPullBackgroundColor": "fn() -> string",
        "getRect": "fn() -> Dimension",
        "getRight": "fn() -> ?",
        "getSize": "fn() -> Dimension",
        "getSoftKeyboardOnFocus": "fn() -> number",
        "getTintColor": "fn() -> string",
        "getTop": "fn() -> ?",
        "getTouchEnabled": "fn() -> bool",
        "getTransform": "fn() -> ?",
        "getViewShadowColor": "fn() -> string",
        "getViewShadowOffset": "fn() -> Point",
        "getViewShadowRadius": "fn() -> number",
        "getVisible": "fn() -> bool",
        "getWidth": "fn() -> ?",
        "getZIndex": "fn() -> number",
        "hide": "fn()",
        "remove": "fn(view: Ti.UI.View)",
        "removeAllChildren": "fn()",
        "setAccessibilityHidden": "fn(accessibilityHidden: bool)",
        "setAccessibilityHint": "fn(accessibilityHint: string)",
        "setAccessibilityLabel": "fn(accessibilityLabel: string)",
        "setAccessibilityValue": "fn(accessibilityValue: string)",
        "setAnchorPoint": "fn(anchorPoint: Point)",
        "setBackgroundColor": "fn(backgroundColor: string)",
        "setBackgroundDisabledColor": "fn(backgroundDisabledColor: string)",
        "setBackgroundDisabledImage": "fn(backgroundDisabledImage: string)",
        "setBackgroundFocusedColor": "fn(backgroundFocusedColor: string)",
        "setBackgroundFocusedImage": "fn(backgroundFocusedImage: string)",
        "setBackgroundGradient": "fn(backgroundGradient: Gradient)",
        "setBackgroundImage": "fn(backgroundImage: string)",
        "setBackgroundLeftCap": "fn(backgroundLeftCap: number)",
        "setBackgroundRepeat": "fn(backgroundRepeat: bool)",
        "setBackgroundSelectedColor": "fn(backgroundSelectedColor: string)",
        "setBackgroundSelectedImage": "fn(backgroundSelectedImage: string)",
        "setBackgroundTopCap": "fn(backgroundTopCap: number)",
        "setBorderColor": "fn(borderColor: string)",
        "setBorderRadius": "fn(borderRadius: number)",
        "setBorderWidth": "fn(borderWidth: number)",
        "setBottom": "fn(bottom: number)",
        "setCenter": "fn(center: Point)",
        "setClipMode": "fn(clipMode: number)",
        "setEnabled": "fn(enabled: bool)",
        "setFocusable": "fn(focusable: bool)",
        "setHeight": "fn(height: number)",
        "setHorizontalWrap": "fn(horizontalWrap: bool)",
        "setKeepScreenOn": "fn(keepScreenOn: bool)",
        "setLayout": "fn(layout: string)",
        "setLeft": "fn(left: number)",
        "setOpacity": "fn(opacity: number)",
        "setPullBackgroundColor": "fn(pullBackgroundColor: string)",
        "setRight": "fn(right: number)",
        "setSoftKeyboardOnFocus": "fn(softKeyboardOnFocus: number)",
        "setTintColor": "fn(tintColor: string)",
        "setTop": "fn(top: number)",
        "setTouchEnabled": "fn(touchEnabled: bool)",
        "setTransform": "fn(transform: Ti.UI._2DMatrix)",
        "setViewShadowColor": "fn(viewShadowColor: string)",
        "setViewShadowOffset": "fn(viewShadowOffset: Point)",
        "setViewShadowRadius": "fn(viewShadowRadius: number)",
        "setVisible": "fn(visible: bool)",
        "setWidth": "fn(width: number)",
        "setZIndex": "fn(zIndex: number)",
        "show": "fn()",
        "startLayout": "fn()",
        "toImage": "fn(callback?: fn(args: [?]), honorScaleFactor?: bool) -> Ti.Blob",
        "updateLayout": "fn(params: ?)"
      },
      "ActivityIndicatorStyle": "number",
      "Switch": {
        "color": "string",
        "font": "Font",
        "onTintColor": "string",
        "style": "number",
        "textAlign": "?",
        "thumbTintColor": "string",
        "tintColor": "string",
        "title": "string",
        "titleOff": "string",
        "titleOn": "string",
        "value": "bool",
        "verticalAlign": "?",
        "getColor": "fn() -> string",
        "getFont": "fn() -> Font",
        "getOnTintColor": "fn() -> string",
        "getStyle": "fn() -> number",
        "getTextAlign": "fn() -> ?",
        "getThumbTintColor": "fn() -> string",
        "getTitle": "fn() -> string",
        "getTitleOff": "fn() -> string",
        "getTitleOn": "fn() -> string",
        "getValue": "fn() -> bool",
        "getVerticalAlign": "fn() -> ?",
        "setColor": "fn(color: string)",
        "setFont": "fn(font: Font)",
        "setOnTintColor": "fn(onTintColor: string)",
        "setStyle": "fn(style: number)",
        "setTextAlign": "fn(textAlign: string)",
        "setThumbTintColor": "fn(thumbTintColor: string)",
        "setTitle": "fn(title: string)",
        "setTitleOff": "fn(titleOff: string)",
        "setTitleOn": "fn(titleOn: string)",
        "setValue": "fn(value: bool)",
        "setVerticalAlign": "fn(verticalAlign: number)"
      },
      "DashboardItem": {
        "badge": "number",
        "canDelete": "bool",
        "image": "?",
        "selectedImage": "?",
        "getBadge": "fn() -> number",
        "getCanDelete": "fn() -> bool",
        "getImage": "fn() -> ?",
        "getSelectedImage": "fn() -> ?",
        "setBadge": "fn(badge: number)",
        "setCanDelete": "fn(canDelete: bool)",
        "setImage": "fn(image: string)",
        "setSelectedImage": "fn(selectedImage: string)"
      },
      "Tab": {
        "active": "bool",
        "activeIcon": "string",
        "activeIconIsMask": "?",
        "badge": "string",
        "icon": "string",
        "iconIsmask": "?",
        "title": "string",
        "titleid": "string",
        "window": "Ti.UI.Window",
        "close": "fn(window: Ti.UI.Window, options?: ?)",
        "getActive": "fn() -> bool",
        "getActiveIcon": "fn() -> string",
        "getActiveIconIsMask": "fn() -> bool",
        "getBadge": "fn() -> string",
        "getIcon": "fn() -> string",
        "getIconIsmask": "fn() -> bool",
        "getTitle": "fn() -> string",
        "getTitleid": "fn() -> string",
        "getWindow": "fn() -> Ti.UI.Window",
        "open": "fn(window: Ti.UI.Window, options: ?)",
        "setActive": "fn(active: bool)",
        "setActiveIcon": "fn(activeIcon: string)",
        "setActiveIconIsMask": "fn(activeIconIsMask: bool)",
        "setBadge": "fn(badge: string)",
        "setIcon": "fn(icon: string)",
        "setIconIsmask": "fn(iconIsmask: bool)",
        "setTitle": "fn(title: string)",
        "setTitleid": "fn(titleid: string)",
        "setWindow": "fn(window: Ti.UI.Window)"
      },
      "TableViewRow": {
        "className": "string",
        "color": "string",
        "editable": "bool",
        "font": "Font",
        "hasCheck": "bool",
        "hasChild": "bool",
        "hasDetail": "bool",
        "indentionLevel": "number",
        "leftImage": "string",
        "moveable": "bool",
        "rightImage": "string",
        "selectedBackgroundColor": "string",
        "selectedBackgroundImage": "string",
        "selectedColor": "string",
        "selectionStyle": "number",
        "title": "string",
        "getClassName": "fn() -> string",
        "getColor": "fn() -> string",
        "getEditable": "fn() -> bool",
        "getFont": "fn() -> Font",
        "getHasCheck": "fn() -> bool",
        "getHasChild": "fn() -> bool",
        "getHasDetail": "fn() -> bool",
        "getIndentionLevel": "fn() -> number",
        "getLeftImage": "fn() -> string",
        "getMoveable": "fn() -> bool",
        "getRightImage": "fn() -> string",
        "getSelectedBackgroundColor": "fn() -> string",
        "getSelectedBackgroundImage": "fn() -> string",
        "getSelectedColor": "fn() -> string",
        "getSelectionStyle": "fn() -> number",
        "getTitle": "fn() -> string",
        "setClassName": "fn(className: string)",
        "setColor": "fn(color: string)",
        "setEditable": "fn(editable: bool)",
        "setFont": "fn(font: Font)",
        "setHasCheck": "fn(hasCheck: bool)",
        "setHasChild": "fn(hasChild: bool)",
        "setHasDetail": "fn(hasDetail: bool)",
        "setIndentionLevel": "fn(indentionLevel: number)",
        "setLeftImage": "fn(leftImage: string)",
        "setMoveable": "fn(moveable: bool)",
        "setRightImage": "fn(rightImage: string)",
        "setSelectedBackgroundColor": "fn(selectedBackgroundColor: string)",
        "setSelectedBackgroundImage": "fn(selectedBackgroundImage: string)",
        "setSelectedColor": "fn(selectedColor: string)",
        "setSelectionStyle": "fn(selectionStyle: number)",
        "setTitle": "fn(title: string)"
      },
      "PickerRow": {
        "color": "string",
        "font": "Font",
        "fontSize": "number",
        "title": "string",
        "getColor": "fn() -> string",
        "getFont": "fn() -> Font",
        "getFontSize": "fn() -> number",
        "getTitle": "fn() -> string",
        "setColor": "fn(color: string)",
        "setFont": "fn(font: Font)",
        "setFontSize": "fn(fontSize: number)",
        "setTitle": "fn(title: string)"
      },
      "ButtonBar": {
        "index": "number",
        "labels": "?",
        "style": "number",
        "getIndex": "fn() -> number",
        "getLabels": "fn() -> ?",
        "getStyle": "fn() -> number",
        "setIndex": "fn(index: number)",
        "setLabels": "fn(labels: ?)",
        "setStyle": "fn(style: number)"
      },
      "Slider": {
        "disabledLeftTrackImage": "string",
        "disabledRightTrackImage": "string",
        "disabledThumbImage": "string",
        "highlightedLeftTrackImage": "string",
        "highlightedRightTrackImage": "string",
        "highlightedThumbImage": "string",
        "leftTrackImage": "string",
        "leftTrackLeftCap": "number",
        "leftTrackTopCap": "number",
        "max": "number",
        "maxRange": "number",
        "min": "number",
        "minRange": "number",
        "rightTrackImage": "string",
        "rightTrackLeftCap": "number",
        "rightTrackTopCap": "number",
        "selectedLeftTrackImage": "string",
        "selectedRightTrackImage": "string",
        "selectedThumbImage": "string",
        "thumbImage": "?",
        "value": "string",
        "getDisabledLeftTrackImage": "fn() -> string",
        "getDisabledRightTrackImage": "fn() -> string",
        "getDisabledThumbImage": "fn() -> string",
        "getHighlightedLeftTrackImage": "fn() -> string",
        "getHighlightedRightTrackImage": "fn() -> string",
        "getHighlightedThumbImage": "fn() -> string",
        "getLeftTrackImage": "fn() -> string",
        "getLeftTrackLeftCap": "fn() -> number",
        "getLeftTrackTopCap": "fn() -> number",
        "getMax": "fn() -> number",
        "getMaxRange": "fn() -> number",
        "getMin": "fn() -> number",
        "getMinRange": "fn() -> number",
        "getRightTrackImage": "fn() -> string",
        "getRightTrackLeftCap": "fn() -> number",
        "getRightTrackTopCap": "fn() -> number",
        "getSelectedLeftTrackImage": "fn() -> string",
        "getSelectedRightTrackImage": "fn() -> string",
        "getSelectedThumbImage": "fn() -> string",
        "getThumbImage": "fn() -> ?",
        "getValue": "fn() -> string",
        "setDisabledLeftTrackImage": "fn(disabledLeftTrackImage: string)",
        "setDisabledRightTrackImage": "fn(disabledRightTrackImage: string)",
        "setDisabledThumbImage": "fn(disabledThumbImage: string)",
        "setHighlightedLeftTrackImage": "fn(highlightedLeftTrackImage: string)",
        "setHighlightedRightTrackImage": "fn(highlightedRightTrackImage: string)",
        "setHighlightedThumbImage": "fn(highlightedThumbImage: string)",
        "setLeftTrackImage": "fn(leftTrackImage: string)",
        "setLeftTrackLeftCap": "fn(leftTrackLeftCap: number)",
        "setLeftTrackTopCap": "fn(leftTrackTopCap: number)",
        "setMax": "fn(max: number)",
        "setMaxRange": "fn(maxRange: number)",
        "setMin": "fn(min: number)",
        "setMinRange": "fn(minRange: number)",
        "setRightTrackImage": "fn(rightTrackImage: string)",
        "setRightTrackLeftCap": "fn(rightTrackLeftCap: number)",
        "setRightTrackTopCap": "fn(rightTrackTopCap: number)",
        "setSelectedLeftTrackImage": "fn(selectedLeftTrackImage: string)",
        "setSelectedRightTrackImage": "fn(selectedRightTrackImage: string)",
        "setSelectedThumbImage": "fn(selectedThumbImage: string)",
        "setThumbImage": "fn(thumbImage: string)",
        "setValue": "fn(value: number, options?: ?)"
      },
      "Android": {
        "LINKIFY_ALL": "number",
        "LINKIFY_EMAIL_ADDRESSES": "number",
        "LINKIFY_MAP_ADDRESSES": "number",
        "LINKIFY_PHONE_NUMBERS": "number",
        "LINKIFY_WEB_URLS": "number",
        "OVER_SCROLL_ALWAYS": "number",
        "OVER_SCROLL_IF_CONTENT_SCROLLS": "number",
        "OVER_SCROLL_NEVER": "number",
        "PIXEL_FORMAT_A_8": "number",
        "PIXEL_FORMAT_LA_88": "number",
        "PIXEL_FORMAT_L_8": "number",
        "PIXEL_FORMAT_OPAQUE": "number",
        "PIXEL_FORMAT_RGBA_4444": "number",
        "PIXEL_FORMAT_RGBA_5551": "number",
        "PIXEL_FORMAT_RGBA_8888": "number",
        "PIXEL_FORMAT_RGBX_8888": "number",
        "PIXEL_FORMAT_RGB_332": "number",
        "PIXEL_FORMAT_RGB_565": "number",
        "PIXEL_FORMAT_RGB_888": "number",
        "PIXEL_FORMAT_TRANSLUCENT": "number",
        "PIXEL_FORMAT_TRANSPARENT": "number",
        "PIXEL_FORMAT_UNKNOWN": "number",
        "PROGRESS_INDICATOR_DETERMINANT": "number",
        "PROGRESS_INDICATOR_DIALOG": "number",
        "PROGRESS_INDICATOR_INDETERMINANT": "number",
        "PROGRESS_INDICATOR_STATUS_BAR": "number",
        "SOFT_INPUT_ADJUST_PAN": "number",
        "SOFT_INPUT_ADJUST_RESIZE": "number",
        "SOFT_INPUT_ADJUST_UNSPECIFIED": "number",
        "SOFT_INPUT_STATE_ALWAYS_HIDDEN": "number",
        "SOFT_INPUT_STATE_ALWAYS_VISIBLE": "number",
        "SOFT_INPUT_STATE_HIDDEN": "number",
        "SOFT_INPUT_STATE_UNSPECIFIED": "number",
        "SOFT_INPUT_STATE_VISIBLE": "number",
        "SOFT_KEYBOARD_DEFAULT_ON_FOCUS": "number",
        "SOFT_KEYBOARD_HIDE_ON_FOCUS": "number",
        "SOFT_KEYBOARD_SHOW_ON_FOCUS": "number",
        "SWITCH_STYLE_CHECKBOX": "number",
        "SWITCH_STYLE_TOGGLEBUTTON": "number",
        "WEBVIEW_LOAD_CACHE_ELSE_NETWORK": "number",
        "WEBVIEW_LOAD_CACHE_ONLY": "number",
        "WEBVIEW_LOAD_DEFAULT": "number",
        "WEBVIEW_LOAD_NO_CACHE": "number",
        "WEBVIEW_PLUGINS_OFF": "number",
        "WEBVIEW_PLUGINS_ON": "number",
        "WEBVIEW_PLUGINS_ON_DEMAND": "number",
        "apiName": "string",
        "bubbleParent": "bool",
        "addEventListener": "fn(name: string, callback: fn(args: [?]))",
        "applyProperties": "fn(props: ?)",
        "createProgressIndicator": "fn(parameters?: ?) -> Ti.UI.Android.ProgressIndicator",
        "createSearchView": "fn(parameters?: ?) -> Ti.UI.Android.SearchView",
        "fireEvent": "fn(name: string, event: ?)",
        "getApiName": "fn() -> string",
        "getBubbleParent": "fn() -> bool",
        "hideSoftKeyboard": "fn()",
        "openPreferences": "fn()",
        "removeEventListener": "fn(name: string, callback: fn(args: [?]))",
        "setBubbleParent": "fn(bubbleParent: bool)",
        "SearchView": {
          "hintText": "string",
          "iconified": "bool",
          "iconifiedByDefault": "bool",
          "submitEnabled": "bool",
          "value": "string",
          "blur": "fn()",
          "focus": "fn()",
          "getHintText": "fn() -> string",
          "getIconified": "fn() -> bool",
          "getIconifiedByDefault": "fn() -> bool",
          "getSubmitEnabled": "fn() -> bool",
          "getValue": "fn() -> string",
          "setHintText": "fn(hintText: string)",
          "setIconified": "fn(iconified: bool)",
          "setIconifiedByDefault": "fn(iconifiedByDefault: bool)",
          "setSubmitEnabled": "fn(submitEnabled: bool)",
          "setValue": "fn(value: string)"
        },
        "ProgressIndicator": {
          "cancelable": "bool",
          "location": "number",
          "max": "number",
          "message": "string",
          "messageid": "string",
          "min": "number",
          "type": "number",
          "getCancelable": "fn() -> bool",
          "getLocation": "fn() -> number",
          "getMax": "fn() -> number",
          "getMessage": "fn() -> string",
          "getMessageid": "fn() -> string",
          "getMin": "fn() -> number",
          "getType": "fn() -> number",
          "hide": "fn()",
          "setCancelable": "fn(cancelable: bool)",
          "setLocation": "fn(location: number)",
          "setMax": "fn(max: number)",
          "setMessage": "fn(message: string)",
          "setMessageid": "fn(messageid: string)",
          "setMin": "fn(min: number)",
          "setType": "fn(type: number)",
          "show": "fn()"
        }
      },
      "DashboardView": {
        "columnCount": "number",
        "data": "?",
        "editable": "bool",
        "rowCount": "number",
        "wobble": "bool",
        "getColumnCount": "fn() -> number",
        "getData": "fn() -> ?",
        "getEditable": "fn() -> bool",
        "getRowCount": "fn() -> number",
        "getWobble": "fn() -> bool",
        "setData": "fn(data: ?)",
        "setEditable": "fn(editable: bool)",
        "setWobble": "fn(wobble: bool)",
        "startEditing": "fn()",
        "stopEditing": "fn()"
      },
      "ListItem": {
        "accessoryType": "number",
        "backgroundColor": "string",
        "backgroundGradient": "Gradient",
        "backgroundImage": "string",
        "canEdit": "bool",
        "canMove": "bool",
        "color": "string",
        "font": "Font",
        "height": "?",
        "image": "string",
        "itemId": "string",
        "searchableText": "string",
        "selectedBackgroundColor": "string",
        "selectedBackgroundGradient": "Gradient",
        "selectedBackgroundImage": "string",
        "selectionStyle": "number",
        "subtitle": "string",
        "title": "string"
      },
      "AlertDialog": {
        "androidView": "Ti.UI.View",
        "buttonNames": "?",
        "cancel": "number",
        "message": "string",
        "messageid": "string",
        "ok": "string",
        "okid": "string",
        "persistent": "bool",
        "style": "number",
        "title": "string",
        "titleid": "string",
        "getAndroidView": "fn() -> Ti.UI.View",
        "getButtonNames": "fn() -> ?",
        "getCancel": "fn() -> number",
        "getMessage": "fn() -> string",
        "getOk": "fn() -> string",
        "getPersistent": "fn() -> bool",
        "getStyle": "fn() -> number",
        "getTitle": "fn() -> string",
        "hide": "fn()",
        "setAndroidView": "fn(androidView: Ti.UI.View)",
        "setCancel": "fn(cancel: number)",
        "setMessage": "fn(message: string)",
        "setOk": "fn(ok: string)",
        "setPersistent": "fn(persistent: bool)",
        "setStyle": "fn(style: number)",
        "setTitle": "fn(title: string)",
        "show": "fn()"
      },
      "_2DMatrix": {
        "a": "number",
        "b": "number",
        "c": "number",
        "d": "number",
        "tx": "number",
        "ty": "number",
        "getA": "fn() -> number",
        "getB": "fn() -> number",
        "getC": "fn() -> number",
        "getD": "fn() -> number",
        "getTx": "fn() -> number",
        "getTy": "fn() -> number",
        "invert": "fn() -> Ti.UI._2DMatrix",
        "multiply": "fn(t2: Ti.UI._2DMatrix) -> Ti.UI._2DMatrix",
        "rotate": "fn(angle: number, toAngle?: number) -> Ti.UI._2DMatrix",
        "scale": "fn(sx: number, sy: number, toSx?: number, toSy?: number) -> Ti.UI._2DMatrix",
        "setA": "fn(a: number)",
        "setB": "fn(b: number)",
        "setC": "fn(c: number)",
        "setD": "fn(d: number)",
        "setTx": "fn(tx: number)",
        "setTy": "fn(ty: number)",
        "translate": "fn(tx: number, ty: number) -> Ti.UI._2DMatrix"
      },
      "TabbedBar": {
        "index": "number",
        "labels": "?",
        "style": "number",
        "getIndex": "fn() -> number",
        "getLabels": "fn() -> ?",
        "getStyle": "fn() -> number",
        "setIndex": "fn(index: number)",
        "setLabels": "fn(labels: ?)",
        "setStyle": "fn(style: number)"
      },
      "Window": {
        "activity": "Ti.Android.Activity",
        "autoAdjustScrollViewInsets": "bool",
        "backButtonTitle": "string",
        "backButtonTitleImage": "?",
        "barColor": "string",
        "barImage": "string",
        "exitOnClose": "bool",
        "extendEdges": "?",
        "flagSecure": "bool",
        "fullscreen": "bool",
        "hideShadow": "bool",
        "includeOpaqueBars": "bool",
        "leftNavButton": "Ti.UI.View",
        "leftNavButtons": "?",
        "modal": "bool",
        "navBarHidden": "bool",
        "navTintColor": "?",
        "orientation": "number",
        "orientationModes": "?",
        "rightNavButton": "Ti.UI.View",
        "rightNavButtons": "?",
        "shadowImage": "string",
        "statusBarStyle": "?",
        "tabBarHidden": "bool",
        "theme": "string",
        "title": "string",
        "titleAttributes": "titleAttributesParams",
        "titleControl": "Ti.UI.View",
        "titleImage": "string",
        "titlePrompt": "string",
        "titleid": "string",
        "titlepromptid": "string",
        "toolbar": "?",
        "transitionAnimation": "Ti.Proxy",
        "translucent": "bool",
        "url": "string",
        "windowFlags": "number",
        "windowPixelFormat": "number",
        "windowSoftInputMode": "number",
        "close": "fn(params?: ?)",
        "getActivity": "fn() -> Ti.Android.Activity",
        "getAutoAdjustScrollViewInsets": "fn() -> bool",
        "getBackButtonTitle": "fn() -> string",
        "getBackButtonTitleImage": "fn() -> ?",
        "getBarColor": "fn() -> string",
        "getBarImage": "fn() -> string",
        "getExitOnClose": "fn() -> bool",
        "getExtendEdges": "fn() -> ?",
        "getFlagSecure": "fn() -> bool",
        "getFullscreen": "fn() -> bool",
        "getHideShadow": "fn() -> bool",
        "getIncludeOpaqueBars": "fn() -> bool",
        "getLeftNavButton": "fn() -> Ti.UI.View",
        "getLeftNavButtons": "fn() -> ?",
        "getModal": "fn() -> bool",
        "getNavBarHidden": "fn() -> bool",
        "getNavTintColor": "fn() -> string",
        "getOrientation": "fn() -> number",
        "getOrientationModes": "fn() -> ?",
        "getRightNavButton": "fn() -> Ti.UI.View",
        "getRightNavButtons": "fn() -> ?",
        "getShadowImage": "fn() -> string",
        "getStatusBarStyle": "fn() -> number",
        "getTabBarHidden": "fn() -> bool",
        "getTheme": "fn() -> string",
        "getTitle": "fn() -> string",
        "getTitleAttributes": "fn() -> titleAttributesParams",
        "getTitleControl": "fn() -> Ti.UI.View",
        "getTitleImage": "fn() -> string",
        "getTitlePrompt": "fn() -> string",
        "getTitleid": "fn() -> string",
        "getTitlepromptid": "fn() -> string",
        "getToolbar": "fn() -> ?",
        "getTransitionAnimation": "fn() -> Ti.Proxy",
        "getTranslucent": "fn() -> bool",
        "getUrl": "fn() -> string",
        "getWindowFlags": "fn() -> number",
        "getWindowPixelFormat": "fn() -> number",
        "getWindowSoftInputMode": "fn() -> number",
        "hideNavBar": "fn(options?: ?)",
        "hideTabBar": "fn()",
        "open": "fn(params?: openWindowParams)",
        "setAutoAdjustScrollViewInsets": "fn(autoAdjustScrollViewInsets: bool)",
        "setBackButtonTitle": "fn(backButtonTitle: string)",
        "setBackButtonTitleImage": "fn(backButtonTitleImage: string)",
        "setBarColor": "fn(barColor: string)",
        "setBarImage": "fn(barImage: string)",
        "setExitOnClose": "fn(exitOnClose: bool)",
        "setExtendEdges": "fn(extendEdges: ?)",
        "setFullscreen": "fn(fullscreen: bool)",
        "setHideShadow": "fn(hideShadow: bool)",
        "setIncludeOpaqueBars": "fn(includeOpaqueBars: bool)",
        "setLeftNavButton": "fn(leftNavButton: Ti.UI.View)",
        "setLeftNavButtons": "fn(leftNavButtons: ?)",
        "setModal": "fn(modal: bool)",
        "setNavBarHidden": "fn(navBarHidden: bool)",
        "setNavTintColor": "fn(navTintColor: string)",
        "setOrientationModes": "fn(orientationModes: ?)",
        "setRightNavButton": "fn(rightNavButton: Ti.UI.View)",
        "setRightNavButtons": "fn(rightNavButtons: ?)",
        "setShadowImage": "fn(shadowImage: string)",
        "setStatusBarStyle": "fn(statusBarStyle: number)",
        "setTabBarHidden": "fn(tabBarHidden: bool)",
        "setTitle": "fn(title: string)",
        "setTitleAttributes": "fn(titleAttributes: titleAttributesParams)",
        "setTitleControl": "fn(titleControl: Ti.UI.View)",
        "setTitleImage": "fn(titleImage: string)",
        "setTitlePrompt": "fn(titlePrompt: string)",
        "setTitleid": "fn(titleid: string)",
        "setTitlepromptid": "fn(titlepromptid: string)",
        "setToolbar": "fn(items: ?, params?: windowToolbarParam)",
        "setTransitionAnimation": "fn(transitionAnimation: Ti.Proxy)",
        "setTranslucent": "fn(translucent: bool)",
        "setWindowPixelFormat": "fn(windowPixelFormat: number)",
        "showNavBar": "fn(options?: ?)"
      },
      "TextField": {
        "appearance": "number",
        "attributedHintText": "Ti.UI.iOS.AttributedString",
        "attributedString": "Ti.UI.iOS.AttributedString",
        "autoLink": "number",
        "autocapitalization": "number",
        "autocorrect": "bool",
        "borderStyle": "number",
        "clearButtonMode": "number",
        "clearOnEdit": "bool",
        "color": "string",
        "editable": "bool",
        "ellipsize": "bool",
        "enableReturnKey": "bool",
        "font": "Font",
        "hintText": "string",
        "keyboardToolbar": "?",
        "keyboardToolbarColor": "string",
        "keyboardToolbarHeight": "number",
        "keyboardType": "number",
        "leftButton": "?",
        "leftButtonMode": "number",
        "leftButtonPadding": "number",
        "maxLength": "number",
        "minimumFontSize": "number",
        "paddingLeft": "number",
        "paddingRight": "number",
        "passwordMask": "bool",
        "returnKeyType": "number",
        "rightButton": "?",
        "rightButtonMode": "number",
        "rightButtonPadding": "number",
        "selection": "textFieldSelectedParams",
        "suppressReturn": "bool",
        "textAlign": "?",
        "value": "string",
        "verticalAlign": "?",
        "blur": "fn()",
        "focus": "fn()",
        "getAppearance": "fn() -> number",
        "getAttributedHintText": "fn() -> Ti.UI.iOS.AttributedString",
        "getAttributedString": "fn() -> Ti.UI.iOS.AttributedString",
        "getAutoLink": "fn() -> number",
        "getAutocapitalization": "fn() -> number",
        "getAutocorrect": "fn() -> bool",
        "getBorderStyle": "fn() -> number",
        "getClearButtonMode": "fn() -> number",
        "getClearOnEdit": "fn() -> bool",
        "getColor": "fn() -> string",
        "getEditable": "fn() -> bool",
        "getEllipsize": "fn() -> bool",
        "getEnableReturnKey": "fn() -> bool",
        "getFont": "fn() -> Font",
        "getHintText": "fn() -> string",
        "getKeyboardToolbar": "fn() -> ?",
        "getKeyboardToolbarColor": "fn() -> string",
        "getKeyboardToolbarHeight": "fn() -> number",
        "getKeyboardType": "fn() -> number",
        "getLeftButton": "fn() -> ?",
        "getLeftButtonMode": "fn() -> number",
        "getLeftButtonPadding": "fn() -> number",
        "getMaxLength": "fn() -> number",
        "getMinimumFontSize": "fn() -> number",
        "getPaddingLeft": "fn() -> number",
        "getPaddingRight": "fn() -> number",
        "getPasswordMask": "fn() -> bool",
        "getReturnKeyType": "fn() -> number",
        "getRightButton": "fn() -> ?",
        "getRightButtonMode": "fn() -> number",
        "getRightButtonPadding": "fn() -> number",
        "getSelection": "fn() -> textFieldSelectedParams",
        "getSuppressReturn": "fn() -> bool",
        "getTextAlign": "fn() -> ?",
        "getValue": "fn() -> string",
        "getVerticalAlign": "fn() -> ?",
        "hasText": "fn() -> bool",
        "setAppearance": "fn(appearance: number)",
        "setAttributedHintText": "fn(attributedHintText: Ti.UI.iOS.AttributedString)",
        "setAttributedString": "fn(attributedString: Ti.UI.iOS.AttributedString)",
        "setAutoLink": "fn(autoLink: number)",
        "setAutocapitalization": "fn(autocapitalization: number)",
        "setAutocorrect": "fn(autocorrect: bool)",
        "setBorderStyle": "fn(borderStyle: number)",
        "setClearButtonMode": "fn(clearButtonMode: number)",
        "setClearOnEdit": "fn(clearOnEdit: bool)",
        "setColor": "fn(color: string)",
        "setEditable": "fn(editable: bool)",
        "setEllipsize": "fn(ellipsize: bool)",
        "setEnableReturnKey": "fn(enableReturnKey: bool)",
        "setFont": "fn(font: Font)",
        "setHintText": "fn(hintText: string)",
        "setKeyboardToolbar": "fn(keyboardToolbar: ?)",
        "setKeyboardToolbarColor": "fn(keyboardToolbarColor: string)",
        "setKeyboardToolbarHeight": "fn(keyboardToolbarHeight: number)",
        "setKeyboardType": "fn(keyboardType: number)",
        "setLeftButton": "fn(leftButton: ?)",
        "setLeftButtonMode": "fn(leftButtonMode: number)",
        "setLeftButtonPadding": "fn(leftButtonPadding: number)",
        "setMaxLength": "fn(maxLength: number)",
        "setMinimumFontSize": "fn(minimumFontSize: number)",
        "setPaddingLeft": "fn(paddingLeft: number)",
        "setPaddingRight": "fn(paddingRight: number)",
        "setPasswordMask": "fn(passwordMask: bool)",
        "setReturnKeyType": "fn(returnKeyType: number)",
        "setRightButton": "fn(rightButton: ?)",
        "setRightButtonMode": "fn(rightButtonMode: number)",
        "setRightButtonPadding": "fn(rightButtonPadding: number)",
        "setSelection": "fn(start: number, end: number)",
        "setSuppressReturn": "fn(suppressReturn: bool)",
        "setTextAlign": "fn(textAlign: string)",
        "setValue": "fn(value: string)",
        "setVerticalAlign": "fn(verticalAlign: number)"
      },
      "_3DMatrix": {
        "m11": "number",
        "m12": "number",
        "m13": "number",
        "m14": "number",
        "m21": "number",
        "m22": "number",
        "m23": "number",
        "m24": "number",
        "m31": "number",
        "m32": "number",
        "m33": "number",
        "m34": "number",
        "m41": "number",
        "m42": "number",
        "m43": "number",
        "m44": "number",
        "getM11": "fn() -> number",
        "getM12": "fn() -> number",
        "getM13": "fn() -> number",
        "getM14": "fn() -> number",
        "getM21": "fn() -> number",
        "getM22": "fn() -> number",
        "getM23": "fn() -> number",
        "getM24": "fn() -> number",
        "getM31": "fn() -> number",
        "getM32": "fn() -> number",
        "getM33": "fn() -> number",
        "getM34": "fn() -> number",
        "getM41": "fn() -> number",
        "getM42": "fn() -> number",
        "getM43": "fn() -> number",
        "getM44": "fn() -> number",
        "invert": "fn() -> Ti.UI._3DMatrix",
        "multiply": "fn(t2: Ti.UI._3DMatrix) -> Ti.UI._3DMatrix",
        "rotate": "fn(angle: number, x: number, y: number, z: number) -> Ti.UI._3DMatrix",
        "scale": "fn(sx: number, sy: number, sz: number) -> Ti.UI._3DMatrix",
        "setM11": "fn(m11: number)",
        "setM12": "fn(m12: number)",
        "setM13": "fn(m13: number)",
        "setM14": "fn(m14: number)",
        "setM21": "fn(m21: number)",
        "setM22": "fn(m22: number)",
        "setM23": "fn(m23: number)",
        "setM24": "fn(m24: number)",
        "setM31": "fn(m31: number)",
        "setM32": "fn(m32: number)",
        "setM33": "fn(m33: number)",
        "setM34": "fn(m34: number)",
        "setM41": "fn(m41: number)",
        "setM42": "fn(m42: number)",
        "setM43": "fn(m43: number)",
        "setM44": "fn(m44: number)",
        "translate": "fn(tx: number, ty: number, tz: number) -> Ti.UI._3DMatrix"
      },
      "WebView": {
        "cacheMode": "number",
        "data": "?",
        "disableBounce": "bool",
        "enableZoomControls": "bool",
        "handlePlatformUrl": "bool",
        "hideLoadIndicator": "bool",
        "html": "string",
        "ignoreSslError": "bool",
        "lightTouchEnabled": "bool",
        "loading": "bool",
        "onCreateWindow": "fn(args: [?])",
        "overScrollMode": "number",
        "pluginState": "number",
        "scalesPageToFit": "bool",
        "scrollsToTop": "bool",
        "showScrollbars": "bool",
        "url": "string",
        "userAgent": "string",
        "willHandleTouches": "bool",
        "canGoBack": "fn() -> bool",
        "canGoForward": "fn() -> bool",
        "evalJS": "fn(code: string) -> string",
        "getCacheMode": "fn() -> number",
        "getData": "fn() -> ?",
        "getDisableBounce": "fn() -> bool",
        "getEnableZoomControls": "fn() -> bool",
        "getHandlePlatformUrl": "fn() -> bool",
        "getHideLoadIndicator": "fn() -> bool",
        "getHtml": "fn() -> string",
        "getIgnoreSslError": "fn() -> bool",
        "getLightTouchEnabled": "fn() -> bool",
        "getLoading": "fn() -> bool",
        "getOnCreateWindow": "fn() -> fn(args: [?])",
        "getOverScrollMode": "fn() -> number",
        "getPluginState": "fn() -> number",
        "getScalesPageToFit": "fn() -> bool",
        "getScrollsToTop": "fn() -> bool",
        "getShowScrollbars": "fn() -> bool",
        "getUrl": "fn() -> string",
        "getUserAgent": "fn() -> string",
        "getWillHandleTouches": "fn() -> bool",
        "goBack": "fn()",
        "goForward": "fn()",
        "pause": "fn()",
        "release": "fn()",
        "reload": "fn()",
        "repaint": "fn()",
        "resume": "fn()",
        "setBasicAuthentication": "fn(username: string, password: string)",
        "setCacheMode": "fn(cacheMode: number)",
        "setData": "fn(data: Ti.Blob)",
        "setDisableBounce": "fn(disableBounce: bool)",
        "setEnableZoomControls": "fn(enableZoomControls: bool)",
        "setHandlePlatformUrl": "fn(handlePlatformUrl: bool)",
        "setHideLoadIndicator": "fn(hideLoadIndicator: bool)",
        "setHtml": "fn(html: ?, options?: ?)",
        "setIgnoreSslError": "fn(ignoreSslError: bool)",
        "setLightTouchEnabled": "fn(lightTouchEnabled: bool)",
        "setLoading": "fn(loading: bool)",
        "setOnCreateWindow": "fn(onCreateWindow: fn(args: [?]))",
        "setOverScrollMode": "fn(overScrollMode: number)",
        "setPluginState": "fn(pluginState: number)",
        "setScalesPageToFit": "fn(scalesPageToFit: bool)",
        "setScrollsToTop": "fn(scrollsToTop: bool)",
        "setShowScrollbars": "fn(showScrollbars: bool)",
        "setUrl": "fn(url: string)",
        "setUserAgent": "fn(userAgent: string)",
        "setWillHandleTouches": "fn(willHandleTouches: bool)",
        "stopLoading": "fn(hardStop: bool)"
      },
      "Clipboard": {
        "clearData": "fn(type?: string)",
        "clearText": "fn()",
        "getData": "fn(type: string) -> ?",
        "getText": "fn() -> string",
        "hasData": "fn(type: string) -> bool",
        "hasText": "fn() -> ?",
        "setData": "fn(type: string, data: ?)",
        "setText": "fn(text: string)"
      },
      "ScrollableView": {
        "cacheSize": "number",
        "clipViews": "bool",
        "currentPage": "number",
        "disableBounce": "bool",
        "hitRect": "Dimension",
        "overScrollMode": "number",
        "overlayEnabled": "bool",
        "pagingControlAlpha": "number",
        "pagingControlColor": "string",
        "pagingControlHeight": "number",
        "pagingControlOnTop": "bool",
        "pagingControlTimeout": "number",
        "scrollingEnabled": "bool",
        "showPagingControl": "bool",
        "views": "?",
        "addView": "fn(view: Ti.UI.View)",
        "getCacheSize": "fn() -> number",
        "getClipViews": "fn() -> bool",
        "getCurrentPage": "fn() -> number",
        "getDisableBounce": "fn() -> bool",
        "getHitRect": "fn() -> Dimension",
        "getOverScrollMode": "fn() -> number",
        "getOverlayEnabled": "fn() -> bool",
        "getPagingControlAlpha": "fn() -> number",
        "getPagingControlColor": "fn() -> string",
        "getPagingControlHeight": "fn() -> number",
        "getPagingControlOnTop": "fn() -> bool",
        "getPagingControlTimeout": "fn() -> number",
        "getScrollingEnabled": "fn() -> bool",
        "getShowPagingControl": "fn() -> bool",
        "getViews": "fn() -> ?",
        "moveNext": "fn()",
        "movePrevious": "fn()",
        "removeView": "fn(view: number)",
        "scrollToView": "fn(view: number)",
        "setCacheSize": "fn(cacheSize: number)",
        "setCurrentPage": "fn(currentPage: number)",
        "setDisableBounce": "fn(disableBounce: bool)",
        "setHitRect": "fn(hitRect: Dimension)",
        "setOverScrollMode": "fn(overScrollMode: number)",
        "setOverlayEnabled": "fn(overlayEnabled: bool)",
        "setPagingControlAlpha": "fn(pagingControlAlpha: number)",
        "setPagingControlColor": "fn(pagingControlColor: string)",
        "setPagingControlHeight": "fn(pagingControlHeight: number)",
        "setPagingControlOnTop": "fn(pagingControlOnTop: bool)",
        "setScrollingEnabled": "fn(scrollingEnabled: bool)",
        "setShowPagingControl": "fn(showPagingControl: bool)",
        "setViews": "fn(views: ?)"
      },
      "ListSection": {
        "footerTitle": "string",
        "footerView": "Ti.UI.View",
        "headerTitle": "string",
        "headerView": "Ti.UI.View",
        "items": "?",
        "appendItems": "fn(dataItems: ?, animation?: ListViewAnimationProperties)",
        "deleteItemsAt": "fn(itemIndex: number, count: number, animation?: ListViewAnimationProperties)",
        "getFooterTitle": "fn() -> string",
        "getFooterView": "fn() -> Ti.UI.View",
        "getHeaderTitle": "fn() -> string",
        "getHeaderView": "fn() -> Ti.UI.View",
        "getItemAt": "fn(itemIndex: number) -> ListDataItem",
        "getItems": "fn() -> ?",
        "insertItemsAt": "fn(itemIndex: number, dataItems: ?, animation?: ListViewAnimationProperties)",
        "replaceItemsAt": "fn(index: number, count: number, dataItems: ?, animation?: ListViewAnimationProperties)",
        "setFooterTitle": "fn(footerTitle: string)",
        "setFooterView": "fn(footerView: Ti.UI.View)",
        "setHeaderTitle": "fn(headerTitle: string)",
        "setHeaderView": "fn(headerView: Ti.UI.View)",
        "setItems": "fn(dataItems: ?, animation?: ListViewAnimationProperties)",
        "updateItemAt": "fn(index: number, dataItem: ListDataItem, animation?: ListViewAnimationProperties)"
      },
      "ScrollView": {
        "canCancelEvents": "bool",
        "contentHeight": "?",
        "contentOffset": "?",
        "contentWidth": "?",
        "decelerationRate": "number",
        "disableBounce": "bool",
        "horizontalBounce": "bool",
        "maxZoomScale": "number",
        "minZoomScale": "number",
        "overScrollMode": "number",
        "scrollIndicatorStyle": "number",
        "scrollType": "string",
        "scrollingEnabled": "bool",
        "scrollsToTop": "bool",
        "showHorizontalScrollIndicator": "bool",
        "showVerticalScrollIndicator": "bool",
        "verticalBounce": "bool",
        "zoomScale": "number",
        "getCanCancelEvents": "fn() -> bool",
        "getContentHeight": "fn() -> ?",
        "getContentOffset": "fn() -> ?",
        "getContentWidth": "fn() -> ?",
        "getDecelerationRate": "fn() -> number",
        "getDisableBounce": "fn() -> bool",
        "getHorizontalBounce": "fn() -> bool",
        "getMaxZoomScale": "fn() -> number",
        "getMinZoomScale": "fn() -> number",
        "getOverScrollMode": "fn() -> number",
        "getScrollIndicatorStyle": "fn() -> number",
        "getScrollType": "fn() -> string",
        "getScrollingEnabled": "fn() -> bool",
        "getScrollsToTop": "fn() -> bool",
        "getShowHorizontalScrollIndicator": "fn() -> bool",
        "getShowVerticalScrollIndicator": "fn() -> bool",
        "getVerticalBounce": "fn() -> bool",
        "getZoomScale": "fn() -> number",
        "scrollTo": "fn(x: number, y: number)",
        "scrollToBottom": "fn()",
        "setCanCancelEvents": "fn(canCancelEvents: bool)",
        "setContentHeight": "fn(contentHeight: number)",
        "setContentOffset": "fn(contentOffset: ?, animated?: contentOffsetOption)",
        "setContentWidth": "fn(contentWidth: number)",
        "setDecelerationRate": "fn(decelerationRate: number)",
        "setDisableBounce": "fn(disableBounce: bool)",
        "setHorizontalBounce": "fn(horizontalBounce: bool)",
        "setMaxZoomScale": "fn(maxZoomScale: number)",
        "setMinZoomScale": "fn(minZoomScale: number)",
        "setOverScrollMode": "fn(overScrollMode: number)",
        "setScrollIndicatorStyle": "fn(scrollIndicatorStyle: number)",
        "setScrollingEnabled": "fn(scrollingEnabled: bool)",
        "setScrollsToTop": "fn(scrollsToTop: bool)",
        "setShowHorizontalScrollIndicator": "fn(showHorizontalScrollIndicator: bool)",
        "setShowVerticalScrollIndicator": "fn(showVerticalScrollIndicator: bool)",
        "setVerticalBounce": "fn(verticalBounce: bool)",
        "setZoomScale": "fn(zoomScale: number, animated?: zoomScaleOption)"
      },
      "ListView": {
        "allowsSelection": "bool",
        "canScroll": "bool",
        "caseInsensitiveSearch": "bool",
        "defaultItemTemplate": "?",
        "editing": "bool",
        "footerDividersEnabled": "bool",
        "footerTitle": "string",
        "footerView": "Ti.UI.View",
        "headerDividersEnabled": "bool",
        "headerTitle": "string",
        "headerView": "Ti.UI.View",
        "keepSectionsInSearch": "bool",
        "pruneSectionsOnEdit": "bool",
        "pullView": "Ti.UI.View",
        "refreshControl": "Ti.UI.RefreshControl",
        "scrollIndicatorStyle": "number",
        "searchText": "string",
        "searchView": "?",
        "sectionCount": "number",
        "sectionIndexTitles": "?",
        "sections": "?",
        "separatorColor": "string",
        "separatorInsets": "?",
        "separatorStyle": "number",
        "showVerticalScrollIndicator": "bool",
        "style": "number",
        "templates": "?",
        "willScrollOnStatusTap": "bool",
        "appendSection": "fn(section: Ti.UI.ListSection, animation?: ListViewAnimationProperties)",
        "deleteSectionAt": "fn(sectionIndex: number, animation?: ListViewAnimationProperties)",
        "deselectItem": "fn(sectionIndex: number, itemIndex: number)",
        "getAllowsSelection": "fn() -> bool",
        "getCanScroll": "fn() -> bool",
        "getCaseInsensitiveSearch": "fn() -> bool",
        "getDefaultItemTemplate": "fn() -> ?",
        "getEditing": "fn() -> bool",
        "getFooterDividersEnabled": "fn() -> bool",
        "getFooterTitle": "fn() -> string",
        "getFooterView": "fn() -> Ti.UI.View",
        "getHeaderDividersEnabled": "fn() -> bool",
        "getHeaderTitle": "fn() -> string",
        "getHeaderView": "fn() -> Ti.UI.View",
        "getKeepSectionsInSearch": "fn() -> bool",
        "getPruneSectionsOnEdit": "fn() -> bool",
        "getPullView": "fn() -> Ti.UI.View",
        "getRefreshControl": "fn() -> Ti.UI.RefreshControl",
        "getScrollIndicatorStyle": "fn() -> number",
        "getSearchText": "fn() -> string",
        "getSearchView": "fn() -> ?",
        "getSectionCount": "fn() -> number",
        "getSectionIndexTitles": "fn() -> ?",
        "getSections": "fn() -> ?",
        "getSeparatorColor": "fn() -> string",
        "getSeparatorInsets": "fn() -> ?",
        "getSeparatorStyle": "fn() -> number",
        "getShowVerticalScrollIndicator": "fn() -> bool",
        "getStyle": "fn() -> number",
        "getTemplates": "fn() -> ?",
        "getWillScrollOnStatusTap": "fn() -> bool",
        "insertSectionAt": "fn(sectionIndex: number, section: Ti.UI.ListSection, animation?: ListViewAnimationProperties)",
        "replaceSectionAt": "fn(sectionIndex: number, section: Ti.UI.ListSection, animation: ListViewAnimationProperties)",
        "scrollToItem": "fn(sectionIndex: number, itemIndex: number, animation?: ListViewAnimationProperties)",
        "selectItem": "fn(sectionIndex: number, itemIndex: number)",
        "setAllowsSelection": "fn(allowsSelection: bool)",
        "setCanScroll": "fn(canScroll: bool)",
        "setCaseInsensitiveSearch": "fn(caseInsensitiveSearch: bool)",
        "setContentInsets": "fn(edgeInsets: ListViewEdgeInsets, animated?: ListViewContentInsetOption)",
        "setDefaultItemTemplate": "fn(defaultItemTemplate: string)",
        "setEditing": "fn(editing: bool)",
        "setFooterTitle": "fn(footerTitle: string)",
        "setFooterView": "fn(footerView: Ti.UI.View)",
        "setHeaderTitle": "fn(headerTitle: string)",
        "setHeaderView": "fn(headerView: Ti.UI.View)",
        "setKeepSectionsInSearch": "fn(keepSectionsInSearch: bool)",
        "setMarker": "fn(markerProps: ListViewMarkerProps)",
        "setPruneSectionsOnEdit": "fn(pruneSectionsOnEdit: bool)",
        "setPullView": "fn(pullView: Ti.UI.View)",
        "setRefreshControl": "fn(refreshControl: Ti.UI.RefreshControl)",
        "setScrollIndicatorStyle": "fn(scrollIndicatorStyle: number)",
        "setSearchText": "fn(searchText: string)",
        "setSearchView": "fn(searchView: Ti.UI.SearchBar)",
        "setSectionIndexTitles": "fn(sectionIndexTitles: ?)",
        "setSections": "fn(sections: ?)",
        "setSeparatorColor": "fn(separatorColor: string)",
        "setSeparatorInsets": "fn(separatorInsets: ?)",
        "setSeparatorStyle": "fn(separatorStyle: number)",
        "setShowVerticalScrollIndicator": "fn(showVerticalScrollIndicator: bool)",
        "setWillScrollOnStatusTap": "fn(willScrollOnStatusTap: bool)"
      },
      "TabGroup": {
        "activeTab": "Ti.UI.Tab",
        "activeTabBackgroundColor": "string",
        "activeTabBackgroundDisabledColor": "string",
        "activeTabBackgroundDisabledImage": "string",
        "activeTabBackgroundFocusedColor": "string",
        "activeTabBackgroundFocusedImage": "string",
        "activeTabBackgroundImage": "string",
        "activeTabBackgroundSelectedColor": "string",
        "activeTabBackgroundSelectedImage": "string",
        "activeTabIconTint": "string",
        "activity": "Ti.Android.Activity",
        "allowUserCustomization": "bool",
        "barColor": "string",
        "editButtonTitle": "string",
        "exitOnClose": "bool",
        "navBarHidden": "bool",
        "navTintColor": "?",
        "shadowImage": "string",
        "tabDividerColor": "string",
        "tabDividerWidth": "?",
        "tabHeight": "?",
        "tabs": "?",
        "tabsAtBottom": "bool",
        "tabsBackgroundColor": "string",
        "tabsBackgroundDisabledColor": "string",
        "tabsBackgroundDisabledImage": "string",
        "tabsBackgroundFocusedColor": "string",
        "tabsBackgroundFocusedImage": "string",
        "tabsBackgroundImage": "string",
        "tabsBackgroundSelectedColor": "string",
        "tabsBackgroundSelectedImage": "string",
        "tabsTintColor": "?",
        "title": "string",
        "titleAttributes": "titleAttributesParams",
        "translucent": "bool",
        "windowSoftInputMode": "number",
        "addTab": "fn(tab: Ti.UI.Tab)",
        "close": "fn()",
        "getActiveTab": "fn() -> Ti.UI.Tab",
        "getActiveTabBackgroundColor": "fn() -> string",
        "getActiveTabBackgroundDisabledColor": "fn() -> string",
        "getActiveTabBackgroundDisabledImage": "fn() -> string",
        "getActiveTabBackgroundFocusedColor": "fn() -> string",
        "getActiveTabBackgroundFocusedImage": "fn() -> string",
        "getActiveTabBackgroundImage": "fn() -> string",
        "getActiveTabBackgroundSelectedColor": "fn() -> string",
        "getActiveTabBackgroundSelectedImage": "fn() -> string",
        "getActiveTabIconTint": "fn() -> string",
        "getActivity": "fn() -> Ti.Android.Activity",
        "getAllowUserCustomization": "fn() -> bool",
        "getBarColor": "fn() -> string",
        "getEditButtonTitle": "fn() -> string",
        "getExitOnClose": "fn() -> bool",
        "getNavBarHidden": "fn() -> bool",
        "getNavTintColor": "fn() -> string",
        "getShadowImage": "fn() -> string",
        "getTabDividerColor": "fn() -> string",
        "getTabDividerWidth": "fn() -> ?",
        "getTabHeight": "fn() -> ?",
        "getTabs": "fn() -> ?",
        "getTabsAtBottom": "fn() -> bool",
        "getTabsBackgroundColor": "fn() -> string",
        "getTabsBackgroundDisabledColor": "fn() -> string",
        "getTabsBackgroundDisabledImage": "fn() -> string",
        "getTabsBackgroundFocusedColor": "fn() -> string",
        "getTabsBackgroundFocusedImage": "fn() -> string",
        "getTabsBackgroundImage": "fn() -> string",
        "getTabsBackgroundSelectedColor": "fn() -> string",
        "getTabsBackgroundSelectedImage": "fn() -> string",
        "getTabsTintColor": "fn() -> string",
        "getTitle": "fn() -> string",
        "getTitleAttributes": "fn() -> titleAttributesParams",
        "getTranslucent": "fn() -> bool",
        "getWindowSoftInputMode": "fn() -> number",
        "open": "fn()",
        "removeTab": "fn(tab: Ti.UI.Tab)",
        "setActiveTab": "fn(indexOrObject: number)",
        "setActiveTabBackgroundColor": "fn(activeTabBackgroundColor: string)",
        "setActiveTabBackgroundDisabledColor": "fn(activeTabBackgroundDisabledColor: string)",
        "setActiveTabBackgroundDisabledImage": "fn(activeTabBackgroundDisabledImage: string)",
        "setActiveTabBackgroundFocusedColor": "fn(activeTabBackgroundFocusedColor: string)",
        "setActiveTabBackgroundFocusedImage": "fn(activeTabBackgroundFocusedImage: string)",
        "setActiveTabBackgroundImage": "fn(activeTabBackgroundImage: string)",
        "setActiveTabBackgroundSelectedColor": "fn(activeTabBackgroundSelectedColor: string)",
        "setActiveTabBackgroundSelectedImage": "fn(activeTabBackgroundSelectedImage: string)",
        "setActiveTabIconTint": "fn(activeTabIconTint: string)",
        "setAllowUserCustomization": "fn(allowUserCustomization: bool)",
        "setBarColor": "fn(barColor: string)",
        "setEditButtonTitle": "fn(editButtonTitle: string)",
        "setExitOnClose": "fn(exitOnClose: bool)",
        "setNavBarHidden": "fn(navBarHidden: bool)",
        "setNavTintColor": "fn(navTintColor: string)",
        "setShadowImage": "fn(shadowImage: string)",
        "setTabDividerColor": "fn(tabDividerColor: string)",
        "setTabDividerWidth": "fn(tabDividerWidth: number)",
        "setTabHeight": "fn(tabHeight: number)",
        "setTabs": "fn(tabs: ?)",
        "setTabsAtBottom": "fn(tabsAtBottom: bool)",
        "setTabsBackgroundColor": "fn(tabsBackgroundColor: string)",
        "setTabsBackgroundDisabledColor": "fn(tabsBackgroundDisabledColor: string)",
        "setTabsBackgroundDisabledImage": "fn(tabsBackgroundDisabledImage: string)",
        "setTabsBackgroundFocusedColor": "fn(tabsBackgroundFocusedColor: string)",
        "setTabsBackgroundFocusedImage": "fn(tabsBackgroundFocusedImage: string)",
        "setTabsBackgroundImage": "fn(tabsBackgroundImage: string)",
        "setTabsBackgroundSelectedColor": "fn(tabsBackgroundSelectedColor: string)",
        "setTabsBackgroundSelectedImage": "fn(tabsBackgroundSelectedImage: string)",
        "setTabsTintColor": "fn(tabsTintColor: string)",
        "setTitle": "fn(title: string)",
        "setTitleAttributes": "fn(titleAttributes: titleAttributesParams)",
        "setTranslucent": "fn(translucent: bool)"
      },
      "TableView": {
        "allowsSelection": "bool",
        "allowsSelectionDuringEditing": "bool",
        "data": "?",
        "editable": "bool",
        "editing": "bool",
        "filterAnchored": "bool",
        "filterAttribute": "string",
        "filterCaseInsensitive": "bool",
        "footerDividersEnabled": "bool",
        "footerTitle": "string",
        "footerView": "Ti.UI.View",
        "headerDividersEnabled": "bool",
        "headerPullView": "Ti.UI.View",
        "headerTitle": "string",
        "headerView": "Ti.UI.View",
        "hideSearchOnSelection": "bool",
        "index": "?",
        "maxRowHeight": "number",
        "minRowHeight": "number",
        "moveable": "bool",
        "moving": "bool",
        "overScrollMode": "number",
        "refreshControl": "Ti.UI.RefreshControl",
        "rowHeight": "number",
        "scrollIndicatorStyle": "number",
        "scrollable": "bool",
        "scrollsToTop": "bool",
        "search": "?",
        "searchAsChild": "bool",
        "searchHidden": "bool",
        "sectionCount": "number",
        "sections": "?",
        "separatorColor": "string",
        "separatorInsets": "?",
        "separatorStyle": "number",
        "showVerticalScrollIndicator": "bool",
        "style": "number",
        "appendRow": "fn(row: Ti.UI.TableViewRow, animation?: TableViewAnimationProperties)",
        "appendSection": "fn(section: Ti.UI.TableViewSection, animation?: TableViewAnimationProperties)",
        "deleteRow": "fn(row: number, animation?: TableViewAnimationProperties)",
        "deleteSection": "fn(section: number, animation?: TableViewAnimationProperties)",
        "deselectRow": "fn(row: number)",
        "getAllowsSelection": "fn() -> bool",
        "getAllowsSelectionDuringEditing": "fn() -> bool",
        "getData": "fn() -> ?",
        "getEditable": "fn() -> bool",
        "getEditing": "fn() -> bool",
        "getFilterAnchored": "fn() -> bool",
        "getFilterAttribute": "fn() -> string",
        "getFilterCaseInsensitive": "fn() -> bool",
        "getFooterDividersEnabled": "fn() -> bool",
        "getFooterTitle": "fn() -> string",
        "getFooterView": "fn() -> Ti.UI.View",
        "getHeaderDividersEnabled": "fn() -> bool",
        "getHeaderPullView": "fn() -> Ti.UI.View",
        "getHeaderTitle": "fn() -> string",
        "getHeaderView": "fn() -> Ti.UI.View",
        "getHideSearchOnSelection": "fn() -> bool",
        "getIndex": "fn() -> ?",
        "getMaxRowHeight": "fn() -> number",
        "getMinRowHeight": "fn() -> number",
        "getMoveable": "fn() -> bool",
        "getMoving": "fn() -> bool",
        "getOverScrollMode": "fn() -> number",
        "getRefreshControl": "fn() -> Ti.UI.RefreshControl",
        "getRowHeight": "fn() -> number",
        "getScrollIndicatorStyle": "fn() -> number",
        "getScrollable": "fn() -> bool",
        "getScrollsToTop": "fn() -> bool",
        "getSearch": "fn() -> ?",
        "getSearchAsChild": "fn() -> bool",
        "getSearchHidden": "fn() -> bool",
        "getSectionCount": "fn() -> number",
        "getSections": "fn() -> ?",
        "getSeparatorColor": "fn() -> string",
        "getSeparatorInsets": "fn() -> ?",
        "getSeparatorStyle": "fn() -> number",
        "getShowVerticalScrollIndicator": "fn() -> bool",
        "getStyle": "fn() -> number",
        "insertRowAfter": "fn(index: number, row: Ti.UI.TableViewRow, animation?: TableViewAnimationProperties)",
        "insertRowBefore": "fn(index: number, row: Ti.UI.TableViewRow, animation?: TableViewAnimationProperties)",
        "insertSectionAfter": "fn(index: number, section: Ti.UI.TableViewSection, animation?: TableViewAnimationProperties)",
        "insertSectionBefore": "fn(index: number, section: Ti.UI.TableViewSection, animation?: TableViewAnimationProperties)",
        "scrollToIndex": "fn(index: number, animation?: TableViewAnimationProperties)",
        "scrollToTop": "fn(top: number, animation?: TableViewAnimationProperties)",
        "selectRow": "fn(row: number)",
        "setAllowsSelection": "fn(allowsSelection: bool)",
        "setAllowsSelectionDuringEditing": "fn(allowsSelectionDuringEditing: bool)",
        "setContentInsets": "fn(edgeInsets: TableViewEdgeInsets, animated?: TableViewContentInsetOption)",
        "setData": "fn(data: ?, animation: TableViewAnimationProperties)",
        "setEditable": "fn(editable: bool)",
        "setEditing": "fn(editing: bool)",
        "setFilterAnchored": "fn(filterAnchored: bool)",
        "setFilterAttribute": "fn(filterAttribute: string)",
        "setFilterCaseInsensitive": "fn(filterCaseInsensitive: bool)",
        "setFooterTitle": "fn(footerTitle: string)",
        "setFooterView": "fn(footerView: Ti.UI.View)",
        "setHeaderPullView": "fn(view: Ti.UI.View)",
        "setHeaderTitle": "fn(headerTitle: string)",
        "setHeaderView": "fn(headerView: Ti.UI.View)",
        "setHideSearchOnSelection": "fn(hideSearchOnSelection: bool)",
        "setIndex": "fn(index: ?)",
        "setMaxRowHeight": "fn(maxRowHeight: number)",
        "setMinRowHeight": "fn(minRowHeight: number)",
        "setMoveable": "fn(moveable: bool)",
        "setMoving": "fn(moving: bool)",
        "setOverScrollMode": "fn(overScrollMode: number)",
        "setRefreshControl": "fn(refreshControl: Ti.UI.RefreshControl)",
        "setRowHeight": "fn(rowHeight: number)",
        "setScrollIndicatorStyle": "fn(scrollIndicatorStyle: number)",
        "setScrollable": "fn(scrollable: bool)",
        "setScrollsToTop": "fn(scrollsToTop: bool)",
        "setSearch": "fn(search: Ti.UI.SearchBar)",
        "setSearchAsChild": "fn(searchAsChild: bool)",
        "setSearchHidden": "fn(searchHidden: bool)",
        "setSections": "fn(sections: ?)",
        "setSeparatorColor": "fn(separatorColor: string)",
        "setSeparatorInsets": "fn(separatorInsets: ?)",
        "setSeparatorStyle": "fn(separatorStyle: number)",
        "setShowVerticalScrollIndicator": "fn(showVerticalScrollIndicator: bool)",
        "setStyle": "fn(style: number)",
        "updateRow": "fn(index: number, row: Ti.UI.TableViewRow, animation: TableViewAnimationProperties)",
        "updateSection": "fn(index: number, section: Ti.UI.TableViewSection, animation: TableViewAnimationProperties)"
      },
      "Button": {
        "color": "string",
        "disabledColor": "string",
        "font": "Font",
        "image": "?",
        "selectedColor": "string",
        "shadowColor": "string",
        "shadowOffset": "?",
        "shadowRadius": "number",
        "style": "number",
        "systemButton": "number",
        "textAlign": "?",
        "title": "string",
        "titleid": "string",
        "verticalAlign": "?",
        "getColor": "fn() -> string",
        "getDisabledColor": "fn() -> string",
        "getFont": "fn() -> Font",
        "getImage": "fn() -> ?",
        "getSelectedColor": "fn() -> string",
        "getShadowColor": "fn() -> string",
        "getShadowOffset": "fn() -> ?",
        "getShadowRadius": "fn() -> number",
        "getStyle": "fn() -> number",
        "getSystemButton": "fn() -> number",
        "getTextAlign": "fn() -> ?",
        "getTitle": "fn() -> string",
        "getTitleid": "fn() -> string",
        "getVerticalAlign": "fn() -> ?",
        "setColor": "fn(color: string)",
        "setDisabledColor": "fn(disabledColor: string)",
        "setFont": "fn(font: Font)",
        "setImage": "fn(image: string)",
        "setSelectedColor": "fn(selectedColor: string)",
        "setShadowColor": "fn(shadowColor: string)",
        "setShadowOffset": "fn(shadowOffset: ?)",
        "setShadowRadius": "fn(shadowRadius: number)",
        "setStyle": "fn(style: number)",
        "setSystemButton": "fn(systemButton: number)",
        "setTextAlign": "fn(textAlign: string)",
        "setTitle": "fn(title: string)",
        "setTitleid": "fn(titleid: string)",
        "setVerticalAlign": "fn(verticalAlign: number)"
      },
      "OptionDialog": {
        "androidView": "Ti.UI.View",
        "buttonNames": "?",
        "cancel": "number",
        "destructive": "number",
        "opaquebackground": "bool",
        "options": "?",
        "persistent": "bool",
        "selectedIndex": "number",
        "title": "string",
        "titleid": "string",
        "getAndroidView": "fn() -> Ti.UI.View",
        "getButtonNames": "fn() -> ?",
        "getCancel": "fn() -> number",
        "getDestructive": "fn() -> number",
        "getOpaquebackground": "fn() -> bool",
        "getOptions": "fn() -> ?",
        "getPersistent": "fn() -> bool",
        "getSelectedIndex": "fn() -> number",
        "getTitle": "fn() -> string",
        "getTitleid": "fn() -> string",
        "hide": "fn(params?: hideParams)",
        "setAndroidView": "fn(androidView: Ti.UI.View)",
        "setCancel": "fn(cancel: number)",
        "setOpaquebackground": "fn(opaquebackground: bool)",
        "setPersistent": "fn(persistent: bool)",
        "setTitle": "fn(title: string)",
        "setTitleid": "fn(titleid: string)",
        "show": "fn(params?: showParams)"
      },
      "RefreshControl": {
        "tintColor": "string",
        "title": "Ti.UI.iOS.AttributedString",
        "beginRefreshing": "fn()",
        "endRefreshing": "fn()",
        "getTintColor": "fn() -> string",
        "getTitle": "fn() -> Ti.UI.iOS.AttributedString",
        "setTintColor": "fn(tintColor: string)",
        "setTitle": "fn(title: Ti.UI.iOS.AttributedString)"
      },
      "EmailDialog": {
        "CANCELLED": "number",
        "FAILED": "number",
        "SAVED": "number",
        "SENT": "number",
        "barColor": "string",
        "bccRecipients": "?",
        "ccRecipients": "?",
        "html": "bool",
        "messageBody": "string",
        "subject": "string",
        "toRecipients": "?",
        "addAttachment": "fn(attachment: Ti.Blob)",
        "getBarColor": "fn() -> string",
        "getBccRecipients": "fn() -> ?",
        "getCcRecipients": "fn() -> ?",
        "getHtml": "fn() -> bool",
        "getMessageBody": "fn() -> string",
        "getSubject": "fn() -> string",
        "getToRecipients": "fn() -> ?",
        "isSupported": "fn() -> bool",
        "open": "fn(properties: ?)",
        "setBarColor": "fn(barColor: string)",
        "setBccRecipients": "fn(bccRecipients: ?)",
        "setCcRecipients": "fn(ccRecipients: ?)",
        "setHtml": "fn(html: bool)",
        "setMessageBody": "fn(messageBody: string)",
        "setSubject": "fn(subject: string)",
        "setToRecipients": "fn(toRecipients: ?)"
      },
      "CoverFlowView": {
        "images": "?",
        "selected": "number",
        "getImages": "fn() -> ?",
        "getSelected": "fn() -> number",
        "setImage": "fn(index: number, image: string)",
        "setImages": "fn(images: ?)",
        "setSelected": "fn(selected: number)"
      },
      "ImageView": {
        "animating": "bool",
        "autorotate": "bool",
        "decodeRetries": "number",
        "defaultImage": "string",
        "duration": "number",
        "enableZoomControls": "bool",
        "hires": "bool",
        "image": "?",
        "images": "?",
        "paused": "bool",
        "preventDefaultImage": "bool",
        "repeatCount": "number",
        "reverse": "bool",
        "url": "string",
        "getAnimating": "fn() -> bool",
        "getAutorotate": "fn() -> bool",
        "getDecodeRetries": "fn() -> number",
        "getDefaultImage": "fn() -> string",
        "getDuration": "fn() -> number",
        "getEnableZoomControls": "fn() -> bool",
        "getHires": "fn() -> bool",
        "getImage": "fn() -> ?",
        "getImages": "fn() -> ?",
        "getPaused": "fn() -> bool",
        "getPreventDefaultImage": "fn() -> bool",
        "getRepeatCount": "fn() -> number",
        "getReverse": "fn() -> bool",
        "getUrl": "fn() -> string",
        "pause": "fn()",
        "resume": "fn()",
        "setDecodeRetries": "fn(decodeRetries: number)",
        "setDefaultImage": "fn(defaultImage: string)",
        "setDuration": "fn(duration: number)",
        "setEnableZoomControls": "fn(enableZoomControls: bool)",
        "setHires": "fn(hires: bool)",
        "setImage": "fn(image: string)",
        "setImages": "fn(images: ?)",
        "setPreventDefaultImage": "fn(preventDefaultImage: bool)",
        "setRepeatCount": "fn(repeatCount: number)",
        "setReverse": "fn(reverse: bool)",
        "setUrl": "fn(url: string)",
        "start": "fn()",
        "stop": "fn()",
        "toBlob": "fn()"
      },
      "MaskedImage": {
        "image": "string",
        "mask": "string",
        "mode": "number",
        "tint": "string",
        "getImage": "fn() -> string",
        "getMask": "fn() -> string",
        "getMode": "fn() -> number",
        "getTint": "fn() -> string",
        "setImage": "fn(image: string)",
        "setMask": "fn(mask: string)",
        "setMode": "fn(mode: number)",
        "setTint": "fn(tint: string)"
      },
      "ProgressBar": {
        "color": "string",
        "font": "Font",
        "max": "number",
        "message": "string",
        "min": "number",
        "style": "number",
        "value": "number",
        "getColor": "fn() -> string",
        "getFont": "fn() -> Font",
        "getMax": "fn() -> number",
        "getMessage": "fn() -> string",
        "getMin": "fn() -> number",
        "getStyle": "fn() -> number",
        "getValue": "fn() -> number",
        "setColor": "fn(color: string)",
        "setFont": "fn(font: Font)",
        "setMax": "fn(max: number)",
        "setMessage": "fn(message: string)",
        "setMin": "fn(min: number)",
        "setStyle": "fn(style: number)",
        "setValue": "fn(value: number)"
      },
      "MobileWeb": {
        "apiName": "string",
        "addEventListener": "fn(name: string, callback: fn(args: [?]))",
        "applyProperties": "fn(props: ?)",
        "createNavigationGroup": "fn(parameters?: ?) -> Ti.UI.MobileWeb.NavigationGroup",
        "fireEvent": "fn(name: string, event: ?)",
        "getApiName": "fn() -> string",
        "removeEventListener": "fn(name: string, callback: fn(args: [?]))",
        "TableViewSeparatorStyle": "number",
        "NavigationGroup": {
          "navBarAtTop": "bool",
          "window": "Ti.UI.Window",
          "close": "fn(window: Ti.UI.Window, options: ?)",
          "getNavBarAtTop": "fn() -> bool",
          "getWindow": "fn() -> Ti.UI.Window",
          "open": "fn(window: Ti.UI.Window, options: ?)",
          "setNavBarAtTop": "fn(navBarAtTop: bool)"
        }
      },
      "Label": {
        "attributedString": "Ti.UI.iOS.AttributedString",
        "autoLink": "number",
        "backgroundPaddingBottom": "number",
        "backgroundPaddingLeft": "number",
        "backgroundPaddingRight": "number",
        "backgroundPaddingTop": "number",
        "color": "string",
        "ellipsize": "bool",
        "font": "Font",
        "highlightedColor": "string",
        "html": "string",
        "includeFontPadding": "bool",
        "minimumFontSize": "number",
        "shadowColor": "string",
        "shadowOffset": "?",
        "shadowRadius": "number",
        "text": "string",
        "textAlign": "?",
        "textid": "string",
        "verticalAlign": "?",
        "wordWrap": "bool",
        "getAttributedString": "fn() -> Ti.UI.iOS.AttributedString",
        "getAutoLink": "fn() -> number",
        "getBackgroundPaddingBottom": "fn() -> number",
        "getBackgroundPaddingLeft": "fn() -> number",
        "getBackgroundPaddingRight": "fn() -> number",
        "getBackgroundPaddingTop": "fn() -> number",
        "getColor": "fn() -> string",
        "getEllipsize": "fn() -> bool",
        "getFont": "fn() -> Font",
        "getHighlightedColor": "fn() -> string",
        "getHtml": "fn() -> string",
        "getIncludeFontPadding": "fn() -> bool",
        "getMinimumFontSize": "fn() -> number",
        "getShadowColor": "fn() -> string",
        "getShadowOffset": "fn() -> ?",
        "getShadowRadius": "fn() -> number",
        "getText": "fn() -> string",
        "getTextAlign": "fn() -> ?",
        "getTextid": "fn() -> string",
        "getVerticalAlign": "fn() -> ?",
        "getWordWrap": "fn() -> bool",
        "setAttributedString": "fn(attributedString: Ti.UI.iOS.AttributedString)",
        "setAutoLink": "fn(autoLink: number)",
        "setBackgroundPaddingBottom": "fn(backgroundPaddingBottom: number)",
        "setBackgroundPaddingLeft": "fn(backgroundPaddingLeft: number)",
        "setBackgroundPaddingRight": "fn(backgroundPaddingRight: number)",
        "setBackgroundPaddingTop": "fn(backgroundPaddingTop: number)",
        "setColor": "fn(color: string)",
        "setEllipsize": "fn(ellipsize: bool)",
        "setFont": "fn(font: Font)",
        "setHighlightedColor": "fn(highlightedColor: string)",
        "setHtml": "fn(html: string)",
        "setIncludeFontPadding": "fn(includeFontPadding: bool)",
        "setMinimumFontSize": "fn(minimumFontSize: number)",
        "setShadowColor": "fn(shadowColor: string)",
        "setShadowOffset": "fn(shadowOffset: ?)",
        "setShadowRadius": "fn(shadowRadius: number)",
        "setText": "fn(text: string)",
        "setTextAlign": "fn(textAlign: string)",
        "setTextid": "fn(textid: string)",
        "setVerticalAlign": "fn(verticalAlign: number)",
        "setWordWrap": "fn(wordWrap: bool)"
      },
      "SearchBar": {
        "autocapitalization": "number",
        "autocorrect": "bool",
        "barColor": "string",
        "hintText": "string",
        "hinttextid": "string",
        "keyboardType": "number",
        "prompt": "string",
        "promptid": "string",
        "showBookmark": "bool",
        "showCancel": "bool",
        "value": "string",
        "blur": "fn()",
        "focus": "fn()",
        "getAutocapitalization": "fn() -> number",
        "getAutocorrect": "fn() -> bool",
        "getBarColor": "fn() -> string",
        "getHintText": "fn() -> string",
        "getHinttextid": "fn() -> string",
        "getKeyboardType": "fn() -> number",
        "getPrompt": "fn() -> string",
        "getPromptid": "fn() -> string",
        "getShowBookmark": "fn() -> bool",
        "getShowCancel": "fn() -> bool",
        "getValue": "fn() -> string",
        "setAutocapitalization": "fn(autocapitalization: number)",
        "setAutocorrect": "fn(autocorrect: bool)",
        "setBarColor": "fn(barColor: string)",
        "setHintText": "fn(hintText: string)",
        "setHinttextid": "fn(hinttextid: string)",
        "setKeyboardType": "fn(keyboardType: number)",
        "setPrompt": "fn(prompt: string)",
        "setPromptid": "fn(promptid: string)",
        "setShowBookmark": "fn(showBookmark: bool)",
        "setShowCancel": "fn(showCancel: bool, animated?: ?)",
        "setValue": "fn(value: string)"
      },
      "SMSDialog": {
        "CANCELLED": "number",
        "FAILED": "number",
        "SENT": "number",
        "messageBody": "string",
        "toRecipients": "?",
        "getMessageBody": "fn() -> string",
        "getToRecipients": "fn() -> ?",
        "isSupported": "fn() -> bool",
        "open": "fn()",
        "setMessageBody": "fn(messageBody: string)",
        "setToRecipients": "fn(toRecipients: ?)"
      },
      "TableViewSection": {
        "footerTitle": "string",
        "footerView": "Ti.UI.View",
        "headerTitle": "string",
        "headerView": "Ti.UI.View",
        "rowCount": "number",
        "rows": "?",
        "add": "fn(row: Ti.UI.TableViewRow)",
        "getFooterTitle": "fn() -> string",
        "getFooterView": "fn() -> Ti.UI.View",
        "getHeaderTitle": "fn() -> string",
        "getHeaderView": "fn() -> Ti.UI.View",
        "getRowCount": "fn() -> number",
        "getRows": "fn() -> ?",
        "remove": "fn(row: Ti.UI.TableViewRow)",
        "rowAtIndex": "fn(index: number) -> Ti.UI.TableViewRow",
        "setFooterTitle": "fn(footerTitle: string)",
        "setFooterView": "fn(footerView: Ti.UI.View)",
        "setHeaderTitle": "fn(headerTitle: string)",
        "setHeaderView": "fn(headerView: Ti.UI.View)"
      },
      "Animation": {
        "anchorPoint": "Point",
        "autoreverse": "bool",
        "backgroundColor": "string",
        "bottom": "number",
        "center": "?",
        "color": "string",
        "curve": "number",
        "delay": "number",
        "duration": "number",
        "height": "number",
        "left": "number",
        "opacity": "number",
        "opaque": "bool",
        "repeat": "number",
        "right": "number",
        "top": "number",
        "transform": "?",
        "transition": "number",
        "view": "Ti.UI.View",
        "visible": "bool",
        "width": "number",
        "zIndex": "number",
        "getAnchorPoint": "fn() -> Point",
        "getAutoreverse": "fn() -> bool",
        "getBackgroundColor": "fn() -> string",
        "getBottom": "fn() -> number",
        "getCenter": "fn() -> ?",
        "getColor": "fn() -> string",
        "getCurve": "fn() -> number",
        "getDelay": "fn() -> number",
        "getDuration": "fn() -> number",
        "getHeight": "fn() -> number",
        "getLeft": "fn() -> number",
        "getOpacity": "fn() -> number",
        "getOpaque": "fn() -> bool",
        "getRepeat": "fn() -> number",
        "getRight": "fn() -> number",
        "getTop": "fn() -> number",
        "getTransform": "fn() -> ?",
        "getTransition": "fn() -> number",
        "getView": "fn() -> Ti.UI.View",
        "getVisible": "fn() -> bool",
        "getWidth": "fn() -> number",
        "getZIndex": "fn() -> number",
        "setAnchorPoint": "fn(anchorPoint: Point)",
        "setAutoreverse": "fn(autoreverse: bool)",
        "setBackgroundColor": "fn(backgroundColor: string)",
        "setBottom": "fn(bottom: number)",
        "setCenter": "fn(center: ?)",
        "setColor": "fn(color: string)",
        "setCurve": "fn(curve: number)",
        "setDelay": "fn(delay: number)",
        "setDuration": "fn(duration: number)",
        "setHeight": "fn(height: number)",
        "setLeft": "fn(left: number)",
        "setOpacity": "fn(opacity: number)",
        "setOpaque": "fn(opaque: bool)",
        "setRepeat": "fn(repeat: number)",
        "setRight": "fn(right: number)",
        "setTop": "fn(top: number)",
        "setTransform": "fn(transform: Ti.UI._2DMatrix)",
        "setTransition": "fn(transition: number)",
        "setView": "fn(view: Ti.UI.View)",
        "setVisible": "fn(visible: bool)",
        "setWidth": "fn(width: number)",
        "setZIndex": "fn(zIndex: number)"
      },
      "Toolbar": {
        "barColor": "string",
        "borderBottom": "bool",
        "borderTop": "bool",
        "items": "?",
        "translucent": "bool",
        "getBarColor": "fn() -> string",
        "getBorderBottom": "fn() -> bool",
        "getBorderTop": "fn() -> bool",
        "getItems": "fn() -> ?",
        "getTranslucent": "fn() -> bool",
        "setBarColor": "fn(barColor: string)",
        "setBorderBottom": "fn(borderBottom: bool)",
        "setBorderTop": "fn(borderTop: bool)",
        "setItems": "fn(items: ?)",
        "setTranslucent": "fn(translucent: bool)"
      },
      "Notification": {
        "duration": "number",
        "horizontalMargin": "number",
        "message": "string",
        "verticalMargin": "number",
        "xOffset": "number",
        "yOffset": "number",
        "getDuration": "fn() -> number",
        "getHorizontalMargin": "fn() -> number",
        "getMessage": "fn() -> string",
        "getVerticalMargin": "fn() -> number",
        "getXOffset": "fn() -> number",
        "getYOffset": "fn() -> number",
        "setDuration": "fn(duration: number)",
        "setHorizontalMargin": "fn(horizontalMargin: number)",
        "setMessage": "fn(message: string)",
        "setVerticalMargin": "fn(verticalMargin: number)",
        "setXOffset": "fn(xOffset: number)",
        "setYOffset": "fn(yOffset: number)"
      },
      "PickerColumn": {
        "font": "Font",
        "rowCount": "number",
        "rows": "?",
        "selectedRow": "Ti.UI.PickerRow",
        "addRow": "fn(row: Ti.UI.PickerRow)",
        "getFont": "fn() -> Font",
        "getRowCount": "fn() -> number",
        "getRows": "fn() -> ?",
        "getSelectedRow": "fn() -> Ti.UI.PickerRow",
        "removeRow": "fn(row: Ti.UI.PickerRow)",
        "setFont": "fn(font: Font)",
        "setSelectedRow": "fn(selectedRow: Ti.UI.PickerRow)"
      },
      "ActivityIndicator": {
        "bottom": "?",
        "color": "string",
        "font": "Font",
        "height": "string",
        "indicatorColor": "string",
        "indicatorDiameter": "string",
        "left": "?",
        "message": "string",
        "messageid": "string",
        "right": "?",
        "style": "number",
        "top": "?",
        "width": "string",
        "add": "fn()",
        "getBottom": "fn() -> ?",
        "getColor": "fn() -> string",
        "getFont": "fn() -> Font",
        "getHeight": "fn() -> string",
        "getIndicatorColor": "fn() -> string",
        "getIndicatorDiameter": "fn() -> string",
        "getLeft": "fn() -> ?",
        "getMessage": "fn() -> string",
        "getMessageid": "fn() -> string",
        "getRight": "fn() -> ?",
        "getStyle": "fn() -> number",
        "getTop": "fn() -> ?",
        "getWidth": "fn() -> string",
        "hide": "fn()",
        "remove": "fn()",
        "setBottom": "fn(bottom: number)",
        "setColor": "fn(color: string)",
        "setFont": "fn(font: Font)",
        "setHeight": "fn(height: string)",
        "setIndicatorColor": "fn(indicatorColor: string)",
        "setIndicatorDiameter": "fn(indicatorDiameter: string)",
        "setLeft": "fn(left: number)",
        "setMessage": "fn(message: string)",
        "setMessageid": "fn(messageid: string)",
        "setRight": "fn(right: number)",
        "setStyle": "fn(style: number)",
        "setTop": "fn(top: number)",
        "setWidth": "fn(width: string)",
        "show": "fn()"
      },
      "Picker": {
        "calendarViewShown": "bool",
        "columns": "?",
        "countDownDuration": "number",
        "font": "Font",
        "format24": "bool",
        "locale": "string",
        "maxDate": "Date",
        "minDate": "Date",
        "minuteInterval": "number",
        "selectionIndicator": "bool",
        "type": "number",
        "useSpinner": "bool",
        "value": "Date",
        "visibleItems": "number",
        "add": "fn(data: ?)",
        "getCalendarViewShown": "fn() -> bool",
        "getColumns": "fn() -> ?",
        "getCountDownDuration": "fn() -> number",
        "getFont": "fn() -> Font",
        "getFormat24": "fn() -> bool",
        "getLocale": "fn() -> string",
        "getMaxDate": "fn() -> Date",
        "getMinDate": "fn() -> Date",
        "getMinuteInterval": "fn() -> number",
        "getSelectedRow": "fn(index: number) -> Ti.UI.PickerRow",
        "getSelectionIndicator": "fn() -> bool",
        "getType": "fn() -> number",
        "getUseSpinner": "fn() -> bool",
        "getValue": "fn() -> Date",
        "getVisibleItems": "fn() -> number",
        "reloadColumn": "fn(column: Ti.UI.PickerColumn)",
        "setCalendarViewShown": "fn(calendarViewShown: bool)",
        "setColumns": "fn(columns: ?)",
        "setCountDownDuration": "fn(countDownDuration: number)",
        "setFont": "fn(font: Font)",
        "setFormat24": "fn(format24: bool)",
        "setLocale": "fn(locale: string)",
        "setMaxDate": "fn(maxDate: Date)",
        "setMinDate": "fn(minDate: Date)",
        "setMinuteInterval": "fn(minuteInterval: number)",
        "setSelectedRow": "fn(column: number, row: number, animated?: bool)",
        "setSelectionIndicator": "fn(selectionIndicator: bool)",
        "setType": "fn(type: number)",
        "setUseSpinner": "fn(useSpinner: bool)",
        "setValue": "fn(date: ?, suppressEvent: bool) -> Ti.UI.PickerRow",
        "setVisibleItems": "fn(visibleItems: number)",
        "showDatePickerDialog": "fn(dictObj: ?)",
        "showTimePickerDialog": "fn(dictObj: ?)"
      }
    },
    "Module": "number",
    "API": {
      "debug": "fn(message: ?)",
      "error": "fn(message: ?)",
      "info": "fn(message: ?)",
      "log": "fn(level: string, message: ?)",
      "timestamp": "fn(message: ?)",
      "trace": "fn(message: ?)",
      "warn": "fn(message: ?)"
    },
    "Geolocation": {
      "ACCURACY_BEST": "number",
      "ACCURACY_BEST_FOR_NAVIGATION": "number",
      "ACCURACY_HIGH": "number",
      "ACCURACY_HUNDRED_METERS": "number",
      "ACCURACY_KILOMETER": "number",
      "ACCURACY_LOW": "number",
      "ACCURACY_NEAREST_TEN_METERS": "number",
      "ACCURACY_THREE_KILOMETERS": "number",
      "ACTIVITYTYPE_AUTOMOTIVE_NAVIGATION": "string",
      "ACTIVITYTYPE_FITNESS": "string",
      "ACTIVITYTYPE_OTHER": "string",
      "ACTIVITYTYPE_OTHER_NAVIGATION": "string",
      "AUTHORIZATION_ALWAYS": "number",
      "AUTHORIZATION_AUTHORIZED": "number",
      "AUTHORIZATION_DENIED": "number",
      "AUTHORIZATION_RESTRICTED": "number",
      "AUTHORIZATION_UNKNOWN": "number",
      "AUTHORIZATION_WHEN_IN_USE": "number",
      "ERROR_DENIED": "number",
      "ERROR_HEADING_FAILURE": "number",
      "ERROR_LOCATION_UNKNOWN": "number",
      "ERROR_NETWORK": "number",
      "ERROR_REGION_MONITORING_DELAYED": "number",
      "ERROR_REGION_MONITORING_DENIED": "number",
      "ERROR_REGION_MONITORING_FAILURE": "number",
      "ERROR_TIMEOUT": "number",
      "PROVIDER_GPS": "string",
      "PROVIDER_NETWORK": "string",
      "PROVIDER_PASSIVE": "string",
      "accuracy": "number",
      "activityType": "number",
      "apiName": "string",
      "bubbleParent": "bool",
      "distanceFilter": "number",
      "frequency": "number",
      "hasCompass": "bool",
      "headingFilter": "number",
      "lastGeolocation": "string",
      "locationServicesAuthorization": "number",
      "locationServicesEnabled": "bool",
      "pauseLocationUpdateAutomatically": "bool",
      "preferredProvider": "string",
      "purpose": "string",
      "showCalibration": "bool",
      "trackSignificantLocationChange": "bool",
      "addEventListener": "fn(name: string, callback: fn(args: [?]))",
      "applyProperties": "fn(props: ?)",
      "fireEvent": "fn(name: string, event: ?)",
      "forwardGeocoder": "fn(address: string, callback: fn(args: [?]))",
      "getAccuracy": "fn() -> number",
      "getActivityType": "fn() -> number",
      "getApiName": "fn() -> string",
      "getBubbleParent": "fn() -> bool",
      "getCurrentHeading": "fn(callback: fn(args: [?]))",
      "getCurrentPosition": "fn(callback: fn(args: [?]))",
      "getDistanceFilter": "fn() -> number",
      "getFrequency": "fn() -> number",
      "getHasCompass": "fn() -> bool",
      "getHeadingFilter": "fn() -> number",
      "getLastGeolocation": "fn() -> string",
      "getLocationServicesAuthorization": "fn() -> number",
      "getLocationServicesEnabled": "fn() -> bool",
      "getPauseLocationUpdateAutomatically": "fn() -> bool",
      "getPreferredProvider": "fn() -> string",
      "getPurpose": "fn() -> string",
      "getShowCalibration": "fn() -> bool",
      "getTrackSignificantLocationChange": "fn() -> bool",
      "removeEventListener": "fn(name: string, callback: fn(args: [?]))",
      "reverseGeocoder": "fn(latitude: number, longitude: number, callback: fn(args: [?]))",
      "setAccuracy": "fn(accuracy: number)",
      "setActivityType": "fn(activityType: number)",
      "setBubbleParent": "fn(bubbleParent: bool)",
      "setDistanceFilter": "fn(distanceFilter: number)",
      "setFrequency": "fn(frequency: number)",
      "setHeadingFilter": "fn(headingFilter: number)",
      "setLocationServicesAuthorization": "fn(locationServicesAuthorization: number)",
      "setPauseLocationUpdateAutomatically": "fn(pauseLocationUpdateAutomatically: bool)",
      "setPreferredProvider": "fn(preferredProvider: string)",
      "setPurpose": "fn(purpose: string)",
      "setShowCalibration": "fn(showCalibration: bool)",
      "setTrackSignificantLocationChange": "fn(trackSignificantLocationChange: bool)",
      "Android": {
        "apiName": "string",
        "bubbleParent": "bool",
        "manualMode": "bool",
        "addEventListener": "fn(name: string, callback: fn(args: [?]))",
        "addLocationProvider": "fn(provider: Ti.Geolocation.Android.LocationProvider)",
        "addLocationRule": "fn(rule: Ti.Geolocation.Android.LocationRule)",
        "applyProperties": "fn(props: ?)",
        "createLocationProvider": "fn(parameters?: ?) -> Ti.Geolocation.Android.LocationProvider",
        "createLocationRule": "fn(parameters?: ?) -> Ti.Geolocation.Android.LocationRule",
        "fireEvent": "fn(name: string, event: ?)",
        "getApiName": "fn() -> string",
        "getBubbleParent": "fn() -> bool",
        "getManualMode": "fn() -> bool",
        "removeEventListener": "fn(name: string, callback: fn(args: [?]))",
        "removeLocationProvider": "fn(provider: Ti.Geolocation.Android.LocationProvider)",
        "removeLocationRule": "fn(rule: Ti.Geolocation.Android.LocationRule)",
        "setBubbleParent": "fn(bubbleParent: bool)",
        "setManualMode": "fn(manualMode: bool)",
        "LocationProvider": {
          "minUpdateDistance": "number",
          "minUpdateTime": "number",
          "name": "string",
          "getMinUpdateDistance": "fn() -> number",
          "getMinUpdateTime": "fn() -> number",
          "getName": "fn() -> string",
          "setMinUpdateDistance": "fn(minUpdateDistance: number)",
          "setMinUpdateTime": "fn(minUpdateTime: number)",
          "setName": "fn(name: string)"
        },
        "LocationRule": {
          "accuracy": "number",
          "maxAge": "number",
          "minAge": "number",
          "name": "string",
          "getAccuracy": "fn() -> number",
          "getMaxAge": "fn() -> number",
          "getMinAge": "fn() -> number",
          "getName": "fn() -> string",
          "setAccuracy": "fn(accuracy: number)",
          "setMaxAge": "fn(maxAge: number)",
          "setMinAge": "fn(minAge: number)",
          "setName": "fn(name: string)"
        }
      },
      "MobileWeb": {
        "forwardGeocoderTimeout": "number",
        "locationTimeout": "number",
        "maximumHeadingAge": "number",
        "maximumLocationAge": "number",
        "reverseGeocoderTimeout": "number",
        "getForwardGeocoderTimeout": "fn() -> number",
        "getLocationTimeout": "fn() -> number",
        "getMaximumHeadingAge": "fn() -> number",
        "getMaximumLocationAge": "fn() -> number",
        "getReverseGeocoderTimeout": "fn() -> number",
        "setForwardGeocoderTimeout": "fn(forwardGeocoderTimeout: number)",
        "setLocationTimeout": "fn(locationTimeout: number)",
        "setMaximumHeadingAge": "fn(maximumHeadingAge: number)",
        "setMaximumLocationAge": "fn(maximumLocationAge: number)",
        "setReverseGeocoderTimeout": "fn(reverseGeocoderTimeout: number)"
      }
    },
    "Proxy": {
      "apiName": "string",
      "bubbleParent": "bool",
      "addEventListener": "fn(name: string, callback: fn(args: [?]))",
      "applyProperties": "fn(props: ?)",
      "fireEvent": "fn(name: string, event: ?)",
      "getApiName": "fn() -> string",
      "getBubbleParent": "fn() -> bool",
      "removeEventListener": "fn(name: string, callback: fn(args: [?]))",
      "setBubbleParent": "fn(bubbleParent: bool)"
    },
    "Map": {
      "ANNOTATION_DRAG_STATE_CANCEL": "number",
      "ANNOTATION_DRAG_STATE_DRAG": "number",
      "ANNOTATION_DRAG_STATE_END": "number",
      "ANNOTATION_DRAG_STATE_NONE": "number",
      "ANNOTATION_DRAG_STATE_START": "number",
      "ANNOTATION_GREEN": "number",
      "ANNOTATION_PURPLE": "number",
      "ANNOTATION_RED": "number",
      "HYBRID_TYPE": "number",
      "SATELLITE_TYPE": "number",
      "STANDARD_TYPE": "number",
      "TERRAIN_TYPE": "number",
      "apiName": "string",
      "bubbleParent": "bool",
      "addEventListener": "fn(name: string, callback: fn(args: [?]))",
      "applyProperties": "fn(props: ?)",
      "createAnnotation": "fn(parameters?: ?) -> Ti.Map.Annotation",
      "createView": "fn(parameters?: ?) -> Ti.Map.View",
      "fireEvent": "fn(name: string, event: ?)",
      "getApiName": "fn() -> string",
      "getBubbleParent": "fn() -> bool",
      "removeEventListener": "fn(name: string, callback: fn(args: [?]))",
      "setBubbleParent": "fn(bubbleParent: bool)",
      "View": {
        "animated": "bool",
        "annotations": "?",
        "hideAnnotationWhenTouchMap": "bool",
        "latitudeDelta": "number",
        "longitudeDelta": "number",
        "mapType": "number",
        "region": "MapRegionType",
        "regionFit": "bool",
        "userLocation": "bool",
        "addAnnotation": "fn(annotation: ?)",
        "addAnnotations": "fn(annotations: ?)",
        "addRoute": "fn(route: MapRouteType)",
        "deselectAnnotation": "fn(annotation: string)",
        "getAnimate": "fn() -> bool",
        "getAnimated": "fn() -> bool",
        "getAnnotations": "fn() -> ?",
        "getHideAnnotationWhenTouchMap": "fn() -> bool",
        "getLatitudeDelta": "fn() -> number",
        "getLongitudeDelta": "fn() -> number",
        "getMapType": "fn() -> number",
        "getRegion": "fn() -> MapRegionType",
        "getRegionFit": "fn() -> bool",
        "getUserLocation": "fn() -> bool",
        "removeAllAnnotations": "fn()",
        "removeAnnotation": "fn(annotation: string)",
        "removeAnnotations": "fn(annotations: ?)",
        "removeRoute": "fn(route: MapRouteType)",
        "selectAnnotation": "fn(annotation: string)",
        "setAnimate": "fn(animate: bool)",
        "setAnimated": "fn(animated: bool)",
        "setAnnotations": "fn(annotations: ?)",
        "setHideAnnotationWhenTouchMap": "fn(hideAnnotationWhenTouchMap: bool)",
        "setLocation": "fn(location: MapLocationType)",
        "setMapType": "fn(mapType: number)",
        "setRegion": "fn(region: MapRegionType)",
        "setRegionFit": "fn(regionFit: bool)",
        "setUserLocation": "fn(userLocation: bool)",
        "zoom": "fn(level: number)"
      },
      "Annotation": {
        "animate": "bool",
        "canShowCallout": "bool",
        "centerOffset": "Point",
        "customView": "Ti.UI.View",
        "draggable": "bool",
        "image": "?",
        "latitude": "number",
        "leftButton": "?",
        "leftView": "Ti.UI.View",
        "longitude": "number",
        "pinImage": "string",
        "pincolor": "number",
        "rightButton": "?",
        "rightView": "Ti.UI.View",
        "subtitle": "string",
        "subtitleid": "string",
        "title": "string",
        "titleid": "string",
        "getAnimate": "fn() -> bool",
        "getCanShowCallout": "fn() -> bool",
        "getCenterOffset": "fn() -> Point",
        "getCustomView": "fn() -> Ti.UI.View",
        "getDraggable": "fn() -> bool",
        "getImage": "fn() -> ?",
        "getLatitude": "fn() -> number",
        "getLeftButton": "fn() -> ?",
        "getLeftView": "fn() -> Ti.UI.View",
        "getLongitude": "fn() -> number",
        "getPinImage": "fn() -> string",
        "getPincolor": "fn() -> number",
        "getRightButton": "fn() -> ?",
        "getRightView": "fn() -> Ti.UI.View",
        "getSubtitle": "fn() -> string",
        "getSubtitleid": "fn() -> string",
        "getTitle": "fn() -> string",
        "getTitleid": "fn() -> string",
        "setAnimate": "fn(animate: bool)",
        "setCanShowCallout": "fn(canShowCallout: bool)",
        "setCenterOffset": "fn(centerOffset: Point)",
        "setCustomView": "fn(customView: Ti.UI.View)",
        "setDraggable": "fn(draggable: bool)",
        "setImage": "fn(image: string)",
        "setLatitude": "fn(latitude: number)",
        "setLeftButton": "fn(leftButton: number)",
        "setLeftView": "fn(leftView: Ti.UI.View)",
        "setLongitude": "fn(longitude: number)",
        "setPinImage": "fn(pinImage: string)",
        "setPincolor": "fn(pincolor: number)",
        "setRightButton": "fn(rightButton: number)",
        "setRightView": "fn(rightView: Ti.UI.View)",
        "setSubtitle": "fn(subtitle: string)",
        "setSubtitleid": "fn(subtitleid: string)",
        "setTitle": "fn(title: string)",
        "setTitleid": "fn(titleid: string)"
      }
    },
    "Cloud": {
      "accessToken": "string",
      "apiName": "string",
      "bubbleParent": "bool",
      "debug": "bool",
      "expiresIn": "number",
      "ondatastream": "fn(args: [?])",
      "onsendstream": "fn(args: [?])",
      "sessionId": "string",
      "useSecure": "bool",
      "applyProperties": "fn(props: ?)",
      "getAccessToken": "fn() -> string",
      "getApiName": "fn() -> string",
      "getBubbleParent": "fn() -> bool",
      "getDebug": "fn() -> bool",
      "getExpiresIn": "fn() -> number",
      "getOndatastream": "fn() -> fn(args: [?])",
      "getOnsendstream": "fn() -> fn(args: [?])",
      "getSessionId": "fn() -> string",
      "getUseSecure": "fn() -> bool",
      "hasStoredSession": "fn() -> bool",
      "retrieveStoredSession": "fn() -> string",
      "sendRequest": "fn(parameters: ?, callback: fn(args: [?]))",
      "setAccessToken": "fn(accessToken: string)",
      "setBubbleParent": "fn(bubbleParent: bool)",
      "setDebug": "fn(debug: bool)",
      "setOndatastream": "fn(ondatastream: fn(args: [?]))",
      "setOnsendstream": "fn(onsendstream: fn(args: [?]))",
      "setSessionId": "fn(sessionId: string)",
      "setUseSecure": "fn(useSecure: bool)",
      "Objects": {
        "create": "fn(parameters: ?, callback: fn(args: [?]))",
        "query": "fn(parameters?: ?, callback?: fn(args: [?]))",
        "remove": "fn(parameters: ?, callback: fn(args: [?]))",
        "show": "fn(parameters?: ?, callback?: fn(args: [?]))",
        "update": "fn(parameters: ?, callback: fn(args: [?]))"
      },
      "SocialIntegrations": {
        "externalAccountLink": "fn(parameters: ?, callback: fn(args: [?]))",
        "externalAccountLogin": "fn(parameters: ?, callback: fn(args: [?]))",
        "externalAccountUnlink": "fn(parameters: ?, callback: fn(args: [?]))",
        "searchFacebookFriends": "fn(callback: fn(args: [?]))"
      },
      "PushNotifications": {
        "notify": "fn(parameters: ?, callback: fn(args: [?]))",
        "notifyTokens": "fn(parameters: ?, callback: fn(args: [?]))",
        "query": "fn(parameters: ?, callback: fn(args: [?]))",
        "queryChannels": "fn(parameters: ?, callback: fn(args: [?]))",
        "resetBadge": "fn(parameters: ?, callback: fn(args: [?]))",
        "setBadge": "fn(parameters: ?, callback: fn(args: [?]))",
        "showChannels": "fn(parameters: ?, callback: fn(args: [?]))",
        "subscribe": "fn(parameters: ?, callback: fn(args: [?]))",
        "subscribeToken": "fn(parameters: ?, callback: fn(args: [?]))",
        "unsubscribe": "fn(parameters: ?, callback: fn(args: [?]))",
        "unsubscribeToken": "fn(parameters: ?, callback: fn(args: [?]))",
        "updateSubscription": "fn(parameters: ?, callback: fn(args: [?]))"
      },
      "Clients": {
        "geolocate": "fn(parameters?: ?, callback?: fn(args: [?]))"
      },
      "ACLs": {
        "addUser": "fn(parameters: ?, callback: fn(args: [?]))",
        "checkUser": "fn(parameters: ?, callback: fn(args: [?]))",
        "create": "fn(parameters: ?, callback: fn(args: [?]))",
        "remove": "fn(parameters: ?, callback: fn(args: [?]))",
        "removeUser": "fn(parameters: ?, callback: fn(args: [?]))",
        "show": "fn(parameters: ?, callback: fn(args: [?]))",
        "update": "fn(parameters?: ?, callback?: fn(args: [?]))"
      },
      "Users": {
        "create": "fn(parameters: ?, callback: fn(args: [?]))",
        "login": "fn(parameters: ?, callback: fn(args: [?]))",
        "logout": "fn(callback: fn(args: [?]))",
        "query": "fn(parameters?: ?, callback?: fn(args: [?]))",
        "remove": "fn(parameters: ?, callback: fn(args: [?]))",
        "requestResetPassword": "fn(parameters: ?, callback: fn(args: [?]))",
        "resendConfirmation": "fn(parameters: ?, callback: fn(args: [?]))",
        "search": "fn(parameters?: ?, callback?: fn(args: [?]))",
        "secureCreate": "fn(parameters?: ?, callback?: fn(args: [?]))",
        "secureLogin": "fn(parameters?: ?, callback?: fn(args: [?]))",
        "secureStatus": "fn() -> bool",
        "show": "fn(parameters: ?, callback: fn(args: [?]))",
        "showMe": "fn(callback: fn(args: [?]))",
        "update": "fn(parameters: ?, callback: fn(args: [?]))"
      },
      "Messages": {
        "create": "fn(parameters: ?, callback: fn(args: [?]))",
        "remove": "fn(parameters: ?, callback: fn(args: [?]))",
        "removeThread": "fn(parameters: ?, callback: fn(args: [?]))",
        "reply": "fn(parameters?: ?, callback?: fn(args: [?]))",
        "show": "fn(parameters: ?, callback: fn(args: [?]))",
        "showInbox": "fn(parameters: ?, callback: fn(args: [?]))",
        "showSent": "fn(parameters: ?, callback: fn(args: [?]))",
        "showThread": "fn(parameters: ?, callback: fn(args: [?]))",
        "showThreads": "fn(parameters: ?, callback: fn(args: [?]))"
      },
      "Events": {
        "create": "fn(parameters: ?, callback: fn(args: [?]))",
        "query": "fn(parameters?: ?, callback?: fn(args: [?]))",
        "queryOccurrences": "fn(parameters?: ?, callback?: fn(args: [?]))",
        "remove": "fn(parameters: ?, callback: fn(args: [?]))",
        "search": "fn(parameters?: ?, callback?: fn(args: [?]))",
        "searchOccurrences": "fn(parameters?: ?, callback?: fn(args: [?]))",
        "show": "fn(parameters?: ?, callback?: fn(args: [?]))",
        "showOccurrences": "fn(parameters?: ?, callback?: fn(args: [?]))",
        "update": "fn(parameters: ?, callback: fn(args: [?]))"
      },
      "Reviews": {
        "create": "fn(parameters: ?, callback: fn(args: [?]))",
        "query": "fn(parameters: ?, callback: fn(args: [?]))",
        "remove": "fn(parameters: ?, callback: fn(args: [?]))",
        "show": "fn(parameters: ?, callback: fn(args: [?]))",
        "update": "fn(parameters: ?, callback: fn(args: [?]))"
      },
      "Chats": {
        "create": "fn(parameters: ?, callback: fn(args: [?]))",
        "getChatGroups": "fn(parameters?: ?, callback?: fn(args: [?]))",
        "query": "fn(parameters: ?, callback: fn(args: [?]))",
        "queryChatGroups": "fn(parameters?: ?, callback?: fn(args: [?]))",
        "remove": "fn(parameters: ?, callback: fn(args: [?]))"
      },
      "KeyValues": {
        "append": "fn(parameters: ?, callback: fn(args: [?]))",
        "get": "fn(parameters: ?, callback: fn(args: [?]))",
        "increment": "fn(parameters: ?, callback: fn(args: [?]))",
        "remove": "fn(parameters: ?, callback: fn(args: [?]))",
        "set": "fn(parameters: ?, callback: fn(args: [?]))"
      },
      "GeoFences": {
        "create": "fn(parameters: ?, callback: fn(args: [?]))",
        "query": "fn(parameters?: ?, callback?: fn(args: [?]))",
        "remove": "fn(parameters: ?, callback: fn(args: [?]))",
        "update": "fn(parameters: ?, callback: fn(args: [?]))"
      },
      "Checkins": {
        "create": "fn(parameters: ?, callback: fn(args: [?]))",
        "query": "fn(parameters?: ?, callback?: fn(args: [?]))",
        "remove": "fn(parameters: ?, callback: fn(args: [?]))",
        "show": "fn(parameters: ?, callback: fn(args: [?]))"
      },
      "Friends": {
        "add": "fn(parameters: ?, callback: fn(args: [?]))",
        "approve": "fn(parameters: ?, callback: fn(args: [?]))",
        "remove": "fn(parameters: ?, callback: fn(args: [?]))",
        "requests": "fn(parameters: ?, callback: fn(args: [?]))",
        "search": "fn(parameters: ?, callback: fn(args: [?]))"
      },
      "Files": {
        "create": "fn(parameters: ?, callback: fn(args: [?]))",
        "query": "fn(parameters?: ?, callback?: fn(args: [?]))",
        "remove": "fn(parameters: ?, callback: fn(args: [?]))",
        "show": "fn(parameters: ?, callback: fn(args: [?]))",
        "update": "fn(parameters: ?, callback: fn(args: [?]))"
      },
      "PushSchedules": {
        "create": "fn(parameters: ?, callback: fn(args: [?]))",
        "query": "fn(parameters: ?, callback: fn(args: [?]))",
        "remove": "fn(parameters: ?, callback: fn(args: [?]))"
      },
      "Likes": {
        "create": "fn(parameters: ?, callback: fn(args: [?]))",
        "remove": "fn(parameters: ?, callback: fn(args: [?]))"
      },
      "Photos": {
        "create": "fn(parameters: ?, callback: fn(args: [?]))",
        "query": "fn(parameters?: ?, callback?: fn(args: [?]))",
        "remove": "fn(parameters: ?, callback: fn(args: [?]))",
        "search": "fn(parameters: ?, callback: fn(args: [?]))",
        "show": "fn(parameters: ?, callback: fn(args: [?]))",
        "update": "fn(parameters: ?, callback: fn(args: [?]))"
      },
      "Statuses": {
        "create": "fn(parameters: ?, callback: fn(args: [?]))",
        "delete": "fn(parameters: ?, callback: fn(args: [?]))",
        "query": "fn(parameters?: ?, callback?: fn(args: [?]))",
        "search": "fn(parameters: ?, callback: fn(args: [?]))",
        "show": "fn(parameters: ?, callback: fn(args: [?]))",
        "update": "fn(parameters: ?, callback: fn(args: [?]))"
      },
      "PhotoCollections": {
        "create": "fn(parameters: ?, callback: fn(args: [?]))",
        "remove": "fn(parameters: ?, callback: fn(args: [?]))",
        "search": "fn(parameters: ?, callback: fn(args: [?]))",
        "show": "fn(parameters: ?, callback: fn(args: [?]))",
        "showPhotos": "fn(parameters: ?, callback: fn(args: [?]))",
        "showSubCollections": "fn(parameters: ?, callback: fn(args: [?]))",
        "update": "fn(parameters: ?, callback: fn(args: [?]))"
      },
      "Posts": {
        "create": "fn(parameters: ?, callback: fn(args: [?]))",
        "query": "fn(parameters?: ?, callback?: fn(args: [?]))",
        "remove": "fn(parameters: ?, callback: fn(args: [?]))",
        "show": "fn(parameters: ?, callback: fn(args: [?]))",
        "update": "fn(parameters: ?, callback: fn(args: [?]))"
      },
      "Emails": {
        "send": "fn(parameters: ?, callback: fn(args: [?]))"
      },
      "Places": {
        "create": "fn(parameters: ?, callback: fn(args: [?]))",
        "query": "fn(parameters?: ?, callback?: fn(args: [?]))",
        "remove": "fn(parameters: ?, callback: fn(args: [?]))",
        "search": "fn(parameters?: ?, callback?: fn(args: [?]))",
        "show": "fn(parameters: ?, callback: fn(args: [?]))",
        "update": "fn(parameters: ?, callback: fn(args: [?]))"
      }
    },
    "Blob": {
      "file": "Ti.Filesystem.File",
      "height": "number",
      "length": "number",
      "mimeType": "string",
      "nativePath": "string",
      "size": "number",
      "text": "string",
      "width": "number",
      "append": "fn(blob: Ti.Blob)",
      "getFile": "fn() -> Ti.Filesystem.File",
      "getHeight": "fn() -> number",
      "getLength": "fn() -> number",
      "getMimeType": "fn() -> string",
      "getNativePath": "fn() -> string",
      "getSize": "fn() -> number",
      "getText": "fn() -> string",
      "getWidth": "fn() -> number",
      "imageAsCropped": "fn(options: ?) -> Ti.Blob",
      "imageAsResized": "fn(width: number, height: number) -> Ti.Blob",
      "imageAsThumbnail": "fn(size: number, borderSize?: number, cornerRadius?: number) -> Ti.Blob",
      "imageWithAlpha": "fn() -> Ti.Blob",
      "imageWithRoundedCorner": "fn(cornerSize: number, borderSize?: number) -> Ti.Blob",
      "imageWithTransparentBorder": "fn(size: number) -> Ti.Blob"
    },
    "Codec": {
      "BIG_ENDIAN": "number",
      "CHARSET_ASCII": "string",
      "CHARSET_ISO_LATIN_1": "string",
      "CHARSET_UTF16": "string",
      "CHARSET_UTF16BE": "string",
      "CHARSET_UTF16LE": "string",
      "CHARSET_UTF8": "string",
      "LITTLE_ENDIAN": "number",
      "TYPE_BYTE": "string",
      "TYPE_DOUBLE": "string",
      "TYPE_FLOAT": "string",
      "TYPE_INT": "string",
      "TYPE_LONG": "string",
      "TYPE_SHORT": "string",
      "decodeNumber": "fn(options: DecodeNumberDict) -> number",
      "decodeString": "fn(options: DecodeStringDict) -> string",
      "encodeNumber": "fn(options: EncodeNumberDict) -> number",
      "encodeString": "fn(options: ?) -> number",
      "getNativeByteOrder": "fn() -> number"
    },
    "Locale": {
      "currentCountry": "string",
      "currentLanguage": "string",
      "currentLocale": "string",
      "formatTelephoneNumber": "fn(number: string) -> string",
      "getCurrencyCode": "fn(locale: string) -> string",
      "getCurrencySymbol": "fn(currencyCode: string) -> string",
      "getCurrentCountry": "fn() -> string",
      "getCurrentLanguage": "fn() -> string",
      "getCurrentLocale": "fn() -> string",
      "getLocaleCurrencySymbol": "fn(locale: string) -> string",
      "getString": "fn(key: string, hint?: string) -> string"
    },
    "App": {
      "EVENT_ACCESSIBILITY_ANNOUNCEMENT": "string",
      "EVENT_ACCESSIBILITY_CHANGED": "string",
      "accessibilityEnabled": "bool",
      "analytics": "bool",
      "apiName": "string",
      "bubbleParent": "bool",
      "copyright": "string",
      "deployType": "string",
      "description": "string",
      "disableNetworkActivityIndicator": "bool",
      "forceSplashAsSnapshot": "bool",
      "guid": "string",
      "id": "string",
      "idleTimerDisabled": "bool",
      "installId": "string",
      "keyboardVisible": "bool",
      "name": "string",
      "proximityDetection": "bool",
      "proximityState": "bool",
      "publisher": "string",
      "sessionId": "string",
      "url": "string",
      "version": "string",
      "addEventListener": "fn(name: string, callback: fn(args: [?]))",
      "applyProperties": "fn(props: ?)",
      "fireEvent": "fn(name: string, event: ?)",
      "fireSystemEvent": "fn(eventName: string, param?: ?)",
      "getAccessibilityEnabled": "fn() -> bool",
      "getAnalytics": "fn() -> bool",
      "getApiName": "fn() -> string",
      "getArguments": "fn() -> launchOptions",
      "getBubbleParent": "fn() -> bool",
      "getCopyright": "fn() -> string",
      "getDeployType": "fn() -> string",
      "getDescription": "fn() -> string",
      "getDisableNetworkActivityIndicator": "fn() -> bool",
      "getForceSplashAsSnapshot": "fn() -> bool",
      "getGuid": "fn() -> string",
      "getId": "fn() -> string",
      "getIdleTimerDisabled": "fn() -> bool",
      "getInstallId": "fn() -> string",
      "getKeyboardVisible": "fn() -> bool",
      "getName": "fn() -> string",
      "getProximityDetection": "fn() -> bool",
      "getProximityState": "fn() -> bool",
      "getPublisher": "fn() -> string",
      "getSessionId": "fn() -> string",
      "getUrl": "fn() -> string",
      "getVersion": "fn() -> string",
      "removeEventListener": "fn(name: string, callback: fn(args: [?]))",
      "setBubbleParent": "fn(bubbleParent: bool)",
      "setDisableNetworkActivityIndicator": "fn(disableNetworkActivityIndicator: bool)",
      "setForceSplashAsSnapshot": "fn(forceSplashAsSnapshot: bool)",
      "setIdleTimerDisabled": "fn(idleTimerDisabled: bool)",
      "setProximityDetection": "fn(proximityDetection: bool)",
      "Android": {
        "R": {},
        "apiName": "string",
        "appVersionCode": "number",
        "appVersionName": "string",
        "bubbleParent": "bool",
        "launchIntent": "Ti.Android.Intent",
        "addEventListener": "fn(name: string, callback: fn(args: [?]))",
        "applyProperties": "fn(props: ?)",
        "fireEvent": "fn(name: string, event: ?)",
        "getApiName": "fn() -> string",
        "getAppVersionCode": "fn() -> number",
        "getAppVersionName": "fn() -> string",
        "getBubbleParent": "fn() -> bool",
        "getLaunchIntent": "fn() -> Ti.Android.Intent",
        "removeEventListener": "fn(name: string, callback: fn(args: [?]))",
        "setBubbleParent": "fn(bubbleParent: bool)"
      },
      "iOS": {
        "BACKGROUNDFETCHINTERVAL_MIN": "number",
        "BACKGROUNDFETCHINTERVAL_NEVER": "number",
        "EVENT_ACCESSIBILITY_LAYOUT_CHANGED": "string",
        "EVENT_ACCESSIBILITY_SCREEN_CHANGED": "string",
        "USER_NOTIFICATION_ACTIVATION_MODE_BACKGROUND": "number",
        "USER_NOTIFICATION_ACTIVATION_MODE_FOREGROUND": "number",
        "USER_NOTIFICATION_TYPE_ALERT": "number",
        "USER_NOTIFICATION_TYPE_BADGE": "number",
        "USER_NOTIFICATION_TYPE_NONE": "number",
        "USER_NOTIFICATION_TYPE_SOUND": "number",
        "apiName": "string",
        "applicationOpenSettingsURL": "string",
        "bubbleParent": "bool",
        "currentUserNotificationSettings": "UserNotificationSettings",
        "addEventListener": "fn(name: string, callback: fn(args: [?]))",
        "applyProperties": "fn(props: ?)",
        "cancelAllLocalNotifications": "fn()",
        "cancelLocalNotification": "fn(id: number)",
        "createUserNotificationAction": "fn(parameters?: ?) -> Ti.App.iOS.UserNotificationAction",
        "createUserNotificationCategory": "fn(parameters?: ?) -> Ti.App.iOS.UserNotificationCategory",
        "endBackgroundHandler": "fn(handlerID: string)",
        "fireEvent": "fn(name: string, event: ?)",
        "getApiName": "fn() -> string",
        "getApplicationOpenSettingsURL": "fn() -> string",
        "getBubbleParent": "fn() -> bool",
        "getCurrentUserNotificationSettings": "fn() -> UserNotificationSettings",
        "registerBackgroundService": "fn(params: ?) -> Ti.App.iOS.BackgroundService",
        "registerUserNotificationSettings": "fn(params: UserNotificationSettings)",
        "removeEventListener": "fn(name: string, callback: fn(args: [?]))",
        "scheduleLocalNotification": "fn(params: NotificationParams) -> Ti.App.iOS.LocalNotification",
        "setBubbleParent": "fn(bubbleParent: bool)",
        "setMinimumBackgroundFetchInterval": "fn(fetchInterval: number)",
        "UserNotificationAction": {
          "activationMode": "number",
          "authenticationRequired": "bool",
          "destructive": "bool",
          "identifier": "string",
          "title": "string",
          "getActivationMode": "fn() -> number",
          "getAuthenticationRequired": "fn() -> bool",
          "getDestructive": "fn() -> bool",
          "getIdentifier": "fn() -> string",
          "getTitle": "fn() -> string"
        },
        "LocalNotification": {
          "cancel": "fn()"
        },
        "UserNotificationCategory": {
          "actionsForDefaultContext": "?",
          "actionsForMinimalContext": "?",
          "identifier": "string",
          "getActionsForDefaultContext": "fn() -> ?",
          "getActionsForMinimalContext": "fn() -> ?",
          "getIdentifier": "fn() -> string"
        },
        "BackgroundService": {
          "url": "string",
          "getUrl": "fn() -> string",
          "stop": "fn()",
          "unregister": "fn()"
        }
      },
      "Properties": {
        "getBool": "fn(property: string, _default?: bool) -> bool",
        "getDouble": "fn(property: string, _default?: number) -> number",
        "getInt": "fn(property: string, _default?: number) -> number",
        "getList": "fn(property: string, _default?: ?) -> ?",
        "getObject": "fn(property: string, _default?: ?) -> ?",
        "getString": "fn(property: string, _default?: string) -> string",
        "hasProperty": "fn(property: string) -> bool",
        "listProperties": "fn() -> ?",
        "removeProperty": "fn(property: string)",
        "setBool": "fn(property: string, value: bool)",
        "setDouble": "fn(property: string, value: number)",
        "setInt": "fn(property: string, value: number)",
        "setList": "fn(property: string, value: ?)",
        "setObject": "fn(property: string, value: ?)",
        "setString": "fn(property: string, value: string)"
      },
      "Tizen": {
        "categories": "?",
        "iconPath": "string",
        "id": "string",
        "installDate": "Date",
        "name": "string",
        "show": "bool",
        "size": "number",
        "exit": "fn()",
        "getCategories": "fn() -> ?",
        "getIconPath": "fn() -> string",
        "getId": "fn() -> string",
        "getInstallDate": "fn() -> Date",
        "getName": "fn() -> string",
        "getShow": "fn() -> bool",
        "getSize": "fn() -> number",
        "hide": "fn()"
      }
    },
    "Android": {
      "ACTION_AIRPLANE_MODE_CHANGED": "string",
      "ACTION_ALL_APPS": "string",
      "ACTION_ANSWER": "string",
      "ACTION_ATTACH_DATA": "string",
      "ACTION_BATTERY_CHANGED": "string",
      "ACTION_BATTERY_LOW": "string",
      "ACTION_BATTERY_OKAY": "string",
      "ACTION_BOOT_COMPLETED": "string",
      "ACTION_BUG_REPORT": "string",
      "ACTION_CALL": "string",
      "ACTION_CALL_BUTTON": "string",
      "ACTION_CAMERA_BUTTON": "string",
      "ACTION_CHOOSER": "string",
      "ACTION_CLOSE_SYSTEM_DIALOGS": "string",
      "ACTION_CONFIGURATION_CHANGED": "string",
      "ACTION_CREATE_SHORTCUT": "string",
      "ACTION_DATE_CHANGED": "string",
      "ACTION_DEFAULT": "string",
      "ACTION_DELETE": "string",
      "ACTION_DEVICE_STORAGE_LOW": "string",
      "ACTION_DIAL": "string",
      "ACTION_EDIT": "string",
      "ACTION_GET_CONTENT": "string",
      "ACTION_GTALK_SERVICE_CONNECTED": "string",
      "ACTION_GTALK_SERVICE_DISCONNECTED": "string",
      "ACTION_HEADSET_PLUG": "string",
      "ACTION_INPUT_METHOD_CHANGED": "string",
      "ACTION_INSERT": "string",
      "ACTION_INSERT_OR_EDIT": "string",
      "ACTION_MAIN": "string",
      "ACTION_MANAGE_PACKAGE_STORAGE": "string",
      "ACTION_MEDIA_BAD_REMOVAL": "string",
      "ACTION_MEDIA_BUTTON": "string",
      "ACTION_MEDIA_CHECKING": "string",
      "ACTION_MEDIA_EJECT": "string",
      "ACTION_MEDIA_MOUNTED": "string",
      "ACTION_MEDIA_NOFS": "string",
      "ACTION_MEDIA_REMOVED": "string",
      "ACTION_MEDIA_SCANNER_FINISHED": "string",
      "ACTION_MEDIA_SCANNER_SCAN_FILE": "string",
      "ACTION_MEDIA_SCANNER_STARTED": "string",
      "ACTION_MEDIA_SHARED": "string",
      "ACTION_MEDIA_UNMOUNTABLE": "string",
      "ACTION_MEDIA_UNMOUNTED": "string",
      "ACTION_NEW_OUTGOING_CALL": "string",
      "ACTION_PACKAGE_ADDED": "string",
      "ACTION_PACKAGE_CHANGED": "string",
      "ACTION_PACKAGE_DATA_CLEARED": "string",
      "ACTION_PACKAGE_INSTALL": "string",
      "ACTION_PACKAGE_REMOVED": "string",
      "ACTION_PACKAGE_REPLACED": "string",
      "ACTION_PACKAGE_RESTARTED": "string",
      "ACTION_PICK": "string",
      "ACTION_PICK_ACTIVITY": "string",
      "ACTION_POWER_CONNECTED": "string",
      "ACTION_POWER_DISCONNECTED": "string",
      "ACTION_POWER_USAGE_SUMMARY": "string",
      "ACTION_PROVIDER_CHANGED": "string",
      "ACTION_REBOOT": "string",
      "ACTION_RUN": "string",
      "ACTION_SCREEN_OFF": "string",
      "ACTION_SCREEN_ON": "string",
      "ACTION_SEARCH": "string",
      "ACTION_SEARCH_LONG_PRESS": "string",
      "ACTION_SEND": "string",
      "ACTION_SENDTO": "string",
      "ACTION_SEND_MULTIPLE": "string",
      "ACTION_SET_WALLPAPER": "string",
      "ACTION_SHUTDOWN": "string",
      "ACTION_SYNC": "string",
      "ACTION_SYSTEM_TUTORIAL": "string",
      "ACTION_TIME_CHANGED": "string",
      "ACTION_TIME_TICK": "string",
      "ACTION_UID_REMOVED": "string",
      "ACTION_UMS_CONNECTED": "string",
      "ACTION_UMS_DISCONNECTED": "string",
      "ACTION_USER_PRESENT": "string",
      "ACTION_VIEW": "string",
      "ACTION_VOICE_COMMAND": "string",
      "ACTION_WALLPAPER_CHANGED": "string",
      "ACTION_WEB_SEARCH": "string",
      "CATEGORY_ALTERNATIVE": "string",
      "CATEGORY_BROWSABLE": "string",
      "CATEGORY_DEFAULT": "string",
      "CATEGORY_DEVELOPMENT_PREFERENCE": "string",
      "CATEGORY_EMBED": "string",
      "CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST": "string",
      "CATEGORY_HOME": "string",
      "CATEGORY_INFO": "string",
      "CATEGORY_LAUNCHER": "string",
      "CATEGORY_MONKEY": "string",
      "CATEGORY_OPENABLE": "string",
      "CATEGORY_PREFERENCE": "string",
      "CATEGORY_SAMPLE_CODE": "string",
      "CATEGORY_SELECTED_ALTERNATIVE": "string",
      "CATEGORY_TAB": "string",
      "CATEGORY_TEST": "string",
      "CATEGORY_UNIT_TEST": "string",
      "DEFAULT_ALL": "number",
      "DEFAULT_LIGHTS": "number",
      "DEFAULT_SOUND": "number",
      "DEFAULT_VIBRATE": "number",
      "EXTRA_ALARM_COUNT": "string",
      "EXTRA_BCC": "string",
      "EXTRA_CC": "string",
      "EXTRA_DATA_REMOVED": "string",
      "EXTRA_DONT_KILL_APP": "string",
      "EXTRA_EMAIL": "string",
      "EXTRA_INTENT": "string",
      "EXTRA_KEY_EVENT": "string",
      "EXTRA_PHONE_NUMBER": "string",
      "EXTRA_REPLACING": "string",
      "EXTRA_SHORTCUT_ICON": "string",
      "EXTRA_SHORTCUT_ICON_RESOURCE": "string",
      "EXTRA_SHORTCUT_INTENT": "string",
      "EXTRA_SHORTCUT_NAME": "string",
      "EXTRA_STREAM": "string",
      "EXTRA_SUBJECT": "string",
      "EXTRA_TEMPLATE": "string",
      "EXTRA_TEXT": "string",
      "EXTRA_TITLE": "string",
      "EXTRA_UID": "string",
      "FILL_IN_ACTION": "number",
      "FILL_IN_CATEGORIES": "number",
      "FILL_IN_COMPONENT": "number",
      "FILL_IN_DATA": "number",
      "FILL_IN_PACKAGE": "number",
      "FLAG_ACTIVITY_BROUGHT_TO_FRONT": "number",
      "FLAG_ACTIVITY_CLEAR_TOP": "number",
      "FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET": "number",
      "FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS": "number",
      "FLAG_ACTIVITY_FORWARD_RESULT": "number",
      "FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY": "number",
      "FLAG_ACTIVITY_MULTIPLE_TASK": "number",
      "FLAG_ACTIVITY_NEW_TASK": "number",
      "FLAG_ACTIVITY_NO_ANIMATION": "number",
      "FLAG_ACTIVITY_NO_HISTORY": "number",
      "FLAG_ACTIVITY_NO_USER_ACTION": "number",
      "FLAG_ACTIVITY_PREVIOUS_IS_TOP": "number",
      "FLAG_ACTIVITY_REORDER_TO_FRONT": "number",
      "FLAG_ACTIVITY_RESET_TASK_IF_NEEDED": "number",
      "FLAG_ACTIVITY_SINGLE_TOP": "number",
      "FLAG_AUTO_CANCEL": "number",
      "FLAG_CANCEL_CURRENT": "number",
      "FLAG_DEBUG_LOG_RESOLUTION": "number",
      "FLAG_FROM_BACKGROUND": "number",
      "FLAG_GRANT_READ_URI_PERMISSION": "number",
      "FLAG_GRANT_WRITE_URI_PERMISSION": "number",
      "FLAG_INSISTENT": "number",
      "FLAG_NO_CLEAR": "number",
      "FLAG_NO_CREATE": "number",
      "FLAG_ONE_SHOT": "number",
      "FLAG_ONGOING_EVENT": "number",
      "FLAG_ONLY_ALERT_ONCE": "number",
      "FLAG_RECEIVER_REGISTERED_ONLY": "number",
      "FLAG_SHOW_LIGHTS": "number",
      "FLAG_UPDATE_CURRENT": "number",
      "NAVIGATION_MODE_STANDARD": "number",
      "NAVIGATION_MODE_TABS": "number",
      "PENDING_INTENT_FOR_ACTIVITY": "number",
      "PENDING_INTENT_FOR_BROADCAST": "number",
      "PENDING_INTENT_FOR_SERVICE": "number",
      "PENDING_INTENT_MAX_VALUE": "number",
      "R": {
        "anim": "?",
        "array": "?",
        "attr": "?",
        "color": "?",
        "dimen": "?",
        "drawable": "?",
        "id": "?",
        "integer": "?",
        "layout": "?",
        "string": "?",
        "style": "?",
        "styleable": "?"
      },
      "RESULT_CANCELED": "number",
      "RESULT_FIRST_USER": "number",
      "RESULT_OK": "number",
      "SCREEN_ORIENTATION_BEHIND": "number",
      "SCREEN_ORIENTATION_LANDSCAPE": "number",
      "SCREEN_ORIENTATION_NOSENSOR": "number",
      "SCREEN_ORIENTATION_PORTRAIT": "number",
      "SCREEN_ORIENTATION_SENSOR": "number",
      "SCREEN_ORIENTATION_UNSPECIFIED": "number",
      "SCREEN_ORIENTATION_USER": "number",
      "SHOW_AS_ACTION_ALWAYS": "number",
      "SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW": "number",
      "SHOW_AS_ACTION_IF_ROOM": "number",
      "SHOW_AS_ACTION_NEVER": "number",
      "SHOW_AS_ACTION_WITH_TEXT": "number",
      "START_NOT_STICKY": "number",
      "START_REDELIVER_INTENT": "number",
      "STREAM_ALARM": "number",
      "STREAM_DEFAULT": "number",
      "STREAM_MUSIC": "number",
      "STREAM_NOTIFICATION": "number",
      "STREAM_RING": "number",
      "STREAM_SYSTEM": "number",
      "STREAM_VOICE_CALL": "number",
      "URI_INTENT_SCHEME": "number",
      "apiName": "string",
      "bubbleParent": "bool",
      "currentActivity": "Ti.Android.Activity",
      "currentService": "Ti.Android.Service",
      "addEventListener": "fn(name: string, callback: fn(args: [?]))",
      "applyProperties": "fn(props: ?)",
      "createBroadcastIntent": "fn(options: BroadcastIntentOptions) -> Ti.Android.Intent",
      "createBroadcastReceiver": "fn(parameters?: ?) -> Ti.Android.BroadcastReceiver",
      "createIntent": "fn(parameters?: ?) -> Ti.Android.Intent",
      "createIntentChooser": "fn(intent: Ti.Android.Intent, title: string) -> Ti.Android.Intent",
      "createNotification": "fn(parameters?: ?) -> Ti.Android.Notification",
      "createPendingIntent": "fn(parameters?: ?) -> Ti.Android.PendingIntent",
      "createRemoteViews": "fn(parameters?: ?) -> Ti.Android.RemoteViews",
      "createService": "fn(intent: Ti.Android.Intent) -> Ti.Android.Service",
      "createServiceIntent": "fn(options: ServiceIntentOptions) -> Ti.Android.Intent",
      "fireEvent": "fn(name: string, event: ?)",
      "getApiName": "fn() -> string",
      "getBubbleParent": "fn() -> bool",
      "getCurrentActivity": "fn() -> Ti.Android.Activity",
      "getCurrentService": "fn() -> Ti.Android.Service",
      "isServiceRunning": "fn(intent: Ti.Android.Intent) -> bool",
      "registerBroadcastReceiver": "fn(broadcastReceiver: Ti.Android.BroadcastReceiver, actions: ?)",
      "removeEventListener": "fn(name: string, callback: fn(args: [?]))",
      "setBubbleParent": "fn(bubbleParent: bool)",
      "startService": "fn(intent: Ti.Android.Intent)",
      "stopService": "fn(intent: Ti.Android.Intent)",
      "unregisterBroadcastReceiver": "fn(broadcastReceiver: Ti.Android.BroadcastReceiver)",
      "Intent": {
        "action": "string",
        "className": "string",
        "data": "string",
        "flags": "number",
        "packageName": "string",
        "type": "string",
        "url": "string",
        "addCategory": "fn(name: string)",
        "addFlags": "fn(flags: number)",
        "getAction": "fn() -> string",
        "getBlobExtra": "fn(name: string) -> Ti.Blob",
        "getBooleanExtra": "fn(name: string) -> bool",
        "getClassName": "fn() -> string",
        "getData": "fn() -> string",
        "getDoubleExtra": "fn(name: string) -> number",
        "getFlags": "fn() -> number",
        "getIntExtra": "fn(name: string) -> number",
        "getLongExtra": "fn(name: string) -> number",
        "getPackageName": "fn() -> string",
        "getStringExtra": "fn(name: string) -> string",
        "getType": "fn() -> string",
        "getUrl": "fn() -> string",
        "hasExtra": "fn(name: string) -> bool",
        "putExtra": "fn(name: string, value: ?)",
        "putExtraUri": "fn(name: string, value: string)",
        "setFlags": "fn(flags: number)"
      },
      "Notification": {
        "audioStreamType": "number",
        "contentIntent": "Ti.Android.PendingIntent",
        "contentText": "string",
        "contentTitle": "string",
        "contentView": "Ti.Android.RemoteViews",
        "defaults": "number",
        "deleteIntent": "Ti.Android.PendingIntent",
        "flags": "number",
        "icon": "?",
        "ledARGB": "number",
        "ledOffMS": "number",
        "ledOnMS": "number",
        "number": "number",
        "sound": "string",
        "tickerText": "string",
        "when": "?",
        "getAudioStreamType": "fn() -> number",
        "getContentIntent": "fn() -> Ti.Android.PendingIntent",
        "getContentText": "fn() -> string",
        "getContentTitle": "fn() -> string",
        "getDefaults": "fn() -> number",
        "getDeleteIntent": "fn() -> Ti.Android.PendingIntent",
        "getFlags": "fn() -> number",
        "getIcon": "fn() -> ?",
        "getLedARGB": "fn() -> number",
        "getLedOffMS": "fn() -> number",
        "getLedOnMS": "fn() -> number",
        "getNumber": "fn() -> number",
        "getSound": "fn() -> string",
        "getTickerText": "fn() -> string",
        "getWhen": "fn() -> ?",
        "setAudioStreamType": "fn(audioStreamType: number)",
        "setContentIntent": "fn(contentIntent: Ti.Android.PendingIntent)",
        "setContentText": "fn(contentText: string)",
        "setContentTitle": "fn(contentTitle: string)",
        "setContentView": "fn(contentView: Ti.Android.RemoteViews)",
        "setDefaults": "fn(defaults: number)",
        "setDeleteIntent": "fn(deleteIntent: Ti.Android.PendingIntent)",
        "setFlags": "fn(flags: number)",
        "setIcon": "fn(icon: number)",
        "setLatestEventInfo": "fn(contentTitle: string, contentText: string, contentIntent: Ti.Android.PendingIntent)",
        "setLedARGB": "fn(ledARGB: number)",
        "setLedOffMS": "fn(ledOffMS: number)",
        "setLedOnMS": "fn(ledOnMS: number)",
        "setNumber": "fn(number: number)",
        "setSound": "fn(sound: string)",
        "setTickerText": "fn(tickerText: string)",
        "setWhen": "fn(when: Date)"
      },
      "Calendar": {
        "METHOD_ALERT": "number",
        "METHOD_DEFAULT": "number",
        "METHOD_EMAIL": "number",
        "METHOD_SMS": "number",
        "STATE_DISMISSED": "number",
        "STATE_FIRED": "number",
        "STATE_SCHEDULED": "number",
        "STATUS_CANCELED": "number",
        "STATUS_CONFIRMED": "number",
        "STATUS_TENTATIVE": "number",
        "VISIBILITY_CONFIDENTIAL": "number",
        "VISIBILITY_DEFAULT": "number",
        "VISIBILITY_PRIVATE": "number",
        "VISIBILITY_PUBLIC": "number",
        "allAlerts": "?",
        "allCalendars": "?",
        "apiName": "string",
        "bubbleParent": "bool",
        "selectableCalendars": "?",
        "addEventListener": "fn(name: string, callback: fn(args: [?]))",
        "applyProperties": "fn(props: ?)",
        "fireEvent": "fn(name: string, event: ?)",
        "getAllAlerts": "fn() -> ?",
        "getAllCalendars": "fn() -> ?",
        "getApiName": "fn() -> string",
        "getBubbleParent": "fn() -> bool",
        "getCalendarById": "fn(id: number) -> Ti.Android.Calendar.Calendar",
        "getSelectableCalendars": "fn() -> ?",
        "removeEventListener": "fn(name: string, callback: fn(args: [?]))",
        "setBubbleParent": "fn(bubbleParent: bool)",
        "Event": {
          "alerts": "?",
          "allDay": "bool",
          "begin": "Date",
          "description": "string",
          "end": "Date",
          "extendedProperties": "?",
          "hasAlarm": "bool",
          "hasExtendedProperties": "bool",
          "id": "string",
          "location": "string",
          "reminders": "?",
          "status": "number",
          "title": "string",
          "visibility": "number",
          "createAlert": "fn(data: ?) -> Ti.Android.Calendar.Alert",
          "createReminder": "fn(data: ?) -> Ti.Android.Calendar.Reminder",
          "getAlerts": "fn() -> ?",
          "getAllDay": "fn() -> bool",
          "getBegin": "fn() -> Date",
          "getDescription": "fn() -> string",
          "getEnd": "fn() -> Date",
          "getExtendedProperties": "fn() -> ?",
          "getExtendedProperty": "fn(name: string) -> string",
          "getHasAlarm": "fn() -> bool",
          "getHasExtendedProperties": "fn() -> bool",
          "getId": "fn() -> string",
          "getLocation": "fn() -> string",
          "getReminders": "fn() -> ?",
          "getStatus": "fn() -> number",
          "getTitle": "fn() -> string",
          "getVisibility": "fn() -> number",
          "setExtendedProperty": "fn(name: string, value: string)"
        },
        "Reminder": {
          "id": "string",
          "method": "number",
          "minutes": "number",
          "getId": "fn() -> string",
          "getMethod": "fn() -> number",
          "getMinutes": "fn() -> number"
        },
        "Calendar": {
          "hidden": "bool",
          "id": "string",
          "name": "string",
          "selected": "bool",
          "createEvent": "fn(properties: ?) -> Ti.Android.Calendar.Event",
          "getEventById": "fn(id: number) -> Ti.Android.Calendar.Event",
          "getEventsBetweenDates": "fn(date1: Date, date2: Date) -> ?",
          "getEventsInDate": "fn(year: number, month: number, day: number) -> ?",
          "getEventsInMonth": "fn(year: number, month: number) -> ?",
          "getEventsInYear": "fn(year: number) -> ?",
          "getHidden": "fn() -> bool",
          "getId": "fn() -> string",
          "getName": "fn() -> string",
          "getSelected": "fn() -> bool"
        },
        "Alert": {
          "alarmTime": "Date",
          "begin": "Date",
          "end": "Date",
          "eventId": "number",
          "id": "string",
          "minutes": "number",
          "state": "number",
          "getAlarmTime": "fn() -> Date",
          "getBegin": "fn() -> Date",
          "getEnd": "fn() -> Date",
          "getEventId": "fn() -> number",
          "getId": "fn() -> string",
          "getMinutes": "fn() -> number",
          "getState": "fn() -> number"
        }
      },
      "MenuItem": {
        "actionView": "Ti.UI.View",
        "actionViewExpanded": "bool",
        "checkable": "bool",
        "checked": "bool",
        "enabled": "bool",
        "groupId": "number",
        "icon": "?",
        "itemId": "number",
        "order": "number",
        "showAsAction": "number",
        "title": "string",
        "titleCondensed": "string",
        "visible": "bool",
        "collapseActionView": "fn()",
        "expandActionView": "fn()",
        "getActionView": "fn() -> Ti.UI.View",
        "getGroupId": "fn() -> number",
        "getItemId": "fn() -> number",
        "getOrder": "fn() -> number",
        "getTitle": "fn() -> string",
        "getTitleCondensed": "fn() -> string",
        "isActionViewExpanded": "fn() -> bool",
        "isCheckable": "fn() -> bool",
        "isChecked": "fn() -> bool",
        "isEnabled": "fn() -> bool",
        "isVisible": "fn() -> bool",
        "setActionView": "fn(actionView: Ti.UI.View)",
        "setCheckable": "fn(checkable: bool)",
        "setChecked": "fn(enabled: bool)",
        "setEnabled": "fn(enabled: bool)",
        "setIcon": "fn(icon: number)",
        "setShowAsAction": "fn(showAsAction: number)",
        "setTitle": "fn(title: string)",
        "setTitleCondensed": "fn(titleCondensed: string)",
        "setVisible": "fn(visible: bool)"
      },
      "NotificationManager": {
        "DEFAULT_ALL": "number",
        "DEFAULT_LIGHTS": "number",
        "DEFAULT_SOUND": "number",
        "DEFAULT_VIBRATE": "number",
        "FLAG_AUTO_CANCEL": "number",
        "FLAG_INSISTENT": "number",
        "FLAG_NO_CLEAR": "number",
        "FLAG_ONGOING_EVENT": "number",
        "FLAG_ONLY_ALERT_ONCE": "number",
        "FLAG_SHOW_LIGHTS": "number",
        "STREAM_DEFAULT": "number",
        "cancel": "fn(id: number)",
        "cancelAll": "fn()",
        "notify": "fn(id: number, notification: Ti.Android.Notification)"
      },
      "ActionBar": {
        "backgroundImage": "string",
        "displayHomeAsUp": "bool",
        "homeButtonEnabled": "bool",
        "icon": "string",
        "logo": "string",
        "navigationMode": "number",
        "onHomeIconItemSelected": "fn(args: [?])",
        "subtitle": "string",
        "title": "string",
        "getNavigationMode": "fn() -> number",
        "getSubtitle": "fn() -> string",
        "getTitle": "fn() -> string",
        "hide": "fn()",
        "setBackgroundImage": "fn(backgroundImage: string)",
        "setDisplayHomeAsUp": "fn(displayHomeAsUp: bool)",
        "setDisplayShowHomeEnabled": "fn(show: bool)",
        "setDisplayShowTitleEnabled": "fn(show: bool)",
        "setHomeButtonEnabled": "fn(homeButtonEnabled: bool)",
        "setIcon": "fn(icon: string)",
        "setLogo": "fn(logo: string)",
        "setNavigationMode": "fn(navigationMode: number)",
        "setOnHomeIconItemSelected": "fn(onHomeIconItemSelected: fn(args: [?]))",
        "setSubtitle": "fn(subtitle: string)",
        "setTitle": "fn(title: string)",
        "show": "fn()"
      },
      "BroadcastReceiver": {
        "onReceived": "fn(args: [?])",
        "url": "string",
        "getOnReceived": "fn() -> fn(args: [?])",
        "getUrl": "fn() -> string",
        "setOnReceived": "fn(onReceived: fn(args: [?]))",
        "setUrl": "fn(url: string)"
      },
      "Menu": {
        "items": "?",
        "add": "fn(options: ?) -> Ti.Android.MenuItem",
        "clear": "fn()",
        "close": "fn()",
        "findItem": "fn(item: number) -> Ti.Android.MenuItem",
        "getItem": "fn(index: number) -> Ti.Android.MenuItem",
        "getItems": "fn() -> ?",
        "hasVisibleItems": "fn() -> bool",
        "removeGroup": "fn(groupId: number)",
        "removeItem": "fn(itemId: number)",
        "setGroupEnabled": "fn(groupId: number, enabled: bool)",
        "setGroupVisible": "fn(groupId: number, visible: bool)",
        "size": "fn() -> number"
      },
      "Activity": {
        "actionBar": "Ti.Android.ActionBar",
        "intent": "Ti.Android.Intent",
        "onCreate": "fn(args: [?])",
        "onCreateOptionsMenu": "fn(args: [?])",
        "onDestroy": "fn(args: [?])",
        "onPause": "fn(args: [?])",
        "onPrepareOptionsMenu": "fn(args: [?])",
        "onRestart": "fn(args: [?])",
        "onResume": "fn(args: [?])",
        "onStart": "fn(args: [?])",
        "onStop": "fn(args: [?])",
        "requestedOrientation": "number",
        "finish": "fn()",
        "getActionBar": "fn() -> Ti.Android.ActionBar",
        "getIntent": "fn() -> Ti.Android.Intent",
        "getOnCreate": "fn() -> fn(args: [?])",
        "getOnCreateOptionsMenu": "fn() -> fn(args: [?])",
        "getOnDestroy": "fn() -> fn(args: [?])",
        "getOnPause": "fn() -> fn(args: [?])",
        "getOnPrepareOptionsMenu": "fn() -> fn(args: [?])",
        "getOnRestart": "fn() -> fn(args: [?])",
        "getOnResume": "fn() -> fn(args: [?])",
        "getOnStart": "fn() -> fn(args: [?])",
        "getOnStop": "fn() -> fn(args: [?])",
        "getString": "fn(resourceId: number, format: ?) -> string",
        "invalidateOptionsMenu": "fn()",
        "openOptionsMenu": "fn()",
        "sendBroadcast": "fn(intent: Ti.Android.Intent)",
        "sendBroadcastWithPermission": "fn(intent: Ti.Android.Intent, receiverPermission?: string)",
        "setOnCreate": "fn(onCreate: fn(args: [?]))",
        "setOnCreateOptionsMenu": "fn(onCreateOptionsMenu: fn(args: [?]))",
        "setOnDestroy": "fn(onDestroy: fn(args: [?]))",
        "setOnPause": "fn(onPause: fn(args: [?]))",
        "setOnPrepareOptionsMenu": "fn(onPrepareOptionsMenu: fn(args: [?]))",
        "setOnRestart": "fn(onRestart: fn(args: [?]))",
        "setOnResume": "fn(onResume: fn(args: [?]))",
        "setOnStart": "fn(onStart: fn(args: [?]))",
        "setOnStop": "fn(onStop: fn(args: [?]))",
        "setRequestedOrientation": "fn(orientation: number)",
        "setResult": "fn(resultCode: number, intent?: Ti.Android.Intent)",
        "startActivity": "fn(intent: Ti.Android.Intent)",
        "startActivityForResult": "fn(intent: Ti.Android.Intent, callback: fn(args: [?]))"
      },
      "Service": {
        "intent": "Ti.Android.Intent",
        "serviceInstanceId": "number",
        "getIntent": "fn() -> Ti.Android.Intent",
        "getServiceInstanceId": "fn() -> number",
        "start": "fn()",
        "stop": "fn()"
      },
      "RemoteViews": {
        "layoutId": "number",
        "packageName": "string",
        "getLayoutId": "fn() -> number",
        "getPackageName": "fn() -> string",
        "setBoolean": "fn(viewId: number, methodName: string, value: bool)",
        "setChronometer": "fn(viewId: number, base: Date, format: string, started: bool)",
        "setDouble": "fn(viewId: number, methodName: string, value: number)",
        "setImageViewResource": "fn(viewId: number, srcId: number)",
        "setImageViewUri": "fn(viewId: number, uri: string)",
        "setInt": "fn(viewId: number, methodName: string, value: number)",
        "setOnClickPendingIntent": "fn(viewId: number, pendingIntent: Ti.Android.PendingIntent)",
        "setProgressBar": "fn(viewId: number, max: number, progress: number, indeterminate: bool)",
        "setString": "fn(viewId: number, methodName: string, value: string)",
        "setTextColor": "fn(viewId: number, color: number)",
        "setTextViewText": "fn(viewId: number, text: string)",
        "setUri": "fn(viewId: number, methodName: string, value: string)",
        "setViewVisibility": "fn(viewId: number, visibility: number)"
      },
      "PendingIntent": {
        "flags": "number",
        "intent": "Ti.Android.Intent",
        "updateCurrentIntent": "bool",
        "getFlags": "fn() -> number",
        "getIntent": "fn() -> Ti.Android.Intent",
        "getUpdateCurrentIntent": "fn() -> bool"
      }
    },
    "Database": {
      "FIELD_TYPE_DOUBLE": "number",
      "FIELD_TYPE_FLOAT": "number",
      "FIELD_TYPE_INT": "number",
      "FIELD_TYPE_STRING": "number",
      "apiName": "string",
      "bubbleParent": "bool",
      "addEventListener": "fn(name: string, callback: fn(args: [?]))",
      "applyProperties": "fn(props: ?)",
      "fireEvent": "fn(name: string, event: ?)",
      "getApiName": "fn() -> string",
      "getBubbleParent": "fn() -> bool",
      "install": "fn(path: string, dbName: string) -> Ti.Database.DB",
      "open": "fn(dbName: string) -> Ti.Database.DB",
      "removeEventListener": "fn(name: string, callback: fn(args: [?]))",
      "setBubbleParent": "fn(bubbleParent: bool)",
      "ResultSet": {
        "rowCount": "number",
        "validRow": "bool",
        "close": "fn()",
        "field": "fn(index: number, type?: number) -> ?",
        "fieldByName": "fn(name: string, type?: number) -> ?",
        "fieldCount": "fn() -> number",
        "fieldName": "fn(index: number) -> string",
        "getFieldCount": "fn() -> number",
        "getFieldName": "fn(index: number) -> string",
        "getRowCount": "fn() -> number",
        "getValidRow": "fn() -> bool",
        "isValidRow": "fn() -> bool",
        "next": "fn() -> bool"
      },
      "DB": {
        "file": "Ti.Filesystem.File",
        "lastInsertRowId": "number",
        "name": "string",
        "rowsAffected": "number",
        "close": "fn()",
        "execute": "fn(sql: string, vararg?: string) -> Ti.Database.ResultSet",
        "getFile": "fn() -> Ti.Filesystem.File",
        "getLastInsertRowId": "fn() -> number",
        "getName": "fn() -> string",
        "getRowsAffected": "fn() -> number",
        "remove": "fn()",
        "setLastInsertRowId": "fn(lastInsertRowId: number)",
        "setName": "fn(name: string)",
        "setRowsAffected": "fn(rowsAffected: number)"
      }
    },
    "Contacts": {
      "AUTHORIZATION_AUTHORIZED": "number",
      "AUTHORIZATION_DENIED": "number",
      "AUTHORIZATION_RESTRICTED": "number",
      "AUTHORIZATION_UNKNOWN": "number",
      "CONTACTS_KIND_ORGANIZATION": "number",
      "CONTACTS_KIND_PERSON": "number",
      "CONTACTS_SORT_FIRST_NAME": "number",
      "CONTACTS_SORT_LAST_NAME": "number",
      "apiName": "string",
      "bubbleParent": "bool",
      "contactsAuthorization": "number",
      "addEventListener": "fn(name: string, callback: fn(args: [?]))",
      "applyProperties": "fn(props: ?)",
      "createGroup": "fn(parameters?: ?) -> Ti.Contacts.Group",
      "createPerson": "fn(parameters?: ?) -> Ti.Contacts.Person",
      "fireEvent": "fn(name: string, event: ?)",
      "getAllGroups": "fn() -> ?",
      "getAllPeople": "fn(limit: number) -> ?",
      "getApiName": "fn() -> string",
      "getBubbleParent": "fn() -> bool",
      "getContactsAuthorization": "fn() -> number",
      "getGroupByID": "fn(id: number) -> Ti.Contacts.Group",
      "getPeopleWithName": "fn(name: string) -> ?",
      "getPersonByID": "fn(id: number) -> Ti.Contacts.Person",
      "removeEventListener": "fn(name: string, callback: fn(args: [?]))",
      "removeGroup": "fn(group: Ti.Contacts.Group)",
      "removePerson": "fn(person: Ti.Contacts.Person)",
      "requestAuthorization": "fn(callback: fn(args: [?]))",
      "revert": "fn()",
      "save": "fn(contacts: ?)",
      "setBubbleParent": "fn(bubbleParent: bool)",
      "showContacts": "fn(params: showContactsParams)",
      "Tizen": {
        "apiName": "string",
        "addEventListener": "fn(name: string, callback: fn(args: [?]))",
        "applyProperties": "fn(props: ?)",
        "fireEvent": "fn(name: string, event: ?)",
        "getAllPeople": "fn(callback: fn(args: [?]))",
        "getApiName": "fn() -> string",
        "getPeopleWithName": "fn(name: string, callback: fn(args: [?]))",
        "removeEventListener": "fn(name: string, callback: fn(args: [?]))",
        "Group": {
          "members": "fn(group: Ti.Contacts.Group, callback: fn(args: [?]))",
          "sortedMembers": "fn(sortBy: number, group: Ti.Contacts.Group, callback: fn(args: [?]))"
        }
      },
      "Group": {
        "name": "string",
        "recordId": "number",
        "add": "fn(person: Ti.Contacts.Person)",
        "getName": "fn() -> string",
        "getRecordId": "fn() -> number",
        "members": "fn() -> ?",
        "remove": "fn(person: Ti.Contacts.Person)",
        "setName": "fn(name: string)",
        "setRecordId": "fn(recordId: number)",
        "sortedMembers": "fn(sortBy: number) -> ?"
      },
      "Person": {
        "address": "?",
        "birthday": "string",
        "created": "string",
        "date": "?",
        "department": "string",
        "email": "?",
        "firstName": "string",
        "firstPhonetic": "string",
        "fullName": "string",
        "id": "number",
        "image": "Ti.Blob",
        "instantMessage": "?",
        "jobTitle": "string",
        "kind": "number",
        "lastName": "string",
        "lastPhonetic": "string",
        "middleName": "string",
        "middlePhonetic": "string",
        "modified": "string",
        "nickname": "string",
        "note": "string",
        "organization": "string",
        "phone": "?",
        "prefix": "string",
        "recordId": "number",
        "relatedNames": "?",
        "suffix": "string",
        "url": "?",
        "getAddress": "fn() -> ?",
        "getBirthday": "fn() -> string",
        "getCreated": "fn() -> string",
        "getDate": "fn() -> ?",
        "getDepartment": "fn() -> string",
        "getEmail": "fn() -> ?",
        "getFirstName": "fn() -> string",
        "getFirstPhonetic": "fn() -> string",
        "getFullName": "fn() -> string",
        "getId": "fn() -> number",
        "getImage": "fn() -> Ti.Blob",
        "getInstantMessage": "fn() -> ?",
        "getJobTitle": "fn() -> string",
        "getKind": "fn() -> number",
        "getLastName": "fn() -> string",
        "getLastPhonetic": "fn() -> string",
        "getMiddleName": "fn() -> string",
        "getMiddlePhonetic": "fn() -> string",
        "getModified": "fn() -> string",
        "getNickname": "fn() -> string",
        "getNote": "fn() -> string",
        "getOrganization": "fn() -> string",
        "getPhone": "fn() -> ?",
        "getPrefix": "fn() -> string",
        "getRecordId": "fn() -> number",
        "getRelatedNames": "fn() -> ?",
        "getSuffix": "fn() -> string",
        "getUrl": "fn() -> ?",
        "setAddress": "fn(address: ?)",
        "setBirthday": "fn(birthday: string)",
        "setDate": "fn(date: ?)",
        "setDepartment": "fn(department: string)",
        "setEmail": "fn(email: ?)",
        "setFirstName": "fn(firstName: string)",
        "setFirstPhonetic": "fn(firstPhonetic: string)",
        "setImage": "fn(image: Ti.Blob)",
        "setInstantMessage": "fn(instantMessage: ?)",
        "setJobTitle": "fn(jobTitle: string)",
        "setKind": "fn(kind: number)",
        "setLastName": "fn(lastName: string)",
        "setLastPhonetic": "fn(lastPhonetic: string)",
        "setMiddleName": "fn(middleName: string)",
        "setMiddlePhonetic": "fn(middlePhonetic: string)",
        "setNickname": "fn(nickname: string)",
        "setNote": "fn(note: string)",
        "setOrganization": "fn(organization: string)",
        "setPhone": "fn(phone: ?)",
        "setRecordId": "fn(recordId: number)",
        "setRelatedNames": "fn(relatedNames: ?)",
        "setUrl": "fn(url: ?)"
      }
    },
    "CloudPush": {
      "SERVICE_DISABLED": "number",
      "SERVICE_INVALID": "number",
      "SERVICE_MISSING": "number",
      "SERVICE_VERSION_UPDATE_REQUIRED": "number",
      "SUCCESS": "number",
      "enabled": "bool",
      "focusAppOnPush": "bool",
      "showAppOnTrayClick": "bool",
      "showTrayNotification": "bool",
      "showTrayNotificationsWhenFocused": "bool",
      "singleCallback": "bool",
      "clearStatus": "fn()",
      "getEnabled": "fn() -> bool",
      "getFocusAppOnPush": "fn() -> bool",
      "getShowAppOnTrayClick": "fn() -> bool",
      "getShowTrayNotification": "fn() -> bool",
      "getShowTrayNotificationsWhenFocused": "fn() -> bool",
      "getSingleCallback": "fn() -> bool",
      "isGooglePlayServicesAvailable": "fn() -> number",
      "retrieveDeviceToken": "fn(config: CloudPushNotificationConfig)",
      "setEnabled": "fn(enabled: bool)",
      "setFocusAppOnPush": "fn(focusAppOnPush: bool)",
      "setShowAppOnTrayClick": "fn(showAppOnTrayClick: bool)",
      "setShowTrayNotification": "fn(showTrayNotification: bool)",
      "setShowTrayNotificationsWhenFocused": "fn(showTrayNotificationsWhenFocused: bool)",
      "setSingleCallback": "fn(singleCallback: bool)"
    },
    "Media": {
      "AUDIO_FILEFORMAT_3GP2": "number",
      "AUDIO_FILEFORMAT_3GPP": "number",
      "AUDIO_FILEFORMAT_AIFF": "number",
      "AUDIO_FILEFORMAT_AMR": "number",
      "AUDIO_FILEFORMAT_CAF": "number",
      "AUDIO_FILEFORMAT_MP3": "number",
      "AUDIO_FILEFORMAT_MP4": "number",
      "AUDIO_FILEFORMAT_MP4A": "number",
      "AUDIO_FILEFORMAT_WAVE": "number",
      "AUDIO_FORMAT_AAC": "number",
      "AUDIO_FORMAT_ALAW": "number",
      "AUDIO_FORMAT_APPLE_LOSSLESS": "number",
      "AUDIO_FORMAT_ILBC": "number",
      "AUDIO_FORMAT_IMA4": "number",
      "AUDIO_FORMAT_LINEAR_PCM": "number",
      "AUDIO_FORMAT_ULAW": "number",
      "AUDIO_HEADPHONES": "number",
      "AUDIO_HEADPHONES_AND_MIC": "number",
      "AUDIO_HEADSET_INOUT": "number",
      "AUDIO_LINEOUT": "number",
      "AUDIO_MICROPHONE": "number",
      "AUDIO_MUTED": "number",
      "AUDIO_RECEIVER_AND_MIC": "number",
      "AUDIO_SESSION_CATEGORY_AMBIENT": "string",
      "AUDIO_SESSION_CATEGORY_PLAYBACK": "string",
      "AUDIO_SESSION_CATEGORY_PLAY_AND_RECORD": "string",
      "AUDIO_SESSION_CATEGORY_RECORD": "string",
      "AUDIO_SESSION_CATEGORY_SOLO_AMBIENT": "string",
      "AUDIO_SESSION_MODE_AMBIENT": "number",
      "AUDIO_SESSION_MODE_PLAYBACK": "number",
      "AUDIO_SESSION_MODE_PLAY_AND_RECORD": "number",
      "AUDIO_SESSION_MODE_RECORD": "number",
      "AUDIO_SESSION_MODE_SOLO_AMBIENT": "number",
      "AUDIO_SESSION_OVERRIDE_ROUTE_NONE": "number",
      "AUDIO_SESSION_OVERRIDE_ROUTE_SPEAKER": "number",
      "AUDIO_SESSION_PORT_AIRPLAY": "string",
      "AUDIO_SESSION_PORT_BLUETOOTHA2DP": "string",
      "AUDIO_SESSION_PORT_BLUETOOTHHFP": "string",
      "AUDIO_SESSION_PORT_BLUETOOTHLE": "string",
      "AUDIO_SESSION_PORT_BUILTINMIC": "string",
      "AUDIO_SESSION_PORT_BUILTINRECEIVER": "string",
      "AUDIO_SESSION_PORT_BUILTINSPEAKER": "string",
      "AUDIO_SESSION_PORT_CARAUDIO": "string",
      "AUDIO_SESSION_PORT_HDMI": "string",
      "AUDIO_SESSION_PORT_HEADPHONES": "string",
      "AUDIO_SESSION_PORT_HEADSETMIC": "string",
      "AUDIO_SESSION_PORT_LINEIN": "string",
      "AUDIO_SESSION_PORT_LINEOUT": "string",
      "AUDIO_SESSION_PORT_USBAUDIO": "string",
      "AUDIO_SPEAKER": "number",
      "AUDIO_UNAVAILABLE": "number",
      "AUDIO_UNKNOWN": "number",
      "CAMERA_FLASH_AUTO": "number",
      "CAMERA_FLASH_OFF": "number",
      "CAMERA_FLASH_ON": "number",
      "CAMERA_FRONT": "number",
      "CAMERA_REAR": "number",
      "DEVICE_BUSY": "number",
      "MEDIA_TYPE_PHOTO": "string",
      "MEDIA_TYPE_VIDEO": "string",
      "MUSIC_MEDIA_GROUP_ALBUM": "number",
      "MUSIC_MEDIA_GROUP_ALBUM_ARTIST": "number",
      "MUSIC_MEDIA_GROUP_ARTIST": "number",
      "MUSIC_MEDIA_GROUP_COMPOSER": "number",
      "MUSIC_MEDIA_GROUP_GENRE": "number",
      "MUSIC_MEDIA_GROUP_PLAYLIST": "number",
      "MUSIC_MEDIA_GROUP_PODCAST_TITLE": "number",
      "MUSIC_MEDIA_GROUP_TITLE": "number",
      "MUSIC_MEDIA_TYPE_ALL": "number",
      "MUSIC_MEDIA_TYPE_ANY_AUDIO": "number",
      "MUSIC_MEDIA_TYPE_AUDIOBOOK": "number",
      "MUSIC_MEDIA_TYPE_MUSIC": "number",
      "MUSIC_MEDIA_TYPE_PODCAST": "number",
      "MUSIC_PLAYER_REPEAT_ALL": "number",
      "MUSIC_PLAYER_REPEAT_DEFAULT": "number",
      "MUSIC_PLAYER_REPEAT_NONE": "number",
      "MUSIC_PLAYER_REPEAT_ONE": "number",
      "MUSIC_PLAYER_SHUFFLE_ALBUMS": "number",
      "MUSIC_PLAYER_SHUFFLE_DEFAULT": "number",
      "MUSIC_PLAYER_SHUFFLE_NONE": "number",
      "MUSIC_PLAYER_SHUFFLE_SONGS": "number",
      "MUSIC_PLAYER_STATE_INTERRUPTED": "number",
      "MUSIC_PLAYER_STATE_PAUSED": "number",
      "MUSIC_PLAYER_STATE_PLAYING": "number",
      "MUSIC_PLAYER_STATE_SEEK_BACKWARD": "number",
      "MUSIC_PLAYER_STATE_SEEK_FORWARD": "number",
      "MUSIC_PLAYER_STATE_STOPPED": "number",
      "NO_CAMERA": "number",
      "NO_VIDEO": "number",
      "QUALITY_HIGH": "number",
      "QUALITY_LOW": "number",
      "QUALITY_MEDIUM": "number",
      "UNKNOWN_ERROR": "number",
      "VIDEO_CONTROL_DEFAULT": "number",
      "VIDEO_CONTROL_EMBEDDED": "number",
      "VIDEO_CONTROL_FULLSCREEN": "number",
      "VIDEO_CONTROL_HIDDEN": "number",
      "VIDEO_CONTROL_NONE": "number",
      "VIDEO_CONTROL_VOLUME_ONLY": "number",
      "VIDEO_FINISH_REASON_PLAYBACK_ENDED": "number",
      "VIDEO_FINISH_REASON_PLAYBACK_ERROR": "number",
      "VIDEO_FINISH_REASON_USER_EXITED": "number",
      "VIDEO_LOAD_STATE_PLAYABLE": "number",
      "VIDEO_LOAD_STATE_PLAYTHROUGH_OK": "number",
      "VIDEO_LOAD_STATE_STALLED": "number",
      "VIDEO_LOAD_STATE_UNKNOWN": "number",
      "VIDEO_MEDIA_TYPE_AUDIO": "number",
      "VIDEO_MEDIA_TYPE_NONE": "number",
      "VIDEO_MEDIA_TYPE_VIDEO": "number",
      "VIDEO_PLAYBACK_STATE_INTERRUPTED": "number",
      "VIDEO_PLAYBACK_STATE_PAUSED": "number",
      "VIDEO_PLAYBACK_STATE_PLAYING": "number",
      "VIDEO_PLAYBACK_STATE_SEEKING_BACKWARD": "number",
      "VIDEO_PLAYBACK_STATE_SEEKING_FORWARD": "number",
      "VIDEO_PLAYBACK_STATE_STOPPED": "number",
      "VIDEO_REPEAT_MODE_NONE": "number",
      "VIDEO_REPEAT_MODE_ONE": "number",
      "VIDEO_SCALING_ASPECT_FILL": "number",
      "VIDEO_SCALING_ASPECT_FIT": "number",
      "VIDEO_SCALING_MODE_FILL": "number",
      "VIDEO_SCALING_NONE": "number",
      "VIDEO_SOURCE_TYPE_FILE": "number",
      "VIDEO_SOURCE_TYPE_STREAMING": "number",
      "VIDEO_SOURCE_TYPE_UNKNOWN": "number",
      "VIDEO_TIME_OPTION_EXACT": "number",
      "VIDEO_TIME_OPTION_NEAREST_KEYFRAME": "number",
      "apiName": "string",
      "appMusicPlayer": "Ti.Media.MusicPlayer",
      "audioLineType": "number",
      "audioPlaying": "bool",
      "audioSessionCategory": "number",
      "audioSessionMode": "number",
      "availableCameraMediaTypes": "?",
      "availableCameras": "?",
      "availablePhotoGalleryMediaTypes": "?",
      "availablePhotoMediaTypes": "?",
      "averageMicrophonePower": "number",
      "bubbleParent": "bool",
      "cameraFlashMode": "number",
      "canRecord": "bool",
      "currentRoute": "RouteDescription",
      "isCameraSupported": "bool",
      "peakMicrophonePower": "number",
      "systemMusicPlayer": "Ti.Media.MusicPlayer",
      "volume": "number",
      "addEventListener": "fn(name: string, callback: fn(args: [?]))",
      "applyProperties": "fn(props: ?)",
      "beep": "fn()",
      "createAudioPlayer": "fn(parameters?: ?) -> Ti.Media.AudioPlayer",
      "createAudioRecorder": "fn(parameters?: ?) -> Ti.Media.AudioRecorder",
      "createItem": "fn(parameters?: ?) -> Ti.Media.Item",
      "createMusicPlayer": "fn(parameters?: ?) -> Ti.Media.MusicPlayer",
      "createSound": "fn(parameters?: ?) -> Ti.Media.Sound",
      "createVideoPlayer": "fn(parameters?: ?) -> Ti.Media.VideoPlayer",
      "fireEvent": "fn(name: string, event: ?)",
      "getApiName": "fn() -> string",
      "getAppMusicPlayer": "fn() -> Ti.Media.MusicPlayer",
      "getAudioLineType": "fn() -> number",
      "getAudioPlaying": "fn() -> bool",
      "getAudioSessionCategory": "fn() -> number",
      "getAudioSessionMode": "fn() -> number",
      "getAvailableCameraMediaTypes": "fn() -> ?",
      "getAvailableCameras": "fn() -> ?",
      "getAvailablePhotoGalleryMediaTypes": "fn() -> ?",
      "getAvailablePhotoMediaTypes": "fn() -> ?",
      "getAverageMicrophonePower": "fn() -> number",
      "getBubbleParent": "fn() -> bool",
      "getCameraFlashMode": "fn() -> number",
      "getCanRecord": "fn() -> bool",
      "getCurrentRoute": "fn() -> RouteDescription",
      "getIsCameraSupported": "fn() -> bool",
      "getPeakMicrophonePower": "fn() -> number",
      "getSystemMusicPlayer": "fn() -> Ti.Media.MusicPlayer",
      "getVolume": "fn() -> number",
      "hideCamera": "fn()",
      "hideMusicLibrary": "fn()",
      "isMediaTypeSupported": "fn(source: string, type: string) -> bool",
      "openMusicLibrary": "fn(options: MusicLibraryOptionsType)",
      "openPhotoGallery": "fn(options: PhotoGalleryOptionsType)",
      "previewImage": "fn(options: ?)",
      "queryMusicLibrary": "fn(query: MediaQueryType) -> ?",
      "removeEventListener": "fn(name: string, callback: fn(args: [?]))",
      "requestAuthorization": "fn(callback: fn(args: [?]))",
      "saveToPhotoGallery": "fn(media: Ti.Blob, callbacks: ?)",
      "setAudioSessionCategory": "fn(audioSessionCategory: number)",
      "setAudioSessionMode": "fn(audioSessionMode: number)",
      "setAvailableCameraMediaTypes": "fn(availableCameraMediaTypes: ?)",
      "setAvailablePhotoGalleryMediaTypes": "fn(availablePhotoGalleryMediaTypes: ?)",
      "setAvailablePhotoMediaTypes": "fn(availablePhotoMediaTypes: ?)",
      "setAverageMicrophonePower": "fn(averageMicrophonePower: number)",
      "setBubbleParent": "fn(bubbleParent: bool)",
      "setCameraFlashMode": "fn(cameraFlashMode: number)",
      "setOverrideAudioRoute": "fn(route: number)",
      "showCamera": "fn(options: CameraOptionsType)",
      "startMicrophoneMonitor": "fn()",
      "stopMicrophoneMonitor": "fn()",
      "switchCamera": "fn(camera: number)",
      "takePicture": "fn()",
      "takeScreenshot": "fn(callback: fn(args: [?]))",
      "vibrate": "fn(pattern?: ?)",
      "Sound": {
        "STATE_BUFFERING": "number",
        "STATE_INITIALIZED": "number",
        "STATE_PAUSED": "number",
        "STATE_PLAYING": "number",
        "STATE_STARTING": "number",
        "STATE_STOPPED": "number",
        "STATE_STOPPING": "number",
        "STATE_WAITING_FOR_DATA": "number",
        "STATE_WAITING_FOR_QUEUE": "number",
        "allowBackground": "bool",
        "duration": "number",
        "looping": "bool",
        "paused": "bool",
        "playing": "bool",
        "time": "number",
        "url": "string",
        "volume": "number",
        "getDuration": "fn() -> number",
        "getTime": "fn() -> number",
        "getUrl": "fn() -> string",
        "getVolume": "fn() -> number",
        "isLooping": "fn() -> bool",
        "isPaused": "fn() -> bool",
        "isPlaying": "fn() -> bool",
        "pause": "fn()",
        "play": "fn()",
        "release": "fn()",
        "reset": "fn()",
        "setLooping": "fn(looping: bool)",
        "setPaused": "fn(paused: bool)",
        "setTime": "fn(time: number)",
        "setUrl": "fn(url: string)",
        "setVolume": "fn(volume: number)",
        "stop": "fn()"
      },
      "VideoPlayer": {
        "allowsAirPlay": "bool",
        "autoplay": "bool",
        "contentURL": "string",
        "currentPlaybackTime": "number",
        "duration": "number",
        "endPlaybackTime": "number",
        "fullscreen": "bool",
        "initialPlaybackTime": "number",
        "loadState": "number",
        "media": "?",
        "mediaControlStyle": "number",
        "mediaTypes": "number",
        "movieControlMode": "number",
        "naturalSize": "MovieSize",
        "playableDuration": "number",
        "playbackState": "number",
        "playing": "bool",
        "repeatMode": "number",
        "scalingMode": "number",
        "sourceType": "number",
        "url": "?",
        "useApplicationAudioSession": "bool",
        "volume": "number",
        "cancelAllThumbnailImageRequests": "fn()",
        "getAllowsAirPlay": "fn() -> bool",
        "getAutoplay": "fn() -> bool",
        "getContentURL": "fn() -> string",
        "getCurrentPlaybackTime": "fn() -> number",
        "getDuration": "fn() -> number",
        "getEndPlaybackTime": "fn() -> number",
        "getFullscreen": "fn() -> bool",
        "getInitialPlaybackTime": "fn() -> number",
        "getLoadState": "fn() -> number",
        "getMediaControlStyle": "fn() -> number",
        "getMediaTypes": "fn() -> number",
        "getMovieControlMode": "fn() -> number",
        "getNaturalSize": "fn() -> MovieSize",
        "getPlayableDuration": "fn() -> number",
        "getPlaybackState": "fn() -> number",
        "getPlaying": "fn() -> bool",
        "getRepeatMode": "fn() -> number",
        "getScalingMode": "fn() -> number",
        "getSourceType": "fn() -> number",
        "getUrl": "fn() -> ?",
        "getUseApplicationAudioSession": "fn() -> bool",
        "getVolume": "fn() -> number",
        "pause": "fn()",
        "play": "fn()",
        "release": "fn()",
        "requestThumbnailImagesAtTimes": "fn(times: ?, option: number, callback: fn(args: [?]))",
        "setAllowsAirPlay": "fn(allowsAirPlay: bool)",
        "setAutoplay": "fn(autoplay: bool)",
        "setBackgroundView": "fn(view: Ti.UI.View)",
        "setContentURL": "fn(contentURL: string)",
        "setCurrentPlaybackTime": "fn(currentPlaybackTime: number)",
        "setDuration": "fn(duration: number)",
        "setEndPlaybackTime": "fn(endPlaybackTime: number)",
        "setFullscreen": "fn(fullscreen: bool)",
        "setInitialPlaybackTime": "fn(initialPlaybackTime: number)",
        "setMedia": "fn(media: Ti.Blob)",
        "setMediaControlStyle": "fn(mediaControlStyle: number)",
        "setMediaTypes": "fn(mediaTypes: number)",
        "setMovieControlMode": "fn(movieControlMode: number)",
        "setNaturalSize": "fn(naturalSize: MovieSize)",
        "setRepeatMode": "fn(repeatMode: number)",
        "setScalingMode": "fn(scalingMode: number)",
        "setSourceType": "fn(sourceType: number)",
        "setUrl": "fn(url: string)",
        "setUseApplicationAudioSession": "fn(useApplicationAudioSession: bool)",
        "setVolume": "fn(volume: number)",
        "stop": "fn()",
        "thumbnailImageAtTime": "fn(time: number, option: number) -> Ti.Blob"
      },
      "AudioRecorder": {
        "compression": "number",
        "format": "number",
        "paused": "bool",
        "recording": "bool",
        "stopped": "bool",
        "getCompression": "fn() -> number",
        "getFormat": "fn() -> number",
        "getPaused": "fn() -> bool",
        "getRecording": "fn() -> bool",
        "getStopped": "fn() -> bool",
        "pause": "fn()",
        "resume": "fn()",
        "setCompression": "fn(compression: number)",
        "setFormat": "fn(format: number)",
        "start": "fn()",
        "stop": "fn() -> Ti.Filesystem.File"
      },
      "Item": {
        "albumArtist": "string",
        "albumTitle": "string",
        "albumTrackCount": "number",
        "albumTrackNumber": "number",
        "artist": "string",
        "artwork": "Ti.Blob",
        "composer": "string",
        "discCount": "number",
        "discNumber": "number",
        "genre": "string",
        "isCompilation": "bool",
        "lyrics": "string",
        "mediaType": "number",
        "playCount": "number",
        "playbackDuration": "number",
        "podcastTitle": "string",
        "rating": "number",
        "skipCount": "number",
        "title": "string",
        "getAlbumArtist": "fn() -> string",
        "getAlbumTitle": "fn() -> string",
        "getAlbumTrackCount": "fn() -> number",
        "getAlbumTrackNumber": "fn() -> number",
        "getArtist": "fn() -> string",
        "getArtwork": "fn() -> Ti.Blob",
        "getComposer": "fn() -> string",
        "getDiscCount": "fn() -> number",
        "getDiscNumber": "fn() -> number",
        "getGenre": "fn() -> string",
        "getIsCompilation": "fn() -> bool",
        "getLyrics": "fn() -> string",
        "getMediaType": "fn() -> number",
        "getPlayCount": "fn() -> number",
        "getPlaybackDuration": "fn() -> number",
        "getPodcastTitle": "fn() -> string",
        "getRating": "fn() -> number",
        "getSkipCount": "fn() -> number",
        "getTitle": "fn() -> string"
      },
      "MusicPlayer": {
        "currentPlaybackTime": "number",
        "nowPlaying": "Ti.Media.Item",
        "playbackState": "number",
        "repeatMode": "number",
        "shuffleMode": "number",
        "volume": "number",
        "getCurrentPlaybackTime": "fn() -> number",
        "getNowPlaying": "fn() -> Ti.Media.Item",
        "getPlaybackState": "fn() -> number",
        "getRepeatMode": "fn() -> number",
        "getShuffleMode": "fn() -> number",
        "getVolume": "fn() -> number",
        "pause": "fn()",
        "play": "fn()",
        "seekBackward": "fn()",
        "seekForward": "fn()",
        "setCurrentPlaybackTime": "fn(currentPlaybackTime: number)",
        "setQueue": "fn(queue: Ti.Media.Item)",
        "setRepeatMode": "fn(repeatMode: number)",
        "setShuffleMode": "fn(shuffleMode: number)",
        "setVolume": "fn(volume: number)",
        "skipToBeginning": "fn()",
        "skipToNext": "fn()",
        "skipToPrevious": "fn()",
        "stop": "fn()",
        "stopSeeking": "fn()"
      },
      "AudioPlayer": {
        "STATE_BUFFERING": "number",
        "STATE_INITIALIZED": "number",
        "STATE_PAUSED": "number",
        "STATE_PLAYING": "number",
        "STATE_STARTING": "number",
        "STATE_STOPPED": "number",
        "STATE_STOPPING": "number",
        "STATE_WAITING_FOR_DATA": "number",
        "STATE_WAITING_FOR_QUEUE": "number",
        "allowBackground": "bool",
        "autoplay": "bool",
        "bitRate": "number",
        "bufferSize": "number",
        "duration": "number",
        "idle": "bool",
        "paused": "bool",
        "playing": "bool",
        "progress": "number",
        "state": "number",
        "time": "number",
        "url": "string",
        "volume": "number",
        "waiting": "bool",
        "getAllowBackground": "fn() -> bool",
        "getAutoplay": "fn() -> bool",
        "getBitRate": "fn() -> number",
        "getBufferSize": "fn() -> number",
        "getDuration": "fn() -> number",
        "getIdle": "fn() -> bool",
        "getPaused": "fn() -> bool",
        "getPlaying": "fn() -> bool",
        "getProgress": "fn() -> number",
        "getState": "fn() -> number",
        "getTime": "fn() -> number",
        "getUrl": "fn() -> string",
        "getVolume": "fn() -> number",
        "getWaiting": "fn() -> bool",
        "isPaused": "fn() -> bool",
        "isPlaying": "fn() -> bool",
        "pause": "fn()",
        "play": "fn()",
        "release": "fn()",
        "setBitRate": "fn(bitRate: number)",
        "setBufferSize": "fn(bufferSize: number)",
        "setPaused": "fn(paused: bool)",
        "setTime": "fn(time: number)",
        "setUrl": "fn(url: string)",
        "setVolume": "fn(volume: number)",
        "start": "fn()",
        "stateDescription": "fn(state: number) -> string",
        "stop": "fn()"
      },
      "Android": {
        "scanMediaFiles": "fn(paths: ?, mimeTypes: ?, callback: fn(args: [?]))",
        "setSystemWallpaper": "fn(image: Ti.Blob, scale: bool)"
      }
    },
    "Platform": {
      "BATTERY_STATE_CHARGING": "number",
      "BATTERY_STATE_FULL": "number",
      "BATTERY_STATE_UNKNOWN": "number",
      "BATTERY_STATE_UNPLUGGED": "number",
      "address": "string",
      "apiName": "string",
      "architecture": "string",
      "availableMemory": "number",
      "batteryLevel": "number",
      "batteryMonitoring": "bool",
      "batteryState": "number",
      "bubbleParent": "bool",
      "displayCaps": "Ti.Platform.DisplayCaps",
      "id": "string",
      "locale": "string",
      "macaddress": "string",
      "manufacturer": "string",
      "model": "string",
      "name": "string",
      "netmask": "string",
      "osname": "string",
      "ostype": "string",
      "processorCount": "number",
      "runtime": "string",
      "username": "string",
      "version": "string",
      "addEventListener": "fn(name: string, callback: fn(args: [?]))",
      "applyProperties": "fn(props: ?)",
      "canOpenURL": "fn(url: string) -> bool",
      "createUUID": "fn() -> string",
      "fireEvent": "fn(name: string, event: ?)",
      "getAddress": "fn() -> string",
      "getApiName": "fn() -> string",
      "getArchitecture": "fn() -> string",
      "getAvailableMemory": "fn() -> number",
      "getBatteryLevel": "fn() -> number",
      "getBatteryMonitoring": "fn() -> bool",
      "getBatteryState": "fn() -> number",
      "getBubbleParent": "fn() -> bool",
      "getDisplayCaps": "fn() -> Ti.Platform.DisplayCaps",
      "getId": "fn() -> string",
      "getLocale": "fn() -> string",
      "getMacaddress": "fn() -> string",
      "getManufacturer": "fn() -> string",
      "getModel": "fn() -> string",
      "getName": "fn() -> string",
      "getNetmask": "fn() -> string",
      "getOsname": "fn() -> string",
      "getOstype": "fn() -> string",
      "getProcessorCount": "fn() -> number",
      "getRuntime": "fn() -> string",
      "getUsername": "fn() -> string",
      "getVersion": "fn() -> string",
      "is24HourTimeFormat": "fn() -> bool",
      "openURL": "fn(url: string) -> bool",
      "removeEventListener": "fn(name: string, callback: fn(args: [?]))",
      "setBatteryMonitoring": "fn(batteryMonitoring: bool)",
      "setBubbleParent": "fn(bubbleParent: bool)",
      "DisplayCaps": {
        "density": "string",
        "dpi": "number",
        "logicalDensityFactor": "number",
        "platformHeight": "number",
        "platformWidth": "number",
        "xdpi": "number",
        "ydpi": "number",
        "getDensity": "fn() -> string",
        "getDpi": "fn() -> number",
        "getLogicalDensityFactor": "fn() -> number",
        "getPlatformHeight": "fn() -> number",
        "getPlatformWidth": "fn() -> number",
        "getXdpi": "fn() -> number",
        "getYdpi": "fn() -> number"
      },
      "Android": {
        "API_LEVEL": "number",
        "PHYSICAL_SIZE_CATEGORY_LARGE": "number",
        "PHYSICAL_SIZE_CATEGORY_NORMAL": "number",
        "PHYSICAL_SIZE_CATEGORY_SMALL": "number",
        "PHYSICAL_SIZE_CATEGORY_UNDEFINED": "number",
        "PHYSICAL_SIZE_CATEGORY_XLARGE": "number",
        "physicalSizeCategory": "number",
        "getPhysicalSizeCategory": "fn() -> number"
      }
    },
    "Buffer": {
      "byteOrder": "number",
      "length": "number",
      "type": "string",
      "value": "?",
      "append": "fn(sourceBuffer: Ti.Buffer, sourceOffset?: number, sourceLength?: number) -> number",
      "clear": "fn()",
      "clone": "fn(offset?: number, length?: number) -> Ti.Buffer",
      "copy": "fn(sourceBuffer: Ti.Buffer, offset: number, sourceOffset?: number, sourceLength?: number) -> number",
      "fill": "fn(fillByte: number, offset?: number, length?: number)",
      "getByteOrder": "fn() -> number",
      "getLength": "fn() -> number",
      "getType": "fn() -> string",
      "getValue": "fn() -> ?",
      "insert": "fn(sourceBuffer: Ti.Buffer, offset: number, sourceOffset?: number, sourceLength?: number) -> number",
      "release": "fn()",
      "setLength": "fn(length: number)",
      "toBlob": "fn() -> Ti.Blob"
    },
    "BufferStream": "number",
    "Calendar": {
      "AUTHORIZATION_AUTHORIZED": "number",
      "AUTHORIZATION_DENIED": "number",
      "AUTHORIZATION_RESTRICTED": "number",
      "AUTHORIZATION_UNKNOWN": "number",
      "AVAILABILITY_BUSY": "number",
      "AVAILABILITY_FREE": "number",
      "AVAILABILITY_NOTSUPPORTED": "number",
      "AVAILABILITY_TENTATIVE": "number",
      "AVAILABILITY_UNAVAILABLE": "number",
      "METHOD_ALERT": "number",
      "METHOD_DEFAULT": "number",
      "METHOD_EMAIL": "number",
      "METHOD_SMS": "number",
      "RECURRENCEFREQUENCY_DAILY": "number",
      "RECURRENCEFREQUENCY_MONTHLY": "number",
      "RECURRENCEFREQUENCY_WEEKLY": "number",
      "RECURRENCEFREQUENCY_YEARLY": "number",
      "SPAN_FUTUREEVENTS": "number",
      "SPAN_THISEVENT": "number",
      "STATE_DISMISSED": "number",
      "STATE_FIRED": "number",
      "STATE_SCHEDULED": "number",
      "STATUS_CANCELED": "number",
      "STATUS_CONFIRMED": "number",
      "STATUS_NONE": "number",
      "STATUS_TENTATIVE": "number",
      "VISIBILITY_CONFIDENTIAL": "number",
      "VISIBILITY_DEFAULT": "number",
      "VISIBILITY_PRIVATE": "number",
      "VISIBILITY_PUBLIC": "number",
      "allAlerts": "?",
      "allCalendars": "?",
      "allEditableCalendars": "?",
      "apiName": "string",
      "bubbleParent": "bool",
      "defaultCalendar": "Ti.Calendar.Calendar",
      "eventsAuthorization": "number",
      "selectableCalendars": "?",
      "addEventListener": "fn(name: string, callback: fn(args: [?]))",
      "applyProperties": "fn(props: ?)",
      "fireEvent": "fn(name: string, event: ?)",
      "getAllAlerts": "fn() -> ?",
      "getAllCalendars": "fn() -> ?",
      "getAllEditableCalendars": "fn() -> ?",
      "getApiName": "fn() -> string",
      "getBubbleParent": "fn() -> bool",
      "getCalendarById": "fn(id: string) -> Ti.Calendar.Calendar",
      "getDefaultCalendar": "fn() -> Ti.Calendar.Calendar",
      "getEventsAuthorization": "fn() -> number",
      "getSelectableCalendars": "fn() -> ?",
      "removeEventListener": "fn(name: string, callback: fn(args: [?]))",
      "requestEventsAuthorization": "fn(callback: fn(args: [?]))",
      "setBubbleParent": "fn(bubbleParent: bool)",
      "Calendar": {
        "hidden": "bool",
        "id": "string",
        "name": "string",
        "selected": "bool",
        "createEvent": "fn(properties: ?) -> Ti.Calendar.Event",
        "getEventById": "fn(id: number) -> Ti.Calendar.Event",
        "getEventsBetweenDates": "fn(date1: Date, date2: Date) -> ?",
        "getEventsInDate": "fn(year: number, month: number, day: number) -> ?",
        "getEventsInMonth": "fn(year: number, month: number) -> ?",
        "getEventsInYear": "fn(year: number) -> ?",
        "getHidden": "fn() -> bool",
        "getId": "fn() -> string",
        "getName": "fn() -> string",
        "getSelected": "fn() -> bool"
      },
      "Reminder": {
        "id": "string",
        "method": "number",
        "minutes": "number",
        "getId": "fn() -> string",
        "getMethod": "fn() -> number",
        "getMinutes": "fn() -> number"
      },
      "Event": {
        "alerts": "?",
        "allDay": "bool",
        "availability": "number",
        "begin": "Date",
        "description": "string",
        "end": "Date",
        "extendedProperties": "?",
        "hasAlarm": "bool",
        "id": "string",
        "isDetached": "bool",
        "location": "string",
        "notes": "string",
        "recurenceRule": "Ti.Calendar.RecurrenceRule",
        "recurenceRules": "?",
        "reminders": "?",
        "status": "number",
        "title": "string",
        "visibility": "number",
        "addRecurrenceRule": "fn(rule: Ti.Calendar.RecurrenceRule)",
        "createAlert": "fn(data: ?) -> Ti.Calendar.Alert",
        "createRecurenceRule": "fn(data: ?) -> Ti.Calendar.RecurrenceRule",
        "createReminder": "fn(data: ?) -> Ti.Calendar.Reminder",
        "getAlerts": "fn() -> ?",
        "getAllDay": "fn() -> bool",
        "getAvailability": "fn() -> number",
        "getBegin": "fn() -> Date",
        "getDescription": "fn() -> string",
        "getEnd": "fn() -> Date",
        "getExtendedProperties": "fn() -> ?",
        "getExtendedProperty": "fn(name: string) -> string",
        "getHasAlarm": "fn() -> bool",
        "getId": "fn() -> string",
        "getIsDetached": "fn() -> bool",
        "getLocation": "fn() -> string",
        "getNotes": "fn() -> string",
        "getRecurenceRule": "fn() -> Ti.Calendar.RecurrenceRule",
        "getRecurenceRules": "fn() -> ?",
        "getReminders": "fn() -> ?",
        "getStatus": "fn() -> number",
        "getTitle": "fn() -> string",
        "getVisibility": "fn() -> number",
        "refresh": "fn() -> bool",
        "remove": "fn(span: number) -> bool",
        "removeRecurenceRule": "fn(rule: Ti.Calendar.RecurrenceRule)",
        "save": "fn(span: number) -> bool",
        "setAlerts": "fn(alerts: ?)",
        "setAllDay": "fn(allDay: bool)",
        "setBegin": "fn(begin: Date)",
        "setEnd": "fn(end: Date)",
        "setExtendedProperty": "fn(name: string, value: string)",
        "setLocation": "fn(location: string)",
        "setNotes": "fn(notes: string)",
        "setRecurenceRule": "fn(recurenceRule: Ti.Calendar.RecurrenceRule)",
        "setRecurenceRules": "fn(recurenceRules: ?)",
        "setTitle": "fn(title: string)"
      },
      "RecurrenceRule": {
        "calendarID": "string",
        "daysOfTheMonth": "?",
        "daysOfTheWeek": "daysOfTheWeekDictionary",
        "daysOfTheYear": "?",
        "end": "recurrenceEndDictionary",
        "frequency": "number",
        "interval": "number",
        "monthsOfTheYear": "?",
        "setPositions": "?",
        "weeksOfTheYear": "?",
        "getCalendarID": "fn() -> string",
        "getDaysOfTheMonth": "fn() -> ?",
        "getDaysOfTheWeek": "fn() -> daysOfTheWeekDictionary",
        "getDaysOfTheYear": "fn() -> ?",
        "getEnd": "fn() -> recurrenceEndDictionary",
        "getFrequency": "fn() -> number",
        "getInterval": "fn() -> number",
        "getMonthsOfTheYear": "fn() -> ?",
        "getSetPositions": "fn() -> ?",
        "getWeeksOfTheYear": "fn() -> ?"
      },
      "Alert": {
        "absoluteDate": "Date",
        "alarmTime": "Date",
        "begin": "Date",
        "end": "Date",
        "eventId": "number",
        "id": "string",
        "minutes": "number",
        "relativeOffset": "number",
        "state": "number",
        "getAbsoluteDate": "fn() -> Date",
        "getAlarmTime": "fn() -> Date",
        "getBegin": "fn() -> Date",
        "getEnd": "fn() -> Date",
        "getEventId": "fn() -> number",
        "getId": "fn() -> string",
        "getMinutes": "fn() -> number",
        "getRelativeOffset": "fn() -> number",
        "getState": "fn() -> number",
        "setAbsoluteDate": "fn(absoluteDate: Date)",
        "setRelativeOffset": "fn(relativeOffset: number)"
      }
    },
    "Filesystem": {
      "MODE_APPEND": "number",
      "MODE_READ": "number",
      "MODE_WRITE": "number",
      "apiName": "string",
      "applicationCacheDirectory": "string",
      "applicationDataDirectory": "string",
      "applicationDirectory": "string",
      "applicationSupportDirectory": "string",
      "bubbleParent": "bool",
      "externalStorageDirectory": "string",
      "lineEnding": "string",
      "resRawDirectory": "string",
      "resourcesDirectory": "string",
      "separator": "string",
      "tempDirectory": "string",
      "addEventListener": "fn(name: string, callback: fn(args: [?]))",
      "applyProperties": "fn(props: ?)",
      "createTempDirectory": "fn() -> Ti.Filesystem.File",
      "createTempFile": "fn() -> Ti.Filesystem.File",
      "fireEvent": "fn(name: string, event: ?)",
      "getApiName": "fn() -> string",
      "getApplicationCacheDirectory": "fn() -> string",
      "getApplicationDataDirectory": "fn() -> string",
      "getApplicationDirectory": "fn() -> string",
      "getApplicationSupportDirectory": "fn() -> string",
      "getBubbleParent": "fn() -> bool",
      "getExternalStorageDirectory": "fn() -> string",
      "getFile": "fn(path: string, extraPaths: [string]) -> Ti.Filesystem.File",
      "getLineEnding": "fn() -> string",
      "getResRawDirectory": "fn() -> string",
      "getResourcesDirectory": "fn() -> string",
      "getSeparator": "fn() -> string",
      "getTempDirectory": "fn() -> string",
      "isExternalStoragePresent": "fn() -> bool",
      "openStream": "fn(mode: number, path: string, extraPaths: [string]) -> Ti.Filesystem.FileStream",
      "removeEventListener": "fn(name: string, callback: fn(args: [?]))",
      "setBubbleParent": "fn(bubbleParent: bool)",
      "File": {
        "executable": "bool",
        "hidden": "bool",
        "name": "string",
        "nativePath": "string",
        "parent": "Ti.Filesystem.File",
        "readonly": "bool",
        "remoteBackup": "bool",
        "size": "number",
        "symbolicLink": "bool",
        "writable": "bool",
        "writeable": "bool",
        "append": "fn(data: string) -> bool",
        "copy": "fn(destinationPath: string) -> bool",
        "createDirectory": "fn() -> bool",
        "createFile": "fn() -> bool",
        "createTimestamp": "fn() -> number",
        "deleteDirectory": "fn(recursive?: bool) -> bool",
        "deleteFile": "fn() -> bool",
        "exists": "fn() -> bool",
        "extension": "fn() -> string",
        "getDirectoryListing": "fn() -> ?",
        "getExecutable": "fn() -> bool",
        "getHidden": "fn() -> bool",
        "getName": "fn() -> string",
        "getNativePath": "fn() -> string",
        "getParent": "fn() -> ?",
        "getReadonly": "fn() -> bool",
        "getRemoteBackup": "fn() -> bool",
        "getSize": "fn() -> number",
        "getSymbolicLink": "fn() -> bool",
        "getWritable": "fn() -> bool",
        "getWriteable": "fn() -> bool",
        "isDirectory": "fn() -> bool",
        "isFile": "fn() -> bool",
        "modificationTimestamp": "fn() -> number",
        "move": "fn(newpath: string) -> bool",
        "open": "fn(mode: number) -> Ti.Filesystem.FileStream",
        "read": "fn() -> Ti.Blob",
        "rename": "fn(newname: string) -> bool",
        "resolve": "fn() -> string",
        "setHidden": "fn(hidden: bool)",
        "setRemoteBackup": "fn(remoteBackup: bool)",
        "spaceAvailable": "fn() -> number",
        "write": "fn(data: string, append?: bool) -> bool"
      },
      "FileStream": "number"
    },
    "Network": {
      "INADDR_ANY": "string",
      "NETWORK_LAN": "number",
      "NETWORK_MOBILE": "number",
      "NETWORK_NONE": "number",
      "NETWORK_UNKNOWN": "number",
      "NETWORK_WIFI": "number",
      "NOTIFICATION_TYPE_ALERT": "number",
      "NOTIFICATION_TYPE_BADGE": "number",
      "NOTIFICATION_TYPE_NEWSSTAND": "number",
      "NOTIFICATION_TYPE_SOUND": "number",
      "PROGRESS_UNKNOWN": "number",
      "READ_MODE": "number",
      "READ_WRITE_MODE": "number",
      "SOCKET_CLOSED": "number",
      "SOCKET_CONNECTED": "number",
      "SOCKET_ERROR": "number",
      "SOCKET_INITIALIZED": "number",
      "SOCKET_LISTENING": "number",
      "TLS_VERSION_1_0": "number",
      "TLS_VERSION_1_1": "number",
      "TLS_VERSION_1_2": "number",
      "WRITE_MODE": "number",
      "allHTTPCookies": "?",
      "apiName": "string",
      "bubbleParent": "bool",
      "httpURLFormatter": "fn(args: [?])",
      "networkType": "number",
      "networkTypeName": "string",
      "online": "bool",
      "remoteDeviceUUID": "string",
      "remoteNotificationTypes": "?",
      "remoteNotificationsEnabled": "bool",
      "addConnectivityListener": "fn(callback: fn(args: [?]))",
      "addEventListener": "fn(name: string, callback: fn(args: [?]))",
      "addHTTPCookie": "fn(cookie: Ti.Network.Cookie)",
      "addSystemCookie": "fn(cookie: Ti.Network.Cookie)",
      "applyProperties": "fn(props: ?)",
      "createBonjourBrowser": "fn(serviceType: string, domain: string, parameters?: ?) -> Ti.Network.BonjourBrowser",
      "createBonjourService": "fn(name: string, type: string, domain: string, parameters?: ?) -> Ti.Network.BonjourService",
      "createCookie": "fn(parameters?: ?) -> Ti.Network.Cookie",
      "createHTTPClient": "fn(parameters?: ?) -> Ti.Network.HTTPClient",
      "createTCPSocket": "fn(hostName: string, port: number, mode: number, parameters: ?) -> Ti.Network.TCPSocket",
      "decodeURIComponent": "fn(value: string) -> string",
      "encodeURIComponent": "fn(value: string) -> string",
      "fireEvent": "fn(name: string, event: ?)",
      "getAllHTTPCookies": "fn() -> ?",
      "getApiName": "fn() -> string",
      "getBubbleParent": "fn() -> bool",
      "getHTTPCookies": "fn(domain: string, path: string, name: string) -> ?",
      "getHTTPCookiesForDomain": "fn(domain: string) -> ?",
      "getHttpURLFormatter": "fn() -> fn(args: [?])",
      "getNetworkType": "fn() -> number",
      "getNetworkTypeName": "fn() -> string",
      "getOnline": "fn() -> bool",
      "getRemoteDeviceUUID": "fn() -> string",
      "getRemoteNotificationTypes": "fn() -> ?",
      "getRemoteNotificationsEnabled": "fn() -> bool",
      "getSystemCookies": "fn(domain: string, path: string, name: string) -> ?",
      "registerForPushNotifications": "fn(config: PushNotificationConfig)",
      "removeAllHTTPCookies": "fn()",
      "removeAllSystemCookies": "fn()",
      "removeConnectivityListener": "fn(callback: fn(args: [?]))",
      "removeEventListener": "fn(name: string, callback: fn(args: [?]))",
      "removeHTTPCookie": "fn(domain: string, path: string, name: string)",
      "removeHTTPCookiesForDomain": "fn(domain: string)",
      "removeSystemCookie": "fn(domain: string, path: string, name: string)",
      "setBubbleParent": "fn(bubbleParent: bool)",
      "setHttpURLFormatter": "fn(httpURLFormatter: fn(args: [?]))",
      "unregisterForPushNotifications": "fn()",
      "TCPSocket": {
        "hostName": "string",
        "isValid": "bool",
        "mode": "number",
        "port": "number",
        "stripTerminator": "bool",
        "close": "fn()",
        "connect": "fn()",
        "getHostName": "fn() -> string",
        "getIsValid": "fn() -> bool",
        "getMode": "fn() -> number",
        "getPort": "fn() -> number",
        "getStripTerminator": "fn() -> bool",
        "listen": "fn()",
        "setHostName": "fn(hostName: string)",
        "setIsValid": "fn(isValid: bool)",
        "setMode": "fn(mode: number)",
        "setPort": "fn(port: number)",
        "setStripTerminator": "fn(stripTerminator: bool)",
        "write": "fn(data: ?, sendTo: number)"
      },
      "Socket": {
        "CLOSED": "number",
        "CONNECTED": "number",
        "ERROR": "number",
        "INITIALIZED": "number",
        "LISTENING": "number",
        "apiName": "string",
        "bubbleParent": "bool",
        "addEventListener": "fn(name: string, callback: fn(args: [?]))",
        "applyProperties": "fn(props: ?)",
        "createTCP": "fn(params?: ?) -> Ti.Network.Socket.TCP",
        "createUDP": "fn(params?: ?) -> Ti.Network.Socket.UDP",
        "fireEvent": "fn(name: string, event: ?)",
        "getApiName": "fn() -> string",
        "getBubbleParent": "fn() -> bool",
        "removeEventListener": "fn(name: string, callback: fn(args: [?]))",
        "setBubbleParent": "fn(bubbleParent: bool)",
        "UDP": {
          "data": "fn(args: [?])",
          "error": "fn(args: [?])",
          "port": "number",
          "started": "fn(args: [?])",
          "getData": "fn() -> fn(args: [?])",
          "getError": "fn() -> fn(args: [?])",
          "getPort": "fn() -> number",
          "getStarted": "fn() -> fn(args: [?])",
          "sendBytes": "fn(port: number, host: string, data: ?)",
          "sendString": "fn(port: number, host: string, data: string)",
          "setData": "fn(data: fn(args: [?]))",
          "setError": "fn(error: fn(args: [?]))",
          "setPort": "fn(port: number)",
          "setStarted": "fn(started: fn(args: [?]))",
          "start": "fn(port: number)",
          "stop": "fn()"
        },
        "TCP": {
          "accepted": "fn(args: [?])",
          "connected": "fn(args: [?])",
          "error": "fn(args: [?])",
          "host": "string",
          "listenQueueSize": "number",
          "port": "number",
          "state": "number",
          "timeout": "number",
          "accept": "fn(options: AcceptDict)",
          "connect": "fn()",
          "getAccepted": "fn() -> fn(args: [?])",
          "getConnected": "fn() -> fn(args: [?])",
          "getError": "fn() -> fn(args: [?])",
          "getHost": "fn() -> string",
          "getListenQueueSize": "fn() -> number",
          "getPort": "fn() -> number",
          "getState": "fn() -> number",
          "getTimeout": "fn() -> number",
          "listen": "fn()",
          "setAccepted": "fn(accepted: fn(args: [?]))",
          "setConnected": "fn(connected: fn(args: [?]))",
          "setError": "fn(error: fn(args: [?]))",
          "setHost": "fn(host: string)",
          "setListenQueueSize": "fn(listenQueueSize: number)",
          "setPort": "fn(port: number)",
          "setTimeout": "fn(timeout: number)"
        }
      },
      "BonjourService": {
        "domain": "string",
        "isLocal": "bool",
        "name": "string",
        "socket": "?",
        "type": "string",
        "getDomain": "fn() -> string",
        "getIsLocal": "fn() -> bool",
        "getName": "fn() -> string",
        "getSocket": "fn() -> ?",
        "getType": "fn() -> string",
        "publish": "fn(socket: ?)",
        "resolve": "fn(timeout: number)",
        "setDomain": "fn(domain: string)",
        "setIsLocal": "fn(isLocal: bool)",
        "setName": "fn(name: string)",
        "setSocket": "fn(socket: ?)",
        "setType": "fn(type: string)",
        "stop": "fn()"
      },
      "HTTPClient": {
        "DONE": "number",
        "HEADERS_RECEIVED": "number",
        "LOADING": "number",
        "OPENED": "number",
        "UNSENT": "number",
        "allResponseHeaders": "string",
        "autoEncodeUrl": "bool",
        "autoRedirect": "bool",
        "cache": "bool",
        "connected": "bool",
        "connectionType": "string",
        "domain": "string",
        "enableKeepAlive": "bool",
        "file": "string",
        "location": "string",
        "ondatastream": "fn(args: [?])",
        "onerror": "fn(args: [?])",
        "onload": "fn(args: [?])",
        "onreadystatechange": "fn(args: [?])",
        "onsendstream": "fn(args: [?])",
        "password": "string",
        "readyState": "number",
        "responseData": "Ti.Blob",
        "responseText": "string",
        "responseXML": "Ti.XML.Document",
        "securityManager": "SecurityManagerProtocol",
        "status": "number",
        "statusText": "string",
        "timeout": "number",
        "tlsVersion": "number",
        "username": "string",
        "validatesSecureCertificate": "bool",
        "withCredentials": "bool",
        "abort": "fn()",
        "addAuthFactory": "fn(scheme: string, factory: ?)",
        "addKeyManager": "fn(X509KeyManager: ?)",
        "addTrustManager": "fn(X509TrustManager: ?)",
        "clearCookies": "fn(host: string)",
        "getAllResponseHeaders": "fn() -> string",
        "getAutoEncodeUrl": "fn() -> bool",
        "getAutoRedirect": "fn() -> bool",
        "getCache": "fn() -> bool",
        "getConnected": "fn() -> bool",
        "getConnectionType": "fn() -> string",
        "getDomain": "fn() -> string",
        "getEnableKeepAlive": "fn() -> bool",
        "getFile": "fn() -> string",
        "getLocation": "fn() -> string",
        "getOndatastream": "fn() -> fn(args: [?])",
        "getOnerror": "fn() -> fn(args: [?])",
        "getOnload": "fn() -> fn(args: [?])",
        "getOnreadystatechange": "fn() -> fn(args: [?])",
        "getOnsendstream": "fn() -> fn(args: [?])",
        "getPassword": "fn() -> string",
        "getReadyState": "fn() -> number",
        "getResponseData": "fn() -> Ti.Blob",
        "getResponseHeader": "fn(name: string) -> string",
        "getResponseText": "fn() -> string",
        "getResponseXML": "fn() -> Ti.XML.Document",
        "getSecurityManager": "fn() -> SecurityManagerProtocol",
        "getStatus": "fn() -> number",
        "getStatusText": "fn() -> string",
        "getTimeout": "fn() -> number",
        "getTlsVersion": "fn() -> number",
        "getUsername": "fn() -> string",
        "getValidatesSecureCertificate": "fn() -> bool",
        "getWithCredentials": "fn() -> bool",
        "open": "fn(method: string, url: string, async?: bool)",
        "send": "fn(data?: ?)",
        "setAutoEncodeUrl": "fn(autoEncodeUrl: bool)",
        "setAutoRedirect": "fn(autoRedirect: bool)",
        "setCache": "fn(cache: bool)",
        "setDomain": "fn(domain: string)",
        "setEnableKeepAlive": "fn(enableKeepAlive: bool)",
        "setFile": "fn(file: string)",
        "setOndatastream": "fn(ondatastream: fn(args: [?]))",
        "setOnerror": "fn(onerror: fn(args: [?]))",
        "setOnload": "fn(onload: fn(args: [?]))",
        "setOnreadystatechange": "fn(onreadystatechange: fn(args: [?]))",
        "setOnsendstream": "fn(onsendstream: fn(args: [?]))",
        "setPassword": "fn(password: string)",
        "setRequestHeader": "fn(name: string, value: string)",
        "setTimeout": "fn(timeout: number)",
        "setTlsVersion": "fn(tlsVersion: number)",
        "setUsername": "fn(username: string)",
        "setValidatesSecureCertificate": "fn(validatesSecureCertificate: bool)",
        "setWithCredentials": "fn(withCredentials: bool)"
      },
      "BonjourBrowser": {
        "domain": "string",
        "isSearching": "bool",
        "serviceType": "string",
        "getDomain": "fn() -> string",
        "getIsSearching": "fn() -> bool",
        "getServiceType": "fn() -> string",
        "search": "fn()",
        "setDomain": "fn(domain: string)",
        "setIsSearching": "fn(isSearching: bool)",
        "setServiceType": "fn(serviceType: string)",
        "stopSearch": "fn()"
      },
      "Cookie": {
        "comment": "string",
        "domain": "string",
        "expiryDate": "string",
        "httponly": "bool",
        "name": "string",
        "originalUrl": "string",
        "path": "string",
        "secure": "bool",
        "value": "string",
        "version": "number",
        "getComment": "fn() -> string",
        "getDomain": "fn() -> string",
        "getExpiryDate": "fn() -> string",
        "getHttponly": "fn() -> bool",
        "getName": "fn() -> string",
        "getOriginalUrl": "fn() -> string",
        "getPath": "fn() -> string",
        "getSecure": "fn() -> bool",
        "getValue": "fn() -> string",
        "getVersion": "fn() -> number",
        "isValid": "fn() -> bool",
        "setComment": "fn(comment: string)",
        "setDomain": "fn(domain: string)",
        "setExpiryDate": "fn(expiryDate: string)",
        "setHttponly": "fn(httponly: bool)",
        "setOriginalUrl": "fn(originalUrl: string)",
        "setPath": "fn(path: string)",
        "setSecure": "fn(secure: bool)",
        "setValue": "fn(value: string)",
        "setVersion": "fn(version: number)"
      }
    },
    "Yahoo": {
      "yql": "fn(yql: string, callback: fn(args: [?]))"
    },
    "Gesture": {
      "landscape": "bool",
      "orientation": "number",
      "portrait": "bool",
      "getLandscape": "fn() -> bool",
      "getOrientation": "fn() -> number",
      "getPortrait": "fn() -> bool",
      "isFaceDown": "fn() -> bool",
      "isFaceUp": "fn() -> bool",
      "isLandscape": "fn() -> bool",
      "isPortrait": "fn() -> bool"
    },
    "Analytics": {
      "lastEvent": "string",
      "addEvent": "fn(type: string, name: string, data?: ?)",
      "featureEvent": "fn(name: string, data?: ?)",
      "getLastEvent": "fn() -> string",
      "navEvent": "fn(from: string, to: string, name?: string, data?: ?)",
      "settingsEvent": "fn(name: string, data?: ?)",
      "timedEvent": "fn(name: string, start: Date, stop: Date, duration: number, data?: ?)",
      "userEvent": "fn(name: string, data?: ?)"
    },
    "Facebook": {
      "BUTTON_STYLE_NORMAL": "number",
      "BUTTON_STYLE_WIDE": "number",
      "accessToken": "string",
      "apiName": "string",
      "appid": "string",
      "bubbleParent": "bool",
      "expirationDate": "Date",
      "forceDialogAuth": "bool",
      "loggedIn": "bool",
      "permissions": "?",
      "uid": "string",
      "addEventListener": "fn(name: string, callback: fn(args: [?]))",
      "applyProperties": "fn(props: ?)",
      "authorize": "fn()",
      "createLoginButton": "fn(parameters?: ?) -> Ti.Facebook.LoginButton",
      "dialog": "fn(action: string, params: ?, callback: fn(args: [?]))",
      "fireEvent": "fn(name: string, event: ?)",
      "getAccessToken": "fn() -> string",
      "getApiName": "fn() -> string",
      "getAppid": "fn() -> string",
      "getBubbleParent": "fn() -> bool",
      "getExpirationDate": "fn() -> Date",
      "getForceDialogAuth": "fn() -> bool",
      "getLoggedIn": "fn() -> bool",
      "getPermissions": "fn() -> ?",
      "getUid": "fn() -> string",
      "logout": "fn()",
      "removeEventListener": "fn(name: string, callback: fn(args: [?]))",
      "request": "fn(method: string, params: ?, callback: fn(args: [?]))",
      "requestWithGraphPath": "fn(path: string, params: ?, httpMethod: string, callback: fn(args: [?]))",
      "setAccessToken": "fn(accessToken: string)",
      "setAppid": "fn(appid: string)",
      "setBubbleParent": "fn(bubbleParent: bool)",
      "setExpirationDate": "fn(expirationDate: Date)",
      "setForceDialogAuth": "fn(forceDialogAuth: bool)",
      "setLoggedIn": "fn(loggedIn: bool)",
      "setPermissions": "fn(permissions: ?)",
      "setUid": "fn(uid: string)",
      "LoginButton": {
        "style": "string",
        "getStyle": "fn() -> string",
        "setStyle": "fn(style: string)"
      }
    },
    "Accelerometer": "number",
    "Utils": {
      "base64decode": "fn(obj: string) -> Ti.Blob",
      "base64encode": "fn(obj: string) -> Ti.Blob",
      "md5HexDigest": "fn(obj: string) -> string",
      "sha1": "fn(obj: string) -> string",
      "sha256": "fn(obj: string) -> string"
    },
    "Event": {
      "bubbles": "bool",
      "cancelBubble": "bool",
      "source": "?",
      "type": "string"
    },
    "Stream": {
      "MODE_APPEND": "number",
      "MODE_READ": "number",
      "MODE_WRITE": "number",
      "createStream": "fn(params: CreateStreamArgs) -> Ti.IOStream",
      "pump": "fn(inputStream: Ti.IOStream, handler: fn(args: [?]), maxChunkSize: number, isAsync?: bool)",
      "read": "fn(sourceStream: Ti.IOStream, buffer: Ti.Buffer, offset?: number, length?: number, resultsCallback?: fn(args: [?]))",
      "readAll": "fn(sourceStream: Ti.IOStream, buffer?: Ti.Buffer, resultsCallback?: fn(args: [?])) -> ?",
      "write": "fn(outputStream: Ti.IOStream, buffer: Ti.Buffer, offset?: number, length?: number, resultsCallback?: fn(args: [?]))",
      "writeStream": "fn(inputStream: Ti.IOStream, outputStream: Ti.IOStream, maxChunkSize: number, resultsCallback?: fn(args: [?]))"
    }
  },
  "Dictionary": {
    "prototype": {}
  },
  "BarItemType": {
    "prototype": {
      "accessibilityLabel": "string",
      "enabled": "bool",
      "image": "?",
      "title": "string",
      "width": "number"
    }
  },
  "MatrixCreationDict": {
    "prototype": {
      "anchorPoint": "?",
      "rotate": "number",
      "scale": "number"
    }
  },
  "TableViewIndexEntry": {
    "prototype": {
      "index": "number",
      "title": "string"
    }
  },
  "FacebookRESTResponsev1": {
    "prototype": {
      "error": "string",
      "method": "string",
      "result": "string",
      "success": "bool"
    }
  },
  "titleAttributesParams": {
    "prototype": {
      "color": "string",
      "font": "Font",
      "shadow": "shadowDict"
    }
  },
  "MapRegionType": {
    "prototype": {
      "latitude": "number",
      "latitudeDelta": "number",
      "longitude": "number",
      "longitudeDelta": "number"
    }
  },
  "CropRectType": {
    "prototype": {
      "height": "number",
      "width": "number",
      "x": "number",
      "y": "number"
    }
  },
  "LocationResults": {
    "prototype": {
      "coords": "LocationCoordinates",
      "provider": "LocationProviderDict"
    }
  },
  "ErrorResponse": {
    "prototype": {
      "code": "number",
      "error": "string",
      "success": "bool"
    }
  },
  "CloudPushNotificationsQueryResponse": {
    "prototype": {
      "subscriptions": "?"
    }
  },
  "CloudResponse": {
    "prototype": {
      "code": "number",
      "error": "bool",
      "message": "string",
      "meta": "?",
      "success": "bool"
    }
  },
  "CloudPushNotificationsResponse": "number",
  "textFieldSelectedParams": {
    "prototype": {
      "length": "number",
      "location": "number"
    }
  },
  "recurrenceEndDictionary": {
    "prototype": {
      "endDate": "Date",
      "occurrenceCount": "number"
    }
  },
  "Global": {
    "L": "fn(key: string, hint?: string) -> string",
    "alert": "fn(message: string)",
    "clearInterval": "fn(timerId: number)",
    "clearTimeout": "fn(timerId: number)",
    "decodeURIComponent": "fn(encodedURI: string) -> string",
    "encodeURIComponent": "fn(string: string) -> string",
    "require": "fn(moduleId: string) -> ?",
    "setInterval": "fn(_function: fn(args: [?]), delay: number) -> number",
    "setTimeout": "fn(_function: fn(args: [?]), delay: number) -> number",
    "console": {
      "debug": "fn(message: ?)",
      "error": "fn(message: ?)",
      "info": "fn(message: ?)",
      "log": "fn(message: ?)",
      "warn": "fn(message: ?)"
    },
    "String": {
      "format": "fn(formatString: string, value: string) -> string",
      "formatCurrency": "fn(value: number) -> string",
      "formatDate": "fn(date: Date, format?: string) -> string",
      "formatDecimal": "fn(value: number, locale?: string, pattern?: string) -> string",
      "formatTime": "fn(date: Date, format?: string) -> string"
    },
    "JSON": {
      "parse": "fn(text: string, reviver: fn(args: [?])) -> ?",
      "stringify": "fn(value: ?, replacer?: fn(args: [?]), space?: number) -> string"
    }
  },
  "CloudGeoFenceResponse": {
    "prototype": {
      "geo_fences": "?"
    }
  },
  "ServiceIntentOptions": {
    "prototype": {
      "startMode": "number",
      "url": "string"
    }
  },
  "AcceptedCallbackArgs": {
    "prototype": {
      "inbound": "Ti.Network.Socket.TCP",
      "socket": "Ti.Network.Socket.TCP"
    }
  },
  "HeadingData": {
    "prototype": {
      "accuracy": "number",
      "magneticHeading": "number",
      "timestamp": "number",
      "trueHeading": "number",
      "x": "number",
      "y": "number",
      "z": "number"
    }
  },
  "FacebookGraphResponsev1": {
    "prototype": {
      "error": "string",
      "path": "string",
      "result": "string",
      "success": "bool"
    }
  },
  "textAreaSelectedParams": {
    "prototype": {
      "length": "number",
      "location": "number"
    }
  },
  "ThumbnailResponse": {
    "prototype": {
      "image": "Ti.Blob",
      "time": "number"
    }
  },
  "Dimension": {
    "prototype": {
      "height": "number",
      "width": "number",
      "x": "number",
      "y": "number"
    }
  },
  "ReadCallbackArgs": {
    "prototype": {
      "bytesProcessed": "number",
      "errorDescription": "string",
      "errorState": "number",
      "source": "Ti.IOStream"
    }
  },
  "CloudACLsCheckResponse": {
    "prototype": {
      "permission": "?"
    }
  },
  "ViewTemplate": {
    "prototype": {
      "bindId": "string",
      "childTemplates": "?",
      "events": "?",
      "properties": "?",
      "type": "string"
    }
  },
  "CloudChatsResponse": {
    "prototype": {
      "chats": "?"
    }
  },
  "MediaQueryType": {
    "prototype": {
      "albumArtist": "?",
      "albumTitle": "?",
      "artist": "?",
      "composer": "?",
      "genre": "?",
      "grouping": "number",
      "isCompilation": "?",
      "mediaType": "?",
      "title": "?"
    }
  },
  "WebAPIError": {
    "prototype": {
      "code": "number",
      "message": "string",
      "name": "string"
    }
  },
  "DocumentViewerOptions": {
    "prototype": {
      "animated": "bool",
      "view": "Ti.UI.View"
    }
  },
  "ListViewAnimationProperties": {
    "prototype": {
      "animated": "bool",
      "animationStyle": "number",
      "position": "number"
    }
  },
  "CloudPushSchedulesResponse": {
    "prototype": {
      "push_schedules": "?"
    }
  },
  "DataCallbackArgs": {
    "prototype": {
      "address": "string",
      "bytesData": "?",
      "port": "string",
      "stringData": "string"
    }
  },
  "CloudPushNotificationErrorArg": {
    "prototype": {
      "error": "string"
    }
  },
  "ScreenshotResult": {
    "prototype": {
      "media": "Ti.Blob"
    }
  },
  "YQLResponse": {
    "prototype": {
      "data": "?",
      "message": "string"
    }
  },
  "ForwardGeocodeResponse": {
    "prototype": {
      "accuracy": "number",
      "address": "string",
      "city": "string",
      "country": "string",
      "countryCode": "string",
      "country_code": "string",
      "displayAddress": "string",
      "latitude": "string",
      "longitude": "string",
      "postalCode": "string",
      "region1": "string",
      "region2": "string",
      "street": "string",
      "street1": "string"
    }
  },
  "CloudEventsResponse": {
    "prototype": {
      "events": "?"
    }
  },
  "ReadyStatePayload": {
    "prototype": {
      "readyState": "number"
    }
  },
  "ErrorCallbackArgs": {
    "prototype": {
      "errorCode": "number",
      "socket": "Ti.Network.Socket.TCP"
    }
  },
  "FailureResponse": {
    "prototype": {
      "code": "Number",
      "error": "string",
      "success": "bool"
    }
  },
  "WriteCallbackArgs": {
    "prototype": {
      "bytesProcessed": "number",
      "errorDescription": "string",
      "errorState": "number",
      "source": "Ti.IOStream"
    }
  },
  "CloudPushNotificationSuccessArg": {
    "prototype": {
      "deviceToken": "string"
    }
  },
  "MapLocationType": {
    "prototype": {
      "animate": "bool",
      "latitude": "number",
      "latitudeDelta": "number",
      "longitude": "number",
      "longitudeDelta": "number",
      "regionFit": "bool"
    }
  },
  "DecodeStringDict": {
    "prototype": {
      "charset": "string",
      "length": "number",
      "position": "number",
      "source": "Ti.Buffer"
    }
  },
  "ListViewContentInsetOption": {
    "prototype": {
      "animated": "bool",
      "duration": "number"
    }
  },
  "RouteDescription": {
    "prototype": {
      "inputs": "?",
      "outputs": "?"
    }
  },
  "CreateStreamArgs": {
    "prototype": {
      "mode": "number",
      "source": "?"
    }
  },
  "ContactsAuthorizationResponse": "number",
  "CloudCheckinsResponse": {
    "prototype": {
      "checkins": "?"
    }
  },
  "CreateBufferArgs": {
    "prototype": {
      "byteOrder": "number",
      "length": "number",
      "type": "string",
      "value": "?"
    }
  },
  "CloudPushNotificationConfig": {
    "prototype": {
      "error": "fn(args: [?])",
      "success": "fn(args: [?])"
    }
  },
  "CloudReviewsResponse": {
    "prototype": {
      "reviews": "?"
    }
  },
  "Point": {
    "prototype": {
      "x": "number",
      "y": "number"
    }
  },
  "CloudPhotosResponse": {
    "prototype": {
      "photos": "?"
    }
  },
  "PushNotificationConfig": {
    "prototype": {
      "callback": "fn(args: [?])",
      "error": "fn(args: [?])",
      "success": "fn(args: [?])",
      "types": "?"
    }
  },
  "MapRouteType": {
    "prototype": {
      "color": "string",
      "name": "string",
      "points": "?",
      "width": "number"
    }
  },
  "AcceptDict": {
    "prototype": {
      "error": "fn(args: [?])",
      "timeout": "number"
    }
  },
  "MediaQueryInfoType": {
    "prototype": {
      "exact": "bool",
      "value": "?"
    }
  },
  "PumpCallbackArgs": {
    "prototype": {
      "buffer": "Ti.Buffer",
      "bytesProcessed": "number",
      "errorDescription": "string",
      "errorState": "number",
      "source": "Ti.IOStream",
      "totalBytesProcessed": "number"
    }
  },
  "MusicLibraryOptionsType": {
    "prototype": {
      "allowMultipleSelections": "bool",
      "animated": "bool",
      "autohide": "bool",
      "cancel": "fn(args: [?])",
      "error": "fn(args: [?])",
      "mediaTypes": "?",
      "success": "fn(args: [?])"
    }
  },
  "shadowDict": {
    "prototype": {
      "blurRadius": "number",
      "color": "string",
      "offset": "?"
    }
  },
  "launchOptions": {
    "prototype": {
      "launchOptionsLocationKey": "bool",
      "source": "string",
      "url": "string"
    }
  },
  "WriteStreamCallbackArgs": {
    "prototype": {
      "bytesProcessed": "number",
      "errorDescription": "string",
      "errorState": "number",
      "fromStream": "Ti.IOStream",
      "toStream": "Ti.IOStream"
    }
  },
  "CloudChatGroupsResponse": {
    "prototype": {
      "chat_groups": "?"
    }
  },
  "CloudPhotoCollectionsPhotosResponse": {
    "prototype": {
      "photos": "?"
    }
  },
  "DecodeNumberDict": {
    "prototype": {
      "byteOrder": "number",
      "position": "number",
      "source": "Ti.Buffer",
      "type": "string"
    }
  },
  "ConnectedCallbackArgs": {
    "prototype": {
      "socket": "Ti.Network.Socket.TCP"
    }
  },
  "CloudPhotoCollectionsResponse": {
    "prototype": {
      "collections": "?"
    }
  },
  "CloudObjectsResponse": {
    "prototype": {
      "classname": "?"
    }
  },
  "PopoverParams": {
    "prototype": {
      "animated": "bool",
      "rect": "Dimension",
      "view": "Ti.UI.View"
    }
  },
  "MediaScannerResponse": {
    "prototype": {
      "path": "string",
      "uri": "string"
    }
  },
  "CloudPushNotificationsQueryChannelResponse": {
    "prototype": {
      "push_channels": "?"
    }
  },
  "CloudPostsResponse": {
    "prototype": {
      "posts": "?"
    }
  },
  "CloudSocialIntegrationsResponse": {
    "prototype": {
      "users": "?"
    }
  },
  "APSConnectionDelegate": {
    "prototype": {}
  },
  "CameraOptionsType": {
    "prototype": {
      "allowEditing": "bool",
      "animated": "bool",
      "arrowDirection": "number",
      "autohide": "bool",
      "autorotate": "bool",
      "cancel": "fn(args: [?])",
      "error": "fn(args: [?])",
      "inPopOver": "bool",
      "mediaTypes": "?",
      "overlay": "Ti.UI.View",
      "popoverView": "Ti.UI.View",
      "saveToPhotoGallery": "bool",
      "showControls": "bool",
      "success": "fn(args: [?])",
      "transform": "Ti.UI._2DMatrix",
      "videoMaximumDuration": "number",
      "videoQuality": "number"
    }
  },
  "ListViewIndexEntry": {
    "prototype": {
      "index": "number",
      "title": "string"
    }
  },
  "CloudStreamProgress": {
    "prototype": {
      "progress": "number",
      "url": "string"
    }
  },
  "MusicLibraryResponseType": {
    "prototype": {
      "items": "?",
      "representative": "Ti.Media.Item",
      "types": "number"
    }
  },
  "CloudEventOccurrencesResponse": {
    "prototype": {
      "event_occurrences": "?"
    }
  },
  "CloudUsersResponse": {
    "prototype": {
      "users": "?"
    }
  },
  "TableViewContentInsetOption": {
    "prototype": {
      "animated": "bool",
      "duration": "number"
    }
  },
  "CloudFriendRequestsResponse": {
    "prototype": {
      "friend_requests": "?"
    }
  },
  "CloudACLsResponse": {
    "prototype": {
      "acls": "?"
    }
  },
  "ListViewMarkerProps": {
    "prototype": {
      "itemIndex": "number",
      "sectionIndex": "number"
    }
  },
  "EventsAuthorizationResponse": {
    "prototype": {
      "code": "number",
      "error": "string",
      "success": "bool"
    }
  },
  "PlayerQueue": {
    "prototype": {
      "items": "?"
    }
  },
  "CoverFlowImageType": {
    "prototype": {
      "height": "number",
      "image": "?",
      "width": "number"
    }
  },
  "BroadcastIntentOptions": {
    "prototype": {
      "action": "string",
      "className": "string",
      "data": "string",
      "flags": "number",
      "packageName": "string",
      "url": "string"
    }
  },
  "CloudUsersSecureResponse": {
    "prototype": {
      "accessToken": "string",
      "expiresIn": "number"
    }
  },
  "CloudClientsResponse": {
    "prototype": {
      "ip_address": "string",
      "location": "?"
    }
  },
  "PushNotificationErrorArg": {
    "prototype": {
      "type": "string"
    }
  },
  "CloudStatusesResponse": {
    "prototype": {
      "statuses": "?"
    }
  },
  "windowToolbarParam": {
    "prototype": {
      "animated": "bool",
      "barColor": "string",
      "tintColor": "string",
      "translucent": "bool"
    }
  },
  "GeocodedAddress": {
    "prototype": {
      "address": "string",
      "city": "string",
      "country": "string",
      "countryCode": "string",
      "country_code": "string",
      "displayAddress": "string",
      "latitude": "string",
      "longitude": "string",
      "postalCode": "string",
      "region1": "string",
      "region2": "string",
      "street": "string",
      "street1": "string",
      "zipcode": "string"
    }
  },
  "ContactsCallbackArgs": {
    "prototype": {
      "data": "?"
    }
  },
  "zoomScaleOption": {
    "prototype": {
      "animated": "bool"
    }
  },
  "LocationCoordinates": {
    "prototype": {
      "accuracy": "number",
      "altitude": "number",
      "altitudeAccuracy": "number",
      "heading": "number",
      "latitude": "number",
      "longitude": "number",
      "speed": "number",
      "timestamp": "number"
    }
  },
  "ActivityResult": {
    "prototype": {
      "intent": "Ti.Android.Intent",
      "requestCode": "number",
      "resultCode": "number"
    }
  },
  "CloudUsersSecureDialog": {
    "prototype": {
      "title": "string"
    }
  },
  "CloudFriendsResponse": {
    "prototype": {
      "users": "?"
    }
  },
  "PhotoGalleryOptionsType": {
    "prototype": {
      "allowEditing": "bool",
      "animated": "bool",
      "arrowDirection": "number",
      "autohide": "bool",
      "cancel": "fn(args: [?])",
      "error": "fn(args: [?])",
      "mediaTypes": "?",
      "popoverView": "Ti.UI.View",
      "success": "fn(args: [?])"
    }
  },
  "NotificationParams": {
    "prototype": {
      "alertAction": "string",
      "alertBody": "string",
      "alertLaunchImage": "string",
      "badge": "number",
      "category": "string",
      "date": "Date",
      "repeat": "string",
      "sound": "string",
      "timezone": "string",
      "userInfo": "?"
    }
  },
  "SuccessResponse": "number",
  "daysOfTheWeekDictionary": {
    "prototype": {
      "daysOfWeek": "number",
      "week": "number"
    }
  },
  "Modules": {
    "prototype": {}
  },
  "ReferenceInsets": {
    "prototype": {
      "bottom": "number",
      "left": "number",
      "right": "number",
      "top": "number"
    }
  },
  "hideStatusBarParams": {
    "prototype": {
      "animated": "bool",
      "animationStyle": "number"
    }
  },
  "PreviewImageOptions": {
    "prototype": {
      "error": "fn(args: [?])",
      "image": "Ti.Blob",
      "success": "fn(args: [?])"
    }
  },
  "ListDataItem": {
    "prototype": {
      "properties": "?",
      "template": "?"
    }
  },
  "ItemTemplate": {
    "prototype": {
      "childTemplates": "?",
      "events": "?",
      "properties": "?"
    }
  },
  "MovieSize": {
    "prototype": {
      "height": "number",
      "width": "number"
    }
  },
  "CameraMediaItemType": {
    "prototype": {
      "cropRect": "CropRectType",
      "media": "Ti.Blob",
      "mediaType": "string"
    }
  },
  "HeadingResponse": {
    "prototype": {
      "heading": "HeadingData"
    }
  },
  "ListViewEdgeInsets": {
    "prototype": {
      "bottom": "number",
      "left": "number",
      "right": "number",
      "top": "number"
    }
  },
  "BoundaryIdentifier": {
    "prototype": {
      "identifier": "string",
      "point1": "Point",
      "point2": "Point"
    }
  },
  "CloudEmailsResponse": "number",
  "GradientColorRef": {
    "prototype": {
      "color": "string",
      "offset": "number"
    }
  },
  "Font": {
    "prototype": {
      "fontFamily": "string",
      "fontSize": "?",
      "fontStyle": "string",
      "fontWeight": "string",
      "textStyle": "string"
    }
  },
  "CloudPlacesResponse": {
    "prototype": {
      "places": "?"
    }
  },
  "EncodeNumberDict": {
    "prototype": {
      "byteOrder": "number",
      "dest": "Ti.Buffer",
      "position": "number",
      "source": "number",
      "type": "string"
    }
  },
  "showContactsParams": {
    "prototype": {
      "animated": "bool",
      "cancel": "fn(args: [?])",
      "fields": "?",
      "selectedPerson": "fn(args: [?])",
      "selectedProperty": "fn(args: [?])"
    }
  },
  "LocationProviderDict": {
    "prototype": {
      "accuracy": "number",
      "name": "string",
      "power": "number"
    }
  },
  "FacebookDialogResponsev1": {
    "prototype": {
      "cancelled": "bool",
      "error": "string",
      "result": "string",
      "success": "bool"
    }
  },
  "CloudFilesResponse": {
    "prototype": {
      "files": "?"
    }
  },
  "hideParams": {
    "prototype": {
      "animated": "bool"
    }
  },
  "SecurityManagerProtocol": {
    "prototype": {
      "connectionDelegateForUrl": "fn(url: ?) -> APSConnectionDelegate",
      "getKeyManagers": "fn(proxy: ?) -> ?",
      "getTrustManagers": "fn(proxy: ?) -> ?",
      "willHandleURL": "fn(url: ?) -> bool"
    }
  },
  "openWindowParams": {
    "prototype": {
      "activityEnterAnimation": "number",
      "activityExitAnimation": "number",
      "animated": "bool",
      "bottom": "?",
      "fullscreen": "bool",
      "height": "?",
      "left": "?",
      "modal": "bool",
      "modalStyle": "number",
      "modalTransitionStyle": "number",
      "navBarHidden": "bool",
      "right": "?",
      "top": "?",
      "transition": "number",
      "width": "?"
    }
  },
  "Gradient": {
    "prototype": {
      "backfillEnd": "bool",
      "backfillStart": "bool",
      "colors": "?",
      "endPoint": "Point",
      "endRadius": "number",
      "startPoint": "Point",
      "startRadius": "number",
      "type": "string"
    }
  },
  "showStatusBarParams": {
    "prototype": {
      "animated": "bool",
      "animationStyle": "number"
    }
  },
  "transitionAnimationParam": {
    "prototype": {
      "duration": "number",
      "tranistionTo": "Ti.UI.Animation",
      "transitionFrom": "Ti.UI.Animation"
    }
  },
  "MapPointType": {
    "prototype": {
      "latitude": "number",
      "longitude": "number"
    }
  },
  "CloudKeyValuesResponse": {
    "prototype": {
      "keyvalues": "?"
    }
  },
  "TableViewEdgeInsets": {
    "prototype": {
      "bottom": "number",
      "left": "number",
      "right": "number",
      "top": "number"
    }
  },
  "ReverseGeocodeResponse": {
    "prototype": {
      "places": "?"
    }
  },
  "contentOffsetOption": {
    "prototype": {
      "animated": "bool"
    }
  },
  "Attribute": {
    "prototype": {
      "range": "?",
      "type": "number",
      "value": "number"
    }
  },
  "PushNotificationSuccessArg": {
    "prototype": {
      "deviceToken": "string",
      "type": "string"
    }
  },
  "PushNotificationData": {
    "prototype": {
      "data": "?",
      "inBackground": "bool"
    }
  },
  "closeWindowParams": {
    "prototype": {
      "activityEnterAnimation": "number",
      "activityExitAnimation": "number",
      "animated": "bool"
    }
  },
  "CloudLikesResponse": {
    "prototype": {
      "likes": "?"
    }
  },
  "showParams": {
    "prototype": {
      "animated": "bool",
      "rect": "Dimension",
      "view": "Ti.UI.View"
    }
  },
  "PreviewImageError": {
    "prototype": {
      "message": "string"
    }
  },
  "CloudMessagesResponse": {
    "prototype": {
      "messages": "?"
    }
  },
  "CloudPushNotificationsShowChannelResponse": {
    "prototype": {
      "devices": "?"
    }
  },
  "ImageAsCroppedDict": {
    "prototype": {
      "height": "number",
      "width": "number",
      "x": "number",
      "y": "number"
    }
  },
  "UserNotificationSettings": {
    "prototype": {
      "categories": "?",
      "types": "?"
    }
  },
  "TableViewAnimationProperties": {
    "prototype": {
      "animated": "bool",
      "animationStyle": "number",
      "position": "number"
    }
  },
  "MediaAuthorizationResponse": "number",
  "EncodeStringDict": {
    "prototype": {
      "charset": "string",
      "dest": "Ti.Buffer",
      "destPosition": "number",
      "source": "string",
      "sourceLength": "number",
      "sourcePosition": "number"
    }
  },
  "!name": "titanium"
}
