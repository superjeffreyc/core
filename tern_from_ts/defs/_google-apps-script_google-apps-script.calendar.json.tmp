{
  "GoogleAppsScript": {
    "Calendar": {
      "Calendar": {
        "createAllDayEvent": "fn(title: string, date: Date) -> CalendarEvent",
        "createAllDayEventSeries": "fn(title: string, startDate: Date, recurrence: EventRecurrence) -> CalendarEventSeries",
        "createEvent": "fn(title: string, startTime: Date, endTime: Date) -> CalendarEvent",
        "createEventFromDescription": "fn(description: string) -> CalendarEvent",
        "createEventSeries": "fn(title: string, startTime: Date, endTime: Date, recurrence: EventRecurrence) -> CalendarEventSeries",
        "deleteCalendar": "fn()",
        "getColor": "fn() -> string",
        "getDescription": "fn() -> string",
        "getEventSeriesById": "fn(iCalId: string) -> CalendarEventSeries",
        "getEvents": "fn(startTime: Date, endTime: Date) -> [CalendarEvent]",
        "getEventsForDay": "fn(date: Date) -> [CalendarEvent]",
        "getId": "fn() -> string",
        "getName": "fn() -> string",
        "getTimeZone": "fn() -> string",
        "isHidden": "fn() -> bool",
        "isMyPrimaryCalendar": "fn() -> bool",
        "isOwnedByMe": "fn() -> bool",
        "isSelected": "fn() -> bool",
        "setColor": "fn(color: string) -> Calendar",
        "setDescription": "fn(description: string) -> Calendar",
        "setHidden": "fn(hidden: bool) -> Calendar",
        "setName": "fn(name: string) -> Calendar",
        "setSelected": "fn(selected: bool) -> Calendar",
        "setTimeZone": "fn(timeZone: string) -> Calendar",
        "unsubscribeFromCalendar": "fn()"
      },
      "CalendarApp": {
        "Color": "Color",
        "GuestStatus": "GuestStatus",
        "Month": "Base.Month",
        "Visibility": "Visibility",
        "Weekday": "Base.Weekday",
        "createAllDayEvent": "fn(title: string, date: Date) -> CalendarEvent",
        "createAllDayEventSeries": "fn(title: string, startDate: Date, recurrence: EventRecurrence) -> CalendarEventSeries",
        "createCalendar": "fn(name: string) -> Calendar",
        "createEvent": "fn(title: string, startTime: Date, endTime: Date) -> CalendarEvent",
        "createEventFromDescription": "fn(description: string) -> CalendarEvent",
        "createEventSeries": "fn(title: string, startTime: Date, endTime: Date, recurrence: EventRecurrence) -> CalendarEventSeries",
        "getAllCalendars": "fn() -> [Calendar]",
        "getAllOwnedCalendars": "fn() -> [Calendar]",
        "getCalendarById": "fn(id: string) -> Calendar",
        "getCalendarsByName": "fn(name: string) -> [Calendar]",
        "getColor": "fn() -> string",
        "getDefaultCalendar": "fn() -> Calendar",
        "getDescription": "fn() -> string",
        "getEventSeriesById": "fn(iCalId: string) -> CalendarEventSeries",
        "getEvents": "fn(startTime: Date, endTime: Date) -> [CalendarEvent]",
        "getEventsForDay": "fn(date: Date) -> [CalendarEvent]",
        "getId": "fn() -> string",
        "getName": "fn() -> string",
        "getOwnedCalendarById": "fn(id: string) -> Calendar",
        "getOwnedCalendarsByName": "fn(name: string) -> [Calendar]",
        "getTimeZone": "fn() -> string",
        "isHidden": "fn() -> bool",
        "isMyPrimaryCalendar": "fn() -> bool",
        "isOwnedByMe": "fn() -> bool",
        "isSelected": "fn() -> bool",
        "newRecurrence": "fn() -> EventRecurrence",
        "setColor": "fn(color: string) -> Calendar",
        "setDescription": "fn(description: string) -> Calendar",
        "setHidden": "fn(hidden: bool) -> Calendar",
        "setName": "fn(name: string) -> Calendar",
        "setSelected": "fn(selected: bool) -> Calendar",
        "setTimeZone": "fn(timeZone: string) -> Calendar",
        "subscribeToCalendar": "fn(id: string) -> Calendar"
      },
      "CalendarEvent": {
        "addEmailReminder": "fn(minutesBefore: Integer) -> CalendarEvent",
        "addGuest": "fn(email: string) -> CalendarEvent",
        "addPopupReminder": "fn(minutesBefore: Integer) -> CalendarEvent",
        "addSmsReminder": "fn(minutesBefore: Integer) -> CalendarEvent",
        "anyoneCanAddSelf": "fn() -> bool",
        "deleteEvent": "fn()",
        "deleteTag": "fn(key: string) -> CalendarEvent",
        "getAllDayEndDate": "fn() -> Date",
        "getAllDayStartDate": "fn() -> Date",
        "getAllTagKeys": "fn() -> [String]",
        "getCreators": "fn() -> [String]",
        "getDateCreated": "fn() -> Date",
        "getDescription": "fn() -> string",
        "getEmailReminders": "fn() -> [Integer]",
        "getEndTime": "fn() -> Date",
        "getEventSeries": "fn() -> CalendarEventSeries",
        "getGuestByEmail": "fn(email: string) -> EventGuest",
        "getGuestList": "fn() -> [EventGuest]",
        "getId": "fn() -> string",
        "getLastUpdated": "fn() -> Date",
        "getLocation": "fn() -> string",
        "getMyStatus": "fn() -> GuestStatus",
        "getOriginalCalendarId": "fn() -> string",
        "getPopupReminders": "fn() -> [Integer]",
        "getSmsReminders": "fn() -> [Integer]",
        "getStartTime": "fn() -> Date",
        "getTag": "fn(key: string) -> string",
        "getTitle": "fn() -> string",
        "getVisibility": "fn() -> Visibility",
        "guestsCanInviteOthers": "fn() -> bool",
        "guestsCanModify": "fn() -> bool",
        "guestsCanSeeGuests": "fn() -> bool",
        "isAllDayEvent": "fn() -> bool",
        "isOwnedByMe": "fn() -> bool",
        "isRecurringEvent": "fn() -> bool",
        "removeAllReminders": "fn() -> CalendarEvent",
        "removeGuest": "fn(email: string) -> CalendarEvent",
        "resetRemindersToDefault": "fn() -> CalendarEvent",
        "setAllDayDate": "fn(date: Date) -> CalendarEvent",
        "setAnyoneCanAddSelf": "fn(anyoneCanAddSelf: bool) -> CalendarEvent",
        "setDescription": "fn(description: string) -> CalendarEvent",
        "setGuestsCanInviteOthers": "fn(guestsCanInviteOthers: bool) -> CalendarEvent",
        "setGuestsCanModify": "fn(guestsCanModify: bool) -> CalendarEvent",
        "setGuestsCanSeeGuests": "fn(guestsCanSeeGuests: bool) -> CalendarEvent",
        "setLocation": "fn(location: string) -> CalendarEvent",
        "setMyStatus": "fn(status: GuestStatus) -> CalendarEvent",
        "setTag": "fn(key: string, value: string) -> CalendarEvent",
        "setTime": "fn(startTime: Date, endTime: Date) -> CalendarEvent",
        "setTitle": "fn(title: string) -> CalendarEvent",
        "setVisibility": "fn(visibility: Visibility) -> CalendarEvent"
      },
      "CalendarEventSeries": {
        "addEmailReminder": "fn(minutesBefore: Integer) -> CalendarEventSeries",
        "addGuest": "fn(email: string) -> CalendarEventSeries",
        "addPopupReminder": "fn(minutesBefore: Integer) -> CalendarEventSeries",
        "addSmsReminder": "fn(minutesBefore: Integer) -> CalendarEventSeries",
        "anyoneCanAddSelf": "fn() -> bool",
        "deleteEventSeries": "fn()",
        "deleteTag": "fn(key: string) -> CalendarEventSeries",
        "getAllTagKeys": "fn() -> [String]",
        "getCreators": "fn() -> [String]",
        "getDateCreated": "fn() -> Date",
        "getDescription": "fn() -> string",
        "getEmailReminders": "fn() -> [Integer]",
        "getGuestByEmail": "fn(email: string) -> EventGuest",
        "getGuestList": "fn() -> [EventGuest]",
        "getId": "fn() -> string",
        "getLastUpdated": "fn() -> Date",
        "getLocation": "fn() -> string",
        "getMyStatus": "fn() -> GuestStatus",
        "getOriginalCalendarId": "fn() -> string",
        "getPopupReminders": "fn() -> [Integer]",
        "getSmsReminders": "fn() -> [Integer]",
        "getTag": "fn(key: string) -> string",
        "getTitle": "fn() -> string",
        "getVisibility": "fn() -> Visibility",
        "guestsCanInviteOthers": "fn() -> bool",
        "guestsCanModify": "fn() -> bool",
        "guestsCanSeeGuests": "fn() -> bool",
        "isOwnedByMe": "fn() -> bool",
        "removeAllReminders": "fn() -> CalendarEventSeries",
        "removeGuest": "fn(email: string) -> CalendarEventSeries",
        "resetRemindersToDefault": "fn() -> CalendarEventSeries",
        "setAnyoneCanAddSelf": "fn(anyoneCanAddSelf: bool) -> CalendarEventSeries",
        "setDescription": "fn(description: string) -> CalendarEventSeries",
        "setGuestsCanInviteOthers": "fn(guestsCanInviteOthers: bool) -> CalendarEventSeries",
        "setGuestsCanModify": "fn(guestsCanModify: bool) -> CalendarEventSeries",
        "setGuestsCanSeeGuests": "fn(guestsCanSeeGuests: bool) -> CalendarEventSeries",
        "setLocation": "fn(location: string) -> CalendarEventSeries",
        "setMyStatus": "fn(status: GuestStatus) -> CalendarEventSeries",
        "setRecurrence": "fn(recurrence: EventRecurrence, startDate: Date) -> CalendarEventSeries",
        "setTag": "fn(key: string, value: string) -> CalendarEventSeries",
        "setTitle": "fn(title: string) -> CalendarEventSeries",
        "setVisibility": "fn(visibility: Visibility) -> CalendarEventSeries"
      },
      "Color": "number",
      "EventGuest": {
        "getAdditionalGuests": "fn() -> Integer",
        "getEmail": "fn() -> string",
        "getGuestStatus": "fn() -> GuestStatus",
        "getName": "fn() -> string",
        "getStatus": "fn() -> string"
      },
      "EventRecurrence": {
        "addDailyExclusion": "fn() -> RecurrenceRule",
        "addDailyRule": "fn() -> RecurrenceRule",
        "addDate": "fn(date: Date) -> EventRecurrence",
        "addDateExclusion": "fn(date: Date) -> EventRecurrence",
        "addMonthlyExclusion": "fn() -> RecurrenceRule",
        "addMonthlyRule": "fn() -> RecurrenceRule",
        "addWeeklyExclusion": "fn() -> RecurrenceRule",
        "addWeeklyRule": "fn() -> RecurrenceRule",
        "addYearlyExclusion": "fn() -> RecurrenceRule",
        "addYearlyRule": "fn() -> RecurrenceRule",
        "setTimeZone": "fn(timeZone: string) -> EventRecurrence"
      },
      "GuestStatus": "number",
      "RecurrenceRule": {
        "addDailyExclusion": "fn() -> RecurrenceRule",
        "addDailyRule": "fn() -> RecurrenceRule",
        "addDate": "fn(date: Date) -> EventRecurrence",
        "addDateExclusion": "fn(date: Date) -> EventRecurrence",
        "addMonthlyExclusion": "fn() -> RecurrenceRule",
        "addMonthlyRule": "fn() -> RecurrenceRule",
        "addWeeklyExclusion": "fn() -> RecurrenceRule",
        "addWeeklyRule": "fn() -> RecurrenceRule",
        "addYearlyExclusion": "fn() -> RecurrenceRule",
        "addYearlyRule": "fn() -> RecurrenceRule",
        "interval": "fn(interval: Integer) -> RecurrenceRule",
        "onlyInMonth": "fn(month: Base.Month) -> RecurrenceRule",
        "onlyInMonths": "fn(months: [Base.Month]) -> RecurrenceRule",
        "onlyOnMonthDay": "fn(day: Integer) -> RecurrenceRule",
        "onlyOnMonthDays": "fn(days: [Integer]) -> RecurrenceRule",
        "onlyOnWeek": "fn(week: Integer) -> RecurrenceRule",
        "onlyOnWeekday": "fn(day: Base.Weekday) -> RecurrenceRule",
        "onlyOnWeekdays": "fn(days: [Base.Weekday]) -> RecurrenceRule",
        "onlyOnWeeks": "fn(weeks: [Integer]) -> RecurrenceRule",
        "onlyOnYearDay": "fn(day: Integer) -> RecurrenceRule",
        "onlyOnYearDays": "fn(days: [Integer]) -> RecurrenceRule",
        "setTimeZone": "fn(timeZone: string) -> EventRecurrence",
        "times": "fn(times: Integer) -> RecurrenceRule",
        "until": "fn(endDate: Date) -> RecurrenceRule",
        "weekStartsOn": "fn(day: Base.Weekday) -> RecurrenceRule"
      },
      "Visibility": "number"
    }
  },
  "CalendarApp": "GoogleAppsScript.Calendar.CalendarApp",
  "!name": "google-apps-script.calendar.d.ts"
}
