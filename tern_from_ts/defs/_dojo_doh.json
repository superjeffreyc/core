{
  "doh": {
    "plugins": {
      "alwaysAudio": {},
      "hello": {},
      "remoteRobot": {},
      "android_webdriver_robot": {
        "downKey": "fn(sec: ?, charCode: ?, keyCode: ?, delay: ?)",
        "moveMouse": "fn(sec: ?, x: ?, y: ?, delay: ?, duration: ?)",
        "pressMouse": "fn(sec: ?, left: ?, middle: ?, right: ?, delay: ?)",
        "releaseMouse": "fn(sec: ?, left: ?, middle: ?, right: ?, delay: ?)",
        "setDocumentBounds": "fn(sec: ?, docScreenX: ?, docScreenY: ?, width: ?, height: ?)",
        "typeKey": "fn(sec: ?, charCode: ?, keyCode: ?, alt: ?, ctrl: ?, shift: ?, meta: ?, delay: ?, async: ?)",
        "typeKeys": "fn(chars: String, delay: number, duration: number)",
        "upKey": "fn(sec: ?, charCode: ?, keyCode: ?, delay: ?)"
      }
    },
    "_nodeRunner": {},
    "_rhinoRunner": {},
    "_parseURLargs": {
      "isDebug": "bool",
      "noGlobals": "bool",
      "scopeMap": "[?]"
    },
    "_browserRunner": {
      "debug": "Object",
      "error": "Object",
      "isBrowser": "bool",
      "registerUrl": "Object",
      "robot": {
        "doc": "Object",
        "mouseWheelSize": "number",
        "window": "Object",
        "initRobot": "fn(url: String)",
        "keyDown": "fn(charOrCode: number, delay: number)",
        "keyPress": "fn(charOrCode: number, delay: number, modifiers: Object, asynchronous: bool)",
        "keyUp": "fn(charOrCode: number, delay: number)",
        "killRobot": "fn()",
        "mouseClick": "fn(buttons: Object, delay: number)",
        "mouseMove": "fn(x: number, y: number, delay: number, duration: number, absolute: bool)",
        "mouseMoveAt": "fn(node: String, delay: number, duration: number, offsetX: number, offsetY: number)",
        "mouseMoveTo": "fn(point: Object, delay: number, duration: number, absolute: bool)",
        "mousePress": "fn(buttons: Object, delay: number)",
        "mouseRelease": "fn(buttons: Object, delay: number)",
        "mouseWheel": "fn(wheelAmt: number, delay: number, duration: number)",
        "scrollIntoView": "fn(node: String, delay: number)",
        "sequence": "fn(f: Function, delay: number, duration: number)",
        "setClipboard": "fn(data: String, format: String)",
        "startRobot": "fn() -> ?",
        "typeKeys": "fn(chars: String, delay: number, duration: number)",
        "waitForPageToLoad": "fn(submitActions: Function) -> ?"
      },
      "assertEqual": "fn(expected: Object, actual: Object, hint: String, doNotThrow: ?)",
      "assertError": "fn(expectedError: Object, scope: Object, functionName: String, args: [?], hint: String)",
      "assertFalse": "fn(condition: Object, hint: String)",
      "assertNotEqual": "fn(notExpected: Object, actual: Object, hint: String)",
      "assertTrue": "fn(condition: Object, hint: String)",
      "Deferred": "fn(canceller: ?)",
      "e": "fn(expectedError: Object, scope: Object, functionName: String, args: [?], hint: String)",
      "f": "fn(condition: Object, hint: String)",
      "is": "fn(expected: Object, actual: Object, hint: String, doNotThrow: ?)",
      "isNot": "fn(notExpected: Object, actual: Object, hint: String)",
      "pause": "fn()",
      "register": "fn(a1: ?, a2: ?, a3: ?, a4: ?, a5: ?)",
      "registerDocTests": "fn(module: ?)",
      "registerGroup": "fn(group: String, tests: [?], setUp: Function, tearDown: Function, type: String)",
      "registerTest": "fn(group: String, test: [?], type: String)",
      "registerTestNs": "fn(group: String, ns: Object)",
      "registerTests": "fn(group: String, testArr: [?], type: String)",
      "registerTestType": "fn(name: String, initProc: Function)",
      "run": "fn()",
      "runGroup": "fn(groupName: String, idx: number)",
      "runOnLoad": "fn()",
      "showLogPage": "fn()",
      "showPerfTestsPage": "fn()",
      "showTestPage": "fn()",
      "t": "fn(condition: Object, hint: String)",
      "togglePaused": "fn()",
      "toggleRunAll": "fn()",
      "_groups": {},
      "_testTypes": {
        "perf": "fn(group: ?, tObj: ?, type: ?)"
      }
    },
    "main": {
      "debug": "Object",
      "error": "Object",
      "isBrowser": "bool",
      "registerUrl": "Object",
      "robot": {
        "doc": "Object",
        "mouseWheelSize": "number",
        "window": "Object",
        "initRobot": "fn(url: String)",
        "keyDown": "fn(charOrCode: number, delay: number)",
        "keyPress": "fn(charOrCode: number, delay: number, modifiers: Object, asynchronous: bool)",
        "keyUp": "fn(charOrCode: number, delay: number)",
        "killRobot": "fn()",
        "mouseClick": "fn(buttons: Object, delay: number)",
        "mouseMove": "fn(x: number, y: number, delay: number, duration: number, absolute: bool)",
        "mouseMoveAt": "fn(node: String, delay: number, duration: number, offsetX: number, offsetY: number)",
        "mouseMoveTo": "fn(point: Object, delay: number, duration: number, absolute: bool)",
        "mousePress": "fn(buttons: Object, delay: number)",
        "mouseRelease": "fn(buttons: Object, delay: number)",
        "mouseWheel": "fn(wheelAmt: number, delay: number, duration: number)",
        "scrollIntoView": "fn(node: String, delay: number)",
        "sequence": "fn(f: Function, delay: number, duration: number)",
        "setClipboard": "fn(data: String, format: String)",
        "startRobot": "fn() -> ?",
        "typeKeys": "fn(chars: String, delay: number, duration: number)",
        "waitForPageToLoad": "fn(submitActions: Function) -> ?"
      },
      "assertEqual": "fn(expected: Object, actual: Object, hint: String, doNotThrow: ?)",
      "assertError": "fn(expectedError: Object, scope: Object, functionName: String, args: [?], hint: String)",
      "assertFalse": "fn(condition: Object, hint: String)",
      "assertNotEqual": "fn(notExpected: Object, actual: Object, hint: String)",
      "assertTrue": "fn(condition: Object, hint: String)",
      "Deferred": "fn(canceller: ?)",
      "e": "fn(expectedError: Object, scope: Object, functionName: String, args: [?], hint: String)",
      "f": "fn(condition: Object, hint: String)",
      "is": "fn(expected: Object, actual: Object, hint: String, doNotThrow: ?)",
      "isNot": "fn(notExpected: Object, actual: Object, hint: String)",
      "pause": "fn()",
      "register": "fn(a1: ?, a2: ?, a3: ?, a4: ?, a5: ?)",
      "registerDocTests": "fn(module: ?)",
      "registerGroup": "fn(group: String, tests: [?], setUp: Function, tearDown: Function, type: String)",
      "registerTest": "fn(group: String, test: [?], type: String)",
      "registerTestNs": "fn(group: String, ns: Object)",
      "registerTests": "fn(group: String, testArr: [?], type: String)",
      "registerTestType": "fn(name: String, initProc: Function)",
      "run": "fn()",
      "runGroup": "fn(groupName: String, idx: number)",
      "runOnLoad": "fn()",
      "showLogPage": "fn()",
      "showPerfTestsPage": "fn()",
      "showTestPage": "fn()",
      "t": "fn(condition: Object, hint: String)",
      "togglePaused": "fn()",
      "toggleRunAll": "fn()",
      "_groups": {},
      "_testTypes": {
        "perf": "fn(group: ?, tObj: ?, type: ?)"
      }
    },
    "robot": {
      "doc": "Object",
      "mouseWheelSize": "number",
      "window": "Object",
      "initRobot": "fn(url: String)",
      "keyDown": "fn(charOrCode: number, delay: number)",
      "keyPress": "fn(charOrCode: number, delay: number, modifiers: Object, asynchronous: bool)",
      "keyUp": "fn(charOrCode: number, delay: number)",
      "killRobot": "fn()",
      "mouseClick": "fn(buttons: Object, delay: number)",
      "mouseMove": "fn(x: number, y: number, delay: number, duration: number, absolute: bool)",
      "mouseMoveAt": "fn(node: String, delay: number, duration: number, offsetX: number, offsetY: number)",
      "mouseMoveTo": "fn(point: Object, delay: number, duration: number, absolute: bool)",
      "mousePress": "fn(buttons: Object, delay: number)",
      "mouseRelease": "fn(buttons: Object, delay: number)",
      "mouseWheel": "fn(wheelAmt: number, delay: number, duration: number)",
      "scrollIntoView": "fn(node: String, delay: number)",
      "sequence": "fn(f: Function, delay: number, duration: number)",
      "setClipboard": "fn(data: String, format: String)",
      "startRobot": "fn() -> ?",
      "typeKeys": "fn(chars: String, delay: number, duration: number)",
      "waitForPageToLoad": "fn(submitActions: Function) -> ?",
      "_runsemaphore": {
        "lock": "[?]",
        "unlock": "fn() -> ?"
      }
    },
    "runner": {
      "debug": "Object",
      "error": "Object",
      "isBrowser": "bool",
      "registerUrl": "Object",
      "robot": {
        "doc": "Object",
        "mouseWheelSize": "number",
        "window": "Object",
        "initRobot": "fn(url: String)",
        "keyDown": "fn(charOrCode: number, delay: number)",
        "keyPress": "fn(charOrCode: number, delay: number, modifiers: Object, asynchronous: bool)",
        "keyUp": "fn(charOrCode: number, delay: number)",
        "killRobot": "fn()",
        "mouseClick": "fn(buttons: Object, delay: number)",
        "mouseMove": "fn(x: number, y: number, delay: number, duration: number, absolute: bool)",
        "mouseMoveAt": "fn(node: String, delay: number, duration: number, offsetX: number, offsetY: number)",
        "mouseMoveTo": "fn(point: Object, delay: number, duration: number, absolute: bool)",
        "mousePress": "fn(buttons: Object, delay: number)",
        "mouseRelease": "fn(buttons: Object, delay: number)",
        "mouseWheel": "fn(wheelAmt: number, delay: number, duration: number)",
        "scrollIntoView": "fn(node: String, delay: number)",
        "sequence": "fn(f: Function, delay: number, duration: number)",
        "setClipboard": "fn(data: String, format: String)",
        "startRobot": "fn() -> ?",
        "typeKeys": "fn(chars: String, delay: number, duration: number)",
        "waitForPageToLoad": "fn(submitActions: Function) -> ?"
      },
      "assertEqual": "fn(expected: Object, actual: Object, hint: String, doNotThrow: ?)",
      "assertError": "fn(expectedError: Object, scope: Object, functionName: String, args: [?], hint: String)",
      "assertFalse": "fn(condition: Object, hint: String)",
      "assertNotEqual": "fn(notExpected: Object, actual: Object, hint: String)",
      "assertTrue": "fn(condition: Object, hint: String)",
      "Deferred": "fn(canceller: ?)",
      "e": "fn(expectedError: Object, scope: Object, functionName: String, args: [?], hint: String)",
      "f": "fn(condition: Object, hint: String)",
      "is": "fn(expected: Object, actual: Object, hint: String, doNotThrow: ?)",
      "isNot": "fn(notExpected: Object, actual: Object, hint: String)",
      "pause": "fn()",
      "register": "fn(a1: ?, a2: ?, a3: ?, a4: ?, a5: ?)",
      "registerDocTests": "fn(module: ?)",
      "registerGroup": "fn(group: String, tests: [?], setUp: Function, tearDown: Function, type: String)",
      "registerTest": "fn(group: String, test: [?], type: String)",
      "registerTestNs": "fn(group: String, ns: Object)",
      "registerTests": "fn(group: String, testArr: [?], type: String)",
      "registerTestType": "fn(name: String, initProc: Function)",
      "run": "fn()",
      "runGroup": "fn(groupName: String, idx: number)",
      "runOnLoad": "fn()",
      "showLogPage": "fn()",
      "showPerfTestsPage": "fn()",
      "showTestPage": "fn()",
      "t": "fn(condition: Object, hint: String)",
      "togglePaused": "fn()",
      "toggleRunAll": "fn()",
      "_groups": {},
      "_testTypes": {
        "perf": "fn(group: ?, tObj: ?, type: ?)"
      }
    }
  },
  "doh/_nodeRunner": "exp",
  "doh/_parseURLargs": "exp",
  "doh/_rhinoRunner": "exp",
  "doh/_browserRunner": "exp",
  "doh/_browserRunner._testTypes": "exp",
  "doh/_browserRunner._groups": "exp",
  "doh/_browserRunner.robot": "exp",
  "doh/robot": "exp",
  "doh/robot._runsemaphore": "exp",
  "doh/main": "exp",
  "doh/main._groups": "exp",
  "doh/main._testTypes": "exp",
  "doh/main.robot": "exp",
  "doh/runner": "exp",
  "doh/runner._groups": "exp",
  "doh/runner._testTypes": "exp",
  "doh/runner.robot": "exp",
  "doh/plugins/android-webdriver-robot": "exp",
  "doh/plugins/remoteRobot": "exp",
  "!name": "doh"
}
