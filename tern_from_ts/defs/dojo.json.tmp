{
  "dijit": {
    "_BidiSupport": {},
    "BackgroundIframe": {
      "destroy": {},
      "resize": {}
    },
    "hccss": {},
    "_AttachMixin": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "attachScope": "Object",
        "searchContainerNode": "bool",
        "buildRendering": "fn()",
        "destroyRendering": "fn()"
      }
    },
    "_Container": {
      "!type": "fn()",
      "prototype": {
        "addChild": "fn(widget: dijit._WidgetBase, insertIndex?: number)",
        "buildRendering": "fn()",
        "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
        "hasChildren": "fn() -> bool",
        "removeChild": "fn(widget: dijit._WidgetBase)"
      }
    },
    "_Contained": {
      "!type": "fn()",
      "prototype": {
        "getIndexInParent": "fn() -> ?",
        "getNextSibling": "fn() -> ?",
        "getPreviousSibling": "fn() -> ?"
      }
    },
    "_DialogMixin": {
      "!type": "fn()",
      "prototype": {
        "execute": "fn(formContents: Object)",
        "onCancel": "fn()",
        "onExecute": "fn()"
      }
    },
    "_CssStateMixin": {
      "!type": "fn()",
      "prototype": {
        "active": "bool",
        "cssStateNodes": "Object",
        "hovering": "bool"
      }
    },
    "_FocusMixin": {
      "!type": "fn()",
      "prototype": {}
    },
    "_HasDropDown": {
      "!type": "fn()",
      "prototype": {
        "autoWidth": "bool",
        "dropDown": "Object",
        "dropDownPosition": "Object",
        "forceWidth": "bool",
        "maxHeight": "number",
        "buildRendering": "fn()",
        "closeDropDown": "fn(focus: bool)",
        "destroy": "fn()",
        "isLoaded": "fn() -> bool",
        "loadAndOpenDropDown": "fn() -> ?",
        "loadDropDown": "fn(loadCallback: Function)",
        "openDropDown": "fn() -> ?",
        "postCreate": "fn()",
        "toggleDropDown": "fn()"
      }
    },
    "_KeyNavMixin": {
      "!type": "fn()",
      "prototype": {
        "childSelector": "?",
        "focusedChild": "Object",
        "multiCharSearchDuration": "number",
        "tabIndex": "string",
        "focus": "fn()",
        "focusChild": "fn(widget: dijit._WidgetBase, last: bool)",
        "focusFirstChild": "fn()",
        "focusLastChild": "fn()",
        "postCreate": "fn()",
        "onKeyboardSearch": "fn(item: dijit._WidgetBase, evt: Event, searchString: String, numMatches: number)"
      }
    },
    "_KeyNavContainer": {
      "!type": "fn()",
      "prototype": {
        "focusedChild": "Object",
        "multiCharSearchDuration": "number",
        "tabIndex": "string",
        "addChild": "fn(widget: dijit._WidgetBase, insertIndex?: number)",
        "buildRendering": "fn()",
        "childSelector": "fn(node: HTMLElement) -> ?",
        "connectKeyNavHandlers": "fn(prevKeyCodes: dojo.keys, nextKeyCodes: dojo.keys)",
        "focus": "fn()",
        "focusChild": "fn(widget: dijit._WidgetBase, last: bool)",
        "focusFirstChild": "fn()",
        "focusLastChild": "fn()",
        "focusNext": "fn()",
        "focusPrev": "fn()",
        "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
        "hasChildren": "fn() -> bool",
        "postCreate": "fn()",
        "removeChild": "fn(widget: dijit._WidgetBase)",
        "startup": "fn()",
        "startupKeyNavChildren": "fn()",
        "onKeyboardSearch": "fn(item: dijit._WidgetBase, evt: Event, searchString: String, numMatches: number)"
      }
    },
    "_OnDijitClickMixin": {
      "!type": "fn()",
      "prototype": {
        "a11yclick": "Object",
        "connect": "fn(obj: ?, event: ?, method: ?) -> ?"
      },
      "a11yclick": {
        "click": "fn(node: ?, listener: ?)",
        "move": "fn(node: ?, listener: ?)",
        "press": "fn(node: ?, listener: ?)",
        "release": "fn(node: ?, listener: ?)"
      }
    },
    "_PaletteMixin": {
      "!type": "fn()",
      "prototype": {
        "active": "bool",
        "cellClass": "string",
        "cssStateNodes": "Object",
        "defaultTimeout": "number",
        "dyeClass": "Object",
        "hovering": "bool",
        "tabIndex": "string",
        "timeoutChangeRate": "number",
        "value": "string",
        "focus": "fn()",
        "postCreate": "fn()",
        "onChange": "fn(value: String)"
      },
      "__Dye": {
        "!type": "fn(alias: String, row: ?, col: ?)",
        "prototype": {
          "fillCell": "fn(cell: HTMLElement, blankGif: String)",
          "getValue": "fn()"
        }
      }
    },
    "_TemplatedMixin": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "attachScope": "Object",
        "searchContainerNode": "bool",
        "templatePath": "string",
        "templateString": "string",
        "buildRendering": "fn()",
        "destroyRendering": "fn()",
        "getCachedTemplate": "fn(templateString: String, alwaysUseString: bool, doc?: HTMLDocument) -> ?"
      },
      "_templateCache": {}
    },
    "_Templated": {
      "!type": "fn()",
      "prototype": {
        "attachScope": "Object",
        "contextRequire": "Function",
        "searchContainerNode": "bool",
        "templatePath": "string",
        "templateString": "string",
        "widgetsInTemplate": "bool",
        "buildRendering": "fn()",
        "destroyRendering": "fn()",
        "startup": "fn()",
        "getCachedTemplate": "fn() -> ?"
      }
    },
    "_MenuBase": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "activated": "bool",
        "set": "fn(property: string, value: bool)",
        "get": "fn(property: string) -> bool",
        "watch": "fn(property: string, callback: ?) -> ret",
        "active": "bool",
        "attachScope": "Object",
        "attributeMap": "Object",
        "autoFocus": "bool",
        "baseClass": "string",
        "class": "string",
        "containerNode": "HTMLElement",
        "cssStateNodes": "Object",
        "dir": "string",
        "domNode": "HTMLElement",
        "focused": "bool",
        "focusedChild": "Object",
        "hovering": "bool",
        "id": "string",
        "lang": "string",
        "multiCharSearchDuration": "number",
        "ownerDocument": "Object",
        "parentMenu": "Object",
        "passivePopupDelay": "number",
        "popupDelay": "number",
        "searchContainerNode": "bool",
        "selected": "Object",
        "srcNodeRef": "HTMLElement",
        "style": "string",
        "tabIndex": "string",
        "templatePath": "string",
        "templateString": "string",
        "title": "string",
        "tooltip": "string",
        "addChild": "fn(widget: dijit._WidgetBase, insertIndex?: number)",
        "attr": "fn(name: String, value?: Object) -> ?",
        "buildRendering": "fn()",
        "childSelector": "fn(node: HTMLElement) -> ?",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "connectKeyNavHandlers": "fn(prevKeyCodes: dojo.keys, nextKeyCodes: dojo.keys)",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn(preserveDom?: bool)",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "focus": "fn()",
        "focusChild": "fn(widget: dijit._WidgetBase, last: bool)",
        "focusFirstChild": "fn()",
        "focusLastChild": "fn()",
        "focusNext": "fn()",
        "focusPrev": "fn()",
        "getChildren": "fn() -> [?]",
        "getDescendants": "fn() -> [?]",
        "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
        "getParent": "fn() -> ?",
        "hasChildren": "fn() -> bool",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "removeChild": "fn(widget: dijit._WidgetBase)",
        "setAttribute": "fn(attr: String, value: ?)",
        "startup": "fn()",
        "startupKeyNavChildren": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "getCachedTemplate": "fn() -> ?",
        "onBlur": "fn()",
        "onCancel": "fn(closeAll: bool)",
        "onClick": "fn(event: ?)",
        "onDblClick": "fn(event: ?)",
        "onExecute": "fn()",
        "onFocus": "fn()",
        "onHide": "fn()",
        "onItemHover": "fn(item: dijit.MenuItem)",
        "onItemUnhover": "fn(item: dijit.MenuItem)",
        "onKeyboardSearch": "fn(item: dijit.MenuItem, evt: Event, searchString: String, numMatches: number)",
        "onKeyDown": "fn(event: ?)",
        "onKeyPress": "fn(event: ?)",
        "onKeyUp": "fn(event: ?)",
        "onMouseDown": "fn(event: ?)",
        "onMouseEnter": "fn(event: ?)",
        "onMouseLeave": "fn(event: ?)",
        "onMouseMove": "fn(event: ?)",
        "onMouseOut": "fn(event: ?)",
        "onMouseOver": "fn(event: ?)",
        "onMouseUp": "fn(event: ?)",
        "onShow": "fn()"
      }
    },
    "_WidgetsInTemplateMixin": {
      "!type": "fn()",
      "prototype": {
        "contextRequire": "Function",
        "widgetsInTemplate": "bool",
        "startup": "fn()"
      }
    },
    "_WidgetBase": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "attributeMap": "Object",
        "set": "fn(property: string, value: Object)",
        "get": "fn(property: string) -> Object",
        "watch": "fn(property: string, callback: ?) -> ret31",
        "baseClass": "string",
        "class": "string",
        "containerNode": "HTMLElement",
        "dir": "string",
        "domNode": "HTMLElement",
        "focused": "bool",
        "id": "string",
        "lang": "string",
        "ownerDocument": "Object",
        "srcNodeRef": "HTMLElement",
        "style": "Object",
        "title": "string",
        "tooltip": "string",
        "buildRendering": "fn()",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn(preserveDom?: bool)",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "getChildren": "fn() -> [?]",
        "getParent": "fn() -> ?",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "isValid": "?",
        "on": "fn(type: String, func: Function) -> ret45",
        "own": "fn(handle: ?) -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "startup": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "onBlur": "fn()",
        "onFocus": "fn()"
      }
    },
    "_Widget": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "a11yclick": "Object",
        "attributeMap": "Object",
        "set": "fn(property: string, value: Object)",
        "get": "fn(property: string) -> Object",
        "watch": "fn(property: string, callback: ?) -> ret48",
        "baseClass": "string",
        "class": "string",
        "containerNode": "HTMLElement",
        "dir": "string",
        "dndType": "string",
        "domNode": "HTMLElement",
        "focused": "bool",
        "id": "string",
        "lang": "string",
        "observer": "string",
        "ownerDocument": "Object",
        "slideFrom": "string",
        "srcNodeRef": "HTMLElement",
        "style": "Object",
        "title": "string",
        "tooltip": "string",
        "attr": "fn(name: String, value?: Object) -> ?",
        "buildRendering": "fn()",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn(preserveDom?: bool)",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "getChildren": "fn() -> [?]",
        "getDescendants": "fn() -> [?]",
        "getParent": "fn() -> ?",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "setAttribute": "fn(attr: String, value: ?)",
        "startup": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "onBlur": "fn()",
        "onClick": "fn(event: ?)",
        "onClose": "fn() -> bool",
        "onDblClick": "fn(event: ?)",
        "onFocus": "fn()",
        "onHide": "fn()",
        "onKeyDown": "fn(event: ?)",
        "onKeyPress": "fn(event: ?)",
        "onKeyUp": "fn(event: ?)",
        "onMouseDown": "fn(event: ?)",
        "onMouseEnter": "fn(event: ?)",
        "onMouseLeave": "fn(event: ?)",
        "onMouseMove": "fn(event: ?)",
        "onMouseOut": "fn(event: ?)",
        "onMouseOver": "fn(event: ?)",
        "onMouseUp": "fn(event: ?)",
        "onShow": "fn()"
      }
    },
    "_TimePicker": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "attributeMap": "Object",
        "set": "fn(property: string, value: Object)",
        "get": "fn(property: string) -> Object",
        "watch": "fn(property: string, callback: ?) -> ret66",
        "baseClass": "string",
        "class": "string",
        "clickableIncrement": "string",
        "constraints": "Object",
        "containerNode": "HTMLElement",
        "dir": "string",
        "domNode": "HTMLElement",
        "filterString": "string",
        "focused": "bool",
        "id": "string",
        "lang": "string",
        "ownerDocument": "Object",
        "selected": "HTMLElement",
        "srcNodeRef": "HTMLElement",
        "style": "string",
        "title": "string",
        "tooltip": "string",
        "value": "string",
        "visibleIncrement": "string",
        "buildRendering": "fn()",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn(preserveDom?: bool)",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "getChildren": "fn() -> [?]",
        "getParent": "fn() -> ?",
        "handleKey": "fn(e: Event) -> ?",
        "isDisabledDate": "fn(dateObject: Date, locale?: String) -> bool",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "selectFirstNode": "fn()",
        "selectLastNode": "fn()",
        "selectNextNode": "fn()",
        "selectPreviousNode": "fn()",
        "serialize": "fn(dateObject: Date, options?: Object) -> ?",
        "setValue": "fn(value: Date)",
        "startup": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "onBlur": "fn()",
        "onChange": "fn(time: Date)",
        "onClick": "fn(node: HTMLElement)",
        "onDeselect": "fn(node: HTMLElement)",
        "onFocus": "fn()",
        "onHover": "fn(node: HTMLElement)",
        "onOpen": "fn()",
        "onSelect": "fn(node: HTMLElement)",
        "onUnhover": "fn(node: HTMLElement)"
      },
      "__Constraints": {
        "!type": "fn()",
        "prototype": {
          "am": "string",
          "clickableIncrement": "string",
          "datePattern": "string",
          "formatLength": "string",
          "fullYear": "bool",
          "locale": "string",
          "pm": "string",
          "selector": "string",
          "strict": "bool",
          "timePattern": "string"
        }
      }
    },
    "Destroyable": {
      "!type": "fn()",
      "prototype": {
        "destroy": "fn(preserveDom?: bool)",
        "own": "fn(handle: ?) -> ?"
      }
    },
    "CalendarLite": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "attachScope": "Object",
        "set": "fn(property: string, value: Object)",
        "get": "fn(property: string) -> Object",
        "watch": "fn(property: string, callback: ?) -> ret87",
        "attributeMap": "Object",
        "baseClass": "string",
        "class": "string",
        "containerNode": "HTMLElement",
        "currentFocus": "Date",
        "datePackage": "string",
        "dateTemplateString": "string",
        "dayWidth": "string",
        "dir": "string",
        "domNode": "HTMLElement",
        "dowTemplateString": "string",
        "id": "string",
        "lang": "string",
        "ownerDocument": "Object",
        "searchContainerNode": "bool",
        "srcNodeRef": "HTMLElement",
        "style": "string",
        "tabIndex": "string",
        "templatePath": "string",
        "templateString": "string",
        "title": "string",
        "tooltip": "string",
        "value": "Date",
        "weekTemplateString": "string",
        "buildRendering": "fn()",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn(preserveDom?: bool)",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "focus": "fn()",
        "getChildren": "fn() -> [?]",
        "getClassForDate": "fn(dateObject: Date, locale?: String) -> String",
        "getParent": "fn() -> ?",
        "goToToday": "fn()",
        "isDisabledDate": "fn(dateObject: Date, locale?: String) -> bool",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "startup": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "getCachedTemplate": "fn() -> ?",
        "onChange": "fn(date: Date)"
      },
      "_MonthWidget": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attributeMap": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret113",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "dir": "string",
          "domNode": "HTMLElement",
          "id": "string",
          "lang": "string",
          "ownerDocument": "Object",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "title": "string",
          "tooltip": "string",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)"
        }
      }
    },
    "Declaration": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "attributeMap": "Object",
        "set": "fn(property: string, value: Object)",
        "get": "fn(property: string) -> Object",
        "watch": "fn(property: string, callback: ?) -> ret127",
        "baseClass": "string",
        "class": "string",
        "containerNode": "HTMLElement",
        "defaults": "Object",
        "dir": "string",
        "domNode": "HTMLElement",
        "focused": "bool",
        "id": "string",
        "lang": "string",
        "mixins": "Object",
        "ownerDocument": "Object",
        "srcNodeRef": "HTMLElement",
        "style": "string",
        "title": "string",
        "tooltip": "string",
        "widgetClass": "string",
        "attr": "fn(name: String, value?: Object) -> ?",
        "buildRendering": "fn()",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn(preserveDom?: bool)",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "getChildren": "fn() -> [?]",
        "getDescendants": "fn() -> [?]",
        "getParent": "fn() -> ?",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "setAttribute": "fn(attr: String, value: ?)",
        "startup": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "onBlur": "fn()",
        "onClick": "fn(event: ?)",
        "onClose": "fn() -> bool",
        "onDblClick": "fn(event: ?)",
        "onFocus": "fn()",
        "onHide": "fn()",
        "onKeyDown": "fn(event: ?)",
        "onKeyPress": "fn(event: ?)",
        "onKeyUp": "fn(event: ?)",
        "onMouseDown": "fn(event: ?)",
        "onMouseEnter": "fn(event: ?)",
        "onMouseLeave": "fn(event: ?)",
        "onMouseMove": "fn(event: ?)",
        "onMouseOut": "fn(event: ?)",
        "onMouseOver": "fn(event: ?)",
        "onMouseUp": "fn(event: ?)",
        "onShow": "fn()"
      }
    },
    "Calendar": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "a11yclick": "Object",
        "active": "bool",
        "set": "fn(property: string, value: bool)",
        "get": "fn(property: string) -> bool",
        "watch": "fn(property: string, callback: ?) -> ret145",
        "attachScope": "Object",
        "attributeMap": "Object",
        "baseClass": "string",
        "class": "string",
        "containerNode": "HTMLElement",
        "cssStateNodes": "Object",
        "currentFocus": "Date",
        "datePackage": "string",
        "dateTemplateString": "string",
        "dayWidth": "string",
        "dir": "string",
        "domNode": "HTMLElement",
        "dowTemplateString": "string",
        "dndType": "string",
        "focused": "bool",
        "hovering": "bool",
        "id": "string",
        "lang": "string",
        "observer": "string",
        "ownerDocument": "Object",
        "searchContainerNode": "bool",
        "slideFrom": "string",
        "srcNodeRef": "HTMLElement",
        "style": "string",
        "tabIndex": "string",
        "templatePath": "string",
        "templateString": "string",
        "title": "string",
        "tooltip": "string",
        "value": "Date",
        "weekTemplateString": "string",
        "attr": "fn(name: String, value?: Object) -> ?",
        "buildRendering": "fn()",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn(preserveDom?: bool)",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "focus": "fn()",
        "getChildren": "fn() -> [?]",
        "getClassForDate": "fn(dateObject: Date, locale: String) -> String",
        "getDescendants": "fn() -> [?]",
        "getParent": "fn() -> ?",
        "goToToday": "fn()",
        "handleKey": "fn(evt: Event) -> ?",
        "isDisabledDate": "fn(dateObject: Date, locale?: String) -> bool",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "setAttribute": "fn(attr: String, value: ?)",
        "setValue": "fn(value: Date)",
        "startup": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "getCachedTemplate": "fn() -> ?",
        "onBlur": "fn()",
        "onChange": "fn(value: ?)",
        "onClick": "fn(event: ?)",
        "onClose": "fn() -> bool",
        "onDblClick": "fn(event: ?)",
        "onFocus": "fn()",
        "onHide": "fn()",
        "onKeyDown": "fn(event: ?)",
        "onKeyPress": "fn(event: ?)",
        "onKeyUp": "fn(event: ?)",
        "onMouseDown": "fn(event: ?)",
        "onMouseEnter": "fn(event: ?)",
        "onMouseLeave": "fn(event: ?)",
        "onMouseMove": "fn(event: ?)",
        "onMouseOut": "fn(event: ?)",
        "onMouseOver": "fn(event: ?)",
        "onMouseUp": "fn(event: ?)",
        "onShow": "fn()",
        "onValueSelected": "fn(date: Date)"
      },
      "_MonthDropDown": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attachScope": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret178",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "dir": "string",
          "domNode": "HTMLElement",
          "focused": "bool",
          "id": "string",
          "lang": "string",
          "months": "Object",
          "ownerDocument": "Object",
          "searchContainerNode": "bool",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(month: number)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "_MonthDropDownButton": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret198",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "autoWidth": "bool",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "dir": "string",
          "disabled": "bool",
          "domNode": "HTMLElement",
          "dropDown": "Object",
          "dropDownPosition": "Object",
          "focused": "bool",
          "forceWidth": "bool",
          "hovering": "bool",
          "iconClass": "string",
          "id": "string",
          "intermediateChanges": "bool",
          "label": "string",
          "lang": "string",
          "maxHeight": "number",
          "name": "string",
          "ownerDocument": "Object",
          "scrollOnFocus": "bool",
          "searchContainerNode": "bool",
          "showLabel": "bool",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "type": "string",
          "value": "string",
          "addChild": "fn(widget: dijit._WidgetBase, insertIndex?: number)",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "closeDropDown": "fn(focus: bool)",
          "compare": "fn(val1: ?, val2: ?) -> number",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "focus": "fn()",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
          "getParent": "fn() -> ?",
          "getValue": "fn() -> ?",
          "hasChildren": "fn() -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "isLoaded": "fn() -> bool",
          "loadAndOpenDropDown": "fn() -> ?",
          "loadDropDown": "fn(callback: Function)",
          "on": "fn(type: String, func: Function) -> ?",
          "openDropDown": "fn() -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "removeChild": "fn(widget: dijit._WidgetBase)",
          "setAttribute": "fn(attr: String, value: ?)",
          "setDisabled": "fn(disabled: bool)",
          "setLabel": "fn(content: String)",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "toggleDropDown": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: ?) -> bool",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMonthSelect": "fn()",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      }
    },
    "CheckedMenuItem": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "accelKey": "string",
        "set": "fn(property: string, value: string)",
        "get": "fn(property: string) -> string",
        "watch": "fn(property: string, callback: ?) -> ret237",
        "active": "bool",
        "attachScope": "Object",
        "attributeMap": "Object",
        "baseClass": "string",
        "checked": "bool",
        "checkedChar": "string",
        "class": "string",
        "containerNode": "HTMLElement",
        "cssStateNodes": "Object",
        "dir": "string",
        "disabled": "bool",
        "domNode": "HTMLElement",
        "focused": "bool",
        "hovering": "bool",
        "iconClass": "string",
        "id": "string",
        "label": "string",
        "lang": "string",
        "ownerDocument": "Object",
        "role": "string",
        "searchContainerNode": "bool",
        "shortcutKey": "string",
        "srcNodeRef": "HTMLElement",
        "style": "string",
        "templatePath": "string",
        "templateString": "string",
        "title": "string",
        "tooltip": "string",
        "attr": "fn(name: String, value?: Object) -> ?",
        "buildRendering": "fn()",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn(preserveDom?: bool)",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "focus": "fn()",
        "getChildren": "fn() -> [?]",
        "getDescendants": "fn() -> [?]",
        "getIndexInParent": "fn() -> ?",
        "getNextSibling": "fn() -> ?",
        "getParent": "fn() -> ?",
        "getPreviousSibling": "fn() -> ?",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "setAttribute": "fn(attr: String, value: ?)",
        "setDisabled": "fn(disabled: bool)",
        "setLabel": "fn(content: String)",
        "startup": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "getCachedTemplate": "fn() -> ?",
        "onBlur": "fn()",
        "onChange": "fn(checked: bool)",
        "onClick": "fn()",
        "onClose": "fn() -> bool",
        "onDblClick": "fn(event: ?)",
        "onFocus": "fn()",
        "onHide": "fn()",
        "onKeyDown": "fn(event: ?)",
        "onKeyPress": "fn(event: ?)",
        "onKeyUp": "fn(event: ?)",
        "onMouseDown": "fn(event: ?)",
        "onMouseEnter": "fn(event: ?)",
        "onMouseLeave": "fn(event: ?)",
        "onMouseMove": "fn(event: ?)",
        "onMouseOut": "fn(event: ?)",
        "onMouseOver": "fn(event: ?)",
        "onMouseUp": "fn(event: ?)",
        "onShow": "fn()"
      }
    },
    "DialogUnderlay": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "attachScope": "Object",
        "set": "fn(property: string, value: Object)",
        "get": "fn(property: string) -> Object",
        "watch": "fn(property: string, callback: ?) -> ret267",
        "attributeMap": "Object",
        "baseClass": "string",
        "class": "string",
        "containerNode": "HTMLElement",
        "dialogId": "string",
        "dir": "string",
        "domNode": "HTMLElement",
        "focused": "bool",
        "id": "string",
        "lang": "string",
        "ownerDocument": "Object",
        "searchContainerNode": "bool",
        "srcNodeRef": "HTMLElement",
        "style": "string",
        "templatePath": "string",
        "templateString": "string",
        "title": "string",
        "tooltip": "string",
        "attr": "fn(name: String, value?: Object) -> ?",
        "buildRendering": "fn()",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn()",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "getChildren": "fn() -> [?]",
        "getDescendants": "fn() -> [?]",
        "getParent": "fn() -> ?",
        "hide": "fn()",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "setAttribute": "fn(attr: String, value: ?)",
        "show": "fn()",
        "startup": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "getCachedTemplate": "fn() -> ?",
        "onBlur": "fn()",
        "onClick": "fn(event: ?)",
        "onClose": "fn() -> bool",
        "onDblClick": "fn(event: ?)",
        "onFocus": "fn()",
        "onHide": "fn()",
        "onKeyDown": "fn(event: ?)",
        "onKeyPress": "fn(event: ?)",
        "onKeyUp": "fn(event: ?)",
        "onMouseDown": "fn(event: ?)",
        "onMouseEnter": "fn(event: ?)",
        "onMouseLeave": "fn(event: ?)",
        "onMouseMove": "fn(event: ?)",
        "onMouseOut": "fn(event: ?)",
        "onMouseOver": "fn(event: ?)",
        "onMouseUp": "fn(event: ?)",
        "onShow": "fn()"
      }
    },
    "_ConfirmDialogMixin": {
      "!type": "fn()",
      "prototype": {
        "actionBarTemplate": "Object",
        "buttonCancel": "string",
        "buttonOk": "string",
        "contextRequire": "Function",
        "widgetsInTemplate": "bool",
        "startup": "fn()"
      }
    },
    "ConfirmDialog": {
      "!type": "fn(params: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "okButton": "dijit.form.Button",
        "cancelButon": "dijit.form.Button",
        "actionBarTemplate": "string",
        "set": "fn(property: string, value: string)",
        "get": "fn(property: string) -> string",
        "watch": "fn(property: string, callback: ?) -> ret287",
        "active": "bool",
        "attachScope": "Object",
        "attributeMap": "Object",
        "autofocus": "bool",
        "baseClass": "string",
        "buttonCancel": "string",
        "buttonOk": "string",
        "class": "string",
        "closable": "bool",
        "containerNode": "HTMLElement",
        "content": "string",
        "contextRequire": "Function",
        "cssStateNodes": "Object",
        "dir": "string",
        "doLayout": "bool",
        "domNode": "HTMLElement",
        "draggable": "bool",
        "duration": "number",
        "errorMessage": "string",
        "extractContent": "bool",
        "focused": "bool",
        "hovering": "bool",
        "href": "string",
        "id": "string",
        "ioArgs": "Object",
        "isLayoutContainer": "bool",
        "isLoaded": "bool",
        "lang": "string",
        "loadingMessage": "string",
        "maxRatio": "number",
        "onLoadDeferred": "Object",
        "open": "bool",
        "ownerDocument": "Object",
        "parseOnLoad": "bool",
        "parserScope": "string",
        "preload": "bool",
        "preventCache": "bool",
        "refocus": "bool",
        "refreshOnShow": "bool",
        "searchContainerNode": "bool",
        "srcNodeRef": "HTMLElement",
        "state": "string",
        "stopParser": "bool",
        "style": "string",
        "templatePath": "string",
        "templateString": "string",
        "title": "string",
        "tooltip": "string",
        "widgetsInTemplate": "bool",
        "addChild": "fn(widget: dijit._WidgetBase, insertIndex?: number)",
        "attr": "fn(name: String, value?: Object) -> ?",
        "buildRendering": "fn()",
        "cancel": "fn()",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "connectChildren": "fn(inStartup: bool)",
        "create": "fn(params: ?, srcNodeRef: ?)",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn()",
        "destroyDescendants": "fn(preserveDom: bool)",
        "destroyRecursive": "fn(preserveDom: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "disconnectChildren": "fn()",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "execute": "fn(formContents: Object)",
        "focus": "fn()",
        "getChildren": "fn() -> [?]",
        "getDescendants": "fn() -> [?]",
        "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
        "getParent": "fn() -> ?",
        "getValues": "fn() -> ?",
        "hasChildren": "fn() -> bool",
        "hide": "fn() -> ?",
        "ioMethod": "fn(args: Object) -> ?",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "isValid": {},
        "markupFactory": "fn(params: ?, node: ?, ctor: ?) -> ?",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "refresh": "fn() -> ?",
        "removeChild": "fn(widget: dijit._WidgetBase)",
        "reset": "fn()",
        "resize": "fn(changeSize: ?, resultSize: ?)",
        "setAttribute": "fn(attr: String, value: ?)",
        "setContent": "fn(data: String)",
        "setHref": "fn(href: String) -> ?",
        "setValues": "fn(val: ?) -> ?",
        "show": "fn() -> ?",
        "startup": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "validate": "fn() -> ?",
        "getCachedTemplate": "fn() -> ?",
        "onBlur": "fn()",
        "onCancel": "fn()",
        "onClick": "fn(event: ?)",
        "onClose": "fn() -> bool",
        "onContentError": "fn(error: Error)",
        "onDblClick": "fn(event: ?)",
        "onDownloadEnd": "fn()",
        "onDownloadError": "fn(error: Error) -> ?",
        "onDownloadStart": "fn() -> ?",
        "onExecute": "fn()",
        "onFocus": "fn()",
        "onHide": "fn()",
        "onKeyDown": "fn(event: ?)",
        "onKeyPress": "fn(event: ?)",
        "onKeyUp": "fn(event: ?)",
        "onLoad": "fn(data: ?)",
        "onMouseDown": "fn(event: ?)",
        "onMouseEnter": "fn(event: ?)",
        "onMouseLeave": "fn(event: ?)",
        "onMouseMove": "fn(event: ?)",
        "onMouseOut": "fn(event: ?)",
        "onMouseOver": "fn(event: ?)",
        "onMouseUp": "fn(event: ?)",
        "onShow": "fn()",
        "onUnload": "fn()",
        "onValidStateChange": "fn(isValid: bool)"
      }
    },
    "Dialog": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "active": "bool",
        "set": "fn(property: string, value: bool)",
        "get": "fn(property: string) -> bool",
        "watch": "fn(property: string, callback: ?) -> ret338",
        "attachScope": "Object",
        "attributeMap": "Object",
        "autofocus": "bool",
        "baseClass": "string",
        "class": "string",
        "closable": "bool",
        "containerNode": "HTMLElement",
        "content": "string",
        "cssStateNodes": "Object",
        "dir": "string",
        "doLayout": "bool",
        "domNode": "HTMLElement",
        "draggable": "bool",
        "duration": "number",
        "errorMessage": "string",
        "extractContent": "bool",
        "focused": "bool",
        "hovering": "bool",
        "href": "string",
        "id": "string",
        "ioArgs": "Object",
        "isLayoutContainer": "bool",
        "isLoaded": "bool",
        "lang": "string",
        "loadingMessage": "string",
        "maxRatio": "number",
        "onLoadDeferred": "Object",
        "open": "bool",
        "ownerDocument": "Object",
        "parseOnLoad": "bool",
        "parserScope": "string",
        "preload": "bool",
        "preventCache": "bool",
        "refocus": "bool",
        "refreshOnShow": "bool",
        "searchContainerNode": "bool",
        "srcNodeRef": "HTMLElement",
        "state": "string",
        "stopParser": "bool",
        "style": "string",
        "templatePath": "string",
        "templateString": "string",
        "title": "string",
        "tooltip": "string",
        "addChild": "fn(widget: dijit._WidgetBase, insertIndex?: number)",
        "attr": "fn(name: String, value?: Object) -> ?",
        "buildRendering": "fn()",
        "cancel": "fn()",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "connectChildren": "fn(inStartup: bool)",
        "create": "fn(params: ?, srcNodeRef: ?)",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn()",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "disconnectChildren": "fn()",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "execute": "fn(formContents: Object)",
        "focus": "fn()",
        "getChildren": "fn() -> [?]",
        "getDescendants": "fn() -> [?]",
        "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
        "getParent": "fn() -> ?",
        "getValues": "fn() -> ?",
        "hasChildren": "fn() -> bool",
        "hide": "fn() -> ?",
        "ioMethod": "fn(args: Object) -> ?",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "isValid": {},
        "markupFactory": "fn(params: ?, node: ?, ctor: ?) -> ?",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "refresh": "fn() -> ?",
        "removeChild": "fn(widget: dijit._WidgetBase)",
        "reset": "fn()",
        "resize": "fn(changeSize: ?, resultSize: ?)",
        "setAttribute": "fn(attr: String, value: ?)",
        "setContent": "fn(data: String)",
        "setHref": "fn(href: String) -> ?",
        "setValues": "fn(val: ?) -> ?",
        "show": "fn() -> ?",
        "startup": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "validate": "fn() -> ?",
        "getCachedTemplate": "fn() -> ?",
        "onBlur": "fn()",
        "onCancel": "fn()",
        "onClick": "fn(event: ?)",
        "onClose": "fn() -> bool",
        "onContentError": "fn(error: Error)",
        "onDblClick": "fn(event: ?)",
        "onDownloadEnd": "fn()",
        "onDownloadError": "fn(error: Error) -> ?",
        "onDownloadStart": "fn() -> ?",
        "onExecute": "fn()",
        "onFocus": "fn()",
        "onHide": "fn()",
        "onKeyDown": "fn(event: ?)",
        "onKeyPress": "fn(event: ?)",
        "onKeyUp": "fn(event: ?)",
        "onLoad": "fn(data: ?)",
        "onMouseDown": "fn(event: ?)",
        "onMouseEnter": "fn(event: ?)",
        "onMouseLeave": "fn(event: ?)",
        "onMouseMove": "fn(event: ?)",
        "onMouseOut": "fn(event: ?)",
        "onMouseOver": "fn(event: ?)",
        "onMouseUp": "fn(event: ?)",
        "onShow": "fn()",
        "onUnload": "fn()",
        "onValidStateChange": "fn(isValid: bool)"
      },
      "_DialogBase": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "attachScope": "Object",
          "autofocus": "bool",
          "baseClass": "string",
          "closable": "bool",
          "cssStateNodes": "Object",
          "doLayout": "bool",
          "draggable": "bool",
          "duration": "number",
          "hovering": "bool",
          "maxRatio": "number",
          "open": "bool",
          "refocus": "bool",
          "searchContainerNode": "bool",
          "state": "string",
          "templatePath": "string",
          "templateString": "string",
          "buildRendering": "fn()",
          "connectChildren": "fn(inStartup: bool)",
          "destroy": "fn()",
          "destroyRendering": "fn()",
          "disconnectChildren": "fn()",
          "execute": "fn(formContents: Object)",
          "focus": "fn()",
          "getValues": "fn() -> ?",
          "hide": "fn() -> ?",
          "isValid": {},
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "reset": "fn()",
          "setValues": "fn(val: ?) -> ?",
          "show": "fn() -> ?",
          "startup": "fn()",
          "validate": "fn() -> ?",
          "getCachedTemplate": "fn() -> ?",
          "onCancel": "fn()",
          "onExecute": "fn()",
          "onLoad": "fn()",
          "onValidStateChange": "fn(isValid: bool)"
        }
      },
      "_DialogLevelManager": {
        "hide": "fn(dialog: dijit._WidgetBase)",
        "isTop": "fn(dialog: dijit._WidgetBase) -> bool",
        "show": "fn(dialog: dijit._WidgetBase, underlayAttrs: Object)"
      }
    },
    "ColorPalette": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "active": "bool",
        "set": "fn(property: string, value: bool)",
        "get": "fn(property: string) -> bool",
        "watch": "fn(property: string, callback: ?) -> ret384",
        "attachScope": "Object",
        "attributeMap": "Object",
        "baseClass": "string",
        "cellClass": "string",
        "class": "string",
        "containerNode": "HTMLElement",
        "cssStateNodes": "Object",
        "defaultTimeout": "number",
        "dir": "string",
        "domNode": "HTMLElement",
        "dyeClass": "Function",
        "focused": "bool",
        "hovering": "bool",
        "id": "string",
        "lang": "string",
        "ownerDocument": "Object",
        "palette": "string",
        "searchContainerNode": "bool",
        "srcNodeRef": "HTMLElement",
        "style": "string",
        "tabIndex": "string",
        "templatePath": "string",
        "templateString": "string",
        "timeoutChangeRate": "number",
        "title": "string",
        "tooltip": "string",
        "value": "string",
        "attr": "fn(name: String, value?: Object) -> ?",
        "buildRendering": "fn()",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn(preserveDom?: bool)",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "focus": "fn()",
        "getChildren": "fn() -> [?]",
        "getDescendants": "fn() -> [?]",
        "getParent": "fn() -> ?",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "setAttribute": "fn(attr: String, value: ?)",
        "startup": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "getCachedTemplate": "fn() -> ?",
        "onBlur": "fn()",
        "onChange": "fn(value: String)",
        "onClick": "fn(event: ?)",
        "onClose": "fn() -> bool",
        "onDblClick": "fn(event: ?)",
        "onFocus": "fn()",
        "onHide": "fn()",
        "onKeyDown": "fn(event: ?)",
        "onKeyPress": "fn(event: ?)",
        "onKeyUp": "fn(event: ?)",
        "onMouseDown": "fn(event: ?)",
        "onMouseEnter": "fn(event: ?)",
        "onMouseLeave": "fn(event: ?)",
        "onMouseMove": "fn(event: ?)",
        "onMouseOut": "fn(event: ?)",
        "onMouseOver": "fn(event: ?)",
        "onMouseUp": "fn(event: ?)",
        "onShow": "fn()"
      },
      "_Color": {
        "!type": "fn(alias: String, row: number, col: ?, title: String)",
        "prototype": {
          "a": "number",
          "b": "number",
          "g": "number",
          "hcTemplate": "string",
          "r": "number",
          "template": "string",
          "fillCell": "fn(cell: HTMLElement, blankGif: String)",
          "getValue": "fn() -> ?",
          "sanitize": "fn()",
          "setColor": "fn(color: [?]) -> Function",
          "toCss": "fn(includeAlpha: bool) -> String",
          "toHex": "fn() -> String",
          "toRgb": "fn() -> [?]",
          "toRgba": "fn() -> [?]"
        }
      }
    },
    "Fieldset": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "active": "bool",
        "set": "fn(property: string, value: bool)",
        "get": "fn(property: string) -> bool",
        "watch": "fn(property: string, callback: ?) -> ret413",
        "attachScope": "Object",
        "attributeMap": "Object",
        "baseClass": "string",
        "class": "string",
        "containerNode": "HTMLElement",
        "content": "string",
        "cssStateNodes": "Object",
        "dir": "string",
        "doLayout": "bool",
        "domNode": "HTMLElement",
        "duration": "number",
        "errorMessage": "string",
        "extractContent": "bool",
        "focused": "bool",
        "hovering": "bool",
        "href": "string",
        "id": "string",
        "ioArgs": "Object",
        "isLayoutContainer": "bool",
        "isLoaded": "bool",
        "lang": "string",
        "loadingMessage": "string",
        "onLoadDeferred": "Object",
        "open": "bool",
        "ownerDocument": "Object",
        "parseOnLoad": "bool",
        "parserScope": "string",
        "preload": "bool",
        "preventCache": "bool",
        "refreshOnShow": "bool",
        "searchContainerNode": "bool",
        "srcNodeRef": "HTMLElement",
        "stopParser": "bool",
        "style": "string",
        "tabIndex": "string",
        "templatePath": "string",
        "templateString": "string",
        "title": "string",
        "toggleable": "bool",
        "tooltip": "string",
        "addChild": "fn(widget: dijit._WidgetBase, insertIndex?: number)",
        "attr": "fn(name: String, value?: Object) -> ?",
        "buildRendering": "fn()",
        "cancel": "fn()",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "create": "fn(params: ?, srcNodeRef: ?)",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn()",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "getChildren": "fn() -> [?]",
        "getDescendants": "fn() -> [?]",
        "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
        "getParent": "fn() -> ?",
        "hasChildren": "fn() -> bool",
        "ioMethod": "fn(args: Object) -> ?",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "markupFactory": "fn(params: ?, node: ?, ctor: ?) -> ?",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "refresh": "fn() -> ?",
        "removeChild": "fn(widget: dijit._WidgetBase)",
        "resize": "fn(changeSize: ?, resultSize: ?)",
        "setAttribute": "fn(attr: String, value: ?)",
        "setContent": "fn(data: String)",
        "setHref": "fn(href: String) -> ?",
        "setTitle": "fn(title: String)",
        "startup": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "getCachedTemplate": "fn() -> ?",
        "onBlur": "fn()",
        "onClick": "fn(event: ?)",
        "onClose": "fn() -> bool",
        "onContentError": "fn(error: Error)",
        "onDblClick": "fn(event: ?)",
        "onDownloadEnd": "fn()",
        "onDownloadError": "fn(error: Error) -> ?",
        "onDownloadStart": "fn() -> ?",
        "onFocus": "fn()",
        "onHide": "fn()",
        "onKeyDown": "fn(event: ?)",
        "onKeyPress": "fn(event: ?)",
        "onKeyUp": "fn(event: ?)",
        "onLoad": "fn(data: ?)",
        "onMouseDown": "fn(event: ?)",
        "onMouseEnter": "fn(event: ?)",
        "onMouseLeave": "fn(event: ?)",
        "onMouseMove": "fn(event: ?)",
        "onMouseOut": "fn(event: ?)",
        "onMouseOver": "fn(event: ?)",
        "onMouseUp": "fn(event: ?)",
        "onShow": "fn()",
        "onUnload": "fn()"
      }
    },
    "DropDownMenu": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "activated": "bool",
        "set": "fn(property: string, value: bool)",
        "get": "fn(property: string) -> bool",
        "watch": "fn(property: string, callback: ?) -> ret455",
        "active": "bool",
        "attachScope": "Object",
        "attributeMap": "Object",
        "autoFocus": "bool",
        "baseClass": "string",
        "class": "string",
        "containerNode": "HTMLElement",
        "cssStateNodes": "Object",
        "dir": "string",
        "domNode": "HTMLElement",
        "focused": "bool",
        "focusedChild": "Object",
        "hovering": "bool",
        "id": "string",
        "lang": "string",
        "multiCharSearchDuration": "number",
        "ownerDocument": "Object",
        "parentMenu": "Object",
        "passivePopupDelay": "number",
        "popupDelay": "number",
        "searchContainerNode": "bool",
        "selected": "Object",
        "srcNodeRef": "HTMLElement",
        "style": "string",
        "tabIndex": "string",
        "templatePath": "string",
        "templateString": "string",
        "title": "string",
        "tooltip": "string",
        "addChild": "fn(widget: dijit._WidgetBase, insertIndex?: number)",
        "attr": "fn(name: String, value?: Object) -> ?",
        "buildRendering": "fn()",
        "childSelector": "fn(node: HTMLElement) -> ?",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "connectKeyNavHandlers": "fn(prevKeyCodes: dojo.keys, nextKeyCodes: dojo.keys)",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn(preserveDom?: bool)",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "focus": "fn()",
        "focusChild": "fn(widget: dijit._WidgetBase, last: bool)",
        "focusFirstChild": "fn()",
        "focusLastChild": "fn()",
        "focusNext": "fn()",
        "focusPrev": "fn()",
        "getChildren": "fn() -> [?]",
        "getDescendants": "fn() -> [?]",
        "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
        "getParent": "fn() -> ?",
        "hasChildren": "fn() -> bool",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "removeChild": "fn(widget: dijit._WidgetBase)",
        "setAttribute": "fn(attr: String, value: ?)",
        "startup": "fn()",
        "startupKeyNavChildren": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "getCachedTemplate": "fn() -> ?",
        "onBlur": "fn()",
        "onCancel": "fn(closeAll: bool)",
        "onClick": "fn(event: ?)",
        "onDblClick": "fn(event: ?)",
        "onExecute": "fn()",
        "onFocus": "fn()",
        "onHide": "fn()",
        "onItemHover": "fn(item: dijit.MenuItem)",
        "onItemUnhover": "fn(item: dijit.MenuItem)",
        "onKeyboardSearch": "fn(item: dijit.MenuItem, evt: Event, searchString: String, numMatches: number)",
        "onKeyDown": "fn(event: ?)",
        "onKeyPress": "fn(event: ?)",
        "onKeyUp": "fn(event: ?)",
        "onMouseDown": "fn(event: ?)",
        "onMouseEnter": "fn(event: ?)",
        "onMouseLeave": "fn(event: ?)",
        "onMouseMove": "fn(event: ?)",
        "onMouseOut": "fn(event: ?)",
        "onMouseOver": "fn(event: ?)",
        "onMouseUp": "fn(event: ?)",
        "onShow": "fn()"
      }
    },
    "Editor": {
      "!type": "fn(params: Object, srcNodeRef: HTMLElement)",
      "prototype": {
        "active": "bool",
        "set": "fn(property: string, value: bool)",
        "get": "fn(property: string) -> bool",
        "watch": "fn(property: string, callback: ?) -> ret486",
        "attributeMap": "Object",
        "baseClass": "string",
        "captureEvents": "Object",
        "class": "string",
        "containerNode": "HTMLElement",
        "cssStateNodes": "Object",
        "customUndo": "bool",
        "dir": "string",
        "disabled": "bool",
        "disableSpellCheck": "bool",
        "domNode": "HTMLElement",
        "editActionInterval": "number",
        "extraPlugins": "Object",
        "focused": "bool",
        "focusOnLoad": "bool",
        "height": "string",
        "hovering": "bool",
        "id": "string",
        "inheritWidth": "bool",
        "isClosed": "bool",
        "isLoaded": "bool",
        "isTabIndent": "bool",
        "lang": "string",
        "minHeight": "string",
        "name": "Object",
        "onLoadDeferred": "Object",
        "ownerDocument": "Object",
        "plugins": "Object",
        "srcNodeRef": "HTMLElement",
        "style": "string",
        "styleSheets": "string",
        "title": "string",
        "tooltip": "string",
        "updateInterval": "number",
        "addKeyHandler": "fn(key: String, ctrl: bool, shift: bool, handler: Function)",
        "addPlugin": "fn(plugin: String, index?: number)",
        "addStyleSheet": "fn(uri: dojo._base.url)",
        "attr": "fn(name: String, value?: Object) -> ?",
        "blur": "fn()",
        "buildRendering": "fn()",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn()",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "execCommand": "fn(cmd: ?) -> ?",
        "focus": "fn()",
        "getChildren": "fn() -> [?]",
        "getDescendants": "fn() -> [?]",
        "getFooterHeight": "fn() -> ?",
        "getHeaderHeight": "fn() -> ?",
        "getNodeChildrenHtml": "fn(dom: HTMLElement) -> ?",
        "getNodeHtml": "fn(node: HTMLElement) -> ?",
        "getParent": "fn() -> ?",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "layout": "fn()",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "queryCommandEnabled": "fn(cmd: ?) -> ?",
        "queryCommandState": "fn(command: ?) -> ?",
        "queryCommandValue": "fn(command: ?) -> ?",
        "removeStyleSheet": "fn(uri: dojo._base.url)",
        "replaceValue": "fn(html: String)",
        "resize": "fn(size: ?)",
        "setAttribute": "fn(attr: String, value: ?)",
        "setDisabled": "fn(disabled: bool)",
        "setupDefaultShortcuts": "fn()",
        "setValue": "fn(html: String)",
        "startup": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "onBeforeActivate": "fn()",
        "onBlur": "fn()",
        "onChange": "fn(newContent: ?)",
        "onClick": "fn()",
        "onClose": "fn() -> bool",
        "onDblClick": "fn(event: ?)",
        "onFocus": "fn()",
        "onHide": "fn()",
        "onKeyPress": "fn(event: ?)",
        "onKeyUp": "fn(e: ?)",
        "onLoad": "fn(html: String)",
        "onMouseDown": "fn(event: ?)",
        "onMouseEnter": "fn(event: ?)",
        "onMouseLeave": "fn(event: ?)",
        "onMouseMove": "fn(event: ?)",
        "onMouseOut": "fn(event: ?)",
        "onMouseOver": "fn(event: ?)",
        "onMouseUp": "fn(event: ?)",
        "onShow": "fn()"
      }
    },
    "InlineEditBox": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "attributeMap": "Object",
        "set": "fn(property: string, value: Object)",
        "get": "fn(property: string) -> Object",
        "watch": "fn(property: string, callback: ?) -> ret522",
        "autoSave": "bool",
        "baseClass": "string",
        "buttonCancel": "string",
        "buttonSave": "string",
        "class": "string",
        "containerNode": "HTMLElement",
        "dir": "string",
        "disabled": "bool",
        "domNode": "HTMLElement",
        "editing": "bool",
        "editorParams": "Object",
        "focused": "bool",
        "id": "string",
        "lang": "string",
        "noValueIndicator": "string",
        "ownerDocument": "Object",
        "renderAsHtml": "bool",
        "srcNodeRef": "HTMLElement",
        "style": "string",
        "title": "string",
        "tooltip": "string",
        "value": "string",
        "width": "string",
        "attr": "fn(name: String, value?: Object) -> ?",
        "buildRendering": "fn()",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn()",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "editor": "fn()",
        "editorWrapper": "fn()",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "getChildren": "fn() -> [?]",
        "getDescendants": "fn() -> [?]",
        "getParent": "fn() -> ?",
        "getValue": "fn() -> ?",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "setAttribute": "fn(attr: String, value: ?)",
        "setDisabled": "fn(disabled: bool)",
        "setValue": "fn(val: String) -> ?",
        "startup": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "onBlur": "fn()",
        "onCancel": "fn()",
        "onChange": "fn(value: ?)",
        "onClick": "fn(event: ?)",
        "onClose": "fn() -> bool",
        "onDblClick": "fn(event: ?)",
        "onFocus": "fn()",
        "onHide": "fn()",
        "onKeyDown": "fn(event: ?)",
        "onKeyPress": "fn(event: ?)",
        "onKeyUp": "fn(event: ?)",
        "onMouseDown": "fn(event: ?)",
        "onMouseEnter": "fn(event: ?)",
        "onMouseLeave": "fn(event: ?)",
        "onMouseMove": "fn(event: ?)",
        "onMouseOut": "fn(event: ?)",
        "onMouseOver": "fn(event: ?)",
        "onMouseUp": "fn(event: ?)",
        "onShow": "fn()"
      },
      "_InlineEditor": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attachScope": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret547",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "dir": "string",
          "domNode": "HTMLElement",
          "focused": "bool",
          "id": "string",
          "lang": "string",
          "ownerDocument": "Object",
          "searchContainerNode": "bool",
          "srcNodeRef": "HTMLElement",
          "style": "Object",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "value": "string",
          "widgetsInTemplate": "bool",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "contextRequire": "fn()",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn()",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "enableSave": "fn() -> bool",
          "focus": "fn()",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "getValue": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      }
    },
    "MenuSeparator": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "attachScope": "Object",
        "set": "fn(property: string, value: Object)",
        "get": "fn(property: string) -> Object",
        "watch": "fn(property: string, callback: ?) -> ret568",
        "attributeMap": "Object",
        "baseClass": "string",
        "class": "string",
        "containerNode": "HTMLElement",
        "dir": "string",
        "domNode": "HTMLElement",
        "focused": "bool",
        "id": "string",
        "lang": "string",
        "ownerDocument": "Object",
        "searchContainerNode": "bool",
        "srcNodeRef": "HTMLElement",
        "style": "string",
        "templatePath": "string",
        "templateString": "string",
        "title": "string",
        "tooltip": "string",
        "buildRendering": "fn()",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn(preserveDom?: bool)",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "getChildren": "fn() -> [?]",
        "getIndexInParent": "fn() -> ?",
        "getNextSibling": "fn() -> ?",
        "getParent": "fn() -> ?",
        "getPreviousSibling": "fn() -> ?",
        "isFocusable": "fn() -> bool",
        "isLeftToRight": "fn() -> ?",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "startup": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "getCachedTemplate": "fn() -> ?",
        "onBlur": "fn()",
        "onFocus": "fn()"
      }
    },
    "MenuBar": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "activated": "bool",
        "set": "fn(property: string, value: bool)",
        "get": "fn(property: string) -> bool",
        "watch": "fn(property: string, callback: ?) -> ret587",
        "active": "bool",
        "attachScope": "Object",
        "attributeMap": "Object",
        "autoFocus": "bool",
        "baseClass": "string",
        "class": "string",
        "containerNode": "HTMLElement",
        "cssStateNodes": "Object",
        "dir": "string",
        "domNode": "HTMLElement",
        "focused": "bool",
        "focusedChild": "Object",
        "hovering": "bool",
        "id": "string",
        "lang": "string",
        "multiCharSearchDuration": "number",
        "ownerDocument": "Object",
        "parentMenu": "Object",
        "passivePopupDelay": "number",
        "popupDelay": "number",
        "searchContainerNode": "bool",
        "selected": "Object",
        "srcNodeRef": "HTMLElement",
        "style": "string",
        "tabIndex": "string",
        "templatePath": "string",
        "templateString": "string",
        "title": "string",
        "tooltip": "string",
        "addChild": "fn(widget: dijit._WidgetBase, insertIndex?: number)",
        "attr": "fn(name: String, value?: Object) -> ?",
        "buildRendering": "fn()",
        "childSelector": "fn(node: HTMLElement) -> ?",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "connectKeyNavHandlers": "fn(prevKeyCodes: dojo.keys, nextKeyCodes: dojo.keys)",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn(preserveDom?: bool)",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "focus": "fn()",
        "focusChild": "fn(item: ?)",
        "focusFirstChild": "fn()",
        "focusLastChild": "fn()",
        "focusNext": "fn()",
        "focusPrev": "fn()",
        "getChildren": "fn() -> [?]",
        "getDescendants": "fn() -> [?]",
        "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
        "getParent": "fn() -> ?",
        "hasChildren": "fn() -> bool",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "removeChild": "fn(widget: dijit._WidgetBase)",
        "setAttribute": "fn(attr: String, value: ?)",
        "startup": "fn()",
        "startupKeyNavChildren": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "getCachedTemplate": "fn() -> ?",
        "onBlur": "fn()",
        "onCancel": "fn(closeAll: bool)",
        "onClick": "fn(event: ?)",
        "onDblClick": "fn(event: ?)",
        "onExecute": "fn()",
        "onFocus": "fn()",
        "onHide": "fn()",
        "onItemHover": "fn(item: dijit.MenuItem)",
        "onItemUnhover": "fn(item: dijit.MenuItem)",
        "onKeyboardSearch": "fn(item: dijit.MenuItem, evt: Event, searchString: String, numMatches: number)",
        "onKeyDown": "fn(event: ?)",
        "onKeyPress": "fn(event: ?)",
        "onKeyUp": "fn(event: ?)",
        "onMouseDown": "fn(event: ?)",
        "onMouseEnter": "fn(event: ?)",
        "onMouseLeave": "fn(event: ?)",
        "onMouseMove": "fn(event: ?)",
        "onMouseOut": "fn(event: ?)",
        "onMouseOver": "fn(event: ?)",
        "onMouseUp": "fn(event: ?)",
        "onShow": "fn()"
      }
    },
    "Menu": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "activated": "bool",
        "set": "fn(property: string, value: bool)",
        "get": "fn(property: string) -> bool",
        "watch": "fn(property: string, callback: ?) -> ret618",
        "active": "bool",
        "attachScope": "Object",
        "attributeMap": "Object",
        "autoFocus": "bool",
        "baseClass": "string",
        "class": "string",
        "containerNode": "HTMLElement",
        "contextMenuForWindow": "bool",
        "cssStateNodes": "Object",
        "currentTarget": "HTMLElement",
        "dir": "string",
        "domNode": "HTMLElement",
        "focused": "bool",
        "focusedChild": "Object",
        "hovering": "bool",
        "id": "string",
        "lang": "string",
        "leftClickToOpen": "bool",
        "multiCharSearchDuration": "number",
        "ownerDocument": "Object",
        "parentMenu": "Object",
        "passivePopupDelay": "number",
        "popupDelay": "number",
        "refocus": "bool",
        "searchContainerNode": "bool",
        "selected": "Object",
        "selector": "Object",
        "srcNodeRef": "HTMLElement",
        "style": "string",
        "tabIndex": "string",
        "targetNodeIds": "Object",
        "templatePath": "string",
        "templateString": "string",
        "title": "string",
        "tooltip": "string",
        "addChild": "fn(widget: dijit._WidgetBase, insertIndex?: number)",
        "attr": "fn(name: String, value?: Object) -> ?",
        "bindDomNode": "fn(node: String)",
        "buildRendering": "fn()",
        "childSelector": "fn(node: HTMLElement) -> ?",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "connectKeyNavHandlers": "fn(prevKeyCodes: dojo.keys, nextKeyCodes: dojo.keys)",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn()",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "focus": "fn()",
        "focusChild": "fn(widget: dijit._WidgetBase, last: bool)",
        "focusFirstChild": "fn()",
        "focusLastChild": "fn()",
        "focusNext": "fn()",
        "focusPrev": "fn()",
        "getChildren": "fn() -> [?]",
        "getDescendants": "fn() -> [?]",
        "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
        "getParent": "fn() -> ?",
        "getPlaceholders": "fn(label: String) -> ?",
        "hasChildren": "fn() -> bool",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "removeChild": "fn(widget: dijit._WidgetBase)",
        "setAttribute": "fn(attr: String, value: ?)",
        "startup": "fn()",
        "startupKeyNavChildren": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "unBindDomNode": "fn(nodeName: String)",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "getCachedTemplate": "fn() -> ?",
        "onBlur": "fn()",
        "onCancel": "fn(closeAll: bool)",
        "onClick": "fn(event: ?)",
        "onDblClick": "fn(event: ?)",
        "onExecute": "fn()",
        "onFocus": "fn()",
        "onHide": "fn()",
        "onItemHover": "fn(item: dijit.MenuItem)",
        "onItemUnhover": "fn(item: dijit.MenuItem)",
        "onKeyboardSearch": "fn(item: dijit.MenuItem, evt: Event, searchString: String, numMatches: number)",
        "onKeyDown": "fn(event: ?)",
        "onKeyPress": "fn(event: ?)",
        "onKeyUp": "fn(event: ?)",
        "onMouseDown": "fn(event: ?)",
        "onMouseEnter": "fn(event: ?)",
        "onMouseLeave": "fn(event: ?)",
        "onMouseMove": "fn(event: ?)",
        "onMouseOut": "fn(event: ?)",
        "onMouseOver": "fn(event: ?)",
        "onMouseUp": "fn(event: ?)",
        "onShow": "fn()"
      }
    },
    "MenuItem": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "accelKey": "string",
        "set": "fn(property: string, value: string)",
        "get": "fn(property: string) -> string",
        "watch": "fn(property: string, callback: ?) -> ret655",
        "active": "bool",
        "attachScope": "Object",
        "attributeMap": "Object",
        "baseClass": "string",
        "class": "string",
        "containerNode": "HTMLElement",
        "cssStateNodes": "Object",
        "dir": "string",
        "disabled": "bool",
        "domNode": "HTMLElement",
        "focused": "bool",
        "hovering": "bool",
        "iconClass": "string",
        "id": "string",
        "label": "string",
        "lang": "string",
        "ownerDocument": "Object",
        "searchContainerNode": "bool",
        "shortcutKey": "string",
        "srcNodeRef": "HTMLElement",
        "style": "string",
        "templatePath": "string",
        "templateString": "string",
        "title": "string",
        "tooltip": "string",
        "attr": "fn(name: String, value?: Object) -> ?",
        "buildRendering": "fn()",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn(preserveDom?: bool)",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "focus": "fn()",
        "getChildren": "fn() -> [?]",
        "getDescendants": "fn() -> [?]",
        "getIndexInParent": "fn() -> ?",
        "getNextSibling": "fn() -> ?",
        "getParent": "fn() -> ?",
        "getPreviousSibling": "fn() -> ?",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "setAttribute": "fn(attr: String, value: ?)",
        "setDisabled": "fn(disabled: bool)",
        "setLabel": "fn(content: String)",
        "startup": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "getCachedTemplate": "fn() -> ?",
        "onBlur": "fn()",
        "onClick": "fn()",
        "onClose": "fn() -> bool",
        "onDblClick": "fn(event: ?)",
        "onFocus": "fn()",
        "onHide": "fn()",
        "onKeyDown": "fn(event: ?)",
        "onKeyPress": "fn(event: ?)",
        "onKeyUp": "fn(event: ?)",
        "onMouseDown": "fn(event: ?)",
        "onMouseEnter": "fn(event: ?)",
        "onMouseLeave": "fn(event: ?)",
        "onMouseMove": "fn(event: ?)",
        "onMouseOut": "fn(event: ?)",
        "onMouseOver": "fn(event: ?)",
        "onMouseUp": "fn(event: ?)",
        "onShow": "fn()"
      }
    },
    "MenuBarItem": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "accelKey": "string",
        "set": "fn(property: string, value: string)",
        "get": "fn(property: string) -> string",
        "watch": "fn(property: string, callback: ?) -> ret682",
        "active": "bool",
        "attachScope": "Object",
        "attributeMap": "Object",
        "baseClass": "string",
        "class": "string",
        "containerNode": "HTMLElement",
        "cssStateNodes": "Object",
        "dir": "string",
        "disabled": "bool",
        "domNode": "HTMLElement",
        "focused": "bool",
        "hovering": "bool",
        "iconClass": "string",
        "id": "string",
        "label": "string",
        "lang": "string",
        "ownerDocument": "Object",
        "searchContainerNode": "bool",
        "shortcutKey": "string",
        "srcNodeRef": "HTMLElement",
        "style": "string",
        "templatePath": "string",
        "templateString": "string",
        "title": "string",
        "tooltip": "string",
        "attr": "fn(name: String, value?: Object) -> ?",
        "buildRendering": "fn()",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn(preserveDom?: bool)",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "focus": "fn()",
        "getChildren": "fn() -> [?]",
        "getDescendants": "fn() -> [?]",
        "getIndexInParent": "fn() -> ?",
        "getNextSibling": "fn() -> ?",
        "getParent": "fn() -> ?",
        "getPreviousSibling": "fn() -> ?",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "setAttribute": "fn(attr: String, value: ?)",
        "setDisabled": "fn(disabled: bool)",
        "setLabel": "fn(content: String)",
        "startup": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "getCachedTemplate": "fn() -> ?",
        "onBlur": "fn()",
        "onClick": "fn()",
        "onClose": "fn() -> bool",
        "onDblClick": "fn(event: ?)",
        "onFocus": "fn()",
        "onHide": "fn()",
        "onKeyDown": "fn(event: ?)",
        "onKeyPress": "fn(event: ?)",
        "onKeyUp": "fn(event: ?)",
        "onMouseDown": "fn(event: ?)",
        "onMouseEnter": "fn(event: ?)",
        "onMouseLeave": "fn(event: ?)",
        "onMouseMove": "fn(event: ?)",
        "onMouseOut": "fn(event: ?)",
        "onMouseOver": "fn(event: ?)",
        "onMouseUp": "fn(event: ?)",
        "onShow": "fn()"
      },
      "_MenuBarItemMixin": {
        "!type": "fn()",
        "prototype": {
          "templateString": "string"
        }
      }
    },
    "PopupMenuBarItem": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "accelKey": "string",
        "set": "fn(property: string, value: string)",
        "get": "fn(property: string) -> string",
        "watch": "fn(property: string, callback: ?) -> ret709",
        "active": "bool",
        "attachScope": "Object",
        "attributeMap": "Object",
        "baseClass": "string",
        "class": "string",
        "containerNode": "HTMLElement",
        "cssStateNodes": "Object",
        "dir": "string",
        "disabled": "bool",
        "domNode": "HTMLElement",
        "focused": "bool",
        "hovering": "bool",
        "iconClass": "string",
        "id": "string",
        "label": "string",
        "lang": "string",
        "ownerDocument": "Object",
        "searchContainerNode": "bool",
        "shortcutKey": "string",
        "srcNodeRef": "HTMLElement",
        "style": "string",
        "templatePath": "string",
        "templateString": "string",
        "title": "string",
        "tooltip": "string",
        "attr": "fn(name: String, value?: Object) -> ?",
        "buildRendering": "fn()",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn(preserveDom?: bool)",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "focus": "fn()",
        "getChildren": "fn() -> [?]",
        "getDescendants": "fn() -> [?]",
        "getIndexInParent": "fn() -> ?",
        "getNextSibling": "fn() -> ?",
        "getParent": "fn() -> ?",
        "getPreviousSibling": "fn() -> ?",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "setAttribute": "fn(attr: String, value: ?)",
        "setDisabled": "fn(disabled: bool)",
        "setLabel": "fn(content: String)",
        "startup": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "getCachedTemplate": "fn() -> ?",
        "onBlur": "fn()",
        "onClick": "fn()",
        "onClose": "fn() -> bool",
        "onDblClick": "fn(event: ?)",
        "onFocus": "fn()",
        "onHide": "fn()",
        "onKeyDown": "fn(event: ?)",
        "onKeyPress": "fn(event: ?)",
        "onKeyUp": "fn(event: ?)",
        "onMouseDown": "fn(event: ?)",
        "onMouseEnter": "fn(event: ?)",
        "onMouseLeave": "fn(event: ?)",
        "onMouseMove": "fn(event: ?)",
        "onMouseOut": "fn(event: ?)",
        "onMouseOver": "fn(event: ?)",
        "onMouseUp": "fn(event: ?)",
        "onShow": "fn()"
      }
    },
    "PopupMenuItem": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "accelKey": "string",
        "set": "fn(property: string, value: string)",
        "get": "fn(property: string) -> string",
        "watch": "fn(property: string, callback: ?) -> ret736",
        "active": "bool",
        "attachScope": "Object",
        "attributeMap": "Object",
        "baseClass": "string",
        "class": "string",
        "containerNode": "HTMLElement",
        "cssStateNodes": "Object",
        "dir": "string",
        "disabled": "bool",
        "domNode": "HTMLElement",
        "focused": "bool",
        "hovering": "bool",
        "iconClass": "string",
        "id": "string",
        "label": "string",
        "lang": "string",
        "ownerDocument": "Object",
        "searchContainerNode": "bool",
        "shortcutKey": "string",
        "srcNodeRef": "HTMLElement",
        "style": "string",
        "templatePath": "string",
        "templateString": "string",
        "title": "string",
        "tooltip": "string",
        "attr": "fn(name: String, value?: Object) -> ?",
        "buildRendering": "fn()",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn(preserveDom?: bool)",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "focus": "fn()",
        "getChildren": "fn() -> [?]",
        "getDescendants": "fn() -> [?]",
        "getIndexInParent": "fn() -> ?",
        "getNextSibling": "fn() -> ?",
        "getParent": "fn() -> ?",
        "getPreviousSibling": "fn() -> ?",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "setAttribute": "fn(attr: String, value: ?)",
        "setDisabled": "fn(disabled: bool)",
        "setLabel": "fn(content: String)",
        "startup": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "getCachedTemplate": "fn() -> ?",
        "onBlur": "fn()",
        "onClick": "fn()",
        "onClose": "fn() -> bool",
        "onDblClick": "fn(event: ?)",
        "onFocus": "fn()",
        "onHide": "fn()",
        "onKeyDown": "fn(event: ?)",
        "onKeyPress": "fn(event: ?)",
        "onKeyUp": "fn(event: ?)",
        "onMouseDown": "fn(event: ?)",
        "onMouseEnter": "fn(event: ?)",
        "onMouseLeave": "fn(event: ?)",
        "onMouseMove": "fn(event: ?)",
        "onMouseOut": "fn(event: ?)",
        "onMouseOver": "fn(event: ?)",
        "onMouseUp": "fn(event: ?)",
        "onShow": "fn()"
      }
    },
    "ProgressBar": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "attachScope": "Object",
        "set": "fn(property: string, value: Object)",
        "get": "fn(property: string) -> Object",
        "watch": "fn(property: string, callback: ?) -> ret763",
        "attributeMap": "Object",
        "baseClass": "string",
        "class": "string",
        "containerNode": "HTMLElement",
        "dir": "string",
        "domNode": "HTMLElement",
        "focused": "bool",
        "id": "string",
        "indeterminate": "bool",
        "label": "Object",
        "lang": "string",
        "maximum": "number",
        "name": "string",
        "ownerDocument": "Object",
        "places": "number",
        "progress": "string",
        "searchContainerNode": "bool",
        "srcNodeRef": "HTMLElement",
        "style": "string",
        "templatePath": "string",
        "templateString": "string",
        "title": "string",
        "tooltip": "string",
        "value": "string",
        "attr": "fn(name: String, value?: Object) -> ?",
        "buildRendering": "fn()",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn(preserveDom?: bool)",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "getChildren": "fn() -> [?]",
        "getDescendants": "fn() -> [?]",
        "getParent": "fn() -> ?",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "report": "fn(percent: number) -> ?",
        "setAttribute": "fn(attr: String, value: ?)",
        "startup": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "getCachedTemplate": "fn() -> ?",
        "onBlur": "fn()",
        "onChange": "fn()",
        "onClick": "fn(event: ?)",
        "onClose": "fn() -> bool",
        "onDblClick": "fn(event: ?)",
        "onFocus": "fn()",
        "onHide": "fn()",
        "onKeyDown": "fn(event: ?)",
        "onKeyPress": "fn(event: ?)",
        "onKeyUp": "fn(event: ?)",
        "onMouseDown": "fn(event: ?)",
        "onMouseEnter": "fn(event: ?)",
        "onMouseLeave": "fn(event: ?)",
        "onMouseMove": "fn(event: ?)",
        "onMouseOut": "fn(event: ?)",
        "onMouseOver": "fn(event: ?)",
        "onMouseUp": "fn(event: ?)",
        "onShow": "fn()"
      }
    },
    "RadioMenuItem": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "accelKey": "string",
        "set": "fn(property: string, value: string)",
        "get": "fn(property: string) -> string",
        "watch": "fn(property: string, callback: ?) -> ret789",
        "active": "bool",
        "attachScope": "Object",
        "attributeMap": "Object",
        "baseClass": "string",
        "checked": "bool",
        "checkedChar": "string",
        "class": "string",
        "containerNode": "HTMLElement",
        "cssStateNodes": "Object",
        "dir": "string",
        "disabled": "bool",
        "domNode": "HTMLElement",
        "focused": "bool",
        "group": "string",
        "hovering": "bool",
        "iconClass": "string",
        "id": "string",
        "label": "string",
        "lang": "string",
        "ownerDocument": "Object",
        "role": "string",
        "searchContainerNode": "bool",
        "shortcutKey": "string",
        "srcNodeRef": "HTMLElement",
        "style": "string",
        "templatePath": "string",
        "templateString": "string",
        "title": "string",
        "tooltip": "string",
        "attr": "fn(name: String, value?: Object) -> ?",
        "buildRendering": "fn()",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn(preserveDom?: bool)",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "focus": "fn()",
        "getChildren": "fn() -> [?]",
        "getDescendants": "fn() -> [?]",
        "getIndexInParent": "fn() -> ?",
        "getNextSibling": "fn() -> ?",
        "getParent": "fn() -> ?",
        "getPreviousSibling": "fn() -> ?",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "setAttribute": "fn(attr: String, value: ?)",
        "setDisabled": "fn(disabled: bool)",
        "setLabel": "fn(content: String)",
        "startup": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "getCachedTemplate": "fn() -> ?",
        "onBlur": "fn()",
        "onChange": "fn(checked: bool)",
        "onClick": "fn()",
        "onClose": "fn() -> bool",
        "onDblClick": "fn(event: ?)",
        "onFocus": "fn()",
        "onHide": "fn()",
        "onKeyDown": "fn(event: ?)",
        "onKeyPress": "fn(event: ?)",
        "onKeyUp": "fn(event: ?)",
        "onMouseDown": "fn(event: ?)",
        "onMouseEnter": "fn(event: ?)",
        "onMouseLeave": "fn(event: ?)",
        "onMouseMove": "fn(event: ?)",
        "onMouseOut": "fn(event: ?)",
        "onMouseOver": "fn(event: ?)",
        "onMouseUp": "fn(event: ?)",
        "onShow": "fn()"
      }
    },
    "Toolbar": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "attachScope": "Object",
        "set": "fn(property: string, value: Object)",
        "get": "fn(property: string) -> Object",
        "watch": "fn(property: string, callback: ?) -> ret820",
        "attributeMap": "Object",
        "baseClass": "string",
        "class": "string",
        "containerNode": "HTMLElement",
        "dir": "string",
        "domNode": "HTMLElement",
        "focused": "bool",
        "focusedChild": "Object",
        "id": "string",
        "lang": "string",
        "multiCharSearchDuration": "number",
        "ownerDocument": "Object",
        "searchContainerNode": "bool",
        "srcNodeRef": "HTMLElement",
        "style": "string",
        "tabIndex": "string",
        "templatePath": "string",
        "templateString": "string",
        "title": "string",
        "tooltip": "string",
        "addChild": "fn(widget: dijit._WidgetBase, insertIndex?: number)",
        "attr": "fn(name: String, value?: Object) -> ?",
        "buildRendering": "fn()",
        "childSelector": "fn(node: HTMLElement) -> ?",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "connectKeyNavHandlers": "fn(prevKeyCodes: dojo.keys, nextKeyCodes: dojo.keys)",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn(preserveDom?: bool)",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "focus": "fn()",
        "focusChild": "fn(widget: dijit._WidgetBase, last: bool)",
        "focusFirstChild": "fn()",
        "focusLastChild": "fn()",
        "focusNext": "fn()",
        "focusPrev": "fn()",
        "getChildren": "fn() -> [?]",
        "getDescendants": "fn() -> [?]",
        "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
        "getParent": "fn() -> ?",
        "hasChildren": "fn() -> bool",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "removeChild": "fn(widget: dijit._WidgetBase)",
        "setAttribute": "fn(attr: String, value: ?)",
        "startup": "fn()",
        "startupKeyNavChildren": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "getCachedTemplate": "fn() -> ?",
        "onBlur": "fn()",
        "onClick": "fn(event: ?)",
        "onClose": "fn() -> bool",
        "onDblClick": "fn(event: ?)",
        "onFocus": "fn()",
        "onHide": "fn()",
        "onKeyboardSearch": "fn(item: dijit._WidgetBase, evt: Event, searchString: String, numMatches: number)",
        "onKeyDown": "fn(event: ?)",
        "onKeyPress": "fn(event: ?)",
        "onKeyUp": "fn(event: ?)",
        "onMouseDown": "fn(event: ?)",
        "onMouseEnter": "fn(event: ?)",
        "onMouseLeave": "fn(event: ?)",
        "onMouseMove": "fn(event: ?)",
        "onMouseOut": "fn(event: ?)",
        "onMouseOver": "fn(event: ?)",
        "onMouseUp": "fn(event: ?)",
        "onShow": "fn()"
      }
    },
    "Tooltip": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "attributeMap": "Object",
        "set": "fn(property: string, value: Object)",
        "get": "fn(property: string) -> Object",
        "watch": "fn(property: string, callback: ?) -> ret842",
        "baseClass": "string",
        "class": "string",
        "connectId": "string",
        "containerNode": "HTMLElement",
        "defaultPosition": "Object",
        "dir": "string",
        "domNode": "HTMLElement",
        "focused": "bool",
        "id": "string",
        "label": "string",
        "lang": "string",
        "ownerDocument": "Object",
        "position": "Object",
        "selector": "Object",
        "showDelay": "number",
        "srcNodeRef": "HTMLElement",
        "style": "string",
        "title": "string",
        "tooltip": "string",
        "addTarget": "fn(node: HTMLElement)",
        "attr": "fn(name: String, value?: Object) -> ?",
        "buildRendering": "fn()",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn()",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "getChildren": "fn() -> [?]",
        "getContent": "fn(node: HTMLElement) -> ?",
        "getDescendants": "fn() -> [?]",
        "getParent": "fn() -> ?",
        "hide": "fn(aroundNode: ?) -> ?",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "removeTarget": "fn(node: HTMLElement)",
        "setAttribute": "fn(attr: String, value: ?)",
        "show": "fn(innerHTML: String, aroundNode: Object, position: [String], rtl: bool, textDir: String) -> ?",
        "startup": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "onBlur": "fn()",
        "onClick": "fn(event: ?)",
        "onClose": "fn() -> bool",
        "onDblClick": "fn(event: ?)",
        "onFocus": "fn()",
        "onHide": "fn()",
        "onKeyDown": "fn(event: ?)",
        "onKeyPress": "fn(event: ?)",
        "onKeyUp": "fn(event: ?)",
        "onMouseDown": "fn(event: ?)",
        "onMouseEnter": "fn(event: ?)",
        "onMouseLeave": "fn(event: ?)",
        "onMouseMove": "fn(event: ?)",
        "onMouseOut": "fn(event: ?)",
        "onMouseOver": "fn(event: ?)",
        "onMouseUp": "fn(event: ?)",
        "onShow": "fn(target?: ?, position?: ?)"
      },
      "_MasterTooltip": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attachScope": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret863",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "dir": "string",
          "domNode": "HTMLElement",
          "duration": "number",
          "focused": "bool",
          "id": "string",
          "lang": "string",
          "ownerDocument": "Object",
          "searchContainerNode": "bool",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "hide": "fn(aroundNode: ?)",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "orient": "fn(node: HTMLElement, aroundCorner: String, tooltipCorner: String, spaceAvailable: Object, aroundNodeCoords: Object) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "show": "fn(innerHTML: String, aroundNode: HTMLElement, position: [String], rtl: bool, textDir: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      }
    },
    "ToolbarSeparator": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "attachScope": "Object",
        "set": "fn(property: string, value: Object)",
        "get": "fn(property: string) -> Object",
        "watch": "fn(property: string, callback: ?) -> ret883",
        "attributeMap": "Object",
        "baseClass": "string",
        "class": "string",
        "containerNode": "HTMLElement",
        "dir": "string",
        "domNode": "HTMLElement",
        "focused": "bool",
        "id": "string",
        "lang": "string",
        "ownerDocument": "Object",
        "searchContainerNode": "bool",
        "srcNodeRef": "HTMLElement",
        "style": "string",
        "templatePath": "string",
        "templateString": "string",
        "title": "string",
        "tooltip": "string",
        "attr": "fn(name: String, value?: Object) -> ?",
        "buildRendering": "fn()",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn(preserveDom?: bool)",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "getChildren": "fn() -> [?]",
        "getDescendants": "fn() -> [?]",
        "getParent": "fn() -> ?",
        "isFocusable": "fn() -> bool",
        "isLeftToRight": "fn() -> ?",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "setAttribute": "fn(attr: String, value: ?)",
        "startup": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "getCachedTemplate": "fn() -> ?",
        "onBlur": "fn()",
        "onClick": "fn(event: ?)",
        "onClose": "fn() -> bool",
        "onDblClick": "fn(event: ?)",
        "onFocus": "fn()",
        "onHide": "fn()",
        "onKeyDown": "fn(event: ?)",
        "onKeyPress": "fn(event: ?)",
        "onKeyUp": "fn(event: ?)",
        "onMouseDown": "fn(event: ?)",
        "onMouseEnter": "fn(event: ?)",
        "onMouseLeave": "fn(event: ?)",
        "onMouseMove": "fn(event: ?)",
        "onMouseOut": "fn(event: ?)",
        "onMouseOver": "fn(event: ?)",
        "onMouseUp": "fn(event: ?)",
        "onShow": "fn()"
      }
    },
    "TitlePane": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "active": "bool",
        "set": "fn(property: string, value: bool)",
        "get": "fn(property: string) -> bool",
        "watch": "fn(property: string, callback: ?) -> ret902",
        "attachScope": "Object",
        "attributeMap": "Object",
        "baseClass": "string",
        "class": "string",
        "containerNode": "HTMLElement",
        "content": "string",
        "cssStateNodes": "Object",
        "dir": "string",
        "doLayout": "bool",
        "domNode": "HTMLElement",
        "duration": "number",
        "errorMessage": "string",
        "extractContent": "bool",
        "focused": "bool",
        "hovering": "bool",
        "href": "string",
        "id": "string",
        "ioArgs": "Object",
        "isLayoutContainer": "bool",
        "isLoaded": "bool",
        "lang": "string",
        "loadingMessage": "string",
        "onLoadDeferred": "Object",
        "open": "bool",
        "ownerDocument": "Object",
        "parseOnLoad": "bool",
        "parserScope": "string",
        "preload": "bool",
        "preventCache": "bool",
        "refreshOnShow": "bool",
        "searchContainerNode": "bool",
        "srcNodeRef": "HTMLElement",
        "stopParser": "bool",
        "style": "string",
        "tabIndex": "string",
        "templatePath": "string",
        "templateString": "string",
        "title": "string",
        "toggleable": "bool",
        "tooltip": "string",
        "addChild": "fn(widget: dijit._WidgetBase, insertIndex?: number)",
        "attr": "fn(name: String, value?: Object) -> ?",
        "buildRendering": "fn()",
        "cancel": "fn()",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "create": "fn(params: ?, srcNodeRef: ?)",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn()",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "getChildren": "fn() -> [?]",
        "getDescendants": "fn() -> [?]",
        "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
        "getParent": "fn() -> ?",
        "hasChildren": "fn() -> bool",
        "ioMethod": "fn(args: Object) -> ?",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "markupFactory": "fn(params: ?, node: ?, ctor: ?) -> ?",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "refresh": "fn() -> ?",
        "removeChild": "fn(widget: dijit._WidgetBase)",
        "resize": "fn(changeSize: ?, resultSize: ?)",
        "setAttribute": "fn(attr: String, value: ?)",
        "setContent": "fn(data: String)",
        "setHref": "fn(href: String) -> ?",
        "setTitle": "fn(title: String)",
        "startup": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "getCachedTemplate": "fn() -> ?",
        "onBlur": "fn()",
        "onClick": "fn(event: ?)",
        "onClose": "fn() -> bool",
        "onContentError": "fn(error: Error)",
        "onDblClick": "fn(event: ?)",
        "onDownloadEnd": "fn()",
        "onDownloadError": "fn(error: Error) -> ?",
        "onDownloadStart": "fn() -> ?",
        "onFocus": "fn()",
        "onHide": "fn()",
        "onKeyDown": "fn(event: ?)",
        "onKeyPress": "fn(event: ?)",
        "onKeyUp": "fn(event: ?)",
        "onLoad": "fn(data: ?)",
        "onMouseDown": "fn(event: ?)",
        "onMouseEnter": "fn(event: ?)",
        "onMouseLeave": "fn(event: ?)",
        "onMouseMove": "fn(event: ?)",
        "onMouseOut": "fn(event: ?)",
        "onMouseOver": "fn(event: ?)",
        "onMouseUp": "fn(event: ?)",
        "onShow": "fn()",
        "onUnload": "fn()"
      }
    },
    "TooltipDialog": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "attachScope": "Object",
        "set": "fn(property: string, value: Object)",
        "get": "fn(property: string) -> Object",
        "watch": "fn(property: string, callback: ?) -> ret944",
        "attributeMap": "Object",
        "autofocus": "bool",
        "baseClass": "string",
        "class": "string",
        "containerNode": "HTMLElement",
        "content": "string",
        "dir": "string",
        "doLayout": "bool",
        "domNode": "HTMLElement",
        "errorMessage": "string",
        "extractContent": "bool",
        "focused": "bool",
        "href": "string",
        "id": "string",
        "ioArgs": "Object",
        "isLayoutContainer": "bool",
        "isLoaded": "bool",
        "lang": "string",
        "loadingMessage": "string",
        "onLoadDeferred": "Object",
        "ownerDocument": "Object",
        "parseOnLoad": "bool",
        "parserScope": "string",
        "preload": "bool",
        "preventCache": "bool",
        "refreshOnShow": "bool",
        "searchContainerNode": "bool",
        "srcNodeRef": "HTMLElement",
        "state": "string",
        "stopParser": "bool",
        "style": "string",
        "templatePath": "string",
        "templateString": "string",
        "title": "string",
        "tooltip": "string",
        "addChild": "fn(widget: dijit._WidgetBase, insertIndex?: number)",
        "attr": "fn(name: String, value?: Object) -> ?",
        "buildRendering": "fn()",
        "cancel": "fn()",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "connectChildren": "fn(inStartup: bool)",
        "create": "fn(params: ?, srcNodeRef: ?)",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn()",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn(preserveDom?: bool)",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "disconnectChildren": "fn()",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "execute": "fn(formContents: Object)",
        "focus": "fn()",
        "getChildren": "fn() -> [?]",
        "getDescendants": "fn() -> [?]",
        "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
        "getParent": "fn() -> ?",
        "getValues": "fn() -> ?",
        "hasChildren": "fn() -> bool",
        "ioMethod": "fn(args: Object) -> ?",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "isValid": {},
        "markupFactory": "fn(params: ?, node: ?, ctor: ?) -> ?",
        "on": "fn(type: String, func: Function) -> ?",
        "orient": "fn(node: HTMLElement, aroundCorner: String, tooltipCorner: String)",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "refresh": "fn() -> ?",
        "removeChild": "fn(widget: dijit._WidgetBase)",
        "reset": "fn()",
        "resize": "fn(changeSize: ?, resultSize: ?)",
        "setAttribute": "fn(attr: String, value: ?)",
        "setContent": "fn(data: String)",
        "setHref": "fn(href: String) -> ?",
        "setValues": "fn(val: ?) -> ?",
        "startup": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "validate": "fn() -> ?",
        "getCachedTemplate": "fn() -> ?",
        "onBlur": "fn()",
        "onCancel": "fn()",
        "onClick": "fn(event: ?)",
        "onClose": "fn() -> bool",
        "onContentError": "fn(error: Error)",
        "onDblClick": "fn(event: ?)",
        "onDownloadEnd": "fn()",
        "onDownloadError": "fn(error: Error) -> ?",
        "onDownloadStart": "fn() -> ?",
        "onExecute": "fn()",
        "onFocus": "fn()",
        "onHide": "fn()",
        "onKeyDown": "fn(event: ?)",
        "onKeyPress": "fn(event: ?)",
        "onKeyUp": "fn(event: ?)",
        "onLoad": "fn(data: ?)",
        "onMouseDown": "fn(event: ?)",
        "onMouseEnter": "fn(event: ?)",
        "onMouseLeave": "fn(event: ?)",
        "onMouseMove": "fn(event: ?)",
        "onMouseOut": "fn(event: ?)",
        "onMouseOver": "fn(event: ?)",
        "onMouseUp": "fn(event: ?)",
        "onOpen": "fn(pos: Object)",
        "onShow": "fn()",
        "onUnload": "fn()",
        "onValidStateChange": "fn(isValid: bool)"
      }
    },
    "WidgetSet": {
      "!type": "fn()",
      "prototype": {
        "add": "fn(widget: dijit._WidgetBase)",
        "byClass": "fn(cls: String) -> ?",
        "byId": "fn(id: String) -> dijit._WidgetBase",
        "every": "fn(func: Function, thisObj: Object) -> bool",
        "filter": "fn(filter: Function, thisObj: Object) -> ?",
        "forEach": "fn(func: Function, thisObj: Object) -> ?",
        "map": "fn(func: Function, thisObj: Object) -> ?",
        "remove": "fn(id: String)",
        "some": "fn(func: Function, thisObj: Object) -> bool",
        "toArray": "fn() -> [?]"
      }
    },
    "Tree": {
      "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
      "prototype": {
        "active": "bool",
        "set": "fn(property: string, value: bool)",
        "get": "fn(property: string) -> bool",
        "watch": "fn(property: string, callback: ?) -> ret981",
        "attachScope": "Object",
        "attributeMap": "Object",
        "autoExpand": "bool",
        "baseClass": "string",
        "betweenThreshold": "number",
        "checkAcceptance": "Object",
        "checkItemAcceptance": "Object",
        "childrenAttr": "Object",
        "childSelector": "string",
        "class": "string",
        "containerNode": "HTMLElement",
        "cssStateNodes": "Object",
        "dir": "string",
        "dndParams": "[?]",
        "domNode": "HTMLElement",
        "dragThreshold": "number",
        "focused": "bool",
        "focusedChild": "Object",
        "hovering": "bool",
        "id": "string",
        "label": "string",
        "lang": "string",
        "model": "Object",
        "multiCharSearchDuration": "number",
        "onDndCancel": "Function",
        "onDndDrop": "Function",
        "openOnClick": "bool",
        "openOnDblClick": "bool",
        "ownerDocument": "Object",
        "path": "[?]",
        "PathError": "Object",
        "paths": "[?]",
        "persist": "bool",
        "query": "Object",
        "searchContainerNode": "bool",
        "selectedItem": "Object",
        "selectedItems": "Object",
        "showRoot": "bool",
        "srcNodeRef": "HTMLElement",
        "store": "string",
        "style": "string",
        "tabIndex": "string",
        "templatePath": "string",
        "templateString": "string",
        "title": "string",
        "tooltip": "string",
        "attr": "fn(name: String, value?: Object) -> ?",
        "buildRendering": "fn()",
        "collapseAll": "fn() -> ?",
        "connect": "fn(obj: Object, event: String, method: String) -> ?",
        "defer": "fn(fcn: Function, delay?: number) -> Object",
        "destroy": "fn()",
        "destroyDescendants": "fn(preserveDom?: bool)",
        "destroyRecursive": "fn()",
        "destroyRendering": "fn(preserveDom?: bool)",
        "disconnect": "fn(handle: ?)",
        "dndController": "fn()",
        "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
        "expandAll": "fn() -> ?",
        "focus": "fn()",
        "focusChild": "fn(widget: dijit._WidgetBase, last: bool)",
        "focusFirstChild": "fn()",
        "focusLastChild": "fn()",
        "focusNode": "fn(node: dijit.Tree._TreeNode)",
        "getChildren": "fn() -> [?]",
        "getDescendants": "fn() -> [?]",
        "getIconClass": "fn(item: dojo.data.api.Item, opened: bool) -> String",
        "getIconStyle": "fn(item: dojo.data.api.Item, opened: bool) -> Object",
        "getItemChildren": "fn(parentItem: ?, onComplete: ?)",
        "getLabel": "fn(item: dojo.data.api.Item) -> ?",
        "getLabelClass": "fn(item: dojo.data.api.Item, opened: bool) -> String",
        "getLabelStyle": "fn(item: dojo.data.api.Item, opened: bool) -> ?",
        "getNodesByItem": "fn(item: ?) -> ?",
        "getParent": "fn() -> ?",
        "getRowClass": "fn(item: dojo.data.api.Item, opened: bool) -> String",
        "getRowStyle": "fn(item: dojo.data.api.Item, opened: bool) -> ?",
        "getTooltip": "fn(item: dojo.data.api.Item) -> String",
        "isExpandoNode": "fn(node: ?, widget: ?) -> ?",
        "isFocusable": "fn() -> ?",
        "isLeftToRight": "fn() -> ?",
        "itemCreator": "fn(nodes: [HTMLElement], target: HTMLElement, source: dojo.dnd.Source) -> ?",
        "mayHaveChildren": "fn(item: dojo.data.api.Item)",
        "on": "fn(type: String, func: Function) -> ?",
        "own": "fn() -> ?",
        "placeAt": "fn(reference: String, position?: String) -> ?",
        "postCreate": "fn()",
        "postMixInProperties": "fn()",
        "resize": "fn(changeSize: ?)",
        "setAttribute": "fn(attr: String, value: ?)",
        "startup": "fn()",
        "subscribe": "fn(t: String, method: Function) -> ?",
        "uninitialize": "fn() -> bool",
        "unsubscribe": "fn(handle: Object)",
        "getCachedTemplate": "fn() -> ?",
        "onBlur": "fn()",
        "onClick": "fn(item: ?, node?: Object, evt?: Event)",
        "onClose": "fn(item?: Object, node?: Object) -> bool",
        "onDblClick": "fn(item: ?, node?: Object, evt?: Event)",
        "onFocus": "fn()",
        "onHide": "fn()",
        "onKeyboardSearch": "fn(item: dijit._WidgetBase, evt: Event, searchString: String, numMatches: number)",
        "onKeyDown": "fn(event: ?)",
        "onKeyPress": "fn(event: ?)",
        "onKeyUp": "fn(event: ?)",
        "onLoad": "fn()",
        "onMouseDown": "fn(event: ?)",
        "onMouseEnter": "fn(event: ?)",
        "onMouseLeave": "fn(event: ?)",
        "onMouseMove": "fn(event: ?)",
        "onMouseOut": "fn(event: ?)",
        "onMouseOver": "fn(event: ?)",
        "onMouseUp": "fn(event: ?)",
        "onOpen": "fn(item: dojo.data.api.Item, node: Object)",
        "onShow": "fn()"
      },
      "_TreeNode": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret1029",
          "attachScope": "Object",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "dir": "string",
          "domNode": "HTMLElement",
          "focused": "bool",
          "hovering": "bool",
          "id": "string",
          "indent": "number",
          "isExpanded": "bool",
          "isTreeNode": "bool",
          "item": "Object",
          "label": "string",
          "labelType": "string",
          "lang": "string",
          "ownerDocument": "Object",
          "searchContainerNode": "bool",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "addChild": "fn(widget: dijit._WidgetBase, insertIndex?: number)",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "collapse": "fn() -> ?",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "expand": "fn() -> ?",
          "focus": "fn()",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getIdentity": "fn() -> ?",
          "getIndexInParent": "fn() -> ?",
          "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
          "getNextSibling": "fn() -> ?",
          "getParent": "fn() -> ?",
          "getPreviousSibling": "fn() -> ?",
          "getTreePath": "fn() -> [?]",
          "hasChildren": "fn() -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "makeExpandable": "fn()",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "removeChild": "fn(node: dijit.Tree._TreeNode)",
          "setAttribute": "fn(attr: String, value: ?)",
          "setChildItems": "fn(items: [Object]) -> ?",
          "setSelected": "fn(selected: bool)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      }
    },
    "_editor": {
      "_Plugin": {
        "!type": "fn(args?: Object)",
        "prototype": {
          "button": "Object",
          "command": "string",
          "disabled": "bool",
          "editor": "Object",
          "iconClassPrefix": "string",
          "registry": "Object",
          "useDefaultCommand": "bool",
          "buttonClass": "fn()",
          "connect": "fn(o: ?, f: ?, tf: ?)",
          "destroy": "fn()",
          "get": "fn(name: ?) -> ?",
          "own": "fn() -> ?",
          "set": "fn(name: Attr, value: ?) -> ?",
          "setEditor": "fn(editor: dijit.Editor)",
          "setToolbar": "fn(toolbar: dijit.Toolbar)",
          "updateState": "fn()"
        },
        "registry": {
          "bold": "fn(args: ?) -> ?",
          "colorTableCell": "fn(args: ?)",
          "copy": "fn(args: ?) -> ?",
          "createLink": "fn()",
          "cut": "fn(args: ?) -> ?",
          "delete": "fn(args: ?) -> ?",
          "deleteTableColumn": "fn(args: ?) -> ?",
          "deleteTableRow": "fn(args: ?) -> ?",
          "foreColor": "fn()",
          "fullScreen": "fn(args: ?)",
          "fullscreen": "fn(args: ?)",
          "hiliteColor": "fn()",
          "indent": "fn(args: ?) -> ?",
          "insertHorizontalRule": "fn(args: ?) -> ?",
          "insertImage": "fn()",
          "insertOrderedList": "fn(args: ?) -> ?",
          "insertTable": "fn(args: ?)",
          "insertTableColumnAfter": "fn(args: ?) -> ?",
          "insertTableColumnBefore": "fn(args: ?) -> ?",
          "insertTableRowAfter": "fn(args: ?) -> ?",
          "insertTableRowBefore": "fn(args: ?) -> ?",
          "insertUnorderedList": "fn(args: ?) -> ?",
          "italic": "fn(args: ?) -> ?",
          "justifyCenter": "fn(args: ?) -> ?",
          "justifyFull": "fn(args: ?) -> ?",
          "justifyLeft": "fn(args: ?) -> ?",
          "justifyRight": "fn(args: ?) -> ?",
          "LocalImage": "fn(args: ?) -> ?",
          "localImage": "fn(args: ?) -> ?",
          "localimage": "fn(args: ?) -> ?",
          "modifyTable": "fn(args: ?)",
          "newPage": "fn(args: ?)",
          "newpage": "fn(args: ?)",
          "outdent": "fn(args: ?) -> ?",
          "paste": "fn(args: ?) -> ?",
          "print": "fn()",
          "redo": "fn(args: ?) -> ?",
          "removeFormat": "fn(args: ?) -> ?",
          "selectAll": "fn(args: ?) -> ?",
          "strikethrough": "fn(args: ?) -> ?",
          "subscript": "fn(args: ?) -> ?",
          "superscript": "fn(args: ?) -> ?",
          "tabIndent": "fn()",
          "tableContextMenu": "fn(args: ?)",
          "toggleDir": "fn()",
          "underline": "fn(args: ?) -> ?",
          "undo": "fn(args: ?) -> ?",
          "unlink": "fn(args: ?) -> ?",
          "viewSource": "fn(args: ?)",
          "viewsource": "fn(args: ?)"
        }
      },
      "RichText": {
        "!type": "fn(params: Object, srcNodeRef: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret1057",
          "attributeMap": "Object",
          "baseClass": "string",
          "captureEvents": "Object",
          "class": "string",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "dir": "string",
          "disabled": "bool",
          "disableSpellCheck": "bool",
          "domNode": "HTMLElement",
          "focused": "bool",
          "focusOnLoad": "bool",
          "height": "string",
          "hovering": "bool",
          "id": "string",
          "inheritWidth": "bool",
          "isClosed": "bool",
          "isLoaded": "bool",
          "isTabIndent": "bool",
          "lang": "string",
          "minHeight": "string",
          "name": "Object",
          "onLoadDeferred": "Object",
          "ownerDocument": "Object",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "styleSheets": "string",
          "title": "string",
          "tooltip": "string",
          "updateInterval": "number",
          "addKeyHandler": "fn(key: String, ctrl: bool, shift: bool, handler: Function)",
          "addStyleSheet": "fn(uri: dojo._base.url)",
          "attr": "fn(name: String, value?: Object) -> ?",
          "blur": "fn()",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn()",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "execCommand": "fn(command: String, argument: ?) -> ?",
          "focus": "fn()",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getFooterHeight": "fn() -> ?",
          "getHeaderHeight": "fn() -> ?",
          "getNodeChildrenHtml": "fn(dom: HTMLElement) -> ?",
          "getNodeHtml": "fn(node: HTMLElement) -> ?",
          "getParent": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "queryCommandEnabled": "fn(command: String) -> ?",
          "queryCommandState": "fn(command: ?) -> ?",
          "queryCommandValue": "fn(command: ?) -> ?",
          "removeStyleSheet": "fn(uri: dojo._base.url)",
          "replaceValue": "fn(html: String)",
          "setAttribute": "fn(attr: String, value: ?)",
          "setDisabled": "fn(disabled: bool)",
          "setupDefaultShortcuts": "fn()",
          "setValue": "fn(html: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "onBlur": "fn()",
          "onChange": "fn(newContent: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(e: Event) -> bool",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(e: ?)",
          "onLoad": "fn(html: String)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "plugins": {
        "AlwaysShowToolbar": {
          "!type": "fn(args?: Object)",
          "prototype": {
            "button": "Object",
            "command": "string",
            "disabled": "bool",
            "editor": "Object",
            "iconClassPrefix": "string",
            "useDefaultCommand": "bool",
            "buttonClass": "fn()",
            "connect": "fn(o: ?, f: ?, tf: ?)",
            "destroy": "fn()",
            "get": "fn(name: ?) -> ?",
            "own": "fn() -> ?",
            "set": "fn(name: Attr, value: ?) -> ?",
            "setEditor": "fn(e: ?)",
            "setToolbar": "fn(toolbar: dijit.Toolbar)",
            "updateState": "fn()"
          }
        },
        "FontChoice": {
          "!type": "fn(args?: Object)",
          "prototype": {
            "button": "Object",
            "command": "string",
            "disabled": "bool",
            "editor": "Object",
            "iconClassPrefix": "string",
            "useDefaultCommand": "bool",
            "buttonClass": "fn()",
            "connect": "fn(o: ?, f: ?, tf: ?)",
            "destroy": "fn()",
            "get": "fn(name: ?) -> ?",
            "own": "fn() -> ?",
            "set": "fn(name: Attr, value: ?) -> ?",
            "setEditor": "fn(editor: dijit.Editor)",
            "setToolbar": "fn(toolbar: dijit.Toolbar)",
            "updateState": "fn()"
          },
          "_FontDropDown": {
            "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
            "prototype": {
              "attachScope": "Object",
              "set": "fn(property: string, value: Object)",
              "get": "fn(property: string) -> Object",
              "watch": "fn(property: string, callback: ?) -> ret1089",
              "attributeMap": "Object",
              "baseClass": "string",
              "class": "string",
              "containerNode": "HTMLElement",
              "dir": "string",
              "domNode": "HTMLElement",
              "focused": "bool",
              "id": "string",
              "label": "string",
              "lang": "string",
              "ownerDocument": "Object",
              "plainText": "bool",
              "searchContainerNode": "bool",
              "srcNodeRef": "HTMLElement",
              "style": "string",
              "templatePath": "string",
              "templateString": "string",
              "title": "string",
              "tooltip": "string",
              "widgetsInTemplate": "bool",
              "attr": "fn(name: String, value?: Object) -> ?",
              "buildRendering": "fn()",
              "connect": "fn(obj: Object, event: String, method: String) -> ?",
              "contextRequire": "fn()",
              "defer": "fn(fcn: Function, delay?: number) -> Object",
              "destroy": "fn(preserveDom?: bool)",
              "destroyDescendants": "fn(preserveDom?: bool)",
              "destroyRecursive": "fn(preserveDom?: bool)",
              "destroyRendering": "fn(preserveDom?: bool)",
              "disconnect": "fn(handle: ?)",
              "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
              "focus": "fn()",
              "getChildren": "fn() -> [?]",
              "getDescendants": "fn() -> [?]",
              "getParent": "fn() -> ?",
              "isFocusable": "fn() -> ?",
              "isLeftToRight": "fn() -> ?",
              "on": "fn(type: String, func: Function) -> ?",
              "own": "fn() -> ?",
              "placeAt": "fn(reference: String, position?: String) -> ?",
              "postCreate": "fn()",
              "postMixInProperties": "fn()",
              "setAttribute": "fn(attr: String, value: ?)",
              "startup": "fn()",
              "subscribe": "fn(t: String, method: Function) -> ?",
              "uninitialize": "fn() -> bool",
              "unsubscribe": "fn(handle: Object)",
              "getCachedTemplate": "fn() -> ?",
              "onBlur": "fn()",
              "onClick": "fn(event: ?)",
              "onClose": "fn() -> bool",
              "onDblClick": "fn(event: ?)",
              "onFocus": "fn()",
              "onHide": "fn()",
              "onKeyDown": "fn(event: ?)",
              "onKeyPress": "fn(event: ?)",
              "onKeyUp": "fn(event: ?)",
              "onMouseDown": "fn(event: ?)",
              "onMouseEnter": "fn(event: ?)",
              "onMouseLeave": "fn(event: ?)",
              "onMouseMove": "fn(event: ?)",
              "onMouseOut": "fn(event: ?)",
              "onMouseOver": "fn(event: ?)",
              "onMouseUp": "fn(event: ?)",
              "onShow": "fn()"
            }
          },
          "_FontNameDropDown": {
            "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
            "prototype": {
              "attachScope": "Object",
              "set": "fn(property: string, value: Object)",
              "get": "fn(property: string) -> Object",
              "watch": "fn(property: string, callback: ?) -> ret1111",
              "attributeMap": "Object",
              "baseClass": "string",
              "class": "string",
              "comboClass": "string",
              "command": "string",
              "containerNode": "HTMLElement",
              "dir": "string",
              "domNode": "HTMLElement",
              "focused": "bool",
              "generic": "bool",
              "id": "string",
              "label": "string",
              "lang": "string",
              "ownerDocument": "Object",
              "plainText": "bool",
              "searchContainerNode": "bool",
              "srcNodeRef": "HTMLElement",
              "style": "string",
              "templatePath": "string",
              "templateString": "string",
              "title": "string",
              "tooltip": "string",
              "widgetsInTemplate": "bool",
              "attr": "fn(name: String, value?: Object) -> ?",
              "buildRendering": "fn()",
              "connect": "fn(obj: Object, event: String, method: String) -> ?",
              "contextRequire": "fn()",
              "defer": "fn(fcn: Function, delay?: number) -> Object",
              "destroy": "fn(preserveDom?: bool)",
              "destroyDescendants": "fn(preserveDom?: bool)",
              "destroyRecursive": "fn(preserveDom?: bool)",
              "destroyRendering": "fn(preserveDom?: bool)",
              "disconnect": "fn(handle: ?)",
              "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
              "focus": "fn()",
              "getChildren": "fn() -> [?]",
              "getDescendants": "fn() -> [?]",
              "getLabel": "fn(value: String, name: String) -> ?",
              "getParent": "fn() -> ?",
              "isFocusable": "fn() -> ?",
              "isLeftToRight": "fn() -> ?",
              "on": "fn(type: String, func: Function) -> ?",
              "own": "fn() -> ?",
              "placeAt": "fn(reference: String, position?: String) -> ?",
              "postCreate": "fn()",
              "postMixInProperties": "fn()",
              "setAttribute": "fn(attr: String, value: ?)",
              "startup": "fn()",
              "subscribe": "fn(t: String, method: Function) -> ?",
              "uninitialize": "fn() -> bool",
              "unsubscribe": "fn(handle: Object)",
              "getCachedTemplate": "fn() -> ?",
              "onBlur": "fn()",
              "onClick": "fn(event: ?)",
              "onClose": "fn() -> bool",
              "onDblClick": "fn(event: ?)",
              "onFocus": "fn()",
              "onHide": "fn()",
              "onKeyDown": "fn(event: ?)",
              "onKeyPress": "fn(event: ?)",
              "onKeyUp": "fn(event: ?)",
              "onMouseDown": "fn(event: ?)",
              "onMouseEnter": "fn(event: ?)",
              "onMouseLeave": "fn(event: ?)",
              "onMouseMove": "fn(event: ?)",
              "onMouseOut": "fn(event: ?)",
              "onMouseOver": "fn(event: ?)",
              "onMouseUp": "fn(event: ?)",
              "onShow": "fn()"
            }
          },
          "_FontSizeDropDown": {
            "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
            "prototype": {
              "attachScope": "Object",
              "set": "fn(property: string, value: Object)",
              "get": "fn(property: string) -> Object",
              "watch": "fn(property: string, callback: ?) -> ret1136",
              "attributeMap": "Object",
              "baseClass": "string",
              "class": "string",
              "comboClass": "string",
              "command": "string",
              "containerNode": "HTMLElement",
              "dir": "string",
              "domNode": "HTMLElement",
              "focused": "bool",
              "id": "string",
              "label": "string",
              "lang": "string",
              "ownerDocument": "Object",
              "plainText": "bool",
              "searchContainerNode": "bool",
              "srcNodeRef": "HTMLElement",
              "style": "string",
              "templatePath": "string",
              "templateString": "string",
              "title": "string",
              "tooltip": "string",
              "values": "Object",
              "widgetsInTemplate": "bool",
              "attr": "fn(name: String, value?: Object) -> ?",
              "buildRendering": "fn()",
              "connect": "fn(obj: Object, event: String, method: String) -> ?",
              "contextRequire": "fn()",
              "defer": "fn(fcn: Function, delay?: number) -> Object",
              "destroy": "fn(preserveDom?: bool)",
              "destroyDescendants": "fn(preserveDom?: bool)",
              "destroyRecursive": "fn(preserveDom?: bool)",
              "destroyRendering": "fn(preserveDom?: bool)",
              "disconnect": "fn(handle: ?)",
              "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
              "focus": "fn()",
              "getChildren": "fn() -> [?]",
              "getDescendants": "fn() -> [?]",
              "getLabel": "fn(value: String, name: String) -> ?",
              "getParent": "fn() -> ?",
              "isFocusable": "fn() -> ?",
              "isLeftToRight": "fn() -> ?",
              "on": "fn(type: String, func: Function) -> ?",
              "own": "fn() -> ?",
              "placeAt": "fn(reference: String, position?: String) -> ?",
              "postCreate": "fn()",
              "postMixInProperties": "fn()",
              "setAttribute": "fn(attr: String, value: ?)",
              "startup": "fn()",
              "subscribe": "fn(t: String, method: Function) -> ?",
              "uninitialize": "fn() -> bool",
              "unsubscribe": "fn(handle: Object)",
              "getCachedTemplate": "fn() -> ?",
              "onBlur": "fn()",
              "onClick": "fn(event: ?)",
              "onClose": "fn() -> bool",
              "onDblClick": "fn(event: ?)",
              "onFocus": "fn()",
              "onHide": "fn()",
              "onKeyDown": "fn(event: ?)",
              "onKeyPress": "fn(event: ?)",
              "onKeyUp": "fn(event: ?)",
              "onMouseDown": "fn(event: ?)",
              "onMouseEnter": "fn(event: ?)",
              "onMouseLeave": "fn(event: ?)",
              "onMouseMove": "fn(event: ?)",
              "onMouseOut": "fn(event: ?)",
              "onMouseOver": "fn(event: ?)",
              "onMouseUp": "fn(event: ?)",
              "onShow": "fn()"
            }
          },
          "_FormatBlockDropDown": {
            "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
            "prototype": {
              "attachScope": "Object",
              "set": "fn(property: string, value: Object)",
              "get": "fn(property: string) -> Object",
              "watch": "fn(property: string, callback: ?) -> ret1161",
              "attributeMap": "Object",
              "baseClass": "string",
              "class": "string",
              "comboClass": "string",
              "command": "string",
              "containerNode": "HTMLElement",
              "dir": "string",
              "domNode": "HTMLElement",
              "focused": "bool",
              "id": "string",
              "label": "string",
              "lang": "string",
              "ownerDocument": "Object",
              "plainText": "bool",
              "searchContainerNode": "bool",
              "srcNodeRef": "HTMLElement",
              "style": "string",
              "templatePath": "string",
              "templateString": "string",
              "title": "string",
              "tooltip": "string",
              "values": "[?]",
              "widgetsInTemplate": "bool",
              "attr": "fn(name: String, value?: Object) -> ?",
              "buildRendering": "fn()",
              "connect": "fn(obj: Object, event: String, method: String) -> ?",
              "contextRequire": "fn()",
              "defer": "fn(fcn: Function, delay?: number) -> Object",
              "destroy": "fn(preserveDom?: bool)",
              "destroyDescendants": "fn(preserveDom?: bool)",
              "destroyRecursive": "fn(preserveDom?: bool)",
              "destroyRendering": "fn(preserveDom?: bool)",
              "disconnect": "fn(handle: ?)",
              "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
              "focus": "fn()",
              "getChildren": "fn() -> [?]",
              "getDescendants": "fn() -> [?]",
              "getLabel": "fn(value: String, name: String) -> ?",
              "getParent": "fn() -> ?",
              "isFocusable": "fn() -> ?",
              "isLeftToRight": "fn() -> ?",
              "on": "fn(type: String, func: Function) -> ?",
              "own": "fn() -> ?",
              "placeAt": "fn(reference: String, position?: String) -> ?",
              "postCreate": "fn()",
              "postMixInProperties": "fn()",
              "setAttribute": "fn(attr: String, value: ?)",
              "startup": "fn()",
              "subscribe": "fn(t: String, method: Function) -> ?",
              "uninitialize": "fn() -> bool",
              "unsubscribe": "fn(handle: Object)",
              "getCachedTemplate": "fn() -> ?",
              "onBlur": "fn()",
              "onClick": "fn(event: ?)",
              "onClose": "fn() -> bool",
              "onDblClick": "fn(event: ?)",
              "onFocus": "fn()",
              "onHide": "fn()",
              "onKeyDown": "fn(event: ?)",
              "onKeyPress": "fn(event: ?)",
              "onKeyUp": "fn(event: ?)",
              "onMouseDown": "fn(event: ?)",
              "onMouseEnter": "fn(event: ?)",
              "onMouseLeave": "fn(event: ?)",
              "onMouseMove": "fn(event: ?)",
              "onMouseOut": "fn(event: ?)",
              "onMouseOver": "fn(event: ?)",
              "onMouseUp": "fn(event: ?)",
              "onShow": "fn()"
            }
          }
        },
        "FullScreen": {
          "!type": "fn(args?: Object)",
          "prototype": {
            "button": "Object",
            "command": "string",
            "disabled": "bool",
            "editor": "Object",
            "iconClassPrefix": "string",
            "isFullscreen": "bool",
            "useDefaultCommand": "bool",
            "zIndex": "number",
            "buttonClass": "fn()",
            "connect": "fn(o: ?, f: ?, tf: ?)",
            "destroy": "fn()",
            "get": "fn(name: ?) -> ?",
            "own": "fn() -> ?",
            "set": "fn(name: Attr, value: ?) -> ?",
            "setEditor": "fn(editor: dijit.Editor)",
            "setToolbar": "fn(toolbar: dijit.Toolbar)",
            "toggle": "fn()",
            "updateState": "fn()"
          }
        },
        "EnterKeyHandling": {
          "!type": "fn(args: ?)",
          "prototype": {
            "blockNodeForEnter": "string",
            "button": "Object",
            "command": "string",
            "disabled": "bool",
            "editor": "Object",
            "iconClassPrefix": "string",
            "useDefaultCommand": "bool",
            "buttonClass": "fn()",
            "connect": "fn(o: ?, f: ?, tf: ?)",
            "destroy": "fn()",
            "get": "fn(name: ?) -> ?",
            "own": "fn() -> ?",
            "set": "fn(name: Attr, value: ?) -> ?",
            "setEditor": "fn(editor: ?)",
            "setToolbar": "fn(toolbar: dijit.Toolbar)",
            "updateState": "fn()"
          }
        },
        "LinkDialog": {
          "!type": "fn(args?: Object)",
          "prototype": {
            "button": "Object",
            "command": "string",
            "disabled": "bool",
            "editor": "Object",
            "emailRegExp": "string",
            "htmlTemplate": "string",
            "iconClassPrefix": "string",
            "linkDialogTemplate": "string",
            "tag": "string",
            "urlRegExp": "string",
            "useDefaultCommand": "bool",
            "buttonClass": "fn()",
            "connect": "fn(o: ?, f: ?, tf: ?)",
            "destroy": "fn()",
            "get": "fn(name: ?) -> ?",
            "ImgLinkDialog": "fn()",
            "own": "fn() -> ?",
            "set": "fn(name: Attr, value: ?) -> ?",
            "setEditor": "fn(editor: dijit.Editor)",
            "setToolbar": "fn(toolbar: dijit.Toolbar)",
            "updateState": "fn()"
          },
          "ImgLinkDialog": {
            "!type": "fn(args?: Object)",
            "prototype": {
              "button": "Object",
              "command": "string",
              "disabled": "bool",
              "editor": "Object",
              "emailRegExp": "string",
              "htmlTemplate": "string",
              "iconClassPrefix": "string",
              "linkDialogTemplate": "string",
              "tag": "string",
              "urlRegExp": "string",
              "useDefaultCommand": "bool",
              "buttonClass": "fn()",
              "connect": "fn(o: ?, f: ?, tf: ?)",
              "destroy": "fn()",
              "get": "fn(name: ?) -> ?",
              "own": "fn() -> ?",
              "set": "fn(name: Attr, value: ?) -> ?",
              "setEditor": "fn(editor: dijit.Editor)",
              "setToolbar": "fn(toolbar: dijit.Toolbar)",
              "updateState": "fn()"
            }
          }
        },
        "TextColor": {
          "!type": "fn(args?: Object)",
          "prototype": {
            "button": "Object",
            "command": "string",
            "disabled": "bool",
            "editor": "Object",
            "iconClassPrefix": "string",
            "useDefaultCommand": "bool",
            "buttonClass": "fn()",
            "connect": "fn(o: ?, f: ?, tf: ?)",
            "destroy": "fn()",
            "get": "fn(name: ?) -> ?",
            "own": "fn() -> ?",
            "set": "fn(name: Attr, value: ?) -> ?",
            "setEditor": "fn(editor: dijit.Editor)",
            "setToolbar": "fn(toolbar: dijit.Toolbar)",
            "updateState": "fn()"
          }
        },
        "NewPage": {
          "!type": "fn(args?: Object)",
          "prototype": {
            "button": "Object",
            "command": "string",
            "content": "string",
            "disabled": "bool",
            "editor": "Object",
            "iconClassPrefix": "string",
            "useDefaultCommand": "bool",
            "buttonClass": "fn()",
            "connect": "fn(o: ?, f: ?, tf: ?)",
            "destroy": "fn()",
            "get": "fn(name: ?) -> ?",
            "own": "fn() -> ?",
            "set": "fn(name: Attr, value: ?) -> ?",
            "setEditor": "fn(editor: dijit.Editor)",
            "setToolbar": "fn(toolbar: dijit.Toolbar)",
            "updateState": "fn()"
          }
        },
        "Print": {
          "!type": "fn(args?: Object)",
          "prototype": {
            "button": "Object",
            "command": "string",
            "disabled": "bool",
            "editor": "Object",
            "iconClassPrefix": "string",
            "useDefaultCommand": "bool",
            "buttonClass": "fn()",
            "connect": "fn(o: ?, f: ?, tf: ?)",
            "destroy": "fn()",
            "get": "fn(name: ?) -> ?",
            "own": "fn() -> ?",
            "set": "fn(name: Attr, value: ?) -> ?",
            "setEditor": "fn(editor: dijit.Editor)",
            "setToolbar": "fn(toolbar: dijit.Toolbar)",
            "updateState": "fn()"
          }
        },
        "TabIndent": {
          "!type": "fn(args?: Object)",
          "prototype": {
            "button": "Object",
            "command": "string",
            "disabled": "bool",
            "editor": "Object",
            "iconClassPrefix": "string",
            "useDefaultCommand": "bool",
            "buttonClass": "fn()",
            "connect": "fn(o: ?, f: ?, tf: ?)",
            "destroy": "fn()",
            "get": "fn(name: ?) -> ?",
            "own": "fn() -> ?",
            "set": "fn(name: Attr, value: ?) -> ?",
            "setEditor": "fn(editor: dijit.Editor)",
            "setToolbar": "fn(toolbar: dijit.Toolbar)",
            "updateState": "fn()"
          }
        },
        "ToggleDir": {
          "!type": "fn(args?: Object)",
          "prototype": {
            "button": "Object",
            "command": "string",
            "disabled": "bool",
            "editor": "Object",
            "iconClassPrefix": "string",
            "useDefaultCommand": "bool",
            "buttonClass": "fn()",
            "connect": "fn(o: ?, f: ?, tf: ?)",
            "destroy": "fn()",
            "get": "fn(name: ?) -> ?",
            "own": "fn() -> ?",
            "set": "fn(name: Attr, value: ?) -> ?",
            "setEditor": "fn(editor: dijit.Editor)",
            "setToolbar": "fn(toolbar: dijit.Toolbar)",
            "updateState": "fn()"
          }
        },
        "ViewSource": {
          "!type": "fn(args?: Object)",
          "prototype": {
            "button": "Object",
            "command": "string",
            "disabled": "bool",
            "editor": "Object",
            "iconClassPrefix": "string",
            "readOnly": "bool",
            "stripComments": "bool",
            "stripIFrames": "bool",
            "stripScripts": "bool",
            "useDefaultCommand": "bool",
            "buttonClass": "fn()",
            "connect": "fn(o: ?, f: ?, tf: ?)",
            "destroy": "fn()",
            "get": "fn(name: ?) -> ?",
            "own": "fn() -> ?",
            "set": "fn(name: Attr, value: ?) -> ?",
            "setEditor": "fn(editor: dijit.Editor)",
            "setSourceAreaCaret": "fn()",
            "setToolbar": "fn(toolbar: dijit.Toolbar)",
            "toggle": "fn()",
            "updateState": "fn()"
          }
        }
      },
      "html": {
        "escapeXml": "fn(str: String, noSingleQuotes: bool) -> ?",
        "getChildrenHtml": "fn(node: HTMLElement) -> ?",
        "getChildrenHtmlHelper": "fn(dom: HTMLElement, output: [String])",
        "getNodeHtml": "fn(node: HTMLElement) -> ?",
        "getNodeHtmlHelper": "fn(node: HTMLElement, output: [String]) -> String"
      },
      "range": {
        "BlockTagNames": "RegExp",
        "ie": {
          "cachedSelection": "Object",
          "decomposeControlRange": "fn(range: ?) -> [?]",
          "decomposeTextRange": "fn(range: ?) -> [?]",
          "getEndPoint": "fn(range: ?, end: ?) -> [?]",
          "selection": "fn(window: ?)",
          "setEndPoint": "fn(range: ?, container: ?, offset: ?) -> ?",
          "setRange": "fn(range: ?, startContainer: ?, startOffset: ?, endContainer: ?, endOffset: ?, collapsed: ?) -> ?"
        },
        "adjacentNoneTextNode": "fn(startnode: ?, next: ?) -> [?]",
        "atBeginningOfContainer": "fn(container: HTMLElement, node: HTMLElement, offset: number) -> bool",
        "atEndOfContainer": "fn(container: HTMLElement, node: HTMLElement, offset: number) -> bool",
        "create": "fn(win: Window) -> ?",
        "getAncestor": "fn(node: HTMLElement, regex: RegExp, root: HTMLElement) -> HTMLElement",
        "getBlockAncestor": "fn(node: HTMLElement, regex: RegExp, root: HTMLElement) -> Object",
        "getCommonAncestor": "fn(n1: ?, n2: ?, root: ?) -> ?",
        "getIndex": "fn(node: HTMLElement, parent: HTMLElement) -> Object",
        "getNode": "fn(index: [?], parent: HTMLElement) -> HTMLElement",
        "getSelection": "fn(window: Window, ignoreUpdate: bool) -> ?",
        "W3CRange": {
          "!type": "fn()",
          "prototype": {
            "cloneRange": "fn() -> ?",
            "deleteContents": "fn()",
            "detach": "fn()",
            "getBookmark": "fn() -> ?",
            "setEnd": "fn(node: ?, offset: ?)",
            "setEndAfter": "fn(node: ?, offset: ?)",
            "setEndBefore": "fn(node: ?, offset: ?)",
            "setStart": "fn(node: ?, offset: ?)",
            "setStartAfter": "fn(node: ?, offset: ?)",
            "setStartBefore": "fn(node: ?, offset: ?)"
          }
        }
      },
      "selection": {
        "collapse": "fn(beginning: bool)",
        "getAncestorElement": "fn(tagName: String) -> ?",
        "getParentElement": "fn() -> ?",
        "getParentOfType": "fn(node: HTMLElement, tags: [String]) -> HTMLElement",
        "getSelectedElement": "fn() -> ?",
        "getSelectedHtml": "fn() -> String",
        "getSelectedText": "fn() -> String",
        "getType": "fn() -> String",
        "hasAncestorElement": "fn(tagName: String) -> bool",
        "inSelection": "fn(node: ?) -> bool",
        "isTag": "fn(node: HTMLElement, tags: [String]) -> ?",
        "remove": "fn() -> ?",
        "selectElement": "fn(element: HTMLElement, nochangefocus: bool)",
        "selectElementChildren": "fn(element: HTMLElement, nochangefocus: bool)"
      }
    },
    "_tree": {
      "dndSource": {}
    },
    "form": {
      "_ButtonMixin": {
        "!type": "fn()",
        "prototype": {
          "label": "string",
          "type": "string",
          "postCreate": "fn()",
          "onClick": "fn(e: Event) -> bool"
        }
      },
      "_CheckBoxMixin": {
        "!type": "fn()",
        "prototype": {
          "readOnly": "bool",
          "value": "string",
          "reset": "fn()"
        }
      },
      "_AutoCompleterMixin": {
        "!type": "fn()",
        "prototype": {
          "autoComplete": "bool",
          "fetchProperties": "Object",
          "highlightMatch": "string",
          "ignoreCase": "bool",
          "item": "Object",
          "labelAttr": "Object",
          "labelType": "string",
          "maxHeight": "number",
          "pageSize": "number",
          "query": "Object",
          "queryExpr": "string",
          "searchAttr": "string",
          "searchDelay": "number",
          "store": "Object",
          "closeDropDown": "fn()",
          "doHighlight": "fn(label: String, find: String) -> ?",
          "isLoaded": "fn() -> bool",
          "loadDropDown": "fn(callback: Function)",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "reset": "fn()",
          "onSearch": "fn(results: Object, query: Object, options: Object)"
        }
      },
      "_ExpandingTextAreaMixin": {
        "!type": "fn()",
        "prototype": {
          "postCreate": "fn()",
          "resize": "fn()",
          "startup": "fn()"
        }
      },
      "_ComboBoxMenuMixin": {
        "!type": "fn()",
        "prototype": {
          "buildRendering": "fn()",
          "clearResultList": "fn()",
          "createOptions": "fn(results: ?, options: ?, labelFunc: ?)",
          "getHighlightedOption": "fn() -> ?",
          "highlightFirstOption": "fn()",
          "highlightLastOption": "fn()",
          "postMixInProperties": "fn()",
          "selectFirstNode": "fn()",
          "selectLastNode": "fn()",
          "onChange": "fn(direction: number)",
          "onClick": "fn(node: HTMLElement)",
          "onPage": "fn(direction: number)"
        }
      },
      "_FormMixin": {
        "!type": "fn()",
        "prototype": {
          "state": "string",
          "connectChildren": "fn(inStartup: bool)",
          "destroy": "fn()",
          "disconnectChildren": "fn()",
          "getValues": "fn() -> ?",
          "isValid": {},
          "reset": "fn()",
          "setValues": "fn(val: ?) -> ?",
          "startup": "fn()",
          "validate": "fn() -> ?",
          "onValidStateChange": "fn(isValid: bool)"
        }
      },
      "_FormValueMixin": {
        "!type": "fn()",
        "prototype": {
          "alt": "string",
          "aria-label": "string",
          "disabled": "bool",
          "intermediateChanges": "bool",
          "name": "string",
          "readOnly": "bool",
          "scrollOnFocus": "bool",
          "tabIndex": "string",
          "type": "string",
          "value": "Object",
          "compare": "fn(val1: ?, val2: ?) -> number",
          "create": "fn()",
          "destroy": "fn()",
          "focus": "fn()",
          "isFocusable": "fn() -> ?",
          "postCreate": "fn()",
          "reset": "fn()",
          "undo": "fn()",
          "onChange": "fn(newValue: ?)"
        }
      },
      "_ComboBoxMenu": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attachScope": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret1186",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "dir": "string",
          "domNode": "HTMLElement",
          "focused": "bool",
          "id": "string",
          "lang": "string",
          "ownerDocument": "Object",
          "searchContainerNode": "bool",
          "selected": "HTMLElement",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "buildRendering": "fn()",
          "clearResultList": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "createOptions": "fn(results: ?, options: ?, labelFunc: ?)",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getHighlightedOption": "fn() -> ?",
          "getParent": "fn() -> ?",
          "handleKey": "fn(evt: ?) -> bool",
          "highlightFirstOption": "fn()",
          "highlightLastOption": "fn()",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "selectFirstNode": "fn()",
          "selectLastNode": "fn()",
          "selectNextNode": "fn()",
          "selectPreviousNode": "fn()",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(direction: number)",
          "onClick": "fn(node: HTMLElement)",
          "onDeselect": "fn(node: HTMLElement)",
          "onFocus": "fn()",
          "onHover": "fn(node: HTMLElement)",
          "onPage": "fn(direction: number)",
          "onSelect": "fn(node: HTMLElement)",
          "onUnhover": "fn(node: HTMLElement)"
        }
      },
      "_FormWidgetMixin": {
        "!type": "fn()",
        "prototype": {
          "alt": "string",
          "aria-label": "string",
          "disabled": "bool",
          "intermediateChanges": "bool",
          "name": "string",
          "scrollOnFocus": "bool",
          "tabIndex": "string",
          "type": "string",
          "value": "Object",
          "compare": "fn(val1: ?, val2: ?) -> number",
          "create": "fn()",
          "destroy": "fn()",
          "focus": "fn()",
          "isFocusable": "fn() -> ?",
          "onChange": "fn(newValue: ?)"
        }
      },
      "_DateTimeTextBox": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret1206",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "autoWidth": "bool",
          "baseClass": "string",
          "class": "string",
          "constraints": "Object",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "datePackage": "string",
          "dir": "string",
          "disabled": "bool",
          "displayedValue": "string",
          "domNode": "HTMLElement",
          "dropDown": "Object",
          "dropDownDefaultValue": "Date",
          "dropDownPosition": "Object",
          "focused": "bool",
          "forceWidth": "bool",
          "hasDownArrow": "bool",
          "hovering": "bool",
          "id": "string",
          "intermediateChanges": "bool",
          "invalidMessage": "string",
          "lang": "string",
          "lowercase": "bool",
          "maxHeight": "number",
          "maxLength": "string",
          "message": "string",
          "missingMessage": "string",
          "name": "string",
          "ownerDocument": "Object",
          "placeHolder": "string",
          "popupClass": "?",
          "promptMessage": "string",
          "propercase": "bool",
          "rangeMessage": "string",
          "readOnly": "bool",
          "regExp": "string",
          "required": "bool",
          "scrollOnFocus": "bool",
          "searchContainerNode": "bool",
          "selectOnClick": "bool",
          "srcNodeRef": "HTMLElement",
          "state": "string",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "tooltipPosition": "Object",
          "trim": "bool",
          "type": "string",
          "uppercase": "bool",
          "value": "Date",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "closeDropDown": "fn(focus: bool)",
          "compare": "fn(val1: Date, val2: Date) -> ?",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "displayMessage": "fn(message: String)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "filter": "fn(val: ?) -> ?",
          "focus": "fn()",
          "format": "fn(value: Date, constraints: Object) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getDisplayedValue": "fn() -> ?",
          "getErrorMessage": "fn(isFocused: bool) -> ?",
          "getParent": "fn() -> ?",
          "getPromptMessage": "fn(isFocused: bool) -> ?",
          "getValue": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isInRange": "fn(isFocused: bool) -> ?",
          "isLeftToRight": "fn() -> ?",
          "isLoaded": "fn() -> bool",
          "isValid": {},
          "loadAndOpenDropDown": "fn() -> ?",
          "loadDropDown": "fn(loadCallback: Function)",
          "on": "fn(type: String, func: Function) -> ?",
          "openDropDown": "fn(callback?: Function)",
          "own": "fn() -> ?",
          "parse": "fn(value: String, constraints: Object) -> ?",
          "pattern": {},
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "rangeCheck": "fn(primitive: number, constraints: dijit.form.RangeBoundTextBox.__Constraints) -> bool",
          "regExpGen": "fn(constraints: Object)",
          "reset": "fn()",
          "serialize": "fn(val: ?, options: Object) -> ?",
          "setAttribute": "fn(attr: String, value: ?)",
          "setDisabled": "fn(disabled: bool)",
          "setDisplayedValue": "fn(value: String)",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "toggleDropDown": "fn()",
          "undo": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "validate": "fn() -> ?",
          "validator": "fn(value: ?, constraints: Object) -> ?",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onInput": "fn(event: ?)",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        },
        "__Constraints": {
          "!type": "fn()",
          "prototype": {
            "am": "string",
            "datePattern": "string",
            "formatLength": "string",
            "fullYear": "bool",
            "locale": "string",
            "max": "number",
            "min": "number",
            "pm": "string",
            "selector": "string",
            "strict": "bool",
            "timePattern": "string"
          }
        }
      },
      "_FormSelectWidget": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret1265",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "dir": "string",
          "disabled": "bool",
          "domNode": "HTMLElement",
          "focused": "bool",
          "hovering": "bool",
          "id": "string",
          "intermediateChanges": "bool",
          "labelAttr": "Object",
          "lang": "string",
          "loadChildrenOnOpen": "bool",
          "multiple": "bool",
          "name": "string",
          "onFetch": "Function",
          "onLoadDeferred": "Object",
          "options": "Object",
          "ownerDocument": "Object",
          "query": "Object",
          "queryOptions": "Object",
          "readOnly": "bool",
          "scrollOnFocus": "bool",
          "searchContainerNode": "bool",
          "sortByLabel": "bool",
          "srcNodeRef": "HTMLElement",
          "store": "Object",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "type": "string",
          "value": "string",
          "addOption": "fn(option: dijit.form._FormSelectWidget.__SelectOption)",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "compare": "fn(val1: ?, val2: ?) -> number",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn()",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "focus": "fn()",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getOptions": "fn(valueOrIdx: ?) -> ?",
          "getParent": "fn() -> ?",
          "getValue": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "removeOption": "fn(valueOrIdx: String)",
          "reset": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "setDisabled": "fn(disabled: bool)",
          "setStore": "fn(store: dojo.store.api.Store, selectedValue: ?, fetchArgs: Object) -> ?",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "undo": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "updateOption": "fn(newOption: dijit.form._FormSelectWidget.__SelectOption)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onSetStore": "fn()",
          "onShow": "fn()"
        },
        "__SelectOption": {
          "disabled": "bool",
          "label": "string",
          "selected": "bool",
          "value": "string"
        }
      },
      "_FormValueWidget": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret1307",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "dir": "string",
          "disabled": "bool",
          "domNode": "HTMLElement",
          "focused": "bool",
          "hovering": "bool",
          "id": "string",
          "intermediateChanges": "bool",
          "lang": "string",
          "name": "string",
          "ownerDocument": "Object",
          "readOnly": "bool",
          "scrollOnFocus": "bool",
          "searchContainerNode": "bool",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "type": "string",
          "value": "?",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "compare": "fn(val1: ?, val2: ?) -> number",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "create": "fn()",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "focus": "fn()",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "getValue": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "reset": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "setDisabled": "fn(disabled: bool)",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "undo": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "_FormWidget": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret1339",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "dir": "string",
          "disabled": "bool",
          "domNode": "HTMLElement",
          "focused": "bool",
          "hovering": "bool",
          "id": "string",
          "intermediateChanges": "bool",
          "lang": "string",
          "name": "string",
          "ownerDocument": "Object",
          "scrollOnFocus": "bool",
          "searchContainerNode": "bool",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "type": "string",
          "value": "Object",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "compare": "fn(val1: ?, val2: ?) -> number",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "create": "fn()",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "focus": "fn()",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "getValue": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "setDisabled": "fn(disabled: bool)",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "_ListBase": {
        "!type": "fn()",
        "prototype": {
          "selected": "HTMLElement",
          "selectFirstNode": "fn()",
          "selectLastNode": "fn()",
          "selectNextNode": "fn()",
          "selectPreviousNode": "fn()"
        }
      },
      "_RadioButtonMixin": {
        "!type": "fn()",
        "prototype": {}
      },
      "_ListMouseMixin": {
        "!type": "fn()",
        "prototype": {
          "selected": "HTMLElement",
          "postCreate": "fn()",
          "selectFirstNode": "fn()",
          "selectLastNode": "fn()",
          "selectNextNode": "fn()",
          "selectPreviousNode": "fn()"
        }
      },
      "_ToggleButtonMixin": {
        "!type": "fn()",
        "prototype": {
          "checked": "bool",
          "postCreate": "fn()",
          "reset": "fn()"
        }
      },
      "_SearchMixin": {
        "!type": "fn()",
        "prototype": {
          "fetchProperties": "Object",
          "ignoreCase": "bool",
          "pageSize": "number",
          "query": "Object",
          "queryExpr": "string",
          "searchAttr": "string",
          "searchDelay": "number",
          "store": "Object",
          "postMixInProperties": "fn()",
          "onSearch": "fn(results: Object, query: Object, options: Object)"
        }
      },
      "_TextBoxMixin": {
        "!type": "fn()",
        "prototype": {
          "displayedValue": "string",
          "lowercase": "bool",
          "maxLength": "string",
          "placeHolder": "string",
          "propercase": "bool",
          "selectOnClick": "bool",
          "trim": "bool",
          "uppercase": "bool",
          "filter": "fn(val: ?) -> ?",
          "format": "fn(value: String, constraints: Object) -> String",
          "parse": "fn(value: String, constraints: Object) -> String",
          "postCreate": "fn()",
          "reset": "fn()",
          "selectInputText": "fn(element: HTMLElement, start: number, stop: number)",
          "onInput": "fn(event: ?)"
        }
      },
      "ComboBoxMixin": {
        "!type": "fn()",
        "prototype": {
          "autoComplete": "bool",
          "autoWidth": "bool",
          "baseClass": "string",
          "cssStateNodes": "Object",
          "dropDown": "Object",
          "dropDownPosition": "Object",
          "fetchProperties": "Object",
          "forceWidth": "bool",
          "hasDownArrow": "bool",
          "highlightMatch": "string",
          "ignoreCase": "bool",
          "item": "Object",
          "labelAttr": "Object",
          "labelType": "string",
          "maxHeight": "number",
          "pageSize": "number",
          "query": "Object",
          "queryExpr": "string",
          "searchAttr": "string",
          "searchDelay": "number",
          "store": "Object",
          "templateString": "string",
          "buildRendering": "fn()",
          "closeDropDown": "fn(focus?: bool)",
          "destroy": "fn()",
          "doHighlight": "fn(label: String, find: String) -> ?",
          "dropDownClass": "fn()",
          "isLoaded": "fn() -> bool",
          "loadAndOpenDropDown": "fn() -> ?",
          "loadDropDown": "fn(loadCallback: Function)",
          "openDropDown": "fn() -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "reset": "fn()",
          "toggleDropDown": "fn()",
          "onSearch": "fn(results: Object, query: Object, options: Object)"
        }
      },
      "Button": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret1370",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "dir": "string",
          "disabled": "bool",
          "domNode": "HTMLElement",
          "focused": "bool",
          "hovering": "bool",
          "iconClass": "string",
          "id": "string",
          "intermediateChanges": "bool",
          "label": "string",
          "lang": "string",
          "name": "string",
          "ownerDocument": "Object",
          "scrollOnFocus": "bool",
          "searchContainerNode": "bool",
          "showLabel": "bool",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "type": "string",
          "value": "string",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "compare": "fn(val1: ?, val2: ?) -> number",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "focus": "fn()",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "getValue": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "setDisabled": "fn(disabled: bool)",
          "setLabel": "fn(content: String)",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: Event) -> bool",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "DataList": {
        "!type": "fn(params: Object, srcNodeRef: HTMLElement)",
        "prototype": {
          "data": "[?]",
          "idProperty": "string",
          "index": "Object",
          "add": "fn(object: Object, options: dojo.store.api.Store.PutDirectives) -> ?",
          "destroy": "fn()",
          "fetchSelectedItem": "fn() -> ?",
          "get": "fn(id: number) -> ?",
          "getChildren": "fn(parent: Object, options: dojo.store.api.Store.QueryOptions) -> dojo.store.api.Store.QueryResults",
          "getIdentity": "fn(object: Object) -> ?",
          "getMetadata": "fn(object: Object) -> Object",
          "put": "fn(object: Object, options: dojo.store.api.Store.PutDirectives) -> ?",
          "query": "fn(query: Object, options: dojo.store.api.Store.QueryOptions) -> ?",
          "queryEngine": "fn(query: Object, options: dojo.store.api.Store.QueryOptions) -> ?",
          "remove": "fn(id: number) -> ?",
          "setData": "fn(data: [Object])",
          "transaction": "fn() -> dojo.store.api.Store.Transaction"
        }
      },
      "_Spinner": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret1404",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "constraints": "Object",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "defaultTimeout": "number",
          "dir": "string",
          "disabled": "bool",
          "displayedValue": "string",
          "domNode": "HTMLElement",
          "focused": "bool",
          "hovering": "bool",
          "id": "string",
          "intermediateChanges": "bool",
          "invalidMessage": "string",
          "lang": "string",
          "largeDelta": "number",
          "lowercase": "bool",
          "maxLength": "string",
          "message": "string",
          "minimumTimeout": "number",
          "missingMessage": "string",
          "name": "string",
          "ownerDocument": "Object",
          "pattern": "string",
          "placeHolder": "string",
          "promptMessage": "string",
          "propercase": "bool",
          "rangeMessage": "string",
          "readOnly": "bool",
          "regExp": "string",
          "required": "bool",
          "scrollOnFocus": "bool",
          "searchContainerNode": "bool",
          "selectOnClick": "bool",
          "smallDelta": "number",
          "srcNodeRef": "HTMLElement",
          "state": "string",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "timeoutChangeRate": "number",
          "title": "string",
          "tooltip": "string",
          "tooltipPosition": "Object",
          "trim": "bool",
          "type": "string",
          "uppercase": "bool",
          "value": "string",
          "adjust": "fn(val: Object, delta: number) -> Object",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "compare": "fn(val1: ?, val2: ?) -> number",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "displayMessage": "fn(message: String)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "filter": "fn(val: ?) -> ?",
          "focus": "fn()",
          "format": "fn(value: String, constraints: Object) -> String",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getDisplayedValue": "fn() -> ?",
          "getErrorMessage": "fn(isFocused: bool) -> ?",
          "getParent": "fn() -> ?",
          "getPromptMessage": "fn(isFocused: bool) -> ?",
          "getValue": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isInRange": "fn(isFocused: bool) -> ?",
          "isLeftToRight": "fn() -> ?",
          "isValid": {},
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "parse": "fn(value: String, constraints: Object) -> String",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "rangeCheck": "fn(primitive: number, constraints: dijit.form.RangeBoundTextBox.__Constraints) -> bool",
          "regExpGen": "fn(constraints: Object)",
          "reset": "fn()",
          "serialize": "fn(val: ?, options: Object) -> String",
          "setAttribute": "fn(attr: String, value: ?)",
          "setDisabled": "fn(disabled: bool)",
          "setDisplayedValue": "fn(value: String)",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "undo": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "validate": "fn() -> ?",
          "validator": "fn(value: ?, constraints: Object) -> ?",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onInput": "fn(event: ?)",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "CheckBox": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret1460",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "baseClass": "string",
          "checked": "bool",
          "class": "string",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "dir": "string",
          "disabled": "bool",
          "domNode": "HTMLElement",
          "focused": "bool",
          "hovering": "bool",
          "iconClass": "string",
          "id": "string",
          "intermediateChanges": "bool",
          "label": "string",
          "lang": "string",
          "name": "string",
          "ownerDocument": "Object",
          "readOnly": "bool",
          "scrollOnFocus": "bool",
          "searchContainerNode": "bool",
          "showLabel": "bool",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "type": "string",
          "value": "string",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "compare": "fn(val1: ?, val2: ?) -> number",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "focus": "fn()",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "getValue": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "reset": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "setChecked": "fn(checked: bool)",
          "setDisabled": "fn(disabled: bool)",
          "setLabel": "fn(content: String)",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: Event) -> bool",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "ComboButton": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret1496",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "autoWidth": "bool",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "dir": "string",
          "disabled": "bool",
          "domNode": "HTMLElement",
          "dropDown": "Object",
          "dropDownPosition": "Object",
          "focused": "bool",
          "forceWidth": "bool",
          "hovering": "bool",
          "iconClass": "string",
          "id": "string",
          "intermediateChanges": "bool",
          "label": "string",
          "lang": "string",
          "maxHeight": "number",
          "name": "string",
          "optionsTitle": "string",
          "ownerDocument": "Object",
          "scrollOnFocus": "bool",
          "searchContainerNode": "bool",
          "showLabel": "bool",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "type": "string",
          "value": "string",
          "addChild": "fn(widget: dijit._WidgetBase, insertIndex?: number)",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "closeDropDown": "fn(focus: bool)",
          "compare": "fn(val1: ?, val2: ?) -> number",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "focus": "fn(position?: String)",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
          "getParent": "fn() -> ?",
          "getValue": "fn() -> ?",
          "hasChildren": "fn() -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "isLoaded": "fn() -> bool",
          "loadAndOpenDropDown": "fn() -> ?",
          "loadDropDown": "fn(callback: Function)",
          "on": "fn(type: String, func: Function) -> ?",
          "openDropDown": "fn() -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "removeChild": "fn(widget: dijit._WidgetBase)",
          "setAttribute": "fn(attr: String, value: ?)",
          "setDisabled": "fn(disabled: bool)",
          "setLabel": "fn(content: String)",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "toggleDropDown": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: ?) -> bool",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "ComboBox": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret1536",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "autoComplete": "bool",
          "autoWidth": "bool",
          "baseClass": "string",
          "class": "string",
          "constraints": "Object",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "dir": "string",
          "disabled": "bool",
          "displayedValue": "string",
          "domNode": "HTMLElement",
          "dropDown": "Object",
          "dropDownPosition": "Object",
          "fetchProperties": "Object",
          "focused": "bool",
          "forceWidth": "bool",
          "hasDownArrow": "bool",
          "highlightMatch": "string",
          "hovering": "bool",
          "id": "string",
          "ignoreCase": "bool",
          "intermediateChanges": "bool",
          "invalidMessage": "string",
          "item": "Object",
          "labelAttr": "Object",
          "labelType": "string",
          "lang": "string",
          "lowercase": "bool",
          "maxHeight": "number",
          "maxLength": "string",
          "message": "string",
          "missingMessage": "string",
          "name": "string",
          "ownerDocument": "Object",
          "pageSize": "number",
          "pattern": "string",
          "placeHolder": "string",
          "promptMessage": "string",
          "propercase": "bool",
          "query": "Object",
          "queryExpr": "string",
          "readOnly": "bool",
          "regExp": "string",
          "required": "bool",
          "scrollOnFocus": "bool",
          "searchAttr": "string",
          "searchContainerNode": "bool",
          "searchDelay": "number",
          "selectOnClick": "bool",
          "srcNodeRef": "HTMLElement",
          "state": "string",
          "store": "Object",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "tooltipPosition": "Object",
          "trim": "bool",
          "type": "string",
          "uppercase": "bool",
          "value": "string",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "closeDropDown": "fn(focus: bool)",
          "compare": "fn(val1: ?, val2: ?) -> number",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "displayMessage": "fn(message: String)",
          "doHighlight": "fn(label: String, find: String) -> ?",
          "dropDownClass": "fn()",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "filter": "fn(val: ?) -> ?",
          "focus": "fn()",
          "format": "fn(value: String, constraints: Object) -> String",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getDisplayedValue": "fn() -> ?",
          "getErrorMessage": "fn(isFocused: bool) -> ?",
          "getParent": "fn() -> ?",
          "getPromptMessage": "fn(isFocused: bool) -> ?",
          "getValue": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "isLoaded": "fn() -> bool",
          "isValid": {},
          "loadAndOpenDropDown": "fn() -> ?",
          "loadDropDown": "fn(loadCallback: Function)",
          "on": "fn(type: String, func: Function) -> ?",
          "openDropDown": "fn() -> ?",
          "own": "fn() -> ?",
          "parse": "fn(value: String, constraints: Object) -> String",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "regExpGen": "fn(constraints: Object)",
          "reset": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "setDisabled": "fn(disabled: bool)",
          "setDisplayedValue": "fn(value: String)",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "toggleDropDown": "fn()",
          "undo": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "validate": "fn(isFocused: bool) -> ?",
          "validator": "fn(value: ?, constraints: Object) -> ?",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onInput": "fn(event: ?)",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onSearch": "fn(results: Object, query: Object, options: Object)",
          "onShow": "fn()"
        }
      },
      "CurrencyTextBox": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret1605",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "constraints": "Object",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "currency": "string",
          "dir": "string",
          "disabled": "bool",
          "displayedValue": "string",
          "domNode": "HTMLElement",
          "editOptions": "Object",
          "focused": "bool",
          "hovering": "bool",
          "id": "string",
          "intermediateChanges": "bool",
          "invalidMessage": "string",
          "lang": "string",
          "lowercase": "bool",
          "maxLength": "string",
          "message": "string",
          "missingMessage": "string",
          "name": "string",
          "ownerDocument": "Object",
          "pattern": "string",
          "placeHolder": "string",
          "promptMessage": "string",
          "propercase": "bool",
          "rangeMessage": "string",
          "readOnly": "bool",
          "regExp": "string",
          "required": "bool",
          "scrollOnFocus": "bool",
          "searchContainerNode": "bool",
          "selectOnClick": "bool",
          "srcNodeRef": "HTMLElement",
          "state": "string",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "tooltipPosition": "Object",
          "trim": "bool",
          "type": "string",
          "uppercase": "bool",
          "value": "string",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "compare": "fn(val1: ?, val2: ?) -> number",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "displayMessage": "fn(message: String)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "filter": "fn(val: ?) -> ?",
          "focus": "fn()",
          "format": "fn(value: String, constraints: Object) -> String",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getDisplayedValue": "fn() -> ?",
          "getErrorMessage": "fn(isFocused: bool) -> ?",
          "getParent": "fn() -> ?",
          "getPromptMessage": "fn(isFocused: bool) -> ?",
          "getValue": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isInRange": "fn(isFocused: bool) -> ?",
          "isLeftToRight": "fn() -> ?",
          "isValid": {},
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "parse": "fn(value: String, constraints: Object) -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "rangeCheck": "fn(primitive: number, constraints: dijit.form.RangeBoundTextBox.__Constraints) -> bool",
          "regExpGen": "fn(constraints: Object)",
          "reset": "fn()",
          "serialize": "fn(val: ?, options: Object) -> String",
          "setAttribute": "fn(attr: String, value: ?)",
          "setDisabled": "fn(disabled: bool)",
          "setDisplayedValue": "fn(value: String)",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "undo": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "validate": "fn() -> ?",
          "validator": "fn(value: ?, constraints: Object) -> ?",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onInput": "fn(event: ?)",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "Form": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "accept": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret1658",
          "accept-charset": "string",
          "action": "Object",
          "attachScope": "Object",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "dir": "string",
          "doLayout": "bool",
          "domNode": "HTMLElement",
          "encType": "Object",
          "focused": "bool",
          "id": "string",
          "isLayoutContainer": "bool",
          "lang": "string",
          "method": "Object",
          "name": "Object",
          "ownerDocument": "Object",
          "searchContainerNode": "bool",
          "srcNodeRef": "HTMLElement",
          "state": "string",
          "style": "string",
          "target": "Object",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "connectChildren": "fn(inStartup: bool)",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "disconnectChildren": "fn()",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "execute": "fn(formContents: Object)",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "getValues": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "isValid": {},
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "reset": "fn(e?: Event)",
          "resize": "fn(changeSize: ?, resultSize: ?)",
          "setAttribute": "fn(attr: String, value: ?)",
          "setValues": "fn(val: ?) -> ?",
          "startup": "fn()",
          "submit": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "validate": "fn() -> ?",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onExecute": "fn()",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onReset": "fn(e: Event) -> bool",
          "onShow": "fn()",
          "onSubmit": "fn(e: Event) -> ?",
          "onValidStateChange": "fn(isValid: bool)"
        }
      },
      "DropDownButton": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret1687",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "autoWidth": "bool",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "dir": "string",
          "disabled": "bool",
          "domNode": "HTMLElement",
          "dropDown": "Object",
          "dropDownPosition": "Object",
          "focused": "bool",
          "forceWidth": "bool",
          "hovering": "bool",
          "iconClass": "string",
          "id": "string",
          "intermediateChanges": "bool",
          "label": "string",
          "lang": "string",
          "maxHeight": "number",
          "name": "string",
          "ownerDocument": "Object",
          "scrollOnFocus": "bool",
          "searchContainerNode": "bool",
          "showLabel": "bool",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "type": "string",
          "value": "string",
          "addChild": "fn(widget: dijit._WidgetBase, insertIndex?: number)",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "closeDropDown": "fn(focus: bool)",
          "compare": "fn(val1: ?, val2: ?) -> number",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "focus": "fn()",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
          "getParent": "fn() -> ?",
          "getValue": "fn() -> ?",
          "hasChildren": "fn() -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "isLoaded": "fn() -> bool",
          "loadAndOpenDropDown": "fn() -> ?",
          "loadDropDown": "fn(callback: Function)",
          "on": "fn(type: String, func: Function) -> ?",
          "openDropDown": "fn() -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "removeChild": "fn(widget: dijit._WidgetBase)",
          "setAttribute": "fn(attr: String, value: ?)",
          "setDisabled": "fn(disabled: bool)",
          "setLabel": "fn(content: String)",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "toggleDropDown": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: ?) -> bool",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "DateTextBox": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret1726",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "autoWidth": "bool",
          "baseClass": "string",
          "class": "string",
          "constraints": "Object",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "datePackage": "string",
          "dir": "string",
          "disabled": "bool",
          "displayedValue": "string",
          "domNode": "HTMLElement",
          "dropDown": "Object",
          "dropDownDefaultValue": "Date",
          "dropDownPosition": "Object",
          "focused": "bool",
          "forceWidth": "bool",
          "hasDownArrow": "bool",
          "hovering": "bool",
          "id": "string",
          "intermediateChanges": "bool",
          "invalidMessage": "string",
          "lang": "string",
          "lowercase": "bool",
          "maxHeight": "number",
          "maxLength": "string",
          "message": "string",
          "missingMessage": "string",
          "name": "string",
          "ownerDocument": "Object",
          "placeHolder": "string",
          "promptMessage": "string",
          "propercase": "bool",
          "rangeMessage": "string",
          "readOnly": "bool",
          "regExp": "string",
          "required": "bool",
          "scrollOnFocus": "bool",
          "searchContainerNode": "bool",
          "selectOnClick": "bool",
          "srcNodeRef": "HTMLElement",
          "state": "string",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "tooltipPosition": "Object",
          "trim": "bool",
          "type": "string",
          "uppercase": "bool",
          "value": "Date",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "closeDropDown": "fn(focus: bool)",
          "compare": "fn(val1: Date, val2: Date) -> ?",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "displayMessage": "fn(message: String)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "filter": "fn(val: ?) -> ?",
          "focus": "fn()",
          "format": "fn(value: Date, constraints: Object) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getDisplayedValue": "fn() -> ?",
          "getErrorMessage": "fn(isFocused: bool) -> ?",
          "getParent": "fn() -> ?",
          "getPromptMessage": "fn(isFocused: bool) -> ?",
          "getValue": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isInRange": "fn(isFocused: bool) -> ?",
          "isLeftToRight": "fn() -> ?",
          "isLoaded": "fn() -> bool",
          "isValid": {},
          "loadAndOpenDropDown": "fn() -> ?",
          "loadDropDown": "fn(loadCallback: Function)",
          "on": "fn(type: String, func: Function) -> ?",
          "openDropDown": "fn(callback: Function)",
          "own": "fn() -> ?",
          "parse": "fn(value: String, constraints: Object) -> ?",
          "pattern": {},
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "rangeCheck": "fn(primitive: number, constraints: dijit.form.RangeBoundTextBox.__Constraints) -> bool",
          "regExpGen": "fn(constraints: Object)",
          "reset": "fn()",
          "serialize": "fn(val: ?, options: Object) -> ?",
          "setAttribute": "fn(attr: String, value: ?)",
          "setDisabled": "fn(disabled: bool)",
          "setDisplayedValue": "fn(value: String)",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "toggleDropDown": "fn()",
          "undo": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "validate": "fn() -> ?",
          "validator": "fn(value: ?, constraints: Object) -> ?",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onInput": "fn(event: ?)",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "HorizontalRule": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attachScope": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret1784",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "container": "string",
          "containerNode": "HTMLElement",
          "count": "number",
          "dir": "string",
          "domNode": "HTMLElement",
          "focused": "bool",
          "id": "string",
          "lang": "string",
          "ownerDocument": "Object",
          "ruleStyle": "string",
          "searchContainerNode": "bool",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "FilteringSelect": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret1806",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "autoComplete": "bool",
          "autoWidth": "bool",
          "baseClass": "string",
          "class": "string",
          "constraints": "Object",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "dir": "string",
          "disabled": "bool",
          "displayedValue": "string",
          "domNode": "HTMLElement",
          "dropDown": "Object",
          "dropDownPosition": "Object",
          "fetchProperties": "Object",
          "focused": "bool",
          "forceWidth": "bool",
          "hasDownArrow": "bool",
          "highlightMatch": "string",
          "hovering": "bool",
          "id": "string",
          "ignoreCase": "bool",
          "intermediateChanges": "bool",
          "invalidMessage": "string",
          "item": "Object",
          "labelAttr": "Object",
          "labelType": "string",
          "lang": "string",
          "lowercase": "bool",
          "maxHeight": "number",
          "maxLength": "string",
          "message": "string",
          "missingMessage": "string",
          "name": "string",
          "ownerDocument": "Object",
          "pageSize": "number",
          "pattern": "string",
          "placeHolder": "string",
          "promptMessage": "string",
          "propercase": "bool",
          "query": "Object",
          "queryExpr": "string",
          "readOnly": "bool",
          "regExp": "string",
          "required": "bool",
          "scrollOnFocus": "bool",
          "searchAttr": "string",
          "searchContainerNode": "bool",
          "searchDelay": "number",
          "selectOnClick": "bool",
          "srcNodeRef": "HTMLElement",
          "state": "string",
          "store": "Object",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "tooltipPosition": "Object",
          "trim": "bool",
          "type": "string",
          "uppercase": "bool",
          "value": "string",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "closeDropDown": "fn(focus: bool)",
          "compare": "fn(val1: ?, val2: ?) -> number",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "displayMessage": "fn(message: String)",
          "doHighlight": "fn(label: String, find: String) -> ?",
          "dropDownClass": "fn()",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "filter": "fn(val: ?) -> ?",
          "focus": "fn()",
          "format": "fn(value: String, constraints: Object) -> String",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getDisplayedValue": "fn() -> ?",
          "getErrorMessage": "fn(isFocused: bool) -> ?",
          "getParent": "fn() -> ?",
          "getPromptMessage": "fn(isFocused: bool) -> ?",
          "getValue": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "isLoaded": "fn() -> bool",
          "isValid": {},
          "loadAndOpenDropDown": "fn() -> ?",
          "loadDropDown": "fn(loadCallback: Function)",
          "on": "fn(type: String, func: Function) -> ?",
          "openDropDown": "fn() -> ?",
          "own": "fn() -> ?",
          "parse": "fn(value: String, constraints: Object) -> String",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "regExpGen": "fn(constraints: Object)",
          "reset": "fn()",
          "serialize": "fn(val: ?, options: Object) -> String",
          "setAttribute": "fn(attr: String, value: ?)",
          "setDisabled": "fn(disabled: bool)",
          "setDisplayedValue": "fn(value: String)",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "toggleDropDown": "fn()",
          "undo": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "validate": "fn() -> ?",
          "validator": "fn(value: ?, constraints: Object) -> ?",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onInput": "fn(event: ?)",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onSearch": "fn(results: Object, query: Object, options: Object)",
          "onShow": "fn()"
        }
      },
      "HorizontalRuleLabels": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attachScope": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret1875",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "constraints": "Object",
          "container": "string",
          "containerNode": "HTMLElement",
          "count": "number",
          "dir": "string",
          "domNode": "HTMLElement",
          "focused": "bool",
          "id": "string",
          "labels": "Object",
          "labelStyle": "string",
          "lang": "string",
          "maximum": "number",
          "minimum": "number",
          "numericMargin": "number",
          "ownerDocument": "Object",
          "ruleStyle": "string",
          "searchContainerNode": "bool",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getLabels": "fn() -> ?",
          "getParent": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "MappedTextBox": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret1903",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "constraints": "Object",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "dir": "string",
          "disabled": "bool",
          "displayedValue": "string",
          "domNode": "HTMLElement",
          "focused": "bool",
          "hovering": "bool",
          "id": "string",
          "intermediateChanges": "bool",
          "invalidMessage": "string",
          "lang": "string",
          "lowercase": "bool",
          "maxLength": "string",
          "message": "string",
          "missingMessage": "string",
          "name": "string",
          "ownerDocument": "Object",
          "pattern": "string",
          "placeHolder": "string",
          "promptMessage": "string",
          "propercase": "bool",
          "readOnly": "bool",
          "regExp": "string",
          "required": "bool",
          "scrollOnFocus": "bool",
          "searchContainerNode": "bool",
          "selectOnClick": "bool",
          "srcNodeRef": "HTMLElement",
          "state": "string",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "tooltipPosition": "Object",
          "trim": "bool",
          "type": "string",
          "uppercase": "bool",
          "value": "Object",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "compare": "fn(val1: ?, val2: ?) -> number",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "displayMessage": "fn(message: String)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "filter": "fn(val: ?) -> ?",
          "focus": "fn()",
          "format": "fn(value: String, constraints: Object) -> String",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getDisplayedValue": "fn() -> ?",
          "getErrorMessage": "fn(isFocused: bool) -> ?",
          "getParent": "fn() -> ?",
          "getPromptMessage": "fn(isFocused: bool) -> ?",
          "getValue": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "isValid": {},
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "parse": "fn(value: String, constraints?: Object) -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "regExpGen": "fn(constraints: Object)",
          "reset": "fn()",
          "serialize": "fn(val: ?, options: Object) -> String",
          "setAttribute": "fn(attr: String, value: ?)",
          "setDisabled": "fn(disabled: bool)",
          "setDisplayedValue": "fn(value: String)",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "undo": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "validate": "fn() -> ?",
          "validator": "fn(value: ?, constraints: Object) -> ?",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onInput": "fn(event: ?)",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "MultiSelect": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret1953",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "dir": "string",
          "disabled": "bool",
          "domNode": "HTMLElement",
          "focused": "bool",
          "hovering": "bool",
          "id": "string",
          "intermediateChanges": "bool",
          "lang": "string",
          "multiple": "bool",
          "name": "string",
          "ownerDocument": "Object",
          "readOnly": "bool",
          "scrollOnFocus": "bool",
          "searchContainerNode": "bool",
          "size": "number",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "type": "string",
          "value": "string",
          "addSelected": "fn(select: dijit.form.MultiSelect)",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "compare": "fn(val1: ?, val2: ?) -> number",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "focus": "fn()",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "getSelected": "fn() -> ?",
          "getValue": "fn() -> ?",
          "invertSelection": "fn(onChange: bool)",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "reset": "fn()",
          "resize": "fn(size: Object)",
          "setAttribute": "fn(attr: String, value: ?)",
          "setDisabled": "fn(disabled: bool)",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "undo": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "HorizontalSlider": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret1987",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "clickSelect": "bool",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "dir": "string",
          "disabled": "bool",
          "discreteValues": "number",
          "domNode": "HTMLElement",
          "focused": "bool",
          "hovering": "bool",
          "id": "string",
          "intermediateChanges": "bool",
          "lang": "string",
          "maximum": "number",
          "minimum": "number",
          "name": "string",
          "ownerDocument": "Object",
          "pageIncrement": "number",
          "readOnly": "bool",
          "scrollOnFocus": "bool",
          "searchContainerNode": "bool",
          "showButtons": "bool",
          "slideDuration": "number",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "type": "string",
          "value": "number",
          "addChild": "fn(widget: dijit._WidgetBase, insertIndex?: number)",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "compare": "fn(val1: ?, val2: ?) -> number",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn()",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "focus": "fn()",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
          "getParent": "fn() -> ?",
          "getValue": "fn() -> ?",
          "hasChildren": "fn() -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "removeChild": "fn(widget: dijit._WidgetBase)",
          "reset": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "setDisabled": "fn(disabled: bool)",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "undo": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        },
        "_Mover": {
          "!type": "fn(node: HTMLElement, e: Event, host?: Object)",
          "prototype": {
            "destroy": "fn(e?: ?)",
            "emit": "fn(type: ?, event: ?) -> ?",
            "on": "fn(type: ?, listener: ?) -> ?",
            "onFirstMove": "fn(e: ?)",
            "onMouseMove": "fn(e: ?)",
            "onMouseUp": "fn(e: ?)"
          }
        }
      },
      "NumberTextBox": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret2026",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "constraints": "Object",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "dir": "string",
          "disabled": "bool",
          "displayedValue": "string",
          "domNode": "HTMLElement",
          "editOptions": "Object",
          "focused": "bool",
          "hovering": "bool",
          "id": "string",
          "intermediateChanges": "bool",
          "invalidMessage": "string",
          "isValid": "?",
          "lang": "string",
          "lowercase": "bool",
          "maxLength": "string",
          "message": "string",
          "missingMessage": "string",
          "name": "string",
          "ownerDocument": "Object",
          "pattern": "string",
          "placeHolder": "string",
          "promptMessage": "string",
          "propercase": "bool",
          "rangeMessage": "string",
          "readOnly": "bool",
          "regExp": "string",
          "required": "bool",
          "scrollOnFocus": "bool",
          "searchContainerNode": "bool",
          "selectOnClick": "bool",
          "srcNodeRef": "HTMLElement",
          "state": "string",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "tooltipPosition": "Object",
          "trim": "bool",
          "type": "string",
          "uppercase": "bool",
          "value": "string",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "compare": "fn(val1: ?, val2: ?) -> number",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "displayMessage": "fn(message: String)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "filter": "fn(val: ?) -> ?",
          "focus": "fn()",
          "format": "fn(value: String, constraints: Object) -> String",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getDisplayedValue": "fn() -> ?",
          "getErrorMessage": "fn(isFocused: bool) -> ?",
          "getParent": "fn() -> ?",
          "getPromptMessage": "fn(isFocused: bool) -> ?",
          "getValue": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isInRange": "fn(isFocused: bool) -> ?",
          "isLeftToRight": "fn() -> ?",
          "Mixin": "fn()",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "parse": "fn(value: String, constraints: Object) -> String",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "rangeCheck": "fn(primitive: number, constraints: dijit.form.RangeBoundTextBox.__Constraints) -> bool",
          "regExpGen": "fn(constraints: Object)",
          "reset": "fn()",
          "serialize": "fn(val: ?, options: Object) -> String",
          "setAttribute": "fn(attr: String, value: ?)",
          "setDisabled": "fn(disabled: bool)",
          "setDisplayedValue": "fn(value: String)",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "undo": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "validate": "fn() -> ?",
          "validator": "fn(value: ?, constraints: Object) -> ?",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onInput": "fn(event: ?)",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        },
        "__Constraints": {
          "!type": "fn()",
          "prototype": {
            "fractional": "bool",
            "locale": "string",
            "max": "number",
            "min": "number",
            "pattern": "string",
            "places": "number",
            "round": "number",
            "strict": "bool",
            "type": "string"
          }
        },
        "Mixin": {
          "!type": "fn()",
          "prototype": {
            "constraints": "Object",
            "editOptions": "Object",
            "value": "number",
            "filter": "fn(value: number) -> number",
            "format": "fn(value: number, constraints: Object) -> ?",
            "isValid": {},
            "parse": "fn(value: String, constraints: Object) -> ?",
            "pattern": "fn(constraints: ?) -> String",
            "postMixInProperties": "fn()",
            "serialize": "fn(value: number, options: Object) -> String"
          }
        }
      },
      "NumberSpinner": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret2079",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "constraints": "Object",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "defaultTimeout": "number",
          "dir": "string",
          "disabled": "bool",
          "displayedValue": "string",
          "domNode": "HTMLElement",
          "editOptions": "Object",
          "focused": "bool",
          "hovering": "bool",
          "id": "string",
          "intermediateChanges": "bool",
          "invalidMessage": "string",
          "lang": "string",
          "largeDelta": "number",
          "lowercase": "bool",
          "maxLength": "string",
          "message": "string",
          "minimumTimeout": "number",
          "missingMessage": "string",
          "name": "string",
          "ownerDocument": "Object",
          "pattern": "string",
          "placeHolder": "string",
          "promptMessage": "string",
          "propercase": "bool",
          "rangeMessage": "string",
          "readOnly": "bool",
          "regExp": "string",
          "required": "bool",
          "scrollOnFocus": "bool",
          "searchContainerNode": "bool",
          "selectOnClick": "bool",
          "smallDelta": "number",
          "srcNodeRef": "HTMLElement",
          "state": "string",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "timeoutChangeRate": "number",
          "title": "string",
          "tooltip": "string",
          "tooltipPosition": "Object",
          "trim": "bool",
          "type": "string",
          "uppercase": "bool",
          "value": "string",
          "adjust": "fn(val: Object, delta: number) -> ?",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "compare": "fn(val1: ?, val2: ?) -> number",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "displayMessage": "fn(message: String)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "filter": "fn(val: ?) -> ?",
          "focus": "fn()",
          "format": "fn(value: String, constraints: Object) -> String",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getDisplayedValue": "fn() -> ?",
          "getErrorMessage": "fn(isFocused: bool) -> ?",
          "getParent": "fn() -> ?",
          "getPromptMessage": "fn(isFocused: bool) -> ?",
          "getValue": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isInRange": "fn(isFocused: bool) -> ?",
          "isLeftToRight": "fn() -> ?",
          "isValid": {},
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "parse": "fn(value: String, constraints: Object) -> String",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "rangeCheck": "fn(primitive: number, constraints: dijit.form.RangeBoundTextBox.__Constraints) -> bool",
          "regExpGen": "fn(constraints: Object)",
          "reset": "fn()",
          "serialize": "fn(val: ?, options: Object) -> String",
          "setAttribute": "fn(attr: String, value: ?)",
          "setDisabled": "fn(disabled: bool)",
          "setDisplayedValue": "fn(value: String)",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "undo": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "validate": "fn() -> ?",
          "validator": "fn(value: ?, constraints: Object) -> ?",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onInput": "fn(event: ?)",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "RadioButton": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret2136",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "baseClass": "string",
          "checked": "bool",
          "class": "string",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "dir": "string",
          "disabled": "bool",
          "domNode": "HTMLElement",
          "focused": "bool",
          "hovering": "bool",
          "iconClass": "string",
          "id": "string",
          "intermediateChanges": "bool",
          "label": "string",
          "lang": "string",
          "name": "string",
          "ownerDocument": "Object",
          "readOnly": "bool",
          "scrollOnFocus": "bool",
          "searchContainerNode": "bool",
          "showLabel": "bool",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "type": "string",
          "value": "string",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "compare": "fn(val1: ?, val2: ?) -> number",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "focus": "fn()",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "getValue": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "reset": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "setChecked": "fn(checked: bool)",
          "setDisabled": "fn(disabled: bool)",
          "setLabel": "fn(content: String)",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: Event) -> bool",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "SimpleTextarea": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret2172",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "cols": "string",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "dir": "string",
          "disabled": "bool",
          "displayedValue": "string",
          "domNode": "HTMLElement",
          "focused": "bool",
          "hovering": "bool",
          "id": "string",
          "intermediateChanges": "bool",
          "lang": "string",
          "lowercase": "bool",
          "maxLength": "string",
          "name": "string",
          "ownerDocument": "Object",
          "placeHolder": "string",
          "propercase": "bool",
          "readOnly": "bool",
          "rows": "number",
          "scrollOnFocus": "bool",
          "searchContainerNode": "bool",
          "selectOnClick": "bool",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "trim": "bool",
          "type": "string",
          "uppercase": "bool",
          "value": "string",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "compare": "fn(val1: ?, val2: ?) -> number",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "filter": "fn(value: String) -> ?",
          "focus": "fn()",
          "format": "fn(value: String, constraints: Object) -> String",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getDisplayedValue": "fn() -> ?",
          "getParent": "fn() -> ?",
          "getValue": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "parse": "fn(value: String, constraints: Object) -> String",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "reset": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "setDisabled": "fn(disabled: bool)",
          "setDisplayedValue": "fn(value: String)",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "undo": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onInput": "fn(event: ?)",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "RangeBoundTextBox": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret2214",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "constraints": "Object",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "dir": "string",
          "disabled": "bool",
          "displayedValue": "string",
          "domNode": "HTMLElement",
          "focused": "bool",
          "hovering": "bool",
          "id": "string",
          "intermediateChanges": "bool",
          "invalidMessage": "string",
          "lang": "string",
          "lowercase": "bool",
          "maxLength": "string",
          "message": "string",
          "missingMessage": "string",
          "name": "string",
          "ownerDocument": "Object",
          "pattern": "?",
          "placeHolder": "string",
          "promptMessage": "string",
          "propercase": "bool",
          "rangeMessage": "string",
          "readOnly": "bool",
          "regExp": "string",
          "required": "bool",
          "scrollOnFocus": "bool",
          "searchContainerNode": "bool",
          "selectOnClick": "bool",
          "srcNodeRef": "HTMLElement",
          "state": "string",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "tooltipPosition": "Object",
          "trim": "bool",
          "type": "string",
          "uppercase": "bool",
          "value": "Object",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "compare": "fn(val1: ?, val2: ?) -> number",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "displayMessage": "fn(message: String)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "filter": "fn(val: ?) -> ?",
          "focus": "fn()",
          "format": "fn(value: Object, constraints: Object) -> String",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getDisplayedValue": "fn() -> ?",
          "getErrorMessage": "fn(isFocused: bool) -> ?",
          "getParent": "fn() -> ?",
          "getPromptMessage": "fn(isFocused: bool) -> ?",
          "getValue": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isInRange": "fn(isFocused: bool) -> ?",
          "isLeftToRight": "fn() -> ?",
          "isValid": {},
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "parse": "fn(value: String, constraints: Object) -> String",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "rangeCheck": "fn(primitive: number, constraints: dijit.form.RangeBoundTextBox.__Constraints) -> bool",
          "regExpGen": "fn(constraints: Object)",
          "reset": "fn()",
          "serialize": "fn(val: ?, options: Object) -> String",
          "setAttribute": "fn(attr: String, value: ?)",
          "setDisabled": "fn(disabled: bool)",
          "setDisplayedValue": "fn(value: String)",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "undo": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "validate": "fn() -> ?",
          "validator": "fn(value: ?, constraints: Object) -> ?",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onInput": "fn(event: ?)",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        },
        "__Constraints": {
          "!type": "fn()",
          "prototype": {
            "max": "number",
            "min": "number"
          }
        }
      },
      "Textarea": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret2265",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "cols": "string",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "dir": "string",
          "disabled": "bool",
          "displayedValue": "string",
          "domNode": "HTMLElement",
          "focused": "bool",
          "hovering": "bool",
          "id": "string",
          "intermediateChanges": "bool",
          "lang": "string",
          "lowercase": "bool",
          "maxLength": "string",
          "name": "string",
          "ownerDocument": "Object",
          "placeHolder": "string",
          "propercase": "bool",
          "readOnly": "bool",
          "rows": "number",
          "scrollOnFocus": "bool",
          "searchContainerNode": "bool",
          "selectOnClick": "bool",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "trim": "bool",
          "type": "string",
          "uppercase": "bool",
          "value": "string",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "compare": "fn(val1: ?, val2: ?) -> number",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "filter": "fn(value: String) -> ?",
          "focus": "fn()",
          "format": "fn(value: String, constraints: Object) -> String",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getDisplayedValue": "fn() -> ?",
          "getParent": "fn() -> ?",
          "getValue": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "parse": "fn(value: String, constraints: Object) -> String",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "reset": "fn()",
          "resize": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "setDisabled": "fn(disabled: bool)",
          "setDisplayedValue": "fn(value: String)",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "undo": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onInput": "fn(event: ?)",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "Select": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret2307",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "autoWidth": "bool",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "dir": "string",
          "disabled": "bool",
          "domNode": "HTMLElement",
          "dropDown": "Object",
          "dropDownPosition": "Object",
          "emptyLabel": "string",
          "focused": "bool",
          "focusedChild": "Object",
          "forceWidth": "bool",
          "hovering": "bool",
          "id": "string",
          "intermediateChanges": "bool",
          "labelAttr": "Object",
          "lang": "string",
          "loadChildrenOnOpen": "bool",
          "maxHeight": "number",
          "message": "string",
          "multiCharSearchDuration": "number",
          "multiple": "bool",
          "name": "string",
          "onFetch": "Function",
          "onLoadDeferred": "Object",
          "options": "Object",
          "ownerDocument": "Object",
          "query": "Object",
          "queryOptions": "Object",
          "readOnly": "bool",
          "required": "bool",
          "scrollOnFocus": "bool",
          "searchContainerNode": "bool",
          "sortByLabel": "bool",
          "srcNodeRef": "HTMLElement",
          "state": "string",
          "store": "Object",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "tooltipPosition": "Object",
          "type": "string",
          "value": "string",
          "addOption": "fn(option: dijit.form._FormSelectWidget.__SelectOption)",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "childSelector": "fn(node: HTMLElement) -> ?",
          "closeDropDown": "fn(focus: bool)",
          "compare": "fn(val1: ?, val2: ?) -> number",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: ?)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "focus": "fn()",
          "focusChild": "fn(widget: dijit._WidgetBase)",
          "focusFirstChild": "fn()",
          "focusLastChild": "fn()",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getOptions": "fn(valueOrIdx: ?) -> ?",
          "getParent": "fn() -> ?",
          "getValue": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "isLoaded": "fn() -> ?",
          "isValid": {},
          "loadAndOpenDropDown": "fn() -> ?",
          "loadDropDown": "fn(loadCallback: Function)",
          "on": "fn(type: String, func: Function) -> ?",
          "openDropDown": "fn() -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "removeOption": "fn(valueOrIdx: String)",
          "reset": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "setDisabled": "fn(disabled: bool)",
          "setStore": "fn(store: dojo.store.api.Store, selectedValue: ?, fetchArgs: Object) -> ?",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "toggleDropDown": "fn()",
          "undo": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "updateOption": "fn(newOption: dijit.form._FormSelectWidget.__SelectOption)",
          "validate": "fn(isFocused: bool) -> ?",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyboardSearch": "fn(item: dijit._WidgetBase, evt: Event, searchString: String, numMatches: number)",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onSetStore": "fn()",
          "onShow": "fn()"
        },
        "_Menu": {
          "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
          "prototype": {
            "activated": "bool",
            "set": "fn(property: string, value: bool)",
            "get": "fn(property: string) -> bool",
            "watch": "fn(property: string, callback: ?) -> ret2361",
            "active": "bool",
            "attachScope": "Object",
            "attributeMap": "Object",
            "autoFocus": "bool",
            "baseClass": "string",
            "class": "string",
            "containerNode": "HTMLElement",
            "cssStateNodes": "Object",
            "dir": "string",
            "domNode": "HTMLElement",
            "focused": "bool",
            "focusedChild": "Object",
            "hovering": "bool",
            "id": "string",
            "lang": "string",
            "multiCharSearchDuration": "number",
            "ownerDocument": "Object",
            "parentMenu": "Object",
            "passivePopupDelay": "number",
            "popupDelay": "number",
            "searchContainerNode": "bool",
            "selected": "Object",
            "srcNodeRef": "HTMLElement",
            "style": "string",
            "tabIndex": "string",
            "templatePath": "string",
            "templateString": "string",
            "title": "string",
            "tooltip": "string",
            "addChild": "fn(widget: dijit._WidgetBase, insertIndex?: number)",
            "attr": "fn(name: String, value?: Object) -> ?",
            "buildRendering": "fn()",
            "childSelector": "fn(node: HTMLElement) -> ?",
            "connect": "fn(obj: Object, event: String, method: String) -> ?",
            "connectKeyNavHandlers": "fn(prevKeyCodes: dojo.keys, nextKeyCodes: dojo.keys)",
            "defer": "fn(fcn: Function, delay?: number) -> Object",
            "destroy": "fn(preserveDom?: bool)",
            "destroyDescendants": "fn(preserveDom?: bool)",
            "destroyRecursive": "fn(preserveDom?: bool)",
            "destroyRendering": "fn(preserveDom?: bool)",
            "disconnect": "fn(handle: ?)",
            "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
            "focus": "fn()",
            "focusChild": "fn(widget: dijit._WidgetBase, last: bool)",
            "focusFirstChild": "fn()",
            "focusLastChild": "fn()",
            "focusNext": "fn()",
            "focusPrev": "fn()",
            "getChildren": "fn() -> [?]",
            "getDescendants": "fn() -> [?]",
            "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
            "getParent": "fn() -> ?",
            "hasChildren": "fn() -> bool",
            "isFocusable": "fn() -> ?",
            "isLeftToRight": "fn() -> ?",
            "on": "fn(type: String, func: Function) -> ?",
            "own": "fn() -> ?",
            "placeAt": "fn(reference: String, position?: String) -> ?",
            "postCreate": "fn()",
            "postMixInProperties": "fn()",
            "removeChild": "fn(widget: dijit._WidgetBase)",
            "setAttribute": "fn(attr: String, value: ?)",
            "startup": "fn()",
            "startupKeyNavChildren": "fn()",
            "subscribe": "fn(t: String, method: Function) -> ?",
            "uninitialize": "fn() -> bool",
            "unsubscribe": "fn(handle: Object)",
            "getCachedTemplate": "fn() -> ?",
            "onBlur": "fn()",
            "onCancel": "fn(closeAll: bool)",
            "onClick": "fn(event: ?)",
            "onDblClick": "fn(event: ?)",
            "onExecute": "fn()",
            "onFocus": "fn()",
            "onHide": "fn()",
            "onItemHover": "fn(item: dijit.MenuItem)",
            "onItemUnhover": "fn(item: dijit.MenuItem)",
            "onKeyboardSearch": "fn(item: dijit.MenuItem, evt: Event, searchString: String, numMatches: number)",
            "onKeyDown": "fn(event: ?)",
            "onKeyPress": "fn(event: ?)",
            "onKeyUp": "fn(event: ?)",
            "onMouseDown": "fn(event: ?)",
            "onMouseEnter": "fn(event: ?)",
            "onMouseLeave": "fn(event: ?)",
            "onMouseMove": "fn(event: ?)",
            "onMouseOut": "fn(event: ?)",
            "onMouseOver": "fn(event: ?)",
            "onMouseUp": "fn(event: ?)",
            "onShow": "fn()"
          }
        }
      },
      "TextBox": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret2392",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "dir": "string",
          "disabled": "bool",
          "displayedValue": "string",
          "domNode": "HTMLElement",
          "focused": "bool",
          "hovering": "bool",
          "id": "string",
          "intermediateChanges": "bool",
          "lang": "string",
          "lowercase": "bool",
          "maxLength": "string",
          "name": "string",
          "ownerDocument": "Object",
          "placeHolder": "string",
          "propercase": "bool",
          "readOnly": "bool",
          "scrollOnFocus": "bool",
          "searchContainerNode": "bool",
          "selectOnClick": "bool",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "trim": "bool",
          "type": "string",
          "uppercase": "bool",
          "value": "Object",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "compare": "fn(val1: ?, val2: ?) -> number",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "filter": "fn(val: ?) -> ?",
          "focus": "fn()",
          "format": "fn(value: String, constraints: Object) -> String",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getDisplayedValue": "fn() -> ?",
          "getParent": "fn() -> ?",
          "getValue": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "parse": "fn(value: String, constraints: Object) -> String",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "reset": "fn()",
          "selectInputText": "fn(element: HTMLElement, start: number, stop: number)",
          "setAttribute": "fn(attr: String, value: ?)",
          "setDisabled": "fn(disabled: bool)",
          "setDisplayedValue": "fn(value: String)",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "undo": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onInput": "fn(event: ?)",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "TimeTextBox": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret2432",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "autoWidth": "bool",
          "baseClass": "string",
          "class": "string",
          "constraints": "Object",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "datePackage": "string",
          "dir": "string",
          "disabled": "bool",
          "displayedValue": "string",
          "domNode": "HTMLElement",
          "dropDown": "Object",
          "dropDownDefaultValue": "Date",
          "dropDownPosition": "Object",
          "focused": "bool",
          "forceWidth": "bool",
          "hasDownArrow": "bool",
          "hovering": "bool",
          "id": "string",
          "intermediateChanges": "bool",
          "invalidMessage": "string",
          "lang": "string",
          "lowercase": "bool",
          "maxHeight": "number",
          "maxLength": "string",
          "message": "string",
          "missingMessage": "string",
          "name": "string",
          "ownerDocument": "Object",
          "placeHolder": "string",
          "promptMessage": "string",
          "propercase": "bool",
          "rangeMessage": "string",
          "readOnly": "bool",
          "regExp": "string",
          "required": "bool",
          "scrollOnFocus": "bool",
          "searchContainerNode": "bool",
          "selectOnClick": "bool",
          "srcNodeRef": "HTMLElement",
          "state": "string",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "tooltipPosition": "Object",
          "trim": "bool",
          "type": "string",
          "uppercase": "bool",
          "value": "Date",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "closeDropDown": "fn(focus: bool)",
          "compare": "fn(val1: Date, val2: Date) -> ?",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "displayMessage": "fn(message: String)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "filter": "fn(val: ?) -> ?",
          "focus": "fn()",
          "format": "fn(value: Date, constraints: Object) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getDisplayedValue": "fn() -> ?",
          "getErrorMessage": "fn(isFocused: bool) -> ?",
          "getParent": "fn() -> ?",
          "getPromptMessage": "fn(isFocused: bool) -> ?",
          "getValue": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isInRange": "fn(isFocused: bool) -> ?",
          "isLeftToRight": "fn() -> ?",
          "isLoaded": "fn() -> bool",
          "isValid": {},
          "loadAndOpenDropDown": "fn() -> ?",
          "loadDropDown": "fn(loadCallback: Function)",
          "on": "fn(type: String, func: Function) -> ?",
          "openDropDown": "fn(callback: Function)",
          "own": "fn() -> ?",
          "parse": "fn(value: String, constraints: Object) -> ?",
          "pattern": {},
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "popupClass": {},
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "rangeCheck": "fn(primitive: number, constraints: dijit.form.RangeBoundTextBox.__Constraints) -> bool",
          "regExpGen": "fn(constraints: Object)",
          "reset": "fn()",
          "serialize": "fn(val: ?, options: Object) -> ?",
          "setAttribute": "fn(attr: String, value: ?)",
          "setDisabled": "fn(disabled: bool)",
          "setDisplayedValue": "fn(value: String)",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "toggleDropDown": "fn()",
          "undo": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "validate": "fn() -> ?",
          "validator": "fn(value: ?, constraints: Object) -> ?",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onInput": "fn(event: ?)",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "ToggleButton": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret2490",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "baseClass": "string",
          "checked": "bool",
          "class": "string",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "dir": "string",
          "disabled": "bool",
          "domNode": "HTMLElement",
          "focused": "bool",
          "hovering": "bool",
          "iconClass": "string",
          "id": "string",
          "intermediateChanges": "bool",
          "label": "string",
          "lang": "string",
          "name": "string",
          "ownerDocument": "Object",
          "scrollOnFocus": "bool",
          "searchContainerNode": "bool",
          "showLabel": "bool",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "type": "string",
          "value": "string",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "compare": "fn(val1: ?, val2: ?) -> number",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "focus": "fn()",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "getValue": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "reset": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "setChecked": "fn(checked: bool)",
          "setDisabled": "fn(disabled: bool)",
          "setLabel": "fn(content: String)",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: Event) -> bool",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "VerticalRule": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attachScope": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret2525",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "container": "string",
          "containerNode": "HTMLElement",
          "count": "number",
          "dir": "string",
          "domNode": "HTMLElement",
          "focused": "bool",
          "id": "string",
          "lang": "string",
          "ownerDocument": "Object",
          "ruleStyle": "string",
          "searchContainerNode": "bool",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "VerticalRuleLabels": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attachScope": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret2547",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "constraints": "Object",
          "container": "string",
          "containerNode": "HTMLElement",
          "count": "number",
          "dir": "string",
          "domNode": "HTMLElement",
          "focused": "bool",
          "id": "string",
          "labels": "Object",
          "labelStyle": "string",
          "lang": "string",
          "maximum": "number",
          "minimum": "number",
          "numericMargin": "number",
          "ownerDocument": "Object",
          "ruleStyle": "string",
          "searchContainerNode": "bool",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getLabels": "fn() -> ?",
          "getParent": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "ValidationTextBox": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret2575",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "constraints": "Object",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "dir": "string",
          "disabled": "bool",
          "displayedValue": "string",
          "domNode": "HTMLElement",
          "focused": "bool",
          "hovering": "bool",
          "id": "string",
          "intermediateChanges": "bool",
          "invalidMessage": "string",
          "isValid": "?",
          "lang": "string",
          "lowercase": "bool",
          "maxLength": "string",
          "message": "string",
          "missingMessage": "string",
          "name": "string",
          "ownerDocument": "Object",
          "pattern": "string",
          "placeHolder": "string",
          "promptMessage": "string",
          "propercase": "bool",
          "readOnly": "bool",
          "regExp": "string",
          "required": "bool",
          "scrollOnFocus": "bool",
          "searchContainerNode": "bool",
          "selectOnClick": "bool",
          "srcNodeRef": "HTMLElement",
          "state": "string",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "tooltipPosition": "Object",
          "trim": "bool",
          "type": "string",
          "uppercase": "bool",
          "value": "Object",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "compare": "fn(val1: ?, val2: ?) -> number",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "displayMessage": "fn(message: String)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "filter": "fn(val: ?) -> ?",
          "focus": "fn()",
          "format": "fn(value: String, constraints: Object) -> String",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getDisplayedValue": "fn() -> ?",
          "getErrorMessage": "fn(isFocused: bool) -> ?",
          "getParent": "fn() -> ?",
          "getPromptMessage": "fn(isFocused: bool) -> ?",
          "getValue": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "parse": "fn(value: String, constraints: Object) -> String",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "regExpGen": "fn(constraints: Object)",
          "reset": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "setDisabled": "fn(disabled: bool)",
          "setDisplayedValue": "fn(value: String)",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "undo": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "validate": "fn(isFocused: bool) -> ?",
          "validator": "fn(value: ?, constraints: Object) -> ?",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onInput": "fn(event: ?)",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "VerticalSlider": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret2626",
          "alt": "string",
          "aria-label": "string",
          "attachScope": "Object",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "clickSelect": "bool",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "dir": "string",
          "disabled": "bool",
          "discreteValues": "number",
          "domNode": "HTMLElement",
          "focused": "bool",
          "hovering": "bool",
          "id": "string",
          "intermediateChanges": "bool",
          "lang": "string",
          "maximum": "number",
          "minimum": "number",
          "name": "string",
          "ownerDocument": "Object",
          "pageIncrement": "number",
          "readOnly": "bool",
          "scrollOnFocus": "bool",
          "searchContainerNode": "bool",
          "showButtons": "bool",
          "slideDuration": "number",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "type": "string",
          "value": "number",
          "addChild": "fn(widget: dijit._WidgetBase, insertIndex?: number)",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "compare": "fn(val1: ?, val2: ?) -> number",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn()",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "focus": "fn()",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
          "getParent": "fn() -> ?",
          "getValue": "fn() -> ?",
          "hasChildren": "fn() -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "removeChild": "fn(widget: dijit._WidgetBase)",
          "reset": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "setDisabled": "fn(disabled: bool)",
          "setValue": "fn(value: String)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "undo": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(newValue: ?)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "Slider": {}
    },
    "layout": {
      "_ContentPaneResizeMixin": {
        "!type": "fn()",
        "prototype": {
          "doLayout": "bool",
          "isLayoutContainer": "bool",
          "resize": "fn(changeSize: ?, resultSize: ?)",
          "startup": "fn()"
        }
      },
      "_LayoutWidget": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attributeMap": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret2665",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "dir": "string",
          "domNode": "HTMLElement",
          "focused": "bool",
          "id": "string",
          "isLayoutContainer": "bool",
          "lang": "string",
          "ownerDocument": "Object",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "title": "string",
          "tooltip": "string",
          "addChild": "fn(child: dijit._WidgetBase, insertIndex: number)",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getIndexInParent": "fn() -> ?",
          "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
          "getNextSibling": "fn() -> ?",
          "getParent": "fn() -> ?",
          "getPreviousSibling": "fn() -> ?",
          "hasChildren": "fn() -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "layout": "fn()",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "removeChild": "fn(widget: dijit._WidgetBase)",
          "resize": "fn(changeSize: Object, resultSize: Object)",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "AccordionContainer": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attributeMap": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret2681",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "dir": "string",
          "doLayout": "bool",
          "domNode": "HTMLElement",
          "duration": "number",
          "focused": "bool",
          "id": "string",
          "isLayoutContainer": "bool",
          "lang": "string",
          "ownerDocument": "Object",
          "persist": "bool",
          "selectedChildWidget": "Object",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "title": "string",
          "tooltip": "string",
          "addChild": "fn(child: dijit._WidgetBase, insertIndex: number)",
          "attr": "fn(name: String, value?: Object) -> ?",
          "back": "fn() -> ?",
          "buildRendering": "fn()",
          "buttonWidget": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn()",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "forward": "fn() -> ?",
          "getChildren": "fn() -> ?",
          "getDescendants": "fn() -> [?]",
          "getIndexInParent": "fn() -> ?",
          "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
          "getNextSibling": "fn() -> ?",
          "getParent": "fn() -> ?",
          "getPreviousSibling": "fn() -> ?",
          "hasChildren": "fn() -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "layout": "fn()",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "removeChild": "fn(child: ?)",
          "resize": "fn()",
          "selectChild": "fn(page: dijit._WidgetBase, animate: bool) -> ?",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        },
        "_InnerContainer": {
          "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
          "prototype": {
            "active": "bool",
            "set": "fn(property: string, value: bool)",
            "get": "fn(property: string) -> bool",
            "watch": "fn(property: string, callback: ?) -> ret2701",
            "attributeMap": "Object",
            "baseClass": "string",
            "buttonWidget": "Function",
            "class": "string",
            "containerNode": "HTMLElement",
            "contentWidget": "Object",
            "cssStateNodes": "Object",
            "dir": "string",
            "domNode": "HTMLElement",
            "focused": "bool",
            "hovering": "bool",
            "id": "string",
            "isLayoutContainer": "bool",
            "lang": "string",
            "ownerDocument": "Object",
            "srcNodeRef": "HTMLElement",
            "style": "string",
            "title": "string",
            "tooltip": "string",
            "attr": "fn(name: String, value?: Object) -> ?",
            "buildRendering": "fn()",
            "connect": "fn(obj: Object, event: String, method: String) -> ?",
            "defer": "fn(fcn: Function, delay?: number) -> Object",
            "destroy": "fn()",
            "destroyDescendants": "fn(preserveDom?: bool)",
            "destroyRecursive": "fn(preserveDom?: bool)",
            "destroyRendering": "fn(preserveDom?: bool)",
            "disconnect": "fn(handle: ?)",
            "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
            "getChildren": "fn() -> [?]",
            "getDescendants": "fn() -> [?]",
            "getParent": "fn() -> ?",
            "isFocusable": "fn() -> ?",
            "isLeftToRight": "fn() -> ?",
            "on": "fn(type: String, func: Function) -> ?",
            "own": "fn() -> ?",
            "placeAt": "fn(reference: String, position?: String) -> ?",
            "postCreate": "fn()",
            "postMixInProperties": "fn()",
            "setAttribute": "fn(attr: String, value: ?)",
            "startup": "fn()",
            "subscribe": "fn(t: String, method: Function) -> ?",
            "uninitialize": "fn() -> bool",
            "unsubscribe": "fn(handle: Object)",
            "onBlur": "fn()",
            "onClick": "fn(event: ?)",
            "onClose": "fn() -> bool",
            "onDblClick": "fn(event: ?)",
            "onFocus": "fn()",
            "onHide": "fn()",
            "onKeyDown": "fn(event: ?)",
            "onKeyPress": "fn(event: ?)",
            "onKeyUp": "fn(event: ?)",
            "onMouseDown": "fn(event: ?)",
            "onMouseEnter": "fn(event: ?)",
            "onMouseLeave": "fn(event: ?)",
            "onMouseMove": "fn(event: ?)",
            "onMouseOut": "fn(event: ?)",
            "onMouseOver": "fn(event: ?)",
            "onMouseUp": "fn(event: ?)",
            "onShow": "fn()"
          }
        },
        "_Button": {
          "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
          "prototype": {
            "active": "bool",
            "set": "fn(property: string, value: bool)",
            "get": "fn(property: string) -> bool",
            "watch": "fn(property: string, callback: ?) -> ret2722",
            "attachScope": "Object",
            "attributeMap": "Object",
            "baseClass": "string",
            "class": "string",
            "containerNode": "HTMLElement",
            "cssStateNodes": "Object",
            "dir": "string",
            "domNode": "HTMLElement",
            "focused": "bool",
            "hovering": "bool",
            "iconClassAttr": "string",
            "id": "string",
            "label": "string",
            "lang": "string",
            "ownerDocument": "Object",
            "searchContainerNode": "bool",
            "srcNodeRef": "HTMLElement",
            "style": "string",
            "templatePath": "string",
            "templateString": "string",
            "title": "string",
            "tooltip": "string",
            "attr": "fn(name: String, value?: Object) -> ?",
            "buildRendering": "fn()",
            "connect": "fn(obj: Object, event: String, method: String) -> ?",
            "defer": "fn(fcn: Function, delay?: number) -> Object",
            "destroy": "fn(preserveDom?: bool)",
            "destroyDescendants": "fn(preserveDom?: bool)",
            "destroyRecursive": "fn(preserveDom?: bool)",
            "destroyRendering": "fn(preserveDom?: bool)",
            "disconnect": "fn(handle: ?)",
            "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
            "getChildren": "fn() -> [?]",
            "getDescendants": "fn() -> [?]",
            "getTitleHeight": "fn() -> ?",
            "isFocusable": "fn() -> ?",
            "isLeftToRight": "fn() -> ?",
            "on": "fn(type: String, func: Function) -> ?",
            "own": "fn() -> ?",
            "placeAt": "fn(reference: String, position?: String) -> ?",
            "postCreate": "fn()",
            "postMixInProperties": "fn()",
            "setAttribute": "fn(attr: String, value: ?)",
            "startup": "fn()",
            "subscribe": "fn(t: String, method: Function) -> ?",
            "uninitialize": "fn() -> bool",
            "unsubscribe": "fn(handle: Object)",
            "getCachedTemplate": "fn() -> ?",
            "onBlur": "fn()",
            "onClick": "fn(event: ?)",
            "onClose": "fn() -> bool",
            "onDblClick": "fn(event: ?)",
            "onFocus": "fn()",
            "onHide": "fn()",
            "onKeyDown": "fn(event: ?)",
            "onKeyPress": "fn(event: ?)",
            "onKeyUp": "fn(event: ?)",
            "onMouseDown": "fn(event: ?)",
            "onMouseEnter": "fn(event: ?)",
            "onMouseLeave": "fn(event: ?)",
            "onMouseMove": "fn(event: ?)",
            "onMouseOut": "fn(event: ?)",
            "onMouseOver": "fn(event: ?)",
            "onMouseUp": "fn(event: ?)",
            "onShow": "fn()"
          }
        }
      },
      "_TabContainerBase": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attachScope": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret2746",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "dir": "string",
          "doLayout": "bool",
          "domNode": "HTMLElement",
          "focused": "bool",
          "id": "string",
          "isLayoutContainer": "bool",
          "lang": "string",
          "nested": "bool",
          "ownerDocument": "Object",
          "persist": "bool",
          "searchContainerNode": "bool",
          "selectedChildWidget": "Object",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "tabPosition": "string",
          "tabStrip": "bool",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "addChild": "fn(child: dijit._WidgetBase, insertIndex: number)",
          "attr": "fn(name: String, value?: Object) -> ?",
          "back": "fn() -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: ?)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "forward": "fn() -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getIndexInParent": "fn() -> ?",
          "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
          "getNextSibling": "fn() -> ?",
          "getParent": "fn() -> ?",
          "getPreviousSibling": "fn() -> ?",
          "hasChildren": "fn() -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "layout": "fn()",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "removeChild": "fn(widget: dijit._WidgetBase)",
          "resize": "fn()",
          "selectChild": "fn(page: dijit._WidgetBase, animate: bool) -> ?",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "BorderContainer": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attributeMap": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret2772",
          "baseClass": "string",
          "ChildWidgetProperties": "Object",
          "class": "string",
          "containerNode": "HTMLElement",
          "design": "string",
          "dir": "string",
          "domNode": "HTMLElement",
          "focused": "bool",
          "gutters": "bool",
          "id": "string",
          "isLayoutContainer": "bool",
          "lang": "string",
          "liveSplitters": "bool",
          "ownerDocument": "Object",
          "persist": "bool",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "title": "string",
          "tooltip": "string",
          "addChild": "fn(child: dijit._WidgetBase, insertIndex: number)",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn()",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "getChildren": "fn() -> ?",
          "getDescendants": "fn() -> [?]",
          "getIndexInParent": "fn() -> ?",
          "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
          "getNextSibling": "fn() -> ?",
          "getParent": "fn() -> ?",
          "getPreviousSibling": "fn() -> ?",
          "getSplitter": "fn(region: String) -> ?",
          "hasChildren": "fn() -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "layout": "fn()",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "removeChild": "fn(widget: dijit._WidgetBase)",
          "resize": "fn(newSize: ?, currentSize: ?)",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        },
        "_Gutter": {
          "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
          "prototype": {
            "attachScope": "Object",
            "set": "fn(property: string, value: Object)",
            "get": "fn(property: string) -> Object",
            "watch": "fn(property: string, callback: ?) -> ret2793",
            "attributeMap": "Object",
            "baseClass": "string",
            "class": "string",
            "containerNode": "HTMLElement",
            "dir": "string",
            "domNode": "HTMLElement",
            "focused": "bool",
            "id": "string",
            "lang": "string",
            "ownerDocument": "Object",
            "searchContainerNode": "bool",
            "srcNodeRef": "HTMLElement",
            "style": "string",
            "templatePath": "string",
            "templateString": "string",
            "title": "string",
            "tooltip": "string",
            "attr": "fn(name: String, value?: Object) -> ?",
            "buildRendering": "fn()",
            "connect": "fn(obj: Object, event: String, method: String) -> ?",
            "defer": "fn(fcn: Function, delay?: number) -> Object",
            "destroy": "fn(preserveDom?: bool)",
            "destroyDescendants": "fn(preserveDom?: bool)",
            "destroyRecursive": "fn(preserveDom?: bool)",
            "destroyRendering": "fn(preserveDom?: bool)",
            "disconnect": "fn(handle: ?)",
            "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
            "getChildren": "fn() -> [?]",
            "getDescendants": "fn() -> [?]",
            "getParent": "fn() -> ?",
            "isFocusable": "fn() -> ?",
            "isLeftToRight": "fn() -> ?",
            "on": "fn(type: String, func: Function) -> ?",
            "own": "fn() -> ?",
            "placeAt": "fn(reference: String, position?: String) -> ?",
            "postCreate": "fn()",
            "postMixInProperties": "fn()",
            "setAttribute": "fn(attr: String, value: ?)",
            "startup": "fn()",
            "subscribe": "fn(t: String, method: Function) -> ?",
            "uninitialize": "fn() -> bool",
            "unsubscribe": "fn(handle: Object)",
            "getCachedTemplate": "fn() -> ?",
            "onBlur": "fn()",
            "onClick": "fn(event: ?)",
            "onClose": "fn() -> bool",
            "onDblClick": "fn(event: ?)",
            "onFocus": "fn()",
            "onHide": "fn()",
            "onKeyDown": "fn(event: ?)",
            "onKeyPress": "fn(event: ?)",
            "onKeyUp": "fn(event: ?)",
            "onMouseDown": "fn(event: ?)",
            "onMouseEnter": "fn(event: ?)",
            "onMouseLeave": "fn(event: ?)",
            "onMouseMove": "fn(event: ?)",
            "onMouseOut": "fn(event: ?)",
            "onMouseOver": "fn(event: ?)",
            "onMouseUp": "fn(event: ?)",
            "onShow": "fn()"
          }
        },
        "_Splitter": {
          "!type": "fn()",
          "prototype": {
            "attachScope": "Object",
            "set": "fn(property: string, value: Object)",
            "get": "fn(property: string) -> Object",
            "watch": "fn(property: string, callback: ?) -> ret2812",
            "attributeMap": "Object",
            "baseClass": "string",
            "child": "Object",
            "class": "string",
            "container": "Object",
            "containerNode": "HTMLElement",
            "dir": "string",
            "domNode": "HTMLElement",
            "focused": "bool",
            "id": "string",
            "lang": "string",
            "live": "bool",
            "ownerDocument": "Object",
            "region": "string",
            "searchContainerNode": "bool",
            "srcNodeRef": "HTMLElement",
            "style": "string",
            "templatePath": "string",
            "templateString": "string",
            "title": "string",
            "tooltip": "string",
            "attr": "fn(name: String, value?: Object) -> ?",
            "buildRendering": "fn()",
            "connect": "fn(obj: Object, event: String, method: String) -> ?",
            "defer": "fn(fcn: Function, delay?: number) -> Object",
            "destroy": "fn()",
            "destroyDescendants": "fn(preserveDom?: bool)",
            "destroyRecursive": "fn(preserveDom?: bool)",
            "destroyRendering": "fn(preserveDom?: bool)",
            "disconnect": "fn(handle: ?)",
            "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
            "getChildren": "fn() -> [?]",
            "getDescendants": "fn() -> [?]",
            "getParent": "fn() -> ?",
            "isFocusable": "fn() -> ?",
            "isLeftToRight": "fn() -> ?",
            "on": "fn(type: String, func: Function) -> ?",
            "own": "fn() -> ?",
            "placeAt": "fn(reference: String, position?: String) -> ?",
            "postCreate": "fn()",
            "postMixInProperties": "fn()",
            "setAttribute": "fn(attr: String, value: ?)",
            "startup": "fn()",
            "subscribe": "fn(t: String, method: Function) -> ?",
            "uninitialize": "fn() -> bool",
            "unsubscribe": "fn(handle: Object)",
            "getCachedTemplate": "fn() -> ?",
            "onBlur": "fn()",
            "onClick": "fn(event: ?)",
            "onClose": "fn() -> bool",
            "onDblClick": "fn(event: ?)",
            "onFocus": "fn()",
            "onHide": "fn()",
            "onKeyDown": "fn(event: ?)",
            "onKeyPress": "fn(event: ?)",
            "onKeyUp": "fn(event: ?)",
            "onMouseDown": "fn(event: ?)",
            "onMouseEnter": "fn(event: ?)",
            "onMouseLeave": "fn(event: ?)",
            "onMouseMove": "fn(event: ?)",
            "onMouseOut": "fn(event: ?)",
            "onMouseOver": "fn(event: ?)",
            "onMouseUp": "fn(event: ?)",
            "onShow": "fn()"
          }
        },
        "ChildWidgetProperties": {
          "layoutAlign": "string",
          "layoutPriority": "number",
          "maxSize": "number",
          "minSize": "number",
          "region": "string",
          "splitter": "bool"
        }
      },
      "AccordionPane": {
        "!type": "fn()",
        "prototype": {
          "attributeMap": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret2835",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "content": "string",
          "dir": "string",
          "doLayout": "bool",
          "domNode": "HTMLElement",
          "errorMessage": "string",
          "extractContent": "bool",
          "focused": "bool",
          "href": "string",
          "id": "string",
          "ioArgs": "Object",
          "isLayoutContainer": "bool",
          "isLoaded": "bool",
          "lang": "string",
          "loadingMessage": "string",
          "onLoadDeferred": "Object",
          "ownerDocument": "Object",
          "parseOnLoad": "bool",
          "parserScope": "string",
          "preload": "bool",
          "preventCache": "bool",
          "refreshOnShow": "bool",
          "srcNodeRef": "HTMLElement",
          "stopParser": "bool",
          "style": "string",
          "title": "string",
          "tooltip": "string",
          "addChild": "fn(widget: dijit._WidgetBase, insertIndex?: number)",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "cancel": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "create": "fn(params: ?, srcNodeRef: ?)",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn()",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
          "getParent": "fn() -> ?",
          "hasChildren": "fn() -> bool",
          "ioMethod": "fn(args: Object) -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "markupFactory": "fn(params: ?, node: ?, ctor: ?) -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "refresh": "fn() -> ?",
          "removeChild": "fn(widget: dijit._WidgetBase)",
          "resize": "fn(changeSize: ?, resultSize: ?)",
          "setAttribute": "fn(attr: String, value: ?)",
          "setContent": "fn(data: String)",
          "setHref": "fn(href: String) -> ?",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onContentError": "fn(error: Error)",
          "onDblClick": "fn(event: ?)",
          "onDownloadEnd": "fn()",
          "onDownloadError": "fn(error: Error) -> ?",
          "onDownloadStart": "fn() -> ?",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onLoad": "fn(data: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onSelected": "fn()",
          "onShow": "fn()",
          "onUnload": "fn()"
        }
      },
      "LayoutContainer": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attributeMap": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret2866",
          "baseClass": "string",
          "ChildWidgetProperties": "Object",
          "class": "string",
          "containerNode": "HTMLElement",
          "design": "string",
          "dir": "string",
          "domNode": "HTMLElement",
          "focused": "bool",
          "id": "string",
          "isLayoutContainer": "bool",
          "lang": "string",
          "ownerDocument": "Object",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "title": "string",
          "tooltip": "string",
          "addChild": "fn(child: dijit._WidgetBase, insertIndex: number)",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getIndexInParent": "fn() -> ?",
          "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
          "getNextSibling": "fn() -> ?",
          "getParent": "fn() -> ?",
          "getPreviousSibling": "fn() -> ?",
          "hasChildren": "fn() -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "layout": "fn()",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "removeChild": "fn(widget: dijit._WidgetBase)",
          "resize": "fn(changeSize: Object, resultSize: Object)",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        },
        "ChildWidgetProperties": {
          "layoutAlign": "string",
          "layoutPriority": "number",
          "region": "string"
        }
      },
      "ContentPane": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attributeMap": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret2884",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "content": "string",
          "dir": "string",
          "doLayout": "bool",
          "domNode": "HTMLElement",
          "errorMessage": "string",
          "extractContent": "bool",
          "focused": "bool",
          "href": "string",
          "id": "string",
          "ioArgs": "Object",
          "isLayoutContainer": "bool",
          "isLoaded": "bool",
          "lang": "string",
          "loadingMessage": "string",
          "onLoadDeferred": "Object",
          "ownerDocument": "Object",
          "parseOnLoad": "bool",
          "parserScope": "string",
          "preload": "bool",
          "preventCache": "bool",
          "refreshOnShow": "bool",
          "srcNodeRef": "HTMLElement",
          "stopParser": "bool",
          "style": "string",
          "title": "string",
          "tooltip": "string",
          "addChild": "fn(widget: dijit._WidgetBase, insertIndex?: number)",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "cancel": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "create": "fn(params: ?, srcNodeRef: ?)",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn()",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
          "getParent": "fn() -> ?",
          "hasChildren": "fn() -> bool",
          "ioMethod": "fn(args: Object) -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "markupFactory": "fn(params: ?, node: ?, ctor: ?) -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "refresh": "fn() -> ?",
          "removeChild": "fn(widget: dijit._WidgetBase)",
          "resize": "fn(changeSize: ?, resultSize: ?)",
          "setAttribute": "fn(attr: String, value: ?)",
          "setContent": "fn(data: String)",
          "setHref": "fn(href: String) -> ?",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onContentError": "fn(error: Error)",
          "onDblClick": "fn(event: ?)",
          "onDownloadEnd": "fn()",
          "onDownloadError": "fn(error: Error) -> ?",
          "onDownloadStart": "fn() -> ?",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onLoad": "fn(data: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()",
          "onUnload": "fn()"
        }
      },
      "LinkPane": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attachScope": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret2915",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "content": "string",
          "dir": "string",
          "doLayout": "bool",
          "domNode": "HTMLElement",
          "errorMessage": "string",
          "extractContent": "bool",
          "focused": "bool",
          "href": "string",
          "id": "string",
          "ioArgs": "Object",
          "isLayoutContainer": "bool",
          "isLoaded": "bool",
          "lang": "string",
          "loadingMessage": "string",
          "onLoadDeferred": "Object",
          "ownerDocument": "Object",
          "parseOnLoad": "bool",
          "parserScope": "string",
          "preload": "bool",
          "preventCache": "bool",
          "refreshOnShow": "bool",
          "searchContainerNode": "bool",
          "srcNodeRef": "HTMLElement",
          "stopParser": "bool",
          "style": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "addChild": "fn(widget: dijit._WidgetBase, insertIndex?: number)",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "cancel": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "create": "fn(params: ?, srcNodeRef: ?)",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn()",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
          "getParent": "fn() -> ?",
          "hasChildren": "fn() -> bool",
          "ioMethod": "fn(args: Object) -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "markupFactory": "fn(params: ?, node: ?, ctor: ?) -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "refresh": "fn() -> ?",
          "removeChild": "fn(widget: dijit._WidgetBase)",
          "resize": "fn(changeSize: ?, resultSize: ?)",
          "setAttribute": "fn(attr: String, value: ?)",
          "setContent": "fn(data: String)",
          "setHref": "fn(href: String) -> ?",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onContentError": "fn(error: Error)",
          "onDblClick": "fn(event: ?)",
          "onDownloadEnd": "fn()",
          "onDownloadError": "fn(error: Error) -> ?",
          "onDownloadStart": "fn() -> ?",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onLoad": "fn(data: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()",
          "onUnload": "fn()"
        }
      },
      "ScrollingTabController": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attachScope": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret2950",
          "attributeMap": "Object",
          "baseClass": "string",
          "buttonWidgetCloseClass": "string",
          "class": "string",
          "containerId": "string",
          "containerNode": "HTMLElement",
          "contextRequire": "Function",
          "dir": "string",
          "domNode": "HTMLElement",
          "focused": "bool",
          "id": "string",
          "lang": "string",
          "ownerDocument": "Object",
          "searchContainerNode": "bool",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "tabPosition": "string",
          "tabStripClass": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "useMenu": "bool",
          "useSlider": "bool",
          "widgetsInTemplate": "bool",
          "addChild": "fn(widget: dijit._WidgetBase, insertIndex?: number)",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "buttonWidget": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "createSmoothScroll": "fn(x: number) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: ?)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "doSlide": "fn(direction: number, node: HTMLElement)",
          "doSlideLeft": "fn(e: Event)",
          "doSlideRight": "fn(e: Event)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
          "getParent": "fn() -> ?",
          "hasChildren": "fn() -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "pane2button": "fn(id: String) -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "removeChild": "fn(widget: dijit._WidgetBase)",
          "resize": "fn(dim: ?) -> Object",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onAddChild": "fn(page: ?, insertIndex: ?)",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onRemoveChild": "fn(page: ?, insertIndex: ?)",
          "onSelectChild": "fn(page: dijit._WidgetBase)",
          "onShow": "fn()",
          "onStartup": "fn()"
        }
      },
      "SplitContainer": {
        "!type": "fn()",
        "prototype": {
          "activeSizing": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret2977",
          "attributeMap": "Object",
          "baseClass": "string",
          "ChildWidgetProperties": "Object",
          "class": "string",
          "containerNode": "HTMLElement",
          "dir": "string",
          "domNode": "HTMLElement",
          "focused": "bool",
          "id": "string",
          "isLayoutContainer": "bool",
          "lang": "string",
          "orientation": "string",
          "ownerDocument": "Object",
          "persist": "bool",
          "sizerWidth": "number",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "title": "string",
          "tooltip": "string",
          "addChild": "fn(child: dijit._WidgetBase, insertIndex: number)",
          "attr": "fn(name: String, value?: Object) -> ?",
          "beginSizing": "fn(e: ?, i: ?)",
          "buildRendering": "fn()",
          "changeSizing": "fn(e: ?)",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn()",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "endSizing": "fn()",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getIndexInParent": "fn() -> ?",
          "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
          "getNextSibling": "fn() -> ?",
          "getParent": "fn() -> ?",
          "getPreviousSibling": "fn() -> ?",
          "hasChildren": "fn() -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "layout": "fn()",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "removeChild": "fn(widget: ?)",
          "resize": "fn(changeSize: Object, resultSize: Object)",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        },
        "ChildWidgetProperties": {
          "sizeMin": "number",
          "sizeShare": "number"
        }
      },
      "StackContainer": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attributeMap": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret2998",
          "baseClass": "string",
          "ChildWidgetProperties": "Object",
          "class": "string",
          "containerNode": "HTMLElement",
          "dir": "string",
          "doLayout": "bool",
          "domNode": "HTMLElement",
          "focused": "bool",
          "id": "string",
          "isLayoutContainer": "bool",
          "lang": "string",
          "ownerDocument": "Object",
          "persist": "bool",
          "selectedChildWidget": "Object",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "title": "string",
          "tooltip": "string",
          "addChild": "fn(child: dijit._WidgetBase, insertIndex: number)",
          "attr": "fn(name: String, value?: Object) -> ?",
          "back": "fn() -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "forward": "fn() -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getIndexInParent": "fn() -> ?",
          "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
          "getNextSibling": "fn() -> ?",
          "getParent": "fn() -> ?",
          "getPreviousSibling": "fn() -> ?",
          "hasChildren": "fn() -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "layout": "fn()",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "removeChild": "fn(widget: dijit._WidgetBase)",
          "resize": "fn()",
          "selectChild": "fn(page: dijit._WidgetBase, animate: bool) -> ?",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        },
        "ChildWidgetProperties": {
          "closable": "bool",
          "disabled": "bool",
          "iconClass": "string",
          "selected": "bool",
          "showTitle": "bool"
        }
      },
      "StackController": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attachScope": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret3018",
          "attributeMap": "Object",
          "baseClass": "string",
          "buttonWidgetCloseClass": "string",
          "class": "string",
          "containerId": "string",
          "containerNode": "HTMLElement",
          "dir": "string",
          "domNode": "HTMLElement",
          "focused": "bool",
          "id": "string",
          "lang": "string",
          "ownerDocument": "Object",
          "searchContainerNode": "bool",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "addChild": "fn(widget: dijit._WidgetBase, insertIndex?: number)",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "buttonWidget": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: ?)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
          "getParent": "fn() -> ?",
          "hasChildren": "fn() -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "pane2button": "fn(id: String) -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "removeChild": "fn(widget: dijit._WidgetBase)",
          "setAttribute": "fn(attr: String, value: ?)",
          "StackButton": "fn()",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        },
        "StackButton": {
          "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
          "prototype": {
            "active": "bool",
            "set": "fn(property: string, value: bool)",
            "get": "fn(property: string) -> bool",
            "watch": "fn(property: string, callback: ?) -> ret3039",
            "alt": "string",
            "aria-label": "string",
            "attachScope": "Object",
            "attributeMap": "Object",
            "baseClass": "string",
            "checked": "bool",
            "class": "string",
            "closeButton": "bool",
            "containerNode": "HTMLElement",
            "cssStateNodes": "Object",
            "dir": "string",
            "disabled": "bool",
            "domNode": "HTMLElement",
            "focused": "bool",
            "hovering": "bool",
            "iconClass": "string",
            "id": "string",
            "intermediateChanges": "bool",
            "label": "string",
            "lang": "string",
            "name": "string",
            "ownerDocument": "Object",
            "scrollOnFocus": "bool",
            "searchContainerNode": "bool",
            "showLabel": "bool",
            "srcNodeRef": "HTMLElement",
            "style": "string",
            "tabIndex": "string",
            "templatePath": "string",
            "templateString": "string",
            "title": "string",
            "tooltip": "string",
            "type": "string",
            "value": "string",
            "attr": "fn(name: String, value?: Object) -> ?",
            "buildRendering": "fn(evt?: Event)",
            "compare": "fn(val1: ?, val2: ?) -> number",
            "connect": "fn(obj: Object, event: String, method: String) -> ?",
            "defer": "fn(fcn: Function, delay?: number) -> Object",
            "destroy": "fn(preserveDom?: bool)",
            "destroyDescendants": "fn(preserveDom?: bool)",
            "destroyRecursive": "fn(preserveDom?: bool)",
            "destroyRendering": "fn(preserveDom?: bool)",
            "disconnect": "fn(handle: ?)",
            "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
            "focus": "fn()",
            "getChildren": "fn() -> [?]",
            "getDescendants": "fn() -> [?]",
            "getParent": "fn() -> ?",
            "getValue": "fn() -> ?",
            "isFocusable": "fn() -> ?",
            "isLeftToRight": "fn() -> ?",
            "on": "fn(type: String, func: Function) -> ?",
            "own": "fn() -> ?",
            "placeAt": "fn(reference: String, position?: String) -> ?",
            "postCreate": "fn()",
            "postMixInProperties": "fn()",
            "reset": "fn()",
            "setAttribute": "fn(attr: String, value: ?)",
            "setChecked": "fn(checked: bool)",
            "setDisabled": "fn(disabled: bool)",
            "setLabel": "fn(content: String)",
            "setValue": "fn(value: String)",
            "startup": "fn()",
            "subscribe": "fn(t: String, method: Function) -> ?",
            "uninitialize": "fn() -> bool",
            "unsubscribe": "fn(handle: Object)",
            "getCachedTemplate": "fn() -> ?",
            "onBlur": "fn()",
            "onChange": "fn(newValue: ?)",
            "onClick": "fn(event: Event) -> bool",
            "onClose": "fn() -> bool",
            "onDblClick": "fn(event: ?)",
            "onFocus": "fn()",
            "onHide": "fn()",
            "onKeyDown": "fn(event: ?)",
            "onKeyPress": "fn(event: ?)",
            "onKeyUp": "fn(event: ?)",
            "onMouseDown": "fn(event: ?)",
            "onMouseEnter": "fn(event: ?)",
            "onMouseLeave": "fn(event: ?)",
            "onMouseMove": "fn(event: ?)",
            "onMouseOut": "fn(event: ?)",
            "onMouseOver": "fn(event: ?)",
            "onMouseUp": "fn(event: ?)",
            "onShow": "fn()"
          }
        }
      },
      "TabContainer": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attachScope": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret3075",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "controllerWidget": "Object",
          "dir": "string",
          "doLayout": "bool",
          "domNode": "HTMLElement",
          "focused": "bool",
          "id": "string",
          "isLayoutContainer": "bool",
          "lang": "string",
          "nested": "bool",
          "ownerDocument": "Object",
          "persist": "bool",
          "searchContainerNode": "bool",
          "selectedChildWidget": "Object",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "tabPosition": "string",
          "tabStrip": "bool",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "useMenu": "bool",
          "useSlider": "bool",
          "addChild": "fn(child: dijit._WidgetBase, insertIndex: number)",
          "attr": "fn(name: String, value?: Object) -> ?",
          "back": "fn() -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: ?)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "forward": "fn() -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getIndexInParent": "fn() -> ?",
          "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
          "getNextSibling": "fn() -> ?",
          "getParent": "fn() -> ?",
          "getPreviousSibling": "fn() -> ?",
          "hasChildren": "fn() -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "layout": "fn()",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "removeChild": "fn(widget: dijit._WidgetBase)",
          "resize": "fn()",
          "selectChild": "fn(page: dijit._WidgetBase, animate: bool) -> ?",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "TabController": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attachScope": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret3104",
          "attributeMap": "Object",
          "baseClass": "string",
          "buttonWidgetCloseClass": "string",
          "class": "string",
          "containerId": "string",
          "containerNode": "HTMLElement",
          "dir": "string",
          "domNode": "HTMLElement",
          "focused": "bool",
          "id": "string",
          "lang": "string",
          "ownerDocument": "Object",
          "searchContainerNode": "bool",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "tabPosition": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "addChild": "fn(widget: dijit._WidgetBase, insertIndex?: number)",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "buttonWidget": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: ?)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
          "getParent": "fn() -> ?",
          "hasChildren": "fn() -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "pane2button": "fn(id: String) -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "removeChild": "fn(widget: dijit._WidgetBase)",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "TabButton": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        },
        "TabButton": {
          "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
          "prototype": {
            "active": "bool",
            "set": "fn(property: string, value: bool)",
            "get": "fn(property: string) -> bool",
            "watch": "fn(property: string, callback: ?) -> ret3126",
            "alt": "string",
            "aria-label": "string",
            "attachScope": "Object",
            "attributeMap": "Object",
            "baseClass": "string",
            "checked": "bool",
            "class": "string",
            "closeButton": "bool",
            "containerNode": "HTMLElement",
            "cssStateNodes": "Object",
            "dir": "string",
            "disabled": "bool",
            "domNode": "HTMLElement",
            "focused": "bool",
            "hovering": "bool",
            "iconClass": "string",
            "id": "string",
            "intermediateChanges": "bool",
            "label": "string",
            "lang": "string",
            "name": "string",
            "ownerDocument": "Object",
            "scrollOnFocus": "bool",
            "searchContainerNode": "bool",
            "showLabel": "bool",
            "srcNodeRef": "HTMLElement",
            "style": "string",
            "tabIndex": "string",
            "templatePath": "string",
            "templateString": "string",
            "title": "string",
            "tooltip": "string",
            "type": "string",
            "value": "string",
            "attr": "fn(name: String, value?: Object) -> ?",
            "buildRendering": "fn()",
            "compare": "fn(val1: ?, val2: ?) -> number",
            "connect": "fn(obj: Object, event: String, method: String) -> ?",
            "defer": "fn(fcn: Function, delay?: number) -> Object",
            "destroy": "fn(preserveDom?: bool)",
            "destroyDescendants": "fn(preserveDom?: bool)",
            "destroyRecursive": "fn(preserveDom?: bool)",
            "destroyRendering": "fn(preserveDom?: bool)",
            "disconnect": "fn(handle: ?)",
            "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
            "focus": "fn()",
            "getChildren": "fn() -> [?]",
            "getDescendants": "fn() -> [?]",
            "getParent": "fn() -> ?",
            "getValue": "fn() -> ?",
            "isFocusable": "fn() -> ?",
            "isLeftToRight": "fn() -> ?",
            "on": "fn(type: String, func: Function) -> ?",
            "own": "fn() -> ?",
            "placeAt": "fn(reference: String, position?: String) -> ?",
            "postCreate": "fn()",
            "postMixInProperties": "fn()",
            "reset": "fn()",
            "setAttribute": "fn(attr: String, value: ?)",
            "setChecked": "fn(checked: bool)",
            "setDisabled": "fn(disabled: bool)",
            "setLabel": "fn(content: String)",
            "setValue": "fn(value: String)",
            "startup": "fn()",
            "subscribe": "fn(t: String, method: Function) -> ?",
            "uninitialize": "fn() -> bool",
            "unsubscribe": "fn(handle: Object)",
            "getCachedTemplate": "fn() -> ?",
            "onBlur": "fn()",
            "onChange": "fn(newValue: ?)",
            "onClick": "fn(event: Event) -> bool",
            "onClose": "fn() -> bool",
            "onDblClick": "fn(event: ?)",
            "onFocus": "fn()",
            "onHide": "fn()",
            "onKeyDown": "fn(event: ?)",
            "onKeyPress": "fn(event: ?)",
            "onKeyUp": "fn(event: ?)",
            "onMouseDown": "fn(event: ?)",
            "onMouseEnter": "fn(event: ?)",
            "onMouseLeave": "fn(event: ?)",
            "onMouseMove": "fn(event: ?)",
            "onMouseOut": "fn(event: ?)",
            "onMouseOver": "fn(event: ?)",
            "onMouseUp": "fn(event: ?)",
            "onShow": "fn()"
          }
        }
      },
      "utils": {
        "layoutChildren": "fn(container: HTMLElement, dim: Object, children: [dijit._WidgetBase], changedRegionId: String, changedRegionSize: number)",
        "marginBox2contentBox": "fn(node: HTMLElement, mb: Object) -> Object"
      }
    },
    "robot": {},
    "robotx": {},
    "tree": {
      "_dndContainer": {
        "!type": "fn(tree: HTMLElement, params: Object)",
        "prototype": {
          "current": "Object",
          "destroy": "fn()",
          "onMouseOut": "fn(widget: dijit.Tree._TreeNode, evt: Event)",
          "onMouseOver": "fn(widget: dijit.Tree._TreeNode, evt: Event)",
          "onOutEvent": "fn()",
          "onOverEvent": "fn()"
        }
      },
      "_dndSelector": {
        "!type": "fn()",
        "prototype": {
          "current": "Object",
          "selection": "Object",
          "singular": "bool",
          "addTreeNode": "fn(node: HTMLElement, isAnchor: bool) -> HTMLElement",
          "destroy": "fn()",
          "forInSelectedItems": "fn(f: Function, o: Object)",
          "getItem": "fn(key: String) -> Object",
          "getSelectedTreeNodes": "fn() -> [?]",
          "isTreeNodeSelected": "fn(node: HTMLElement) -> ?",
          "removeTreeNode": "fn(node: HTMLElement) -> HTMLElement",
          "setSelection": "fn(newSelection: [HTMLElement])",
          "userSelect": "fn(node: ?, multi: bool, range: bool)",
          "onClickPress": "fn(e: Event)",
          "onClickRelease": "fn(e: Event)",
          "onMouseDown": "fn()",
          "onMouseMove": "fn(e: Event)",
          "onMouseOut": "fn(widget: dijit.Tree._TreeNode, evt: Event)",
          "onMouseOver": "fn(widget: dijit.Tree._TreeNode, evt: Event)",
          "onMouseUp": "fn()",
          "onOutEvent": "fn()",
          "onOverEvent": "fn()"
        }
      },
      "dndSource": {
        "!type": "fn(tree: dijit.Tree, params: dijit.tree.dndSource)",
        "prototype": {
          "accept": "Object",
          "betweenThreshold": "number",
          "current": "Object",
          "dragThreshold": "number",
          "generateText": "bool",
          "isSource": "bool",
          "selection": "Object",
          "singular": "bool",
          "addTreeNode": "fn(node: HTMLElement, isAnchor: bool) -> HTMLElement",
          "checkAcceptance": "fn(source: dijit.tree.dndSource, nodes: [HTMLElement]) -> bool",
          "checkItemAcceptance": "fn(target: HTMLElement, source: dijit.tree.dndSource, position: String) -> bool",
          "copyState": "fn(keyPressed: bool) -> ?",
          "destroy": "fn()",
          "forInSelectedItems": "fn(f: Function, o: Object)",
          "getItem": "fn(key: String) -> Object",
          "getSelectedTreeNodes": "fn() -> [?]",
          "isTreeNodeSelected": "fn(node: HTMLElement) -> ?",
          "itemCreator": "fn(nodes: [HTMLElement], target: HTMLElement, source: dojo.dnd.Source) -> ?",
          "removeTreeNode": "fn(node: HTMLElement) -> HTMLElement",
          "setSelection": "fn(newSelection: [HTMLElement])",
          "userSelect": "fn(node: ?, multi: bool, range: bool)",
          "onClickPress": "fn(e: Event)",
          "onClickRelease": "fn(e: Event)",
          "onDndDrop": "fn(source: Object, nodes: [HTMLElement], copy: bool)",
          "onMouseOver": "fn(widget: dijit.Tree._TreeNode, evt: Event)"
        },
        "__Item": {
          "id": "Object",
          "name": "string"
        }
      },
      "model": {
        "!type": "fn()",
        "prototype": {
          "destroy": "fn()",
          "getChildren": "fn(parentItem: dojo.data.api.Item, onComplete: ?)",
          "getIdentity": "fn(item: ?)",
          "getLabel": "fn(item: ?)",
          "getRoot": "fn(onItem: ?)",
          "isItem": "fn(something: ?)",
          "mayHaveChildren": "fn(item: dojo.data.api.Item)",
          "newItem": "fn(args: dijit.tree.dndSource.__Item, parent: ?, insertIndex: number, before: ?)",
          "pasteItem": "fn(childItem: ?, oldParentItem: ?, newParentItem: ?, bCopy: bool, insertIndex: number, before: ?)",
          "onChange": "fn(item: dojo.data.api.Item)",
          "onChildrenChange": "fn(parent: dojo.data.api.Item, newChildrenList: [dojo.data.api.Item])"
        }
      },
      "ForestStoreModel": {
        "!type": "fn(params: ?)",
        "prototype": {
          "childrenAttrs": "Object",
          "deferItemLoadingUntilExpand": "bool",
          "labelAttr": "string",
          "newItemIdAttr": "string",
          "query": "string",
          "root": "Object",
          "rootId": "string",
          "rootLabel": "string",
          "store": "Object",
          "destroy": "fn()",
          "fetchItemByIdentity": "fn(keywordArgs: Object)",
          "getChildren": "fn(parentItem: dojo.data.api.Item, callback: ?, onError: Function)",
          "getIdentity": "fn(item: ?) -> ?",
          "getLabel": "fn(item: ?) -> ?",
          "getRoot": "fn(onItem: ?, onError: ?)",
          "isItem": "fn(something: ?) -> bool",
          "mayHaveChildren": "fn(item: dojo.data.api.Item) -> bool",
          "newItem": "fn(args: dijit.tree.dndSource.__Item, parent: ?, insertIndex: number) -> ?",
          "pasteItem": "fn(childItem: ?, oldParentItem: ?, newParentItem: ?, bCopy: bool, insertIndex: number)",
          "onAddToRoot": "fn(item: ?)",
          "onChange": "fn(item: dojo.data.api.Item)",
          "onChildrenChange": "fn(parent: dojo.data.api.Item, newChildrenList: [dojo.data.api.Item])",
          "onDelete": "fn(item: dojo.data.api.Item)",
          "onDeleteItem": "fn(item: Object)",
          "onLeaveRoot": "fn(item: ?)",
          "onNewItem": "fn(item: dojo.data.api.Item, parentInfo: Object)",
          "onNewRootItem": "fn(args: dijit.tree.dndSource.__Item)",
          "onSetItem": "fn(item: ?, attribute: String, oldValue: Object, newValue: Object)"
        }
      },
      "ObjectStoreModel": {
        "!type": "fn(args: Object)",
        "prototype": {
          "labelAttr": "string",
          "labelType": "string",
          "query": "Object",
          "root": "Object",
          "store": "Object",
          "destroy": "fn()",
          "getChildren": "fn(parentItem: Object, onComplete: ?, onError: Function)",
          "getIdentity": "fn(item: ?) -> ?",
          "getLabel": "fn(item: dojo.data.api.Item) -> ?",
          "getRoot": "fn(onItem: ?, onError: ?)",
          "isItem": "fn(something: ?) -> bool",
          "mayHaveChildren": "fn(item: Object) -> bool",
          "newItem": "fn(args: dijit.tree.dndSource.__Item, parent: ?, insertIndex: number, before: ?) -> ?",
          "pasteItem": "fn(childItem: ?, oldParentItem: ?, newParentItem: ?, bCopy: bool, insertIndex: number, before: ?) -> ?",
          "onChange": "fn(item: dojo.data.api.Item)",
          "onChildrenChange": "fn(parent: dojo.data.api.Item, newChildrenList: [Object])",
          "onDelete": "fn(item: dojo.data.api.Item)"
        }
      },
      "TreeStoreModel": {
        "!type": "fn(args: Object)",
        "prototype": {
          "childrenAttrs": "Object",
          "deferItemLoadingUntilExpand": "bool",
          "labelAttr": "string",
          "newItemIdAttr": "string",
          "query": "Object",
          "root": "Object",
          "store": "Object",
          "destroy": "fn()",
          "fetchItemByIdentity": "fn(keywordArgs: Object)",
          "getChildren": "fn(parentItem: dojo.data.api.Item, onComplete: ?, onError: Function)",
          "getIdentity": "fn(item: ?) -> ?",
          "getLabel": "fn(item: dojo.data.api.Item) -> ?",
          "getRoot": "fn(onItem: ?, onError: ?)",
          "isItem": "fn(something: ?) -> ?",
          "mayHaveChildren": "fn(item: dojo.data.api.Item) -> ?",
          "newItem": "fn(args: dijit.tree.dndSource.__Item, parent: dojo.data.api.Item, insertIndex: number)",
          "pasteItem": "fn(childItem: ?, oldParentItem: ?, newParentItem: ?, bCopy: bool, insertIndex: number)",
          "onChange": "fn(item: dojo.data.api.Item)",
          "onChildrenChange": "fn(parent: dojo.data.api.Item, newChildrenList: [dojo.data.api.Item])",
          "onDelete": "fn(item: dojo.data.api.Item)",
          "onDeleteItem": "fn(item: Object)",
          "onNewItem": "fn(item: dojo.data.api.Item, parentInfo: Object)",
          "onSetItem": "fn(item: ?, attribute: ?, oldValue: Object, newValue: Object)"
        }
      }
    },
    "_base": {
      "focus": {
        "getBookmark": "fn() -> ?",
        "getFocus": "fn(menu: dijit._WidgetBase, openedForWindow: Window) -> ?",
        "isCollapsed": "fn() -> ?",
        "moveToBookmark": "fn(bookmark: Object) -> ?",
        "registerIframe": "fn(iframe: HTMLElement) -> ?",
        "registerWin": "fn(targetWindow: Window, effectiveNode: HTMLElement) -> ?",
        "unregisterIframe": "fn(handle: Object)",
        "unregisterWin": "fn(handle: Object)"
      },
      "manager": {
        "defaultDuration": "number"
      },
      "popup": {},
      "place": {
        "getPopupAroundAlignment": "fn(position: [String], leftToRight: bool)",
        "getViewport": "fn()",
        "placeOnScreen": "fn(node: HTMLElement, pos: dijit.place.__Position, corners: [String], padding: dijit.place.__Position, layoutNode: ?) -> ?",
        "placeOnScreenAroundElement": "fn(node: ?, aroundNode: ?, aroundCorners: ?, layoutNode: ?)",
        "placeOnScreenAroundNode": "fn(node: ?, aroundNode: ?, aroundCorners: ?, layoutNode: ?)",
        "placeOnScreenAroundRectangle": "fn(node: ?, aroundRect: ?, aroundCorners: ?, layoutNode: ?)"
      },
      "scroll": {},
      "wai": {
        "getWaiRole": "fn(elem: HTMLElement) -> ?",
        "getWaiState": "fn(elem: HTMLElement, state: String) -> ?",
        "hasWaiRole": "fn(elem: HTMLElement, role: String) -> ?",
        "hasWaiState": "fn(elem: HTMLElement, state: String) -> ?",
        "removeWaiRole": "fn(elem: HTMLElement, role: String)",
        "removeWaiState": "fn(elem: HTMLElement, state: String)",
        "setWaiRole": "fn(elem: HTMLElement, role: String)",
        "setWaiState": "fn(elem: HTMLElement, state: String, value: String)"
      },
      "typematic": {},
      "window": {},
      "sniff": {}
    },
    "_BidiMixin": {
      "textDir": "string",
      "applyTextDir": "fn(element: HTMLElement, text: String)",
      "enforceTextDirWithUcc": "fn(option: ?, text: ?) -> String",
      "getTextDir": "fn(text: String) -> ?",
      "restoreOriginalText": "fn(origObj: ?) -> ?"
    },
    "_Calendar": {},
    "a11yclick": {
      "click": "fn(node: ?, listener: ?)",
      "move": "fn(node: ?, listener: ?)",
      "press": "fn(node: ?, listener: ?)",
      "release": "fn(node: ?, listener: ?)"
    },
    "a11y": {
      "effectiveTabIndex": "fn(elem: HTMLElement) -> ?",
      "getFirstInTabbingOrder": "fn(root: String, doc: HTMLDocument) -> ?",
      "getLastInTabbingOrder": "fn(root: String, doc: HTMLDocument) -> ?",
      "hasDefaultTabStop": "fn(elem: HTMLElement) -> ?",
      "isFocusable": "fn(elem: HTMLElement) -> bool",
      "isTabNavigable": "fn(elem: HTMLElement) -> bool"
    },
    "dijit": {},
    "dijit_all": {},
    "main": {
      "defaultDuration": "number",
      "place": {
        "around": "fn(node: HTMLElement, anchor: HTMLElement, positions: [String], leftToRight: bool, layoutNode: Function) -> ?",
        "at": "fn(node: HTMLElement, pos: dijit.place.__Position, corners: [String], padding: dijit.place.__Position, layoutNode: ?) -> ?"
      },
      "popup": "Object",
      "registry": {
        "length": "number",
        "add": "fn(widget: dijit._WidgetBase)",
        "byId": "fn(id: String) -> dijit._WidgetBase",
        "byNode": "fn(node: HTMLElement) -> ?",
        "findWidgets": "fn(root: HTMLElement, skipNode: HTMLElement) -> [?]",
        "getEnclosingWidget": "fn(node: HTMLElement) -> ?",
        "getUniqueId": "fn(widgetType: String) -> String",
        "remove": "fn(id: String)",
        "toArray": "fn() -> [?]"
      },
      "typematic": {
        "addKeyListener": "fn(node: HTMLElement, keyObject: Object, _this: Object, callback: Function, subsequentDelay: number, initialDelay: number, minDelay: number) -> ?",
        "addListener": "fn(mouseNode: HTMLElement, keyNode: HTMLElement, keyObject: Object, _this: Object, callback: Function, subsequentDelay: number, initialDelay: number, minDelay: number) -> ?",
        "addMouseListener": "fn(node: HTMLElement, _this: Object, callback: Function, subsequentDelay: number, initialDelay: number, minDelay: number) -> ?",
        "stop": "fn()",
        "trigger": "fn(evt: Event, _this: Object, node: HTMLElement, callback: Function, obj: Object, subsequentDelay: number, initialDelay: number, minDelay: number)"
      },
      "BackgroundIframe": "fn(node: HTMLElement)",
      "effectiveTabIndex": "fn(elem: HTMLElement) -> ?",
      "focus": "fn(node: ?)",
      "getBookmark": "fn() -> ?",
      "getDocumentWindow": "fn(doc: ?)",
      "getFirstInTabbingOrder": "fn(root: String, doc: HTMLDocument) -> ?",
      "getFocus": "fn(menu: dijit._WidgetBase, openedForWindow: Window) -> ?",
      "getLastInTabbingOrder": "fn(root: String, doc: HTMLDocument) -> ?",
      "getPopupAroundAlignment": "fn(position: [String], leftToRight: bool)",
      "getViewport": "fn()",
      "getWaiRole": "fn(elem: HTMLElement) -> ?",
      "getWaiState": "fn(elem: HTMLElement, state: String) -> ?",
      "hasDefaultTabStop": "fn(elem: HTMLElement) -> ?",
      "hasWaiRole": "fn(elem: HTMLElement, role: String) -> ?",
      "hasWaiState": "fn(elem: HTMLElement, state: String) -> ?",
      "hideTooltip": "fn(aroundNode: ?) -> ?",
      "isCollapsed": "fn() -> ?",
      "isFocusable": "fn(elem: HTMLElement) -> bool",
      "isTabNavigable": "fn(elem: HTMLElement) -> bool",
      "moveToBookmark": "fn(bookmark: Object) -> ?",
      "placeOnScreen": "fn(node: HTMLElement, pos: dijit.place.__Position, corners: [String], padding: dijit.place.__Position, layoutNode: ?) -> ?",
      "placeOnScreenAroundElement": "fn(node: ?, aroundNode: ?, aroundCorners: ?, layoutNode: ?)",
      "placeOnScreenAroundNode": "fn(node: ?, aroundNode: ?, aroundCorners: ?, layoutNode: ?)",
      "placeOnScreenAroundRectangle": "fn(node: ?, aroundRect: ?, aroundCorners: ?, layoutNode: ?)",
      "registerIframe": "fn(iframe: HTMLElement) -> ?",
      "registerWin": "fn(targetWindow: Window, effectiveNode: HTMLElement) -> ?",
      "removeWaiRole": "fn(elem: HTMLElement, role: String)",
      "removeWaiState": "fn(elem: HTMLElement, state: String)",
      "scrollIntoView": "fn(node: HTMLElement, pos: Object)",
      "selectInputText": "fn(element: HTMLElement, start: number, stop: number)",
      "setWaiRole": "fn(elem: HTMLElement, role: String)",
      "setWaiState": "fn(elem: HTMLElement, state: String, value: String)",
      "showTooltip": "fn(innerHTML: String, aroundNode: Object, position: [String], rtl: bool, textDir: String) -> ?",
      "unregisterIframe": "fn(handle: Object)",
      "unregisterWin": "fn(handle: Object)",
      "_Calendar": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "a11yclick": "Object",
          "active": "bool",
          "set": "fn(property: string, value: bool)",
          "get": "fn(property: string) -> bool",
          "watch": "fn(property: string, callback: ?) -> ret3162",
          "attachScope": "Object",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "cssStateNodes": "Object",
          "currentFocus": "Date",
          "datePackage": "string",
          "dateTemplateString": "string",
          "dayWidth": "string",
          "dir": "string",
          "dndType": "string",
          "domNode": "HTMLElement",
          "dowTemplateString": "string",
          "focused": "bool",
          "hovering": "bool",
          "id": "string",
          "lang": "string",
          "observer": "string",
          "ownerDocument": "Object",
          "searchContainerNode": "bool",
          "slideFrom": "string",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "tabIndex": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "value": "Date",
          "weekTemplateString": "string",
          "attr": "fn(name: String, value?: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay?: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom?: bool)",
          "destroyRecursive": "fn(preserveDom?: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj?: Object, callbackArgs?: [?]) -> ?",
          "focus": "fn()",
          "getChildren": "fn() -> [?]",
          "getClassForDate": "fn(dateObject: Date, locale: String) -> String",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "goToToday": "fn()",
          "handleKey": "fn(evt: Event) -> ?",
          "isDisabledDate": "fn(dateObject: Date, locale: String) -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position?: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "setValue": "fn(value: Date)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "getCachedTemplate": "fn() -> ?",
          "onBlur": "fn()",
          "onChange": "fn(value: ?)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()",
          "onValueSelected": "fn(date: Date)"
        }
      }
    },
    "place": {
      "around": "fn(node: HTMLElement, anchor: HTMLElement, positions: [String], leftToRight: bool, layoutNode: Function) -> ?",
      "at": "fn(node: HTMLElement, pos: dijit.place.__Position, corners: [String], padding: dijit.place.__Position, layoutNode: ?) -> ?",
      "__Position": {
        "x": "number",
        "y": "number"
      },
      "__Rectangle": {
        "h": "number",
        "w": "number",
        "x": "number",
        "y": "number"
      }
    },
    "registry": {
      "length": "number",
      "add": "fn(widget: dijit._WidgetBase)",
      "byId": "fn(id: String) -> dijit._WidgetBase",
      "byNode": "fn(node: HTMLElement) -> ?",
      "findWidgets": "fn(root: HTMLElement, skipNode: HTMLElement) -> [?]",
      "getEnclosingWidget": "fn(node: HTMLElement) -> ?",
      "getUniqueId": "fn(widgetType: String) -> String",
      "remove": "fn(id: String)",
      "toArray": "fn() -> [?]",
      "_hash": {}
    },
    "typematic": {
      "addKeyListener": "fn(node: HTMLElement, keyObject: Object, _this: Object, callback: Function, subsequentDelay: number, initialDelay: number, minDelay: number) -> ?",
      "addListener": "fn(mouseNode: HTMLElement, keyNode: HTMLElement, keyObject: Object, _this: Object, callback: Function, subsequentDelay: number, initialDelay: number, minDelay: number) -> ?",
      "addMouseListener": "fn(node: HTMLElement, _this: Object, callback: Function, subsequentDelay: number, initialDelay: number, minDelay: number) -> ?",
      "stop": "fn()",
      "trigger": "fn(evt: Event, _this: Object, node: HTMLElement, callback: Function, obj: Object, subsequentDelay: number, initialDelay: number, minDelay: number)"
    },
    "Viewport": {}
  },
  "dijit/_BidiSupport": "exp",
  "dijit/BackgroundIframe": "exp",
  "dijit/hccss": "exp",
  "dijit/_base": "exp",
  "dijit/_base/popup": "exp",
  "dijit/_base/manager": "exp",
  "dijit/_base/place": "exp",
  "dijit/_base/focus": "exp",
  "dijit/_base/scroll": "exp",
  "dijit/_base/sniff": "exp",
  "dijit/_base/typematic": "exp",
  "dijit/_base/window": "exp",
  "dijit/_base/wai": "exp",
  "dijit/_BidiMixin": "exp",
  "dijit/_Calendar": "exp",
  "dijit/a11y": "exp",
  "dijit/a11yclick": "exp",
  "dijit/dijit": "exp",
  "dijit/dijit-all": "exp",
  "dijit/main": "exp",
  "dijit/main._Calendar": "exp",
  "dijit/main.place": "exp",
  "dijit/main.typematic": "exp",
  "dijit/main.registry": "exp",
  "dijit/place": "exp",
  "dijit/place.__Rectangle": "exp",
  "dijit/place.__Position": "exp",
  "dijit/registry": "exp",
  "dijit/registry._hash": "exp",
  "dijit/typematic": "exp",
  "dijit/Viewport": "exp",
  "dijit/_AttachMixin": "exp",
  "dijit/_Contained": "exp",
  "dijit/_Container": "exp",
  "dijit/_DialogMixin": "exp",
  "dijit/_CssStateMixin": "exp",
  "dijit/_FocusMixin": "exp",
  "dijit/_HasDropDown": "exp",
  "dijit/_KeyNavMixin": "exp",
  "dijit/_KeyNavContainer": "exp",
  "dijit/_OnDijitClickMixin": "exp",
  "dijit/_OnDijitClickMixin.a11yclick": "exp",
  "dijit/_Templated": "exp",
  "dijit/_TemplatedMixin": "exp",
  "dijit/_TemplatedMixin._templateCache": "exp",
  "dijit/_PaletteMixin": "exp",
  "dijit/_PaletteMixin.__Dye": "exp",
  "dijit/_MenuBase": "exp",
  "dijit/_TimePicker": "exp",
  "dijit/_TimePicker.__Constraints": "exp",
  "dijit/_WidgetsInTemplateMixin": "exp",
  "dijit/_WidgetBase": "exp",
  "dijit/_Widget": "exp",
  "dijit/Destroyable": "exp",
  "dijit/Calendar": "exp",
  "dijit/Calendar._MonthDropDown": "exp",
  "dijit/Calendar._MonthDropDownButton": "exp",
  "dijit/CalendarLite": "exp",
  "dijit/CalendarLite._MonthWidget": "exp",
  "dijit/CheckedMenuItem": "exp",
  "dijit/ColorPalette": "exp",
  "dijit/ColorPalette._Color": "exp",
  "dijit/Declaration": "exp",
  "dijit/DialogUnderlay": "exp",
  "dijit/DropDownMenu": "exp",
  "dijit/Dialog": "exp",
  "dijit/Dialog._DialogBase": "exp",
  "dijit/Dialog._DialogLevelManager": "exp",
  "dijit/Editor": "exp",
  "dijit/Fieldset": "exp",
  "dijit/InlineEditBox": "exp",
  "dijit/InlineEditBox._InlineEditor": "exp",
  "dijit/Menu": "exp",
  "dijit/MenuBarItem": "exp",
  "dijit/MenuBarItem._MenuBarItemMixin": "exp",
  "dijit/MenuSeparator": "exp",
  "dijit/MenuItem": "exp",
  "dijit/MenuBar": "exp",
  "dijit/PopupMenuBarItem": "exp",
  "dijit/ProgressBar": "exp",
  "dijit/RadioMenuItem": "exp",
  "dijit/PopupMenuItem": "exp",
  "dijit/TitlePane": "exp",
  "dijit/Toolbar": "exp",
  "dijit/Tooltip": "exp",
  "dijit/Tooltip._MasterTooltip": "exp",
  "dijit/ToolbarSeparator": "exp",
  "dijit/WidgetSet": "exp",
  "dijit/TooltipDialog": "exp",
  "dijit/Tree": "exp",
  "dijit/Tree._TreeNode": "exp",
  "dijit/_editor/html": "exp",
  "dijit/_editor/range": "exp",
  "dijit/_editor/range.W3CRange": "exp",
  "dijit/_editor/range.ie": "exp",
  "dijit/_editor/selection": "exp",
  "dijit/_editor/_Plugin": "exp",
  "dijit/_editor/_Plugin.registry": "exp",
  "dijit/_editor/RichText": "exp",
  "dijit/_editor/plugins/AlwaysShowToolbar": "exp",
  "dijit/_editor/plugins/FontChoice": "exp",
  "dijit/_editor/plugins/FontChoice._FontDropDown": "exp",
  "dijit/_editor/plugins/FontChoice._FontSizeDropDown": "exp",
  "dijit/_editor/plugins/FontChoice._FontNameDropDown": "exp",
  "dijit/_editor/plugins/FontChoice._FormatBlockDropDown": "exp",
  "dijit/_editor/plugins/EnterKeyHandling": "exp",
  "dijit/_editor/plugins/LinkDialog": "exp",
  "dijit/_editor/plugins/LinkDialog.ImgLinkDialog": "exp",
  "dijit/_editor/plugins/FullScreen": "exp",
  "dijit/_editor/plugins/NewPage": "exp",
  "dijit/_editor/plugins/Print": "exp",
  "dijit/_editor/plugins/TabIndent": "exp",
  "dijit/_editor/plugins/TextColor": "exp",
  "dijit/_editor/plugins/ToggleDir": "exp",
  "dijit/_editor/plugins/ViewSource": "exp",
  "dijit/_tree/dndSource": "exp",
  "dijit/form/Slider": "exp",
  "dijit/form/_ButtonMixin": "exp",
  "dijit/form/_AutoCompleterMixin": "exp",
  "dijit/form/_CheckBoxMixin": "exp",
  "dijit/form/_ComboBoxMenuMixin": "exp",
  "dijit/form/_ExpandingTextAreaMixin": "exp",
  "dijit/form/_FormMixin": "exp",
  "dijit/form/_FormValueMixin": "exp",
  "dijit/form/_FormWidgetMixin": "exp",
  "dijit/form/_ListBase": "exp",
  "dijit/form/_ComboBoxMenu": "exp",
  "dijit/form/_RadioButtonMixin": "exp",
  "dijit/form/_SearchMixin": "exp",
  "dijit/form/_ListMouseMixin": "exp",
  "dijit/form/_FormSelectWidget": "exp",
  "dijit/form/_FormSelectWidget.__SelectOption": "exp",
  "dijit/form/_TextBoxMixin": "exp",
  "dijit/form/_FormWidget": "exp",
  "dijit/form/_ToggleButtonMixin": "exp",
  "dijit/form/_FormValueWidget": "exp",
  "dijit/form/_DateTimeTextBox": "exp",
  "dijit/form/_DateTimeTextBox.__Constraints": "exp",
  "dijit/form/ComboBoxMixin": "exp",
  "dijit/form/_Spinner": "exp",
  "dijit/form/DataList": "exp",
  "dijit/form/Button": "exp",
  "dijit/form/CheckBox": "exp",
  "dijit/form/ComboButton": "exp",
  "dijit/form/ComboBox": "exp",
  "dijit/form/CurrencyTextBox": "exp",
  "dijit/form/DropDownButton": "exp",
  "dijit/form/Form": "exp",
  "dijit/form/DateTextBox": "exp",
  "dijit/form/HorizontalRule": "exp",
  "dijit/form/FilteringSelect": "exp",
  "dijit/form/HorizontalRuleLabels": "exp",
  "dijit/form/HorizontalSlider": "exp",
  "dijit/form/HorizontalSlider._Mover": "exp",
  "dijit/form/MultiSelect": "exp",
  "dijit/form/MappedTextBox": "exp",
  "dijit/form/NumberSpinner": "exp",
  "dijit/form/RangeBoundTextBox": "exp",
  "dijit/form/RangeBoundTextBox.__Constraints": "exp",
  "dijit/form/RadioButton": "exp",
  "dijit/form/NumberTextBox": "exp",
  "dijit/form/NumberTextBox.__Constraints": "exp",
  "dijit/form/NumberTextBox.Mixin": "exp",
  "dijit/form/SimpleTextarea": "exp",
  "dijit/form/Textarea": "exp",
  "dijit/form/Select": "exp",
  "dijit/form/Select._Menu": "exp",
  "dijit/form/TextBox": "exp",
  "dijit/form/VerticalRule": "exp",
  "dijit/form/ToggleButton": "exp",
  "dijit/form/TimeTextBox": "exp",
  "dijit/form/ValidationTextBox": "exp",
  "dijit/form/VerticalRuleLabels": "exp",
  "dijit/form/VerticalSlider": "exp",
  "dijit/layout/utils": "exp",
  "dijit/layout/_ContentPaneResizeMixin": "exp",
  "dijit/layout/_LayoutWidget": "exp",
  "dijit/layout/AccordionContainer": "exp",
  "dijit/layout/AccordionContainer._Button": "exp",
  "dijit/layout/AccordionContainer._InnerContainer": "exp",
  "dijit/layout/_TabContainerBase": "exp",
  "dijit/layout/AccordionPane": "exp",
  "dijit/layout/BorderContainer": "exp",
  "dijit/layout/BorderContainer._Gutter": "exp",
  "dijit/layout/BorderContainer._Splitter": "exp",
  "dijit/layout/BorderContainer.ChildWidgetProperties": "exp",
  "dijit/layout/LayoutContainer": "exp",
  "dijit/layout/LayoutContainer.ChildWidgetProperties": "exp",
  "dijit/layout/ContentPane": "exp",
  "dijit/layout/LinkPane": "exp",
  "dijit/layout/SplitContainer": "exp",
  "dijit/layout/SplitContainer.ChildWidgetProperties": "exp",
  "dijit/layout/ScrollingTabController": "exp",
  "dijit/layout/StackController": "exp",
  "dijit/layout/StackController.StackButton": "exp",
  "dijit/layout/StackContainer": "exp",
  "dijit/layout/StackContainer.ChildWidgetProperties": "exp",
  "dijit/layout/TabContainer": "exp",
  "dijit/layout/TabController": "exp",
  "dijit/layout/TabController.TabButton": "exp",
  "dijit/tree/_dndContainer": "exp",
  "dijit/tree/ForestStoreModel": "exp",
  "dijit/tree/dndSource": "exp",
  "dijit/tree/dndSource.__Item": "exp",
  "dijit/tree/model": "exp",
  "dijit/tree/_dndSelector": "exp",
  "dijit/tree/ObjectStoreModel": "exp",
  "dijit/tree/TreeStoreModel": "exp",
  "dijit/ConfirmDialog": "exp",
  "dijit/_ConfirmDialogMixin": "exp",
  "!name": "dijit.d.ts",
  "!define": {
    "ret": {
      "unwatch": "fn()"
    },
    "ret1": {
      "unwatch": "fn()"
    },
    "ret2": {
      "unwatch": "fn()"
    },
    "ret3": {
      "unwatch": "fn()"
    },
    "ret4": {
      "unwatch": "fn()"
    },
    "ret5": {
      "unwatch": "fn()"
    },
    "ret6": {
      "unwatch": "fn()"
    },
    "ret7": {
      "unwatch": "fn()"
    },
    "ret8": {
      "unwatch": "fn()"
    },
    "ret9": {
      "unwatch": "fn()"
    },
    "ret10": {
      "unwatch": "fn()"
    },
    "ret11": {
      "unwatch": "fn()"
    },
    "ret12": {
      "unwatch": "fn()"
    },
    "ret13": {
      "unwatch": "fn()"
    },
    "ret14": {
      "unwatch": "fn()"
    },
    "ret15": {
      "unwatch": "fn()"
    },
    "ret16": {
      "unwatch": "fn()"
    },
    "ret17": {
      "unwatch": "fn()"
    },
    "ret18": {
      "unwatch": "fn()"
    },
    "ret19": {
      "unwatch": "fn()"
    },
    "ret20": {
      "unwatch": "fn()"
    },
    "ret21": {
      "unwatch": "fn()"
    },
    "ret22": {
      "unwatch": "fn()"
    },
    "ret23": {
      "unwatch": "fn()"
    },
    "ret24": {
      "unwatch": "fn()"
    },
    "ret25": {
      "unwatch": "fn()"
    },
    "ret26": {
      "unwatch": "fn()"
    },
    "ret27": {
      "unwatch": "fn()"
    },
    "ret28": {
      "unwatch": "fn()"
    },
    "ret29": {
      "unwatch": "fn()"
    },
    "ret30": {
      "unwatch": "fn()"
    },
    "ret31": {
      "unwatch": "fn()"
    },
    "ret32": {
      "unwatch": "fn()"
    },
    "ret33": {
      "unwatch": "fn()"
    },
    "ret34": {
      "unwatch": "fn()"
    },
    "ret35": {
      "unwatch": "fn()"
    },
    "ret36": {
      "unwatch": "fn()"
    },
    "ret37": {
      "unwatch": "fn()"
    },
    "ret38": {
      "unwatch": "fn()"
    },
    "ret39": {
      "unwatch": "fn()"
    },
    "ret40": {
      "unwatch": "fn()"
    },
    "ret41": {
      "unwatch": "fn()"
    },
    "ret42": {
      "unwatch": "fn()"
    },
    "ret43": {
      "unwatch": "fn()"
    },
    "ret44": {
      "unwatch": "fn()"
    },
    "ret45": {
      "remove": {}
    },
    "ret46": {
      "remove": {}
    },
    "ret47": {
      "unwatch": "fn()"
    },
    "ret48": {
      "unwatch": "fn()"
    },
    "ret49": {
      "unwatch": "fn()"
    },
    "ret50": {
      "unwatch": "fn()"
    },
    "ret51": {
      "unwatch": "fn()"
    },
    "ret52": {
      "unwatch": "fn()"
    },
    "ret53": {
      "unwatch": "fn()"
    },
    "ret54": {
      "unwatch": "fn()"
    },
    "ret55": {
      "unwatch": "fn()"
    },
    "ret56": {
      "unwatch": "fn()"
    },
    "ret57": {
      "unwatch": "fn()"
    },
    "ret58": {
      "unwatch": "fn()"
    },
    "ret59": {
      "unwatch": "fn()"
    },
    "ret60": {
      "unwatch": "fn()"
    },
    "ret61": {
      "unwatch": "fn()"
    },
    "ret62": {
      "unwatch": "fn()"
    },
    "ret63": {
      "unwatch": "fn()"
    },
    "ret64": {
      "unwatch": "fn()"
    },
    "ret65": {
      "unwatch": "fn()"
    },
    "ret66": {
      "unwatch": "fn()"
    },
    "ret67": {
      "unwatch": "fn()"
    },
    "ret68": {
      "unwatch": "fn()"
    },
    "ret69": {
      "unwatch": "fn()"
    },
    "ret70": {
      "unwatch": "fn()"
    },
    "ret71": {
      "unwatch": "fn()"
    },
    "ret72": {
      "unwatch": "fn()"
    },
    "ret73": {
      "unwatch": "fn()"
    },
    "ret74": {
      "unwatch": "fn()"
    },
    "ret75": {
      "unwatch": "fn()"
    },
    "ret76": {
      "unwatch": "fn()"
    },
    "ret77": {
      "unwatch": "fn()"
    },
    "ret78": {
      "unwatch": "fn()"
    },
    "ret79": {
      "unwatch": "fn()"
    },
    "ret80": {
      "unwatch": "fn()"
    },
    "ret81": {
      "unwatch": "fn()"
    },
    "ret82": {
      "unwatch": "fn()"
    },
    "ret83": {
      "unwatch": "fn()"
    },
    "ret84": {
      "unwatch": "fn()"
    },
    "ret85": {
      "unwatch": "fn()"
    },
    "ret86": {
      "unwatch": "fn()"
    },
    "ret87": {
      "unwatch": "fn()"
    },
    "ret88": {
      "unwatch": "fn()"
    },
    "ret89": {
      "unwatch": "fn()"
    },
    "ret90": {
      "unwatch": "fn()"
    },
    "ret91": {
      "unwatch": "fn()"
    },
    "ret92": {
      "unwatch": "fn()"
    },
    "ret93": {
      "unwatch": "fn()"
    },
    "ret94": {
      "unwatch": "fn()"
    },
    "ret95": {
      "unwatch": "fn()"
    },
    "ret96": {
      "unwatch": "fn()"
    },
    "ret97": {
      "unwatch": "fn()"
    },
    "ret98": {
      "unwatch": "fn()"
    },
    "ret99": {
      "unwatch": "fn()"
    },
    "ret100": {
      "unwatch": "fn()"
    },
    "ret101": {
      "unwatch": "fn()"
    },
    "ret102": {
      "unwatch": "fn()"
    },
    "ret103": {
      "unwatch": "fn()"
    },
    "ret104": {
      "unwatch": "fn()"
    },
    "ret105": {
      "unwatch": "fn()"
    },
    "ret106": {
      "unwatch": "fn()"
    },
    "ret107": {
      "unwatch": "fn()"
    },
    "ret108": {
      "unwatch": "fn()"
    },
    "ret109": {
      "unwatch": "fn()"
    },
    "ret110": {
      "unwatch": "fn()"
    },
    "ret111": {
      "unwatch": "fn()"
    },
    "ret112": {
      "unwatch": "fn()"
    },
    "ret113": {
      "unwatch": "fn()"
    },
    "ret114": {
      "unwatch": "fn()"
    },
    "ret115": {
      "unwatch": "fn()"
    },
    "ret116": {
      "unwatch": "fn()"
    },
    "ret117": {
      "unwatch": "fn()"
    },
    "ret118": {
      "unwatch": "fn()"
    },
    "ret119": {
      "unwatch": "fn()"
    },
    "ret120": {
      "unwatch": "fn()"
    },
    "ret121": {
      "unwatch": "fn()"
    },
    "ret122": {
      "unwatch": "fn()"
    },
    "ret123": {
      "unwatch": "fn()"
    },
    "ret124": {
      "unwatch": "fn()"
    },
    "ret125": {
      "unwatch": "fn()"
    },
    "ret126": {
      "unwatch": "fn()"
    },
    "ret127": {
      "unwatch": "fn()"
    },
    "ret128": {
      "unwatch": "fn()"
    },
    "ret129": {
      "unwatch": "fn()"
    },
    "ret130": {
      "unwatch": "fn()"
    },
    "ret131": {
      "unwatch": "fn()"
    },
    "ret132": {
      "unwatch": "fn()"
    },
    "ret133": {
      "unwatch": "fn()"
    },
    "ret134": {
      "unwatch": "fn()"
    },
    "ret135": {
      "unwatch": "fn()"
    },
    "ret136": {
      "unwatch": "fn()"
    },
    "ret137": {
      "unwatch": "fn()"
    },
    "ret138": {
      "unwatch": "fn()"
    },
    "ret139": {
      "unwatch": "fn()"
    },
    "ret140": {
      "unwatch": "fn()"
    },
    "ret141": {
      "unwatch": "fn()"
    },
    "ret142": {
      "unwatch": "fn()"
    },
    "ret143": {
      "unwatch": "fn()"
    },
    "ret144": {
      "unwatch": "fn()"
    },
    "ret145": {
      "unwatch": "fn()"
    },
    "ret146": {
      "unwatch": "fn()"
    },
    "ret147": {
      "unwatch": "fn()"
    },
    "ret148": {
      "unwatch": "fn()"
    },
    "ret149": {
      "unwatch": "fn()"
    },
    "ret150": {
      "unwatch": "fn()"
    },
    "ret151": {
      "unwatch": "fn()"
    },
    "ret152": {
      "unwatch": "fn()"
    },
    "ret153": {
      "unwatch": "fn()"
    },
    "ret154": {
      "unwatch": "fn()"
    },
    "ret155": {
      "unwatch": "fn()"
    },
    "ret156": {
      "unwatch": "fn()"
    },
    "ret157": {
      "unwatch": "fn()"
    },
    "ret158": {
      "unwatch": "fn()"
    },
    "ret159": {
      "unwatch": "fn()"
    },
    "ret160": {
      "unwatch": "fn()"
    },
    "ret161": {
      "unwatch": "fn()"
    },
    "ret162": {
      "unwatch": "fn()"
    },
    "ret163": {
      "unwatch": "fn()"
    },
    "ret164": {
      "unwatch": "fn()"
    },
    "ret165": {
      "unwatch": "fn()"
    },
    "ret166": {
      "unwatch": "fn()"
    },
    "ret167": {
      "unwatch": "fn()"
    },
    "ret168": {
      "unwatch": "fn()"
    },
    "ret169": {
      "unwatch": "fn()"
    },
    "ret170": {
      "unwatch": "fn()"
    },
    "ret171": {
      "unwatch": "fn()"
    },
    "ret172": {
      "unwatch": "fn()"
    },
    "ret173": {
      "unwatch": "fn()"
    },
    "ret174": {
      "unwatch": "fn()"
    },
    "ret175": {
      "unwatch": "fn()"
    },
    "ret176": {
      "unwatch": "fn()"
    },
    "ret177": {
      "unwatch": "fn()"
    },
    "ret178": {
      "unwatch": "fn()"
    },
    "ret179": {
      "unwatch": "fn()"
    },
    "ret180": {
      "unwatch": "fn()"
    },
    "ret181": {
      "unwatch": "fn()"
    },
    "ret182": {
      "unwatch": "fn()"
    },
    "ret183": {
      "unwatch": "fn()"
    },
    "ret184": {
      "unwatch": "fn()"
    },
    "ret185": {
      "unwatch": "fn()"
    },
    "ret186": {
      "unwatch": "fn()"
    },
    "ret187": {
      "unwatch": "fn()"
    },
    "ret188": {
      "unwatch": "fn()"
    },
    "ret189": {
      "unwatch": "fn()"
    },
    "ret190": {
      "unwatch": "fn()"
    },
    "ret191": {
      "unwatch": "fn()"
    },
    "ret192": {
      "unwatch": "fn()"
    },
    "ret193": {
      "unwatch": "fn()"
    },
    "ret194": {
      "unwatch": "fn()"
    },
    "ret195": {
      "unwatch": "fn()"
    },
    "ret196": {
      "unwatch": "fn()"
    },
    "ret197": {
      "unwatch": "fn()"
    },
    "ret198": {
      "unwatch": "fn()"
    },
    "ret199": {
      "unwatch": "fn()"
    },
    "ret200": {
      "unwatch": "fn()"
    },
    "ret201": {
      "unwatch": "fn()"
    },
    "ret202": {
      "unwatch": "fn()"
    },
    "ret203": {
      "unwatch": "fn()"
    },
    "ret204": {
      "unwatch": "fn()"
    },
    "ret205": {
      "unwatch": "fn()"
    },
    "ret206": {
      "unwatch": "fn()"
    },
    "ret207": {
      "unwatch": "fn()"
    },
    "ret208": {
      "unwatch": "fn()"
    },
    "ret209": {
      "unwatch": "fn()"
    },
    "ret210": {
      "unwatch": "fn()"
    },
    "ret211": {
      "unwatch": "fn()"
    },
    "ret212": {
      "unwatch": "fn()"
    },
    "ret213": {
      "unwatch": "fn()"
    },
    "ret214": {
      "unwatch": "fn()"
    },
    "ret215": {
      "unwatch": "fn()"
    },
    "ret216": {
      "unwatch": "fn()"
    },
    "ret217": {
      "unwatch": "fn()"
    },
    "ret218": {
      "unwatch": "fn()"
    },
    "ret219": {
      "unwatch": "fn()"
    },
    "ret220": {
      "unwatch": "fn()"
    },
    "ret221": {
      "unwatch": "fn()"
    },
    "ret222": {
      "unwatch": "fn()"
    },
    "ret223": {
      "unwatch": "fn()"
    },
    "ret224": {
      "unwatch": "fn()"
    },
    "ret225": {
      "unwatch": "fn()"
    },
    "ret226": {
      "unwatch": "fn()"
    },
    "ret227": {
      "unwatch": "fn()"
    },
    "ret228": {
      "unwatch": "fn()"
    },
    "ret229": {
      "unwatch": "fn()"
    },
    "ret230": {
      "unwatch": "fn()"
    },
    "ret231": {
      "unwatch": "fn()"
    },
    "ret232": {
      "unwatch": "fn()"
    },
    "ret233": {
      "unwatch": "fn()"
    },
    "ret234": {
      "unwatch": "fn()"
    },
    "ret235": {
      "unwatch": "fn()"
    },
    "ret236": {
      "unwatch": "fn()"
    },
    "ret237": {
      "unwatch": "fn()"
    },
    "ret238": {
      "unwatch": "fn()"
    },
    "ret239": {
      "unwatch": "fn()"
    },
    "ret240": {
      "unwatch": "fn()"
    },
    "ret241": {
      "unwatch": "fn()"
    },
    "ret242": {
      "unwatch": "fn()"
    },
    "ret243": {
      "unwatch": "fn()"
    },
    "ret244": {
      "unwatch": "fn()"
    },
    "ret245": {
      "unwatch": "fn()"
    },
    "ret246": {
      "unwatch": "fn()"
    },
    "ret247": {
      "unwatch": "fn()"
    },
    "ret248": {
      "unwatch": "fn()"
    },
    "ret249": {
      "unwatch": "fn()"
    },
    "ret250": {
      "unwatch": "fn()"
    },
    "ret251": {
      "unwatch": "fn()"
    },
    "ret252": {
      "unwatch": "fn()"
    },
    "ret253": {
      "unwatch": "fn()"
    },
    "ret254": {
      "unwatch": "fn()"
    },
    "ret255": {
      "unwatch": "fn()"
    },
    "ret256": {
      "unwatch": "fn()"
    },
    "ret257": {
      "unwatch": "fn()"
    },
    "ret258": {
      "unwatch": "fn()"
    },
    "ret259": {
      "unwatch": "fn()"
    },
    "ret260": {
      "unwatch": "fn()"
    },
    "ret261": {
      "unwatch": "fn()"
    },
    "ret262": {
      "unwatch": "fn()"
    },
    "ret263": {
      "unwatch": "fn()"
    },
    "ret264": {
      "unwatch": "fn()"
    },
    "ret265": {
      "unwatch": "fn()"
    },
    "ret266": {
      "unwatch": "fn()"
    },
    "ret267": {
      "unwatch": "fn()"
    },
    "ret268": {
      "unwatch": "fn()"
    },
    "ret269": {
      "unwatch": "fn()"
    },
    "ret270": {
      "unwatch": "fn()"
    },
    "ret271": {
      "unwatch": "fn()"
    },
    "ret272": {
      "unwatch": "fn()"
    },
    "ret273": {
      "unwatch": "fn()"
    },
    "ret274": {
      "unwatch": "fn()"
    },
    "ret275": {
      "unwatch": "fn()"
    },
    "ret276": {
      "unwatch": "fn()"
    },
    "ret277": {
      "unwatch": "fn()"
    },
    "ret278": {
      "unwatch": "fn()"
    },
    "ret279": {
      "unwatch": "fn()"
    },
    "ret280": {
      "unwatch": "fn()"
    },
    "ret281": {
      "unwatch": "fn()"
    },
    "ret282": {
      "unwatch": "fn()"
    },
    "ret283": {
      "unwatch": "fn()"
    },
    "ret284": {
      "unwatch": "fn()"
    },
    "ret285": {
      "unwatch": "fn()"
    },
    "ret286": {
      "unwatch": "fn()"
    },
    "ret287": {
      "unwatch": "fn()"
    },
    "ret288": {
      "unwatch": "fn()"
    },
    "ret289": {
      "unwatch": "fn()"
    },
    "ret290": {
      "unwatch": "fn()"
    },
    "ret291": {
      "unwatch": "fn()"
    },
    "ret292": {
      "unwatch": "fn()"
    },
    "ret293": {
      "unwatch": "fn()"
    },
    "ret294": {
      "unwatch": "fn()"
    },
    "ret295": {
      "unwatch": "fn()"
    },
    "ret296": {
      "unwatch": "fn()"
    },
    "ret297": {
      "unwatch": "fn()"
    },
    "ret298": {
      "unwatch": "fn()"
    },
    "ret299": {
      "unwatch": "fn()"
    },
    "ret300": {
      "unwatch": "fn()"
    },
    "ret301": {
      "unwatch": "fn()"
    },
    "ret302": {
      "unwatch": "fn()"
    },
    "ret303": {
      "unwatch": "fn()"
    },
    "ret304": {
      "unwatch": "fn()"
    },
    "ret305": {
      "unwatch": "fn()"
    },
    "ret306": {
      "unwatch": "fn()"
    },
    "ret307": {
      "unwatch": "fn()"
    },
    "ret308": {
      "unwatch": "fn()"
    },
    "ret309": {
      "unwatch": "fn()"
    },
    "ret310": {
      "unwatch": "fn()"
    },
    "ret311": {
      "unwatch": "fn()"
    },
    "ret312": {
      "unwatch": "fn()"
    },
    "ret313": {
      "unwatch": "fn()"
    },
    "ret314": {
      "unwatch": "fn()"
    },
    "ret315": {
      "unwatch": "fn()"
    },
    "ret316": {
      "unwatch": "fn()"
    },
    "ret317": {
      "unwatch": "fn()"
    },
    "ret318": {
      "unwatch": "fn()"
    },
    "ret319": {
      "unwatch": "fn()"
    },
    "ret320": {
      "unwatch": "fn()"
    },
    "ret321": {
      "unwatch": "fn()"
    },
    "ret322": {
      "unwatch": "fn()"
    },
    "ret323": {
      "unwatch": "fn()"
    },
    "ret324": {
      "unwatch": "fn()"
    },
    "ret325": {
      "unwatch": "fn()"
    },
    "ret326": {
      "unwatch": "fn()"
    },
    "ret327": {
      "unwatch": "fn()"
    },
    "ret328": {
      "unwatch": "fn()"
    },
    "ret329": {
      "unwatch": "fn()"
    },
    "ret330": {
      "unwatch": "fn()"
    },
    "ret331": {
      "unwatch": "fn()"
    },
    "ret332": {
      "unwatch": "fn()"
    },
    "ret333": {
      "unwatch": "fn()"
    },
    "ret334": {
      "unwatch": "fn()"
    },
    "ret335": {
      "unwatch": "fn()"
    },
    "ret336": {
      "unwatch": "fn()"
    },
    "ret337": {
      "unwatch": "fn()"
    },
    "ret338": {
      "unwatch": "fn()"
    },
    "ret339": {
      "unwatch": "fn()"
    },
    "ret340": {
      "unwatch": "fn()"
    },
    "ret341": {
      "unwatch": "fn()"
    },
    "ret342": {
      "unwatch": "fn()"
    },
    "ret343": {
      "unwatch": "fn()"
    },
    "ret344": {
      "unwatch": "fn()"
    },
    "ret345": {
      "unwatch": "fn()"
    },
    "ret346": {
      "unwatch": "fn()"
    },
    "ret347": {
      "unwatch": "fn()"
    },
    "ret348": {
      "unwatch": "fn()"
    },
    "ret349": {
      "unwatch": "fn()"
    },
    "ret350": {
      "unwatch": "fn()"
    },
    "ret351": {
      "unwatch": "fn()"
    },
    "ret352": {
      "unwatch": "fn()"
    },
    "ret353": {
      "unwatch": "fn()"
    },
    "ret354": {
      "unwatch": "fn()"
    },
    "ret355": {
      "unwatch": "fn()"
    },
    "ret356": {
      "unwatch": "fn()"
    },
    "ret357": {
      "unwatch": "fn()"
    },
    "ret358": {
      "unwatch": "fn()"
    },
    "ret359": {
      "unwatch": "fn()"
    },
    "ret360": {
      "unwatch": "fn()"
    },
    "ret361": {
      "unwatch": "fn()"
    },
    "ret362": {
      "unwatch": "fn()"
    },
    "ret363": {
      "unwatch": "fn()"
    },
    "ret364": {
      "unwatch": "fn()"
    },
    "ret365": {
      "unwatch": "fn()"
    },
    "ret366": {
      "unwatch": "fn()"
    },
    "ret367": {
      "unwatch": "fn()"
    },
    "ret368": {
      "unwatch": "fn()"
    },
    "ret369": {
      "unwatch": "fn()"
    },
    "ret370": {
      "unwatch": "fn()"
    },
    "ret371": {
      "unwatch": "fn()"
    },
    "ret372": {
      "unwatch": "fn()"
    },
    "ret373": {
      "unwatch": "fn()"
    },
    "ret374": {
      "unwatch": "fn()"
    },
    "ret375": {
      "unwatch": "fn()"
    },
    "ret376": {
      "unwatch": "fn()"
    },
    "ret377": {
      "unwatch": "fn()"
    },
    "ret378": {
      "unwatch": "fn()"
    },
    "ret379": {
      "unwatch": "fn()"
    },
    "ret380": {
      "unwatch": "fn()"
    },
    "ret381": {
      "unwatch": "fn()"
    },
    "ret382": {
      "unwatch": "fn()"
    },
    "ret383": {
      "unwatch": "fn()"
    },
    "ret384": {
      "unwatch": "fn()"
    },
    "ret385": {
      "unwatch": "fn()"
    },
    "ret386": {
      "unwatch": "fn()"
    },
    "ret387": {
      "unwatch": "fn()"
    },
    "ret388": {
      "unwatch": "fn()"
    },
    "ret389": {
      "unwatch": "fn()"
    },
    "ret390": {
      "unwatch": "fn()"
    },
    "ret391": {
      "unwatch": "fn()"
    },
    "ret392": {
      "unwatch": "fn()"
    },
    "ret393": {
      "unwatch": "fn()"
    },
    "ret394": {
      "unwatch": "fn()"
    },
    "ret395": {
      "unwatch": "fn()"
    },
    "ret396": {
      "unwatch": "fn()"
    },
    "ret397": {
      "unwatch": "fn()"
    },
    "ret398": {
      "unwatch": "fn()"
    },
    "ret399": {
      "unwatch": "fn()"
    },
    "ret400": {
      "unwatch": "fn()"
    },
    "ret401": {
      "unwatch": "fn()"
    },
    "ret402": {
      "unwatch": "fn()"
    },
    "ret403": {
      "unwatch": "fn()"
    },
    "ret404": {
      "unwatch": "fn()"
    },
    "ret405": {
      "unwatch": "fn()"
    },
    "ret406": {
      "unwatch": "fn()"
    },
    "ret407": {
      "unwatch": "fn()"
    },
    "ret408": {
      "unwatch": "fn()"
    },
    "ret409": {
      "unwatch": "fn()"
    },
    "ret410": {
      "unwatch": "fn()"
    },
    "ret411": {
      "unwatch": "fn()"
    },
    "ret412": {
      "unwatch": "fn()"
    },
    "ret413": {
      "unwatch": "fn()"
    },
    "ret414": {
      "unwatch": "fn()"
    },
    "ret415": {
      "unwatch": "fn()"
    },
    "ret416": {
      "unwatch": "fn()"
    },
    "ret417": {
      "unwatch": "fn()"
    },
    "ret418": {
      "unwatch": "fn()"
    },
    "ret419": {
      "unwatch": "fn()"
    },
    "ret420": {
      "unwatch": "fn()"
    },
    "ret421": {
      "unwatch": "fn()"
    },
    "ret422": {
      "unwatch": "fn()"
    },
    "ret423": {
      "unwatch": "fn()"
    },
    "ret424": {
      "unwatch": "fn()"
    },
    "ret425": {
      "unwatch": "fn()"
    },
    "ret426": {
      "unwatch": "fn()"
    },
    "ret427": {
      "unwatch": "fn()"
    },
    "ret428": {
      "unwatch": "fn()"
    },
    "ret429": {
      "unwatch": "fn()"
    },
    "ret430": {
      "unwatch": "fn()"
    },
    "ret431": {
      "unwatch": "fn()"
    },
    "ret432": {
      "unwatch": "fn()"
    },
    "ret433": {
      "unwatch": "fn()"
    },
    "ret434": {
      "unwatch": "fn()"
    },
    "ret435": {
      "unwatch": "fn()"
    },
    "ret436": {
      "unwatch": "fn()"
    },
    "ret437": {
      "unwatch": "fn()"
    },
    "ret438": {
      "unwatch": "fn()"
    },
    "ret439": {
      "unwatch": "fn()"
    },
    "ret440": {
      "unwatch": "fn()"
    },
    "ret441": {
      "unwatch": "fn()"
    },
    "ret442": {
      "unwatch": "fn()"
    },
    "ret443": {
      "unwatch": "fn()"
    },
    "ret444": {
      "unwatch": "fn()"
    },
    "ret445": {
      "unwatch": "fn()"
    },
    "ret446": {
      "unwatch": "fn()"
    },
    "ret447": {
      "unwatch": "fn()"
    },
    "ret448": {
      "unwatch": "fn()"
    },
    "ret449": {
      "unwatch": "fn()"
    },
    "ret450": {
      "unwatch": "fn()"
    },
    "ret451": {
      "unwatch": "fn()"
    },
    "ret452": {
      "unwatch": "fn()"
    },
    "ret453": {
      "unwatch": "fn()"
    },
    "ret454": {
      "unwatch": "fn()"
    },
    "ret455": {
      "unwatch": "fn()"
    },
    "ret456": {
      "unwatch": "fn()"
    },
    "ret457": {
      "unwatch": "fn()"
    },
    "ret458": {
      "unwatch": "fn()"
    },
    "ret459": {
      "unwatch": "fn()"
    },
    "ret460": {
      "unwatch": "fn()"
    },
    "ret461": {
      "unwatch": "fn()"
    },
    "ret462": {
      "unwatch": "fn()"
    },
    "ret463": {
      "unwatch": "fn()"
    },
    "ret464": {
      "unwatch": "fn()"
    },
    "ret465": {
      "unwatch": "fn()"
    },
    "ret466": {
      "unwatch": "fn()"
    },
    "ret467": {
      "unwatch": "fn()"
    },
    "ret468": {
      "unwatch": "fn()"
    },
    "ret469": {
      "unwatch": "fn()"
    },
    "ret470": {
      "unwatch": "fn()"
    },
    "ret471": {
      "unwatch": "fn()"
    },
    "ret472": {
      "unwatch": "fn()"
    },
    "ret473": {
      "unwatch": "fn()"
    },
    "ret474": {
      "unwatch": "fn()"
    },
    "ret475": {
      "unwatch": "fn()"
    },
    "ret476": {
      "unwatch": "fn()"
    },
    "ret477": {
      "unwatch": "fn()"
    },
    "ret478": {
      "unwatch": "fn()"
    },
    "ret479": {
      "unwatch": "fn()"
    },
    "ret480": {
      "unwatch": "fn()"
    },
    "ret481": {
      "unwatch": "fn()"
    },
    "ret482": {
      "unwatch": "fn()"
    },
    "ret483": {
      "unwatch": "fn()"
    },
    "ret484": {
      "unwatch": "fn()"
    },
    "ret485": {
      "unwatch": "fn()"
    },
    "ret486": {
      "unwatch": "fn()"
    },
    "ret487": {
      "unwatch": "fn()"
    },
    "ret488": {
      "unwatch": "fn()"
    },
    "ret489": {
      "unwatch": "fn()"
    },
    "ret490": {
      "unwatch": "fn()"
    },
    "ret491": {
      "unwatch": "fn()"
    },
    "ret492": {
      "unwatch": "fn()"
    },
    "ret493": {
      "unwatch": "fn()"
    },
    "ret494": {
      "unwatch": "fn()"
    },
    "ret495": {
      "unwatch": "fn()"
    },
    "ret496": {
      "unwatch": "fn()"
    },
    "ret497": {
      "unwatch": "fn()"
    },
    "ret498": {
      "unwatch": "fn()"
    },
    "ret499": {
      "unwatch": "fn()"
    },
    "ret500": {
      "unwatch": "fn()"
    },
    "ret501": {
      "unwatch": "fn()"
    },
    "ret502": {
      "unwatch": "fn()"
    },
    "ret503": {
      "unwatch": "fn()"
    },
    "ret504": {
      "unwatch": "fn()"
    },
    "ret505": {
      "unwatch": "fn()"
    },
    "ret506": {
      "unwatch": "fn()"
    },
    "ret507": {
      "unwatch": "fn()"
    },
    "ret508": {
      "unwatch": "fn()"
    },
    "ret509": {
      "unwatch": "fn()"
    },
    "ret510": {
      "unwatch": "fn()"
    },
    "ret511": {
      "unwatch": "fn()"
    },
    "ret512": {
      "unwatch": "fn()"
    },
    "ret513": {
      "unwatch": "fn()"
    },
    "ret514": {
      "unwatch": "fn()"
    },
    "ret515": {
      "unwatch": "fn()"
    },
    "ret516": {
      "unwatch": "fn()"
    },
    "ret517": {
      "unwatch": "fn()"
    },
    "ret518": {
      "unwatch": "fn()"
    },
    "ret519": {
      "unwatch": "fn()"
    },
    "ret520": {
      "unwatch": "fn()"
    },
    "ret521": {
      "unwatch": "fn()"
    },
    "ret522": {
      "unwatch": "fn()"
    },
    "ret523": {
      "unwatch": "fn()"
    },
    "ret524": {
      "unwatch": "fn()"
    },
    "ret525": {
      "unwatch": "fn()"
    },
    "ret526": {
      "unwatch": "fn()"
    },
    "ret527": {
      "unwatch": "fn()"
    },
    "ret528": {
      "unwatch": "fn()"
    },
    "ret529": {
      "unwatch": "fn()"
    },
    "ret530": {
      "unwatch": "fn()"
    },
    "ret531": {
      "unwatch": "fn()"
    },
    "ret532": {
      "unwatch": "fn()"
    },
    "ret533": {
      "unwatch": "fn()"
    },
    "ret534": {
      "unwatch": "fn()"
    },
    "ret535": {
      "unwatch": "fn()"
    },
    "ret536": {
      "unwatch": "fn()"
    },
    "ret537": {
      "unwatch": "fn()"
    },
    "ret538": {
      "unwatch": "fn()"
    },
    "ret539": {
      "unwatch": "fn()"
    },
    "ret540": {
      "unwatch": "fn()"
    },
    "ret541": {
      "unwatch": "fn()"
    },
    "ret542": {
      "unwatch": "fn()"
    },
    "ret543": {
      "unwatch": "fn()"
    },
    "ret544": {
      "unwatch": "fn()"
    },
    "ret545": {
      "unwatch": "fn()"
    },
    "ret546": {
      "unwatch": "fn()"
    },
    "ret547": {
      "unwatch": "fn()"
    },
    "ret548": {
      "unwatch": "fn()"
    },
    "ret549": {
      "unwatch": "fn()"
    },
    "ret550": {
      "unwatch": "fn()"
    },
    "ret551": {
      "unwatch": "fn()"
    },
    "ret552": {
      "unwatch": "fn()"
    },
    "ret553": {
      "unwatch": "fn()"
    },
    "ret554": {
      "unwatch": "fn()"
    },
    "ret555": {
      "unwatch": "fn()"
    },
    "ret556": {
      "unwatch": "fn()"
    },
    "ret557": {
      "unwatch": "fn()"
    },
    "ret558": {
      "unwatch": "fn()"
    },
    "ret559": {
      "unwatch": "fn()"
    },
    "ret560": {
      "unwatch": "fn()"
    },
    "ret561": {
      "unwatch": "fn()"
    },
    "ret562": {
      "unwatch": "fn()"
    },
    "ret563": {
      "unwatch": "fn()"
    },
    "ret564": {
      "unwatch": "fn()"
    },
    "ret565": {
      "unwatch": "fn()"
    },
    "ret566": {
      "unwatch": "fn()"
    },
    "ret567": {
      "unwatch": "fn()"
    },
    "ret568": {
      "unwatch": "fn()"
    },
    "ret569": {
      "unwatch": "fn()"
    },
    "ret570": {
      "unwatch": "fn()"
    },
    "ret571": {
      "unwatch": "fn()"
    },
    "ret572": {
      "unwatch": "fn()"
    },
    "ret573": {
      "unwatch": "fn()"
    },
    "ret574": {
      "unwatch": "fn()"
    },
    "ret575": {
      "unwatch": "fn()"
    },
    "ret576": {
      "unwatch": "fn()"
    },
    "ret577": {
      "unwatch": "fn()"
    },
    "ret578": {
      "unwatch": "fn()"
    },
    "ret579": {
      "unwatch": "fn()"
    },
    "ret580": {
      "unwatch": "fn()"
    },
    "ret581": {
      "unwatch": "fn()"
    },
    "ret582": {
      "unwatch": "fn()"
    },
    "ret583": {
      "unwatch": "fn()"
    },
    "ret584": {
      "unwatch": "fn()"
    },
    "ret585": {
      "unwatch": "fn()"
    },
    "ret586": {
      "unwatch": "fn()"
    },
    "ret587": {
      "unwatch": "fn()"
    },
    "ret588": {
      "unwatch": "fn()"
    },
    "ret589": {
      "unwatch": "fn()"
    },
    "ret590": {
      "unwatch": "fn()"
    },
    "ret591": {
      "unwatch": "fn()"
    },
    "ret592": {
      "unwatch": "fn()"
    },
    "ret593": {
      "unwatch": "fn()"
    },
    "ret594": {
      "unwatch": "fn()"
    },
    "ret595": {
      "unwatch": "fn()"
    },
    "ret596": {
      "unwatch": "fn()"
    },
    "ret597": {
      "unwatch": "fn()"
    },
    "ret598": {
      "unwatch": "fn()"
    },
    "ret599": {
      "unwatch": "fn()"
    },
    "ret600": {
      "unwatch": "fn()"
    },
    "ret601": {
      "unwatch": "fn()"
    },
    "ret602": {
      "unwatch": "fn()"
    },
    "ret603": {
      "unwatch": "fn()"
    },
    "ret604": {
      "unwatch": "fn()"
    },
    "ret605": {
      "unwatch": "fn()"
    },
    "ret606": {
      "unwatch": "fn()"
    },
    "ret607": {
      "unwatch": "fn()"
    },
    "ret608": {
      "unwatch": "fn()"
    },
    "ret609": {
      "unwatch": "fn()"
    },
    "ret610": {
      "unwatch": "fn()"
    },
    "ret611": {
      "unwatch": "fn()"
    },
    "ret612": {
      "unwatch": "fn()"
    },
    "ret613": {
      "unwatch": "fn()"
    },
    "ret614": {
      "unwatch": "fn()"
    },
    "ret615": {
      "unwatch": "fn()"
    },
    "ret616": {
      "unwatch": "fn()"
    },
    "ret617": {
      "unwatch": "fn()"
    },
    "ret618": {
      "unwatch": "fn()"
    },
    "ret619": {
      "unwatch": "fn()"
    },
    "ret620": {
      "unwatch": "fn()"
    },
    "ret621": {
      "unwatch": "fn()"
    },
    "ret622": {
      "unwatch": "fn()"
    },
    "ret623": {
      "unwatch": "fn()"
    },
    "ret624": {
      "unwatch": "fn()"
    },
    "ret625": {
      "unwatch": "fn()"
    },
    "ret626": {
      "unwatch": "fn()"
    },
    "ret627": {
      "unwatch": "fn()"
    },
    "ret628": {
      "unwatch": "fn()"
    },
    "ret629": {
      "unwatch": "fn()"
    },
    "ret630": {
      "unwatch": "fn()"
    },
    "ret631": {
      "unwatch": "fn()"
    },
    "ret632": {
      "unwatch": "fn()"
    },
    "ret633": {
      "unwatch": "fn()"
    },
    "ret634": {
      "unwatch": "fn()"
    },
    "ret635": {
      "unwatch": "fn()"
    },
    "ret636": {
      "unwatch": "fn()"
    },
    "ret637": {
      "unwatch": "fn()"
    },
    "ret638": {
      "unwatch": "fn()"
    },
    "ret639": {
      "unwatch": "fn()"
    },
    "ret640": {
      "unwatch": "fn()"
    },
    "ret641": {
      "unwatch": "fn()"
    },
    "ret642": {
      "unwatch": "fn()"
    },
    "ret643": {
      "unwatch": "fn()"
    },
    "ret644": {
      "unwatch": "fn()"
    },
    "ret645": {
      "unwatch": "fn()"
    },
    "ret646": {
      "unwatch": "fn()"
    },
    "ret647": {
      "unwatch": "fn()"
    },
    "ret648": {
      "unwatch": "fn()"
    },
    "ret649": {
      "unwatch": "fn()"
    },
    "ret650": {
      "unwatch": "fn()"
    },
    "ret651": {
      "unwatch": "fn()"
    },
    "ret652": {
      "unwatch": "fn()"
    },
    "ret653": {
      "unwatch": "fn()"
    },
    "ret654": {
      "unwatch": "fn()"
    },
    "ret655": {
      "unwatch": "fn()"
    },
    "ret656": {
      "unwatch": "fn()"
    },
    "ret657": {
      "unwatch": "fn()"
    },
    "ret658": {
      "unwatch": "fn()"
    },
    "ret659": {
      "unwatch": "fn()"
    },
    "ret660": {
      "unwatch": "fn()"
    },
    "ret661": {
      "unwatch": "fn()"
    },
    "ret662": {
      "unwatch": "fn()"
    },
    "ret663": {
      "unwatch": "fn()"
    },
    "ret664": {
      "unwatch": "fn()"
    },
    "ret665": {
      "unwatch": "fn()"
    },
    "ret666": {
      "unwatch": "fn()"
    },
    "ret667": {
      "unwatch": "fn()"
    },
    "ret668": {
      "unwatch": "fn()"
    },
    "ret669": {
      "unwatch": "fn()"
    },
    "ret670": {
      "unwatch": "fn()"
    },
    "ret671": {
      "unwatch": "fn()"
    },
    "ret672": {
      "unwatch": "fn()"
    },
    "ret673": {
      "unwatch": "fn()"
    },
    "ret674": {
      "unwatch": "fn()"
    },
    "ret675": {
      "unwatch": "fn()"
    },
    "ret676": {
      "unwatch": "fn()"
    },
    "ret677": {
      "unwatch": "fn()"
    },
    "ret678": {
      "unwatch": "fn()"
    },
    "ret679": {
      "unwatch": "fn()"
    },
    "ret680": {
      "unwatch": "fn()"
    },
    "ret681": {
      "unwatch": "fn()"
    },
    "ret682": {
      "unwatch": "fn()"
    },
    "ret683": {
      "unwatch": "fn()"
    },
    "ret684": {
      "unwatch": "fn()"
    },
    "ret685": {
      "unwatch": "fn()"
    },
    "ret686": {
      "unwatch": "fn()"
    },
    "ret687": {
      "unwatch": "fn()"
    },
    "ret688": {
      "unwatch": "fn()"
    },
    "ret689": {
      "unwatch": "fn()"
    },
    "ret690": {
      "unwatch": "fn()"
    },
    "ret691": {
      "unwatch": "fn()"
    },
    "ret692": {
      "unwatch": "fn()"
    },
    "ret693": {
      "unwatch": "fn()"
    },
    "ret694": {
      "unwatch": "fn()"
    },
    "ret695": {
      "unwatch": "fn()"
    },
    "ret696": {
      "unwatch": "fn()"
    },
    "ret697": {
      "unwatch": "fn()"
    },
    "ret698": {
      "unwatch": "fn()"
    },
    "ret699": {
      "unwatch": "fn()"
    },
    "ret700": {
      "unwatch": "fn()"
    },
    "ret701": {
      "unwatch": "fn()"
    },
    "ret702": {
      "unwatch": "fn()"
    },
    "ret703": {
      "unwatch": "fn()"
    },
    "ret704": {
      "unwatch": "fn()"
    },
    "ret705": {
      "unwatch": "fn()"
    },
    "ret706": {
      "unwatch": "fn()"
    },
    "ret707": {
      "unwatch": "fn()"
    },
    "ret708": {
      "unwatch": "fn()"
    },
    "ret709": {
      "unwatch": "fn()"
    },
    "ret710": {
      "unwatch": "fn()"
    },
    "ret711": {
      "unwatch": "fn()"
    },
    "ret712": {
      "unwatch": "fn()"
    },
    "ret713": {
      "unwatch": "fn()"
    },
    "ret714": {
      "unwatch": "fn()"
    },
    "ret715": {
      "unwatch": "fn()"
    },
    "ret716": {
      "unwatch": "fn()"
    },
    "ret717": {
      "unwatch": "fn()"
    },
    "ret718": {
      "unwatch": "fn()"
    },
    "ret719": {
      "unwatch": "fn()"
    },
    "ret720": {
      "unwatch": "fn()"
    },
    "ret721": {
      "unwatch": "fn()"
    },
    "ret722": {
      "unwatch": "fn()"
    },
    "ret723": {
      "unwatch": "fn()"
    },
    "ret724": {
      "unwatch": "fn()"
    },
    "ret725": {
      "unwatch": "fn()"
    },
    "ret726": {
      "unwatch": "fn()"
    },
    "ret727": {
      "unwatch": "fn()"
    },
    "ret728": {
      "unwatch": "fn()"
    },
    "ret729": {
      "unwatch": "fn()"
    },
    "ret730": {
      "unwatch": "fn()"
    },
    "ret731": {
      "unwatch": "fn()"
    },
    "ret732": {
      "unwatch": "fn()"
    },
    "ret733": {
      "unwatch": "fn()"
    },
    "ret734": {
      "unwatch": "fn()"
    },
    "ret735": {
      "unwatch": "fn()"
    },
    "ret736": {
      "unwatch": "fn()"
    },
    "ret737": {
      "unwatch": "fn()"
    },
    "ret738": {
      "unwatch": "fn()"
    },
    "ret739": {
      "unwatch": "fn()"
    },
    "ret740": {
      "unwatch": "fn()"
    },
    "ret741": {
      "unwatch": "fn()"
    },
    "ret742": {
      "unwatch": "fn()"
    },
    "ret743": {
      "unwatch": "fn()"
    },
    "ret744": {
      "unwatch": "fn()"
    },
    "ret745": {
      "unwatch": "fn()"
    },
    "ret746": {
      "unwatch": "fn()"
    },
    "ret747": {
      "unwatch": "fn()"
    },
    "ret748": {
      "unwatch": "fn()"
    },
    "ret749": {
      "unwatch": "fn()"
    },
    "ret750": {
      "unwatch": "fn()"
    },
    "ret751": {
      "unwatch": "fn()"
    },
    "ret752": {
      "unwatch": "fn()"
    },
    "ret753": {
      "unwatch": "fn()"
    },
    "ret754": {
      "unwatch": "fn()"
    },
    "ret755": {
      "unwatch": "fn()"
    },
    "ret756": {
      "unwatch": "fn()"
    },
    "ret757": {
      "unwatch": "fn()"
    },
    "ret758": {
      "unwatch": "fn()"
    },
    "ret759": {
      "unwatch": "fn()"
    },
    "ret760": {
      "unwatch": "fn()"
    },
    "ret761": {
      "unwatch": "fn()"
    },
    "ret762": {
      "unwatch": "fn()"
    },
    "ret763": {
      "unwatch": "fn()"
    },
    "ret764": {
      "unwatch": "fn()"
    },
    "ret765": {
      "unwatch": "fn()"
    },
    "ret766": {
      "unwatch": "fn()"
    },
    "ret767": {
      "unwatch": "fn()"
    },
    "ret768": {
      "unwatch": "fn()"
    },
    "ret769": {
      "unwatch": "fn()"
    },
    "ret770": {
      "unwatch": "fn()"
    },
    "ret771": {
      "unwatch": "fn()"
    },
    "ret772": {
      "unwatch": "fn()"
    },
    "ret773": {
      "unwatch": "fn()"
    },
    "ret774": {
      "unwatch": "fn()"
    },
    "ret775": {
      "unwatch": "fn()"
    },
    "ret776": {
      "unwatch": "fn()"
    },
    "ret777": {
      "unwatch": "fn()"
    },
    "ret778": {
      "unwatch": "fn()"
    },
    "ret779": {
      "unwatch": "fn()"
    },
    "ret780": {
      "unwatch": "fn()"
    },
    "ret781": {
      "unwatch": "fn()"
    },
    "ret782": {
      "unwatch": "fn()"
    },
    "ret783": {
      "unwatch": "fn()"
    },
    "ret784": {
      "unwatch": "fn()"
    },
    "ret785": {
      "unwatch": "fn()"
    },
    "ret786": {
      "unwatch": "fn()"
    },
    "ret787": {
      "unwatch": "fn()"
    },
    "ret788": {
      "unwatch": "fn()"
    },
    "ret789": {
      "unwatch": "fn()"
    },
    "ret790": {
      "unwatch": "fn()"
    },
    "ret791": {
      "unwatch": "fn()"
    },
    "ret792": {
      "unwatch": "fn()"
    },
    "ret793": {
      "unwatch": "fn()"
    },
    "ret794": {
      "unwatch": "fn()"
    },
    "ret795": {
      "unwatch": "fn()"
    },
    "ret796": {
      "unwatch": "fn()"
    },
    "ret797": {
      "unwatch": "fn()"
    },
    "ret798": {
      "unwatch": "fn()"
    },
    "ret799": {
      "unwatch": "fn()"
    },
    "ret800": {
      "unwatch": "fn()"
    },
    "ret801": {
      "unwatch": "fn()"
    },
    "ret802": {
      "unwatch": "fn()"
    },
    "ret803": {
      "unwatch": "fn()"
    },
    "ret804": {
      "unwatch": "fn()"
    },
    "ret805": {
      "unwatch": "fn()"
    },
    "ret806": {
      "unwatch": "fn()"
    },
    "ret807": {
      "unwatch": "fn()"
    },
    "ret808": {
      "unwatch": "fn()"
    },
    "ret809": {
      "unwatch": "fn()"
    },
    "ret810": {
      "unwatch": "fn()"
    },
    "ret811": {
      "unwatch": "fn()"
    },
    "ret812": {
      "unwatch": "fn()"
    },
    "ret813": {
      "unwatch": "fn()"
    },
    "ret814": {
      "unwatch": "fn()"
    },
    "ret815": {
      "unwatch": "fn()"
    },
    "ret816": {
      "unwatch": "fn()"
    },
    "ret817": {
      "unwatch": "fn()"
    },
    "ret818": {
      "unwatch": "fn()"
    },
    "ret819": {
      "unwatch": "fn()"
    },
    "ret820": {
      "unwatch": "fn()"
    },
    "ret821": {
      "unwatch": "fn()"
    },
    "ret822": {
      "unwatch": "fn()"
    },
    "ret823": {
      "unwatch": "fn()"
    },
    "ret824": {
      "unwatch": "fn()"
    },
    "ret825": {
      "unwatch": "fn()"
    },
    "ret826": {
      "unwatch": "fn()"
    },
    "ret827": {
      "unwatch": "fn()"
    },
    "ret828": {
      "unwatch": "fn()"
    },
    "ret829": {
      "unwatch": "fn()"
    },
    "ret830": {
      "unwatch": "fn()"
    },
    "ret831": {
      "unwatch": "fn()"
    },
    "ret832": {
      "unwatch": "fn()"
    },
    "ret833": {
      "unwatch": "fn()"
    },
    "ret834": {
      "unwatch": "fn()"
    },
    "ret835": {
      "unwatch": "fn()"
    },
    "ret836": {
      "unwatch": "fn()"
    },
    "ret837": {
      "unwatch": "fn()"
    },
    "ret838": {
      "unwatch": "fn()"
    },
    "ret839": {
      "unwatch": "fn()"
    },
    "ret840": {
      "unwatch": "fn()"
    },
    "ret841": {
      "unwatch": "fn()"
    },
    "ret842": {
      "unwatch": "fn()"
    },
    "ret843": {
      "unwatch": "fn()"
    },
    "ret844": {
      "unwatch": "fn()"
    },
    "ret845": {
      "unwatch": "fn()"
    },
    "ret846": {
      "unwatch": "fn()"
    },
    "ret847": {
      "unwatch": "fn()"
    },
    "ret848": {
      "unwatch": "fn()"
    },
    "ret849": {
      "unwatch": "fn()"
    },
    "ret850": {
      "unwatch": "fn()"
    },
    "ret851": {
      "unwatch": "fn()"
    },
    "ret852": {
      "unwatch": "fn()"
    },
    "ret853": {
      "unwatch": "fn()"
    },
    "ret854": {
      "unwatch": "fn()"
    },
    "ret855": {
      "unwatch": "fn()"
    },
    "ret856": {
      "unwatch": "fn()"
    },
    "ret857": {
      "unwatch": "fn()"
    },
    "ret858": {
      "unwatch": "fn()"
    },
    "ret859": {
      "unwatch": "fn()"
    },
    "ret860": {
      "unwatch": "fn()"
    },
    "ret861": {
      "unwatch": "fn()"
    },
    "ret862": {
      "unwatch": "fn()"
    },
    "ret863": {
      "unwatch": "fn()"
    },
    "ret864": {
      "unwatch": "fn()"
    },
    "ret865": {
      "unwatch": "fn()"
    },
    "ret866": {
      "unwatch": "fn()"
    },
    "ret867": {
      "unwatch": "fn()"
    },
    "ret868": {
      "unwatch": "fn()"
    },
    "ret869": {
      "unwatch": "fn()"
    },
    "ret870": {
      "unwatch": "fn()"
    },
    "ret871": {
      "unwatch": "fn()"
    },
    "ret872": {
      "unwatch": "fn()"
    },
    "ret873": {
      "unwatch": "fn()"
    },
    "ret874": {
      "unwatch": "fn()"
    },
    "ret875": {
      "unwatch": "fn()"
    },
    "ret876": {
      "unwatch": "fn()"
    },
    "ret877": {
      "unwatch": "fn()"
    },
    "ret878": {
      "unwatch": "fn()"
    },
    "ret879": {
      "unwatch": "fn()"
    },
    "ret880": {
      "unwatch": "fn()"
    },
    "ret881": {
      "unwatch": "fn()"
    },
    "ret882": {
      "unwatch": "fn()"
    },
    "ret883": {
      "unwatch": "fn()"
    },
    "ret884": {
      "unwatch": "fn()"
    },
    "ret885": {
      "unwatch": "fn()"
    },
    "ret886": {
      "unwatch": "fn()"
    },
    "ret887": {
      "unwatch": "fn()"
    },
    "ret888": {
      "unwatch": "fn()"
    },
    "ret889": {
      "unwatch": "fn()"
    },
    "ret890": {
      "unwatch": "fn()"
    },
    "ret891": {
      "unwatch": "fn()"
    },
    "ret892": {
      "unwatch": "fn()"
    },
    "ret893": {
      "unwatch": "fn()"
    },
    "ret894": {
      "unwatch": "fn()"
    },
    "ret895": {
      "unwatch": "fn()"
    },
    "ret896": {
      "unwatch": "fn()"
    },
    "ret897": {
      "unwatch": "fn()"
    },
    "ret898": {
      "unwatch": "fn()"
    },
    "ret899": {
      "unwatch": "fn()"
    },
    "ret900": {
      "unwatch": "fn()"
    },
    "ret901": {
      "unwatch": "fn()"
    },
    "ret902": {
      "unwatch": "fn()"
    },
    "ret903": {
      "unwatch": "fn()"
    },
    "ret904": {
      "unwatch": "fn()"
    },
    "ret905": {
      "unwatch": "fn()"
    },
    "ret906": {
      "unwatch": "fn()"
    },
    "ret907": {
      "unwatch": "fn()"
    },
    "ret908": {
      "unwatch": "fn()"
    },
    "ret909": {
      "unwatch": "fn()"
    },
    "ret910": {
      "unwatch": "fn()"
    },
    "ret911": {
      "unwatch": "fn()"
    },
    "ret912": {
      "unwatch": "fn()"
    },
    "ret913": {
      "unwatch": "fn()"
    },
    "ret914": {
      "unwatch": "fn()"
    },
    "ret915": {
      "unwatch": "fn()"
    },
    "ret916": {
      "unwatch": "fn()"
    },
    "ret917": {
      "unwatch": "fn()"
    },
    "ret918": {
      "unwatch": "fn()"
    },
    "ret919": {
      "unwatch": "fn()"
    },
    "ret920": {
      "unwatch": "fn()"
    },
    "ret921": {
      "unwatch": "fn()"
    },
    "ret922": {
      "unwatch": "fn()"
    },
    "ret923": {
      "unwatch": "fn()"
    },
    "ret924": {
      "unwatch": "fn()"
    },
    "ret925": {
      "unwatch": "fn()"
    },
    "ret926": {
      "unwatch": "fn()"
    },
    "ret927": {
      "unwatch": "fn()"
    },
    "ret928": {
      "unwatch": "fn()"
    },
    "ret929": {
      "unwatch": "fn()"
    },
    "ret930": {
      "unwatch": "fn()"
    },
    "ret931": {
      "unwatch": "fn()"
    },
    "ret932": {
      "unwatch": "fn()"
    },
    "ret933": {
      "unwatch": "fn()"
    },
    "ret934": {
      "unwatch": "fn()"
    },
    "ret935": {
      "unwatch": "fn()"
    },
    "ret936": {
      "unwatch": "fn()"
    },
    "ret937": {
      "unwatch": "fn()"
    },
    "ret938": {
      "unwatch": "fn()"
    },
    "ret939": {
      "unwatch": "fn()"
    },
    "ret940": {
      "unwatch": "fn()"
    },
    "ret941": {
      "unwatch": "fn()"
    },
    "ret942": {
      "unwatch": "fn()"
    },
    "ret943": {
      "unwatch": "fn()"
    },
    "ret944": {
      "unwatch": "fn()"
    },
    "ret945": {
      "unwatch": "fn()"
    },
    "ret946": {
      "unwatch": "fn()"
    },
    "ret947": {
      "unwatch": "fn()"
    },
    "ret948": {
      "unwatch": "fn()"
    },
    "ret949": {
      "unwatch": "fn()"
    },
    "ret950": {
      "unwatch": "fn()"
    },
    "ret951": {
      "unwatch": "fn()"
    },
    "ret952": {
      "unwatch": "fn()"
    },
    "ret953": {
      "unwatch": "fn()"
    },
    "ret954": {
      "unwatch": "fn()"
    },
    "ret955": {
      "unwatch": "fn()"
    },
    "ret956": {
      "unwatch": "fn()"
    },
    "ret957": {
      "unwatch": "fn()"
    },
    "ret958": {
      "unwatch": "fn()"
    },
    "ret959": {
      "unwatch": "fn()"
    },
    "ret960": {
      "unwatch": "fn()"
    },
    "ret961": {
      "unwatch": "fn()"
    },
    "ret962": {
      "unwatch": "fn()"
    },
    "ret963": {
      "unwatch": "fn()"
    },
    "ret964": {
      "unwatch": "fn()"
    },
    "ret965": {
      "unwatch": "fn()"
    },
    "ret966": {
      "unwatch": "fn()"
    },
    "ret967": {
      "unwatch": "fn()"
    },
    "ret968": {
      "unwatch": "fn()"
    },
    "ret969": {
      "unwatch": "fn()"
    },
    "ret970": {
      "unwatch": "fn()"
    },
    "ret971": {
      "unwatch": "fn()"
    },
    "ret972": {
      "unwatch": "fn()"
    },
    "ret973": {
      "unwatch": "fn()"
    },
    "ret974": {
      "unwatch": "fn()"
    },
    "ret975": {
      "unwatch": "fn()"
    },
    "ret976": {
      "unwatch": "fn()"
    },
    "ret977": {
      "unwatch": "fn()"
    },
    "ret978": {
      "unwatch": "fn()"
    },
    "ret979": {
      "unwatch": "fn()"
    },
    "ret980": {
      "unwatch": "fn()"
    },
    "ret981": {
      "unwatch": "fn()"
    },
    "ret982": {
      "unwatch": "fn()"
    },
    "ret983": {
      "unwatch": "fn()"
    },
    "ret984": {
      "unwatch": "fn()"
    },
    "ret985": {
      "unwatch": "fn()"
    },
    "ret986": {
      "unwatch": "fn()"
    },
    "ret987": {
      "unwatch": "fn()"
    },
    "ret988": {
      "unwatch": "fn()"
    },
    "ret989": {
      "unwatch": "fn()"
    },
    "ret990": {
      "unwatch": "fn()"
    },
    "ret991": {
      "unwatch": "fn()"
    },
    "ret992": {
      "unwatch": "fn()"
    },
    "ret993": {
      "unwatch": "fn()"
    },
    "ret994": {
      "unwatch": "fn()"
    },
    "ret995": {
      "unwatch": "fn()"
    },
    "ret996": {
      "unwatch": "fn()"
    },
    "ret997": {
      "unwatch": "fn()"
    },
    "ret998": {
      "unwatch": "fn()"
    },
    "ret999": {
      "unwatch": "fn()"
    },
    "ret1000": {
      "unwatch": "fn()"
    },
    "ret1001": {
      "unwatch": "fn()"
    },
    "ret1002": {
      "unwatch": "fn()"
    },
    "ret1003": {
      "unwatch": "fn()"
    },
    "ret1004": {
      "unwatch": "fn()"
    },
    "ret1005": {
      "unwatch": "fn()"
    },
    "ret1006": {
      "unwatch": "fn()"
    },
    "ret1007": {
      "unwatch": "fn()"
    },
    "ret1008": {
      "unwatch": "fn()"
    },
    "ret1009": {
      "unwatch": "fn()"
    },
    "ret1010": {
      "unwatch": "fn()"
    },
    "ret1011": {
      "unwatch": "fn()"
    },
    "ret1012": {
      "unwatch": "fn()"
    },
    "ret1013": {
      "unwatch": "fn()"
    },
    "ret1014": {
      "unwatch": "fn()"
    },
    "ret1015": {
      "unwatch": "fn()"
    },
    "ret1016": {
      "unwatch": "fn()"
    },
    "ret1017": {
      "unwatch": "fn()"
    },
    "ret1018": {
      "unwatch": "fn()"
    },
    "ret1019": {
      "unwatch": "fn()"
    },
    "ret1020": {
      "unwatch": "fn()"
    },
    "ret1021": {
      "unwatch": "fn()"
    },
    "ret1022": {
      "unwatch": "fn()"
    },
    "ret1023": {
      "unwatch": "fn()"
    },
    "ret1024": {
      "unwatch": "fn()"
    },
    "ret1025": {
      "unwatch": "fn()"
    },
    "ret1026": {
      "unwatch": "fn()"
    },
    "ret1027": {
      "unwatch": "fn()"
    },
    "ret1028": {
      "unwatch": "fn()"
    },
    "ret1029": {
      "unwatch": "fn()"
    },
    "ret1030": {
      "unwatch": "fn()"
    },
    "ret1031": {
      "unwatch": "fn()"
    },
    "ret1032": {
      "unwatch": "fn()"
    },
    "ret1033": {
      "unwatch": "fn()"
    },
    "ret1034": {
      "unwatch": "fn()"
    },
    "ret1035": {
      "unwatch": "fn()"
    },
    "ret1036": {
      "unwatch": "fn()"
    },
    "ret1037": {
      "unwatch": "fn()"
    },
    "ret1038": {
      "unwatch": "fn()"
    },
    "ret1039": {
      "unwatch": "fn()"
    },
    "ret1040": {
      "unwatch": "fn()"
    },
    "ret1041": {
      "unwatch": "fn()"
    },
    "ret1042": {
      "unwatch": "fn()"
    },
    "ret1043": {
      "unwatch": "fn()"
    },
    "ret1044": {
      "unwatch": "fn()"
    },
    "ret1045": {
      "unwatch": "fn()"
    },
    "ret1046": {
      "unwatch": "fn()"
    },
    "ret1047": {
      "unwatch": "fn()"
    },
    "ret1048": {
      "unwatch": "fn()"
    },
    "ret1049": {
      "unwatch": "fn()"
    },
    "ret1050": {
      "unwatch": "fn()"
    },
    "ret1051": {
      "unwatch": "fn()"
    },
    "ret1052": {
      "unwatch": "fn()"
    },
    "ret1053": {
      "unwatch": "fn()"
    },
    "ret1054": {
      "unwatch": "fn()"
    },
    "ret1055": {
      "unwatch": "fn()"
    },
    "ret1056": {
      "unwatch": "fn()"
    },
    "ret1057": {
      "unwatch": "fn()"
    },
    "ret1058": {
      "unwatch": "fn()"
    },
    "ret1059": {
      "unwatch": "fn()"
    },
    "ret1060": {
      "unwatch": "fn()"
    },
    "ret1061": {
      "unwatch": "fn()"
    },
    "ret1062": {
      "unwatch": "fn()"
    },
    "ret1063": {
      "unwatch": "fn()"
    },
    "ret1064": {
      "unwatch": "fn()"
    },
    "ret1065": {
      "unwatch": "fn()"
    },
    "ret1066": {
      "unwatch": "fn()"
    },
    "ret1067": {
      "unwatch": "fn()"
    },
    "ret1068": {
      "unwatch": "fn()"
    },
    "ret1069": {
      "unwatch": "fn()"
    },
    "ret1070": {
      "unwatch": "fn()"
    },
    "ret1071": {
      "unwatch": "fn()"
    },
    "ret1072": {
      "unwatch": "fn()"
    },
    "ret1073": {
      "unwatch": "fn()"
    },
    "ret1074": {
      "unwatch": "fn()"
    },
    "ret1075": {
      "unwatch": "fn()"
    },
    "ret1076": {
      "unwatch": "fn()"
    },
    "ret1077": {
      "unwatch": "fn()"
    },
    "ret1078": {
      "unwatch": "fn()"
    },
    "ret1079": {
      "unwatch": "fn()"
    },
    "ret1080": {
      "unwatch": "fn()"
    },
    "ret1081": {
      "unwatch": "fn()"
    },
    "ret1082": {
      "unwatch": "fn()"
    },
    "ret1083": {
      "unwatch": "fn()"
    },
    "ret1084": {
      "unwatch": "fn()"
    },
    "ret1085": {
      "unwatch": "fn()"
    },
    "ret1086": {
      "unwatch": "fn()"
    },
    "ret1087": {
      "unwatch": "fn()"
    },
    "ret1088": {
      "unwatch": "fn()"
    },
    "ret1089": {
      "unwatch": "fn()"
    },
    "ret1090": {
      "unwatch": "fn()"
    },
    "ret1091": {
      "unwatch": "fn()"
    },
    "ret1092": {
      "unwatch": "fn()"
    },
    "ret1093": {
      "unwatch": "fn()"
    },
    "ret1094": {
      "unwatch": "fn()"
    },
    "ret1095": {
      "unwatch": "fn()"
    },
    "ret1096": {
      "unwatch": "fn()"
    },
    "ret1097": {
      "unwatch": "fn()"
    },
    "ret1098": {
      "unwatch": "fn()"
    },
    "ret1099": {
      "unwatch": "fn()"
    },
    "ret1100": {
      "unwatch": "fn()"
    },
    "ret1101": {
      "unwatch": "fn()"
    },
    "ret1102": {
      "unwatch": "fn()"
    },
    "ret1103": {
      "unwatch": "fn()"
    },
    "ret1104": {
      "unwatch": "fn()"
    },
    "ret1105": {
      "unwatch": "fn()"
    },
    "ret1106": {
      "unwatch": "fn()"
    },
    "ret1107": {
      "unwatch": "fn()"
    },
    "ret1108": {
      "unwatch": "fn()"
    },
    "ret1109": {
      "unwatch": "fn()"
    },
    "ret1110": {
      "unwatch": "fn()"
    },
    "ret1111": {
      "unwatch": "fn()"
    },
    "ret1112": {
      "unwatch": "fn()"
    },
    "ret1113": {
      "unwatch": "fn()"
    },
    "ret1114": {
      "unwatch": "fn()"
    },
    "ret1115": {
      "unwatch": "fn()"
    },
    "ret1116": {
      "unwatch": "fn()"
    },
    "ret1117": {
      "unwatch": "fn()"
    },
    "ret1118": {
      "unwatch": "fn()"
    },
    "ret1119": {
      "unwatch": "fn()"
    },
    "ret1120": {
      "unwatch": "fn()"
    },
    "ret1121": {
      "unwatch": "fn()"
    },
    "ret1122": {
      "unwatch": "fn()"
    },
    "ret1123": {
      "unwatch": "fn()"
    },
    "ret1124": {
      "unwatch": "fn()"
    },
    "ret1125": {
      "unwatch": "fn()"
    },
    "ret1126": {
      "unwatch": "fn()"
    },
    "ret1127": {
      "unwatch": "fn()"
    },
    "ret1128": {
      "unwatch": "fn()"
    },
    "ret1129": {
      "unwatch": "fn()"
    },
    "ret1130": {
      "unwatch": "fn()"
    },
    "ret1131": {
      "unwatch": "fn()"
    },
    "ret1132": {
      "unwatch": "fn()"
    },
    "ret1133": {
      "unwatch": "fn()"
    },
    "ret1134": {
      "unwatch": "fn()"
    },
    "ret1135": {
      "unwatch": "fn()"
    },
    "ret1136": {
      "unwatch": "fn()"
    },
    "ret1137": {
      "unwatch": "fn()"
    },
    "ret1138": {
      "unwatch": "fn()"
    },
    "ret1139": {
      "unwatch": "fn()"
    },
    "ret1140": {
      "unwatch": "fn()"
    },
    "ret1141": {
      "unwatch": "fn()"
    },
    "ret1142": {
      "unwatch": "fn()"
    },
    "ret1143": {
      "unwatch": "fn()"
    },
    "ret1144": {
      "unwatch": "fn()"
    },
    "ret1145": {
      "unwatch": "fn()"
    },
    "ret1146": {
      "unwatch": "fn()"
    },
    "ret1147": {
      "unwatch": "fn()"
    },
    "ret1148": {
      "unwatch": "fn()"
    },
    "ret1149": {
      "unwatch": "fn()"
    },
    "ret1150": {
      "unwatch": "fn()"
    },
    "ret1151": {
      "unwatch": "fn()"
    },
    "ret1152": {
      "unwatch": "fn()"
    },
    "ret1153": {
      "unwatch": "fn()"
    },
    "ret1154": {
      "unwatch": "fn()"
    },
    "ret1155": {
      "unwatch": "fn()"
    },
    "ret1156": {
      "unwatch": "fn()"
    },
    "ret1157": {
      "unwatch": "fn()"
    },
    "ret1158": {
      "unwatch": "fn()"
    },
    "ret1159": {
      "unwatch": "fn()"
    },
    "ret1160": {
      "unwatch": "fn()"
    },
    "ret1161": {
      "unwatch": "fn()"
    },
    "ret1162": {
      "unwatch": "fn()"
    },
    "ret1163": {
      "unwatch": "fn()"
    },
    "ret1164": {
      "unwatch": "fn()"
    },
    "ret1165": {
      "unwatch": "fn()"
    },
    "ret1166": {
      "unwatch": "fn()"
    },
    "ret1167": {
      "unwatch": "fn()"
    },
    "ret1168": {
      "unwatch": "fn()"
    },
    "ret1169": {
      "unwatch": "fn()"
    },
    "ret1170": {
      "unwatch": "fn()"
    },
    "ret1171": {
      "unwatch": "fn()"
    },
    "ret1172": {
      "unwatch": "fn()"
    },
    "ret1173": {
      "unwatch": "fn()"
    },
    "ret1174": {
      "unwatch": "fn()"
    },
    "ret1175": {
      "unwatch": "fn()"
    },
    "ret1176": {
      "unwatch": "fn()"
    },
    "ret1177": {
      "unwatch": "fn()"
    },
    "ret1178": {
      "unwatch": "fn()"
    },
    "ret1179": {
      "unwatch": "fn()"
    },
    "ret1180": {
      "unwatch": "fn()"
    },
    "ret1181": {
      "unwatch": "fn()"
    },
    "ret1182": {
      "unwatch": "fn()"
    },
    "ret1183": {
      "unwatch": "fn()"
    },
    "ret1184": {
      "unwatch": "fn()"
    },
    "ret1185": {
      "unwatch": "fn()"
    },
    "ret1186": {
      "unwatch": "fn()"
    },
    "ret1187": {
      "unwatch": "fn()"
    },
    "ret1188": {
      "unwatch": "fn()"
    },
    "ret1189": {
      "unwatch": "fn()"
    },
    "ret1190": {
      "unwatch": "fn()"
    },
    "ret1191": {
      "unwatch": "fn()"
    },
    "ret1192": {
      "unwatch": "fn()"
    },
    "ret1193": {
      "unwatch": "fn()"
    },
    "ret1194": {
      "unwatch": "fn()"
    },
    "ret1195": {
      "unwatch": "fn()"
    },
    "ret1196": {
      "unwatch": "fn()"
    },
    "ret1197": {
      "unwatch": "fn()"
    },
    "ret1198": {
      "unwatch": "fn()"
    },
    "ret1199": {
      "unwatch": "fn()"
    },
    "ret1200": {
      "unwatch": "fn()"
    },
    "ret1201": {
      "unwatch": "fn()"
    },
    "ret1202": {
      "unwatch": "fn()"
    },
    "ret1203": {
      "unwatch": "fn()"
    },
    "ret1204": {
      "unwatch": "fn()"
    },
    "ret1205": {
      "unwatch": "fn()"
    },
    "ret1206": {
      "unwatch": "fn()"
    },
    "ret1207": {
      "unwatch": "fn()"
    },
    "ret1208": {
      "unwatch": "fn()"
    },
    "ret1209": {
      "unwatch": "fn()"
    },
    "ret1210": {
      "unwatch": "fn()"
    },
    "ret1211": {
      "unwatch": "fn()"
    },
    "ret1212": {
      "unwatch": "fn()"
    },
    "ret1213": {
      "unwatch": "fn()"
    },
    "ret1214": {
      "unwatch": "fn()"
    },
    "ret1215": {
      "unwatch": "fn()"
    },
    "ret1216": {
      "unwatch": "fn()"
    },
    "ret1217": {
      "unwatch": "fn()"
    },
    "ret1218": {
      "unwatch": "fn()"
    },
    "ret1219": {
      "unwatch": "fn()"
    },
    "ret1220": {
      "unwatch": "fn()"
    },
    "ret1221": {
      "unwatch": "fn()"
    },
    "ret1222": {
      "unwatch": "fn()"
    },
    "ret1223": {
      "unwatch": "fn()"
    },
    "ret1224": {
      "unwatch": "fn()"
    },
    "ret1225": {
      "unwatch": "fn()"
    },
    "ret1226": {
      "unwatch": "fn()"
    },
    "ret1227": {
      "unwatch": "fn()"
    },
    "ret1228": {
      "unwatch": "fn()"
    },
    "ret1229": {
      "unwatch": "fn()"
    },
    "ret1230": {
      "unwatch": "fn()"
    },
    "ret1231": {
      "unwatch": "fn()"
    },
    "ret1232": {
      "unwatch": "fn()"
    },
    "ret1233": {
      "unwatch": "fn()"
    },
    "ret1234": {
      "unwatch": "fn()"
    },
    "ret1235": {
      "unwatch": "fn()"
    },
    "ret1236": {
      "unwatch": "fn()"
    },
    "ret1237": {
      "unwatch": "fn()"
    },
    "ret1238": {
      "unwatch": "fn()"
    },
    "ret1239": {
      "unwatch": "fn()"
    },
    "ret1240": {
      "unwatch": "fn()"
    },
    "ret1241": {
      "unwatch": "fn()"
    },
    "ret1242": {
      "unwatch": "fn()"
    },
    "ret1243": {
      "unwatch": "fn()"
    },
    "ret1244": {
      "unwatch": "fn()"
    },
    "ret1245": {
      "unwatch": "fn()"
    },
    "ret1246": {
      "unwatch": "fn()"
    },
    "ret1247": {
      "unwatch": "fn()"
    },
    "ret1248": {
      "unwatch": "fn()"
    },
    "ret1249": {
      "unwatch": "fn()"
    },
    "ret1250": {
      "unwatch": "fn()"
    },
    "ret1251": {
      "unwatch": "fn()"
    },
    "ret1252": {
      "unwatch": "fn()"
    },
    "ret1253": {
      "unwatch": "fn()"
    },
    "ret1254": {
      "unwatch": "fn()"
    },
    "ret1255": {
      "unwatch": "fn()"
    },
    "ret1256": {
      "unwatch": "fn()"
    },
    "ret1257": {
      "unwatch": "fn()"
    },
    "ret1258": {
      "unwatch": "fn()"
    },
    "ret1259": {
      "unwatch": "fn()"
    },
    "ret1260": {
      "unwatch": "fn()"
    },
    "ret1261": {
      "unwatch": "fn()"
    },
    "ret1262": {
      "unwatch": "fn()"
    },
    "ret1263": {
      "unwatch": "fn()"
    },
    "ret1264": {
      "unwatch": "fn()"
    },
    "ret1265": {
      "unwatch": "fn()"
    },
    "ret1266": {
      "unwatch": "fn()"
    },
    "ret1267": {
      "unwatch": "fn()"
    },
    "ret1268": {
      "unwatch": "fn()"
    },
    "ret1269": {
      "unwatch": "fn()"
    },
    "ret1270": {
      "unwatch": "fn()"
    },
    "ret1271": {
      "unwatch": "fn()"
    },
    "ret1272": {
      "unwatch": "fn()"
    },
    "ret1273": {
      "unwatch": "fn()"
    },
    "ret1274": {
      "unwatch": "fn()"
    },
    "ret1275": {
      "unwatch": "fn()"
    },
    "ret1276": {
      "unwatch": "fn()"
    },
    "ret1277": {
      "unwatch": "fn()"
    },
    "ret1278": {
      "unwatch": "fn()"
    },
    "ret1279": {
      "unwatch": "fn()"
    },
    "ret1280": {
      "unwatch": "fn()"
    },
    "ret1281": {
      "unwatch": "fn()"
    },
    "ret1282": {
      "unwatch": "fn()"
    },
    "ret1283": {
      "unwatch": "fn()"
    },
    "ret1284": {
      "unwatch": "fn()"
    },
    "ret1285": {
      "unwatch": "fn()"
    },
    "ret1286": {
      "unwatch": "fn()"
    },
    "ret1287": {
      "unwatch": "fn()"
    },
    "ret1288": {
      "unwatch": "fn()"
    },
    "ret1289": {
      "unwatch": "fn()"
    },
    "ret1290": {
      "unwatch": "fn()"
    },
    "ret1291": {
      "unwatch": "fn()"
    },
    "ret1292": {
      "unwatch": "fn()"
    },
    "ret1293": {
      "unwatch": "fn()"
    },
    "ret1294": {
      "unwatch": "fn()"
    },
    "ret1295": {
      "unwatch": "fn()"
    },
    "ret1296": {
      "unwatch": "fn()"
    },
    "ret1297": {
      "unwatch": "fn()"
    },
    "ret1298": {
      "unwatch": "fn()"
    },
    "ret1299": {
      "unwatch": "fn()"
    },
    "ret1300": {
      "unwatch": "fn()"
    },
    "ret1301": {
      "unwatch": "fn()"
    },
    "ret1302": {
      "unwatch": "fn()"
    },
    "ret1303": {
      "unwatch": "fn()"
    },
    "ret1304": {
      "unwatch": "fn()"
    },
    "ret1305": {
      "unwatch": "fn()"
    },
    "ret1306": {
      "unwatch": "fn()"
    },
    "ret1307": {
      "unwatch": "fn()"
    },
    "ret1308": {
      "unwatch": "fn()"
    },
    "ret1309": {
      "unwatch": "fn()"
    },
    "ret1310": {
      "unwatch": "fn()"
    },
    "ret1311": {
      "unwatch": "fn()"
    },
    "ret1312": {
      "unwatch": "fn()"
    },
    "ret1313": {
      "unwatch": "fn()"
    },
    "ret1314": {
      "unwatch": "fn()"
    },
    "ret1315": {
      "unwatch": "fn()"
    },
    "ret1316": {
      "unwatch": "fn()"
    },
    "ret1317": {
      "unwatch": "fn()"
    },
    "ret1318": {
      "unwatch": "fn()"
    },
    "ret1319": {
      "unwatch": "fn()"
    },
    "ret1320": {
      "unwatch": "fn()"
    },
    "ret1321": {
      "unwatch": "fn()"
    },
    "ret1322": {
      "unwatch": "fn()"
    },
    "ret1323": {
      "unwatch": "fn()"
    },
    "ret1324": {
      "unwatch": "fn()"
    },
    "ret1325": {
      "unwatch": "fn()"
    },
    "ret1326": {
      "unwatch": "fn()"
    },
    "ret1327": {
      "unwatch": "fn()"
    },
    "ret1328": {
      "unwatch": "fn()"
    },
    "ret1329": {
      "unwatch": "fn()"
    },
    "ret1330": {
      "unwatch": "fn()"
    },
    "ret1331": {
      "unwatch": "fn()"
    },
    "ret1332": {
      "unwatch": "fn()"
    },
    "ret1333": {
      "unwatch": "fn()"
    },
    "ret1334": {
      "unwatch": "fn()"
    },
    "ret1335": {
      "unwatch": "fn()"
    },
    "ret1336": {
      "unwatch": "fn()"
    },
    "ret1337": {
      "unwatch": "fn()"
    },
    "ret1338": {
      "unwatch": "fn()"
    },
    "ret1339": {
      "unwatch": "fn()"
    },
    "ret1340": {
      "unwatch": "fn()"
    },
    "ret1341": {
      "unwatch": "fn()"
    },
    "ret1342": {
      "unwatch": "fn()"
    },
    "ret1343": {
      "unwatch": "fn()"
    },
    "ret1344": {
      "unwatch": "fn()"
    },
    "ret1345": {
      "unwatch": "fn()"
    },
    "ret1346": {
      "unwatch": "fn()"
    },
    "ret1347": {
      "unwatch": "fn()"
    },
    "ret1348": {
      "unwatch": "fn()"
    },
    "ret1349": {
      "unwatch": "fn()"
    },
    "ret1350": {
      "unwatch": "fn()"
    },
    "ret1351": {
      "unwatch": "fn()"
    },
    "ret1352": {
      "unwatch": "fn()"
    },
    "ret1353": {
      "unwatch": "fn()"
    },
    "ret1354": {
      "unwatch": "fn()"
    },
    "ret1355": {
      "unwatch": "fn()"
    },
    "ret1356": {
      "unwatch": "fn()"
    },
    "ret1357": {
      "unwatch": "fn()"
    },
    "ret1358": {
      "unwatch": "fn()"
    },
    "ret1359": {
      "unwatch": "fn()"
    },
    "ret1360": {
      "unwatch": "fn()"
    },
    "ret1361": {
      "unwatch": "fn()"
    },
    "ret1362": {
      "unwatch": "fn()"
    },
    "ret1363": {
      "unwatch": "fn()"
    },
    "ret1364": {
      "unwatch": "fn()"
    },
    "ret1365": {
      "unwatch": "fn()"
    },
    "ret1366": {
      "unwatch": "fn()"
    },
    "ret1367": {
      "unwatch": "fn()"
    },
    "ret1368": {
      "unwatch": "fn()"
    },
    "ret1369": {
      "unwatch": "fn()"
    },
    "ret1370": {
      "unwatch": "fn()"
    },
    "ret1371": {
      "unwatch": "fn()"
    },
    "ret1372": {
      "unwatch": "fn()"
    },
    "ret1373": {
      "unwatch": "fn()"
    },
    "ret1374": {
      "unwatch": "fn()"
    },
    "ret1375": {
      "unwatch": "fn()"
    },
    "ret1376": {
      "unwatch": "fn()"
    },
    "ret1377": {
      "unwatch": "fn()"
    },
    "ret1378": {
      "unwatch": "fn()"
    },
    "ret1379": {
      "unwatch": "fn()"
    },
    "ret1380": {
      "unwatch": "fn()"
    },
    "ret1381": {
      "unwatch": "fn()"
    },
    "ret1382": {
      "unwatch": "fn()"
    },
    "ret1383": {
      "unwatch": "fn()"
    },
    "ret1384": {
      "unwatch": "fn()"
    },
    "ret1385": {
      "unwatch": "fn()"
    },
    "ret1386": {
      "unwatch": "fn()"
    },
    "ret1387": {
      "unwatch": "fn()"
    },
    "ret1388": {
      "unwatch": "fn()"
    },
    "ret1389": {
      "unwatch": "fn()"
    },
    "ret1390": {
      "unwatch": "fn()"
    },
    "ret1391": {
      "unwatch": "fn()"
    },
    "ret1392": {
      "unwatch": "fn()"
    },
    "ret1393": {
      "unwatch": "fn()"
    },
    "ret1394": {
      "unwatch": "fn()"
    },
    "ret1395": {
      "unwatch": "fn()"
    },
    "ret1396": {
      "unwatch": "fn()"
    },
    "ret1397": {
      "unwatch": "fn()"
    },
    "ret1398": {
      "unwatch": "fn()"
    },
    "ret1399": {
      "unwatch": "fn()"
    },
    "ret1400": {
      "unwatch": "fn()"
    },
    "ret1401": {
      "unwatch": "fn()"
    },
    "ret1402": {
      "unwatch": "fn()"
    },
    "ret1403": {
      "unwatch": "fn()"
    },
    "ret1404": {
      "unwatch": "fn()"
    },
    "ret1405": {
      "unwatch": "fn()"
    },
    "ret1406": {
      "unwatch": "fn()"
    },
    "ret1407": {
      "unwatch": "fn()"
    },
    "ret1408": {
      "unwatch": "fn()"
    },
    "ret1409": {
      "unwatch": "fn()"
    },
    "ret1410": {
      "unwatch": "fn()"
    },
    "ret1411": {
      "unwatch": "fn()"
    },
    "ret1412": {
      "unwatch": "fn()"
    },
    "ret1413": {
      "unwatch": "fn()"
    },
    "ret1414": {
      "unwatch": "fn()"
    },
    "ret1415": {
      "unwatch": "fn()"
    },
    "ret1416": {
      "unwatch": "fn()"
    },
    "ret1417": {
      "unwatch": "fn()"
    },
    "ret1418": {
      "unwatch": "fn()"
    },
    "ret1419": {
      "unwatch": "fn()"
    },
    "ret1420": {
      "unwatch": "fn()"
    },
    "ret1421": {
      "unwatch": "fn()"
    },
    "ret1422": {
      "unwatch": "fn()"
    },
    "ret1423": {
      "unwatch": "fn()"
    },
    "ret1424": {
      "unwatch": "fn()"
    },
    "ret1425": {
      "unwatch": "fn()"
    },
    "ret1426": {
      "unwatch": "fn()"
    },
    "ret1427": {
      "unwatch": "fn()"
    },
    "ret1428": {
      "unwatch": "fn()"
    },
    "ret1429": {
      "unwatch": "fn()"
    },
    "ret1430": {
      "unwatch": "fn()"
    },
    "ret1431": {
      "unwatch": "fn()"
    },
    "ret1432": {
      "unwatch": "fn()"
    },
    "ret1433": {
      "unwatch": "fn()"
    },
    "ret1434": {
      "unwatch": "fn()"
    },
    "ret1435": {
      "unwatch": "fn()"
    },
    "ret1436": {
      "unwatch": "fn()"
    },
    "ret1437": {
      "unwatch": "fn()"
    },
    "ret1438": {
      "unwatch": "fn()"
    },
    "ret1439": {
      "unwatch": "fn()"
    },
    "ret1440": {
      "unwatch": "fn()"
    },
    "ret1441": {
      "unwatch": "fn()"
    },
    "ret1442": {
      "unwatch": "fn()"
    },
    "ret1443": {
      "unwatch": "fn()"
    },
    "ret1444": {
      "unwatch": "fn()"
    },
    "ret1445": {
      "unwatch": "fn()"
    },
    "ret1446": {
      "unwatch": "fn()"
    },
    "ret1447": {
      "unwatch": "fn()"
    },
    "ret1448": {
      "unwatch": "fn()"
    },
    "ret1449": {
      "unwatch": "fn()"
    },
    "ret1450": {
      "unwatch": "fn()"
    },
    "ret1451": {
      "unwatch": "fn()"
    },
    "ret1452": {
      "unwatch": "fn()"
    },
    "ret1453": {
      "unwatch": "fn()"
    },
    "ret1454": {
      "unwatch": "fn()"
    },
    "ret1455": {
      "unwatch": "fn()"
    },
    "ret1456": {
      "unwatch": "fn()"
    },
    "ret1457": {
      "unwatch": "fn()"
    },
    "ret1458": {
      "unwatch": "fn()"
    },
    "ret1459": {
      "unwatch": "fn()"
    },
    "ret1460": {
      "unwatch": "fn()"
    },
    "ret1461": {
      "unwatch": "fn()"
    },
    "ret1462": {
      "unwatch": "fn()"
    },
    "ret1463": {
      "unwatch": "fn()"
    },
    "ret1464": {
      "unwatch": "fn()"
    },
    "ret1465": {
      "unwatch": "fn()"
    },
    "ret1466": {
      "unwatch": "fn()"
    },
    "ret1467": {
      "unwatch": "fn()"
    },
    "ret1468": {
      "unwatch": "fn()"
    },
    "ret1469": {
      "unwatch": "fn()"
    },
    "ret1470": {
      "unwatch": "fn()"
    },
    "ret1471": {
      "unwatch": "fn()"
    },
    "ret1472": {
      "unwatch": "fn()"
    },
    "ret1473": {
      "unwatch": "fn()"
    },
    "ret1474": {
      "unwatch": "fn()"
    },
    "ret1475": {
      "unwatch": "fn()"
    },
    "ret1476": {
      "unwatch": "fn()"
    },
    "ret1477": {
      "unwatch": "fn()"
    },
    "ret1478": {
      "unwatch": "fn()"
    },
    "ret1479": {
      "unwatch": "fn()"
    },
    "ret1480": {
      "unwatch": "fn()"
    },
    "ret1481": {
      "unwatch": "fn()"
    },
    "ret1482": {
      "unwatch": "fn()"
    },
    "ret1483": {
      "unwatch": "fn()"
    },
    "ret1484": {
      "unwatch": "fn()"
    },
    "ret1485": {
      "unwatch": "fn()"
    },
    "ret1486": {
      "unwatch": "fn()"
    },
    "ret1487": {
      "unwatch": "fn()"
    },
    "ret1488": {
      "unwatch": "fn()"
    },
    "ret1489": {
      "unwatch": "fn()"
    },
    "ret1490": {
      "unwatch": "fn()"
    },
    "ret1491": {
      "unwatch": "fn()"
    },
    "ret1492": {
      "unwatch": "fn()"
    },
    "ret1493": {
      "unwatch": "fn()"
    },
    "ret1494": {
      "unwatch": "fn()"
    },
    "ret1495": {
      "unwatch": "fn()"
    },
    "ret1496": {
      "unwatch": "fn()"
    },
    "ret1497": {
      "unwatch": "fn()"
    },
    "ret1498": {
      "unwatch": "fn()"
    },
    "ret1499": {
      "unwatch": "fn()"
    },
    "ret1500": {
      "unwatch": "fn()"
    },
    "ret1501": {
      "unwatch": "fn()"
    },
    "ret1502": {
      "unwatch": "fn()"
    },
    "ret1503": {
      "unwatch": "fn()"
    },
    "ret1504": {
      "unwatch": "fn()"
    },
    "ret1505": {
      "unwatch": "fn()"
    },
    "ret1506": {
      "unwatch": "fn()"
    },
    "ret1507": {
      "unwatch": "fn()"
    },
    "ret1508": {
      "unwatch": "fn()"
    },
    "ret1509": {
      "unwatch": "fn()"
    },
    "ret1510": {
      "unwatch": "fn()"
    },
    "ret1511": {
      "unwatch": "fn()"
    },
    "ret1512": {
      "unwatch": "fn()"
    },
    "ret1513": {
      "unwatch": "fn()"
    },
    "ret1514": {
      "unwatch": "fn()"
    },
    "ret1515": {
      "unwatch": "fn()"
    },
    "ret1516": {
      "unwatch": "fn()"
    },
    "ret1517": {
      "unwatch": "fn()"
    },
    "ret1518": {
      "unwatch": "fn()"
    },
    "ret1519": {
      "unwatch": "fn()"
    },
    "ret1520": {
      "unwatch": "fn()"
    },
    "ret1521": {
      "unwatch": "fn()"
    },
    "ret1522": {
      "unwatch": "fn()"
    },
    "ret1523": {
      "unwatch": "fn()"
    },
    "ret1524": {
      "unwatch": "fn()"
    },
    "ret1525": {
      "unwatch": "fn()"
    },
    "ret1526": {
      "unwatch": "fn()"
    },
    "ret1527": {
      "unwatch": "fn()"
    },
    "ret1528": {
      "unwatch": "fn()"
    },
    "ret1529": {
      "unwatch": "fn()"
    },
    "ret1530": {
      "unwatch": "fn()"
    },
    "ret1531": {
      "unwatch": "fn()"
    },
    "ret1532": {
      "unwatch": "fn()"
    },
    "ret1533": {
      "unwatch": "fn()"
    },
    "ret1534": {
      "unwatch": "fn()"
    },
    "ret1535": {
      "unwatch": "fn()"
    },
    "ret1536": {
      "unwatch": "fn()"
    },
    "ret1537": {
      "unwatch": "fn()"
    },
    "ret1538": {
      "unwatch": "fn()"
    },
    "ret1539": {
      "unwatch": "fn()"
    },
    "ret1540": {
      "unwatch": "fn()"
    },
    "ret1541": {
      "unwatch": "fn()"
    },
    "ret1542": {
      "unwatch": "fn()"
    },
    "ret1543": {
      "unwatch": "fn()"
    },
    "ret1544": {
      "unwatch": "fn()"
    },
    "ret1545": {
      "unwatch": "fn()"
    },
    "ret1546": {
      "unwatch": "fn()"
    },
    "ret1547": {
      "unwatch": "fn()"
    },
    "ret1548": {
      "unwatch": "fn()"
    },
    "ret1549": {
      "unwatch": "fn()"
    },
    "ret1550": {
      "unwatch": "fn()"
    },
    "ret1551": {
      "unwatch": "fn()"
    },
    "ret1552": {
      "unwatch": "fn()"
    },
    "ret1553": {
      "unwatch": "fn()"
    },
    "ret1554": {
      "unwatch": "fn()"
    },
    "ret1555": {
      "unwatch": "fn()"
    },
    "ret1556": {
      "unwatch": "fn()"
    },
    "ret1557": {
      "unwatch": "fn()"
    },
    "ret1558": {
      "unwatch": "fn()"
    },
    "ret1559": {
      "unwatch": "fn()"
    },
    "ret1560": {
      "unwatch": "fn()"
    },
    "ret1561": {
      "unwatch": "fn()"
    },
    "ret1562": {
      "unwatch": "fn()"
    },
    "ret1563": {
      "unwatch": "fn()"
    },
    "ret1564": {
      "unwatch": "fn()"
    },
    "ret1565": {
      "unwatch": "fn()"
    },
    "ret1566": {
      "unwatch": "fn()"
    },
    "ret1567": {
      "unwatch": "fn()"
    },
    "ret1568": {
      "unwatch": "fn()"
    },
    "ret1569": {
      "unwatch": "fn()"
    },
    "ret1570": {
      "unwatch": "fn()"
    },
    "ret1571": {
      "unwatch": "fn()"
    },
    "ret1572": {
      "unwatch": "fn()"
    },
    "ret1573": {
      "unwatch": "fn()"
    },
    "ret1574": {
      "unwatch": "fn()"
    },
    "ret1575": {
      "unwatch": "fn()"
    },
    "ret1576": {
      "unwatch": "fn()"
    },
    "ret1577": {
      "unwatch": "fn()"
    },
    "ret1578": {
      "unwatch": "fn()"
    },
    "ret1579": {
      "unwatch": "fn()"
    },
    "ret1580": {
      "unwatch": "fn()"
    },
    "ret1581": {
      "unwatch": "fn()"
    },
    "ret1582": {
      "unwatch": "fn()"
    },
    "ret1583": {
      "unwatch": "fn()"
    },
    "ret1584": {
      "unwatch": "fn()"
    },
    "ret1585": {
      "unwatch": "fn()"
    },
    "ret1586": {
      "unwatch": "fn()"
    },
    "ret1587": {
      "unwatch": "fn()"
    },
    "ret1588": {
      "unwatch": "fn()"
    },
    "ret1589": {
      "unwatch": "fn()"
    },
    "ret1590": {
      "unwatch": "fn()"
    },
    "ret1591": {
      "unwatch": "fn()"
    },
    "ret1592": {
      "unwatch": "fn()"
    },
    "ret1593": {
      "unwatch": "fn()"
    },
    "ret1594": {
      "unwatch": "fn()"
    },
    "ret1595": {
      "unwatch": "fn()"
    },
    "ret1596": {
      "unwatch": "fn()"
    },
    "ret1597": {
      "unwatch": "fn()"
    },
    "ret1598": {
      "unwatch": "fn()"
    },
    "ret1599": {
      "unwatch": "fn()"
    },
    "ret1600": {
      "unwatch": "fn()"
    },
    "ret1601": {
      "unwatch": "fn()"
    },
    "ret1602": {
      "unwatch": "fn()"
    },
    "ret1603": {
      "unwatch": "fn()"
    },
    "ret1604": {
      "unwatch": "fn()"
    },
    "ret1605": {
      "unwatch": "fn()"
    },
    "ret1606": {
      "unwatch": "fn()"
    },
    "ret1607": {
      "unwatch": "fn()"
    },
    "ret1608": {
      "unwatch": "fn()"
    },
    "ret1609": {
      "unwatch": "fn()"
    },
    "ret1610": {
      "unwatch": "fn()"
    },
    "ret1611": {
      "unwatch": "fn()"
    },
    "ret1612": {
      "unwatch": "fn()"
    },
    "ret1613": {
      "unwatch": "fn()"
    },
    "ret1614": {
      "unwatch": "fn()"
    },
    "ret1615": {
      "unwatch": "fn()"
    },
    "ret1616": {
      "unwatch": "fn()"
    },
    "ret1617": {
      "unwatch": "fn()"
    },
    "ret1618": {
      "unwatch": "fn()"
    },
    "ret1619": {
      "unwatch": "fn()"
    },
    "ret1620": {
      "unwatch": "fn()"
    },
    "ret1621": {
      "unwatch": "fn()"
    },
    "ret1622": {
      "unwatch": "fn()"
    },
    "ret1623": {
      "unwatch": "fn()"
    },
    "ret1624": {
      "unwatch": "fn()"
    },
    "ret1625": {
      "unwatch": "fn()"
    },
    "ret1626": {
      "unwatch": "fn()"
    },
    "ret1627": {
      "unwatch": "fn()"
    },
    "ret1628": {
      "unwatch": "fn()"
    },
    "ret1629": {
      "unwatch": "fn()"
    },
    "ret1630": {
      "unwatch": "fn()"
    },
    "ret1631": {
      "unwatch": "fn()"
    },
    "ret1632": {
      "unwatch": "fn()"
    },
    "ret1633": {
      "unwatch": "fn()"
    },
    "ret1634": {
      "unwatch": "fn()"
    },
    "ret1635": {
      "unwatch": "fn()"
    },
    "ret1636": {
      "unwatch": "fn()"
    },
    "ret1637": {
      "unwatch": "fn()"
    },
    "ret1638": {
      "unwatch": "fn()"
    },
    "ret1639": {
      "unwatch": "fn()"
    },
    "ret1640": {
      "unwatch": "fn()"
    },
    "ret1641": {
      "unwatch": "fn()"
    },
    "ret1642": {
      "unwatch": "fn()"
    },
    "ret1643": {
      "unwatch": "fn()"
    },
    "ret1644": {
      "unwatch": "fn()"
    },
    "ret1645": {
      "unwatch": "fn()"
    },
    "ret1646": {
      "unwatch": "fn()"
    },
    "ret1647": {
      "unwatch": "fn()"
    },
    "ret1648": {
      "unwatch": "fn()"
    },
    "ret1649": {
      "unwatch": "fn()"
    },
    "ret1650": {
      "unwatch": "fn()"
    },
    "ret1651": {
      "unwatch": "fn()"
    },
    "ret1652": {
      "unwatch": "fn()"
    },
    "ret1653": {
      "unwatch": "fn()"
    },
    "ret1654": {
      "unwatch": "fn()"
    },
    "ret1655": {
      "unwatch": "fn()"
    },
    "ret1656": {
      "unwatch": "fn()"
    },
    "ret1657": {
      "unwatch": "fn()"
    },
    "ret1658": {
      "unwatch": "fn()"
    },
    "ret1659": {
      "unwatch": "fn()"
    },
    "ret1660": {
      "unwatch": "fn()"
    },
    "ret1661": {
      "unwatch": "fn()"
    },
    "ret1662": {
      "unwatch": "fn()"
    },
    "ret1663": {
      "unwatch": "fn()"
    },
    "ret1664": {
      "unwatch": "fn()"
    },
    "ret1665": {
      "unwatch": "fn()"
    },
    "ret1666": {
      "unwatch": "fn()"
    },
    "ret1667": {
      "unwatch": "fn()"
    },
    "ret1668": {
      "unwatch": "fn()"
    },
    "ret1669": {
      "unwatch": "fn()"
    },
    "ret1670": {
      "unwatch": "fn()"
    },
    "ret1671": {
      "unwatch": "fn()"
    },
    "ret1672": {
      "unwatch": "fn()"
    },
    "ret1673": {
      "unwatch": "fn()"
    },
    "ret1674": {
      "unwatch": "fn()"
    },
    "ret1675": {
      "unwatch": "fn()"
    },
    "ret1676": {
      "unwatch": "fn()"
    },
    "ret1677": {
      "unwatch": "fn()"
    },
    "ret1678": {
      "unwatch": "fn()"
    },
    "ret1679": {
      "unwatch": "fn()"
    },
    "ret1680": {
      "unwatch": "fn()"
    },
    "ret1681": {
      "unwatch": "fn()"
    },
    "ret1682": {
      "unwatch": "fn()"
    },
    "ret1683": {
      "unwatch": "fn()"
    },
    "ret1684": {
      "unwatch": "fn()"
    },
    "ret1685": {
      "unwatch": "fn()"
    },
    "ret1686": {
      "unwatch": "fn()"
    },
    "ret1687": {
      "unwatch": "fn()"
    },
    "ret1688": {
      "unwatch": "fn()"
    },
    "ret1689": {
      "unwatch": "fn()"
    },
    "ret1690": {
      "unwatch": "fn()"
    },
    "ret1691": {
      "unwatch": "fn()"
    },
    "ret1692": {
      "unwatch": "fn()"
    },
    "ret1693": {
      "unwatch": "fn()"
    },
    "ret1694": {
      "unwatch": "fn()"
    },
    "ret1695": {
      "unwatch": "fn()"
    },
    "ret1696": {
      "unwatch": "fn()"
    },
    "ret1697": {
      "unwatch": "fn()"
    },
    "ret1698": {
      "unwatch": "fn()"
    },
    "ret1699": {
      "unwatch": "fn()"
    },
    "ret1700": {
      "unwatch": "fn()"
    },
    "ret1701": {
      "unwatch": "fn()"
    },
    "ret1702": {
      "unwatch": "fn()"
    },
    "ret1703": {
      "unwatch": "fn()"
    },
    "ret1704": {
      "unwatch": "fn()"
    },
    "ret1705": {
      "unwatch": "fn()"
    },
    "ret1706": {
      "unwatch": "fn()"
    },
    "ret1707": {
      "unwatch": "fn()"
    },
    "ret1708": {
      "unwatch": "fn()"
    },
    "ret1709": {
      "unwatch": "fn()"
    },
    "ret1710": {
      "unwatch": "fn()"
    },
    "ret1711": {
      "unwatch": "fn()"
    },
    "ret1712": {
      "unwatch": "fn()"
    },
    "ret1713": {
      "unwatch": "fn()"
    },
    "ret1714": {
      "unwatch": "fn()"
    },
    "ret1715": {
      "unwatch": "fn()"
    },
    "ret1716": {
      "unwatch": "fn()"
    },
    "ret1717": {
      "unwatch": "fn()"
    },
    "ret1718": {
      "unwatch": "fn()"
    },
    "ret1719": {
      "unwatch": "fn()"
    },
    "ret1720": {
      "unwatch": "fn()"
    },
    "ret1721": {
      "unwatch": "fn()"
    },
    "ret1722": {
      "unwatch": "fn()"
    },
    "ret1723": {
      "unwatch": "fn()"
    },
    "ret1724": {
      "unwatch": "fn()"
    },
    "ret1725": {
      "unwatch": "fn()"
    },
    "ret1726": {
      "unwatch": "fn()"
    },
    "ret1727": {
      "unwatch": "fn()"
    },
    "ret1728": {
      "unwatch": "fn()"
    },
    "ret1729": {
      "unwatch": "fn()"
    },
    "ret1730": {
      "unwatch": "fn()"
    },
    "ret1731": {
      "unwatch": "fn()"
    },
    "ret1732": {
      "unwatch": "fn()"
    },
    "ret1733": {
      "unwatch": "fn()"
    },
    "ret1734": {
      "unwatch": "fn()"
    },
    "ret1735": {
      "unwatch": "fn()"
    },
    "ret1736": {
      "unwatch": "fn()"
    },
    "ret1737": {
      "unwatch": "fn()"
    },
    "ret1738": {
      "unwatch": "fn()"
    },
    "ret1739": {
      "unwatch": "fn()"
    },
    "ret1740": {
      "unwatch": "fn()"
    },
    "ret1741": {
      "unwatch": "fn()"
    },
    "ret1742": {
      "unwatch": "fn()"
    },
    "ret1743": {
      "unwatch": "fn()"
    },
    "ret1744": {
      "unwatch": "fn()"
    },
    "ret1745": {
      "unwatch": "fn()"
    },
    "ret1746": {
      "unwatch": "fn()"
    },
    "ret1747": {
      "unwatch": "fn()"
    },
    "ret1748": {
      "unwatch": "fn()"
    },
    "ret1749": {
      "unwatch": "fn()"
    },
    "ret1750": {
      "unwatch": "fn()"
    },
    "ret1751": {
      "unwatch": "fn()"
    },
    "ret1752": {
      "unwatch": "fn()"
    },
    "ret1753": {
      "unwatch": "fn()"
    },
    "ret1754": {
      "unwatch": "fn()"
    },
    "ret1755": {
      "unwatch": "fn()"
    },
    "ret1756": {
      "unwatch": "fn()"
    },
    "ret1757": {
      "unwatch": "fn()"
    },
    "ret1758": {
      "unwatch": "fn()"
    },
    "ret1759": {
      "unwatch": "fn()"
    },
    "ret1760": {
      "unwatch": "fn()"
    },
    "ret1761": {
      "unwatch": "fn()"
    },
    "ret1762": {
      "unwatch": "fn()"
    },
    "ret1763": {
      "unwatch": "fn()"
    },
    "ret1764": {
      "unwatch": "fn()"
    },
    "ret1765": {
      "unwatch": "fn()"
    },
    "ret1766": {
      "unwatch": "fn()"
    },
    "ret1767": {
      "unwatch": "fn()"
    },
    "ret1768": {
      "unwatch": "fn()"
    },
    "ret1769": {
      "unwatch": "fn()"
    },
    "ret1770": {
      "unwatch": "fn()"
    },
    "ret1771": {
      "unwatch": "fn()"
    },
    "ret1772": {
      "unwatch": "fn()"
    },
    "ret1773": {
      "unwatch": "fn()"
    },
    "ret1774": {
      "unwatch": "fn()"
    },
    "ret1775": {
      "unwatch": "fn()"
    },
    "ret1776": {
      "unwatch": "fn()"
    },
    "ret1777": {
      "unwatch": "fn()"
    },
    "ret1778": {
      "unwatch": "fn()"
    },
    "ret1779": {
      "unwatch": "fn()"
    },
    "ret1780": {
      "unwatch": "fn()"
    },
    "ret1781": {
      "unwatch": "fn()"
    },
    "ret1782": {
      "unwatch": "fn()"
    },
    "ret1783": {
      "unwatch": "fn()"
    },
    "ret1784": {
      "unwatch": "fn()"
    },
    "ret1785": {
      "unwatch": "fn()"
    },
    "ret1786": {
      "unwatch": "fn()"
    },
    "ret1787": {
      "unwatch": "fn()"
    },
    "ret1788": {
      "unwatch": "fn()"
    },
    "ret1789": {
      "unwatch": "fn()"
    },
    "ret1790": {
      "unwatch": "fn()"
    },
    "ret1791": {
      "unwatch": "fn()"
    },
    "ret1792": {
      "unwatch": "fn()"
    },
    "ret1793": {
      "unwatch": "fn()"
    },
    "ret1794": {
      "unwatch": "fn()"
    },
    "ret1795": {
      "unwatch": "fn()"
    },
    "ret1796": {
      "unwatch": "fn()"
    },
    "ret1797": {
      "unwatch": "fn()"
    },
    "ret1798": {
      "unwatch": "fn()"
    },
    "ret1799": {
      "unwatch": "fn()"
    },
    "ret1800": {
      "unwatch": "fn()"
    },
    "ret1801": {
      "unwatch": "fn()"
    },
    "ret1802": {
      "unwatch": "fn()"
    },
    "ret1803": {
      "unwatch": "fn()"
    },
    "ret1804": {
      "unwatch": "fn()"
    },
    "ret1805": {
      "unwatch": "fn()"
    },
    "ret1806": {
      "unwatch": "fn()"
    },
    "ret1807": {
      "unwatch": "fn()"
    },
    "ret1808": {
      "unwatch": "fn()"
    },
    "ret1809": {
      "unwatch": "fn()"
    },
    "ret1810": {
      "unwatch": "fn()"
    },
    "ret1811": {
      "unwatch": "fn()"
    },
    "ret1812": {
      "unwatch": "fn()"
    },
    "ret1813": {
      "unwatch": "fn()"
    },
    "ret1814": {
      "unwatch": "fn()"
    },
    "ret1815": {
      "unwatch": "fn()"
    },
    "ret1816": {
      "unwatch": "fn()"
    },
    "ret1817": {
      "unwatch": "fn()"
    },
    "ret1818": {
      "unwatch": "fn()"
    },
    "ret1819": {
      "unwatch": "fn()"
    },
    "ret1820": {
      "unwatch": "fn()"
    },
    "ret1821": {
      "unwatch": "fn()"
    },
    "ret1822": {
      "unwatch": "fn()"
    },
    "ret1823": {
      "unwatch": "fn()"
    },
    "ret1824": {
      "unwatch": "fn()"
    },
    "ret1825": {
      "unwatch": "fn()"
    },
    "ret1826": {
      "unwatch": "fn()"
    },
    "ret1827": {
      "unwatch": "fn()"
    },
    "ret1828": {
      "unwatch": "fn()"
    },
    "ret1829": {
      "unwatch": "fn()"
    },
    "ret1830": {
      "unwatch": "fn()"
    },
    "ret1831": {
      "unwatch": "fn()"
    },
    "ret1832": {
      "unwatch": "fn()"
    },
    "ret1833": {
      "unwatch": "fn()"
    },
    "ret1834": {
      "unwatch": "fn()"
    },
    "ret1835": {
      "unwatch": "fn()"
    },
    "ret1836": {
      "unwatch": "fn()"
    },
    "ret1837": {
      "unwatch": "fn()"
    },
    "ret1838": {
      "unwatch": "fn()"
    },
    "ret1839": {
      "unwatch": "fn()"
    },
    "ret1840": {
      "unwatch": "fn()"
    },
    "ret1841": {
      "unwatch": "fn()"
    },
    "ret1842": {
      "unwatch": "fn()"
    },
    "ret1843": {
      "unwatch": "fn()"
    },
    "ret1844": {
      "unwatch": "fn()"
    },
    "ret1845": {
      "unwatch": "fn()"
    },
    "ret1846": {
      "unwatch": "fn()"
    },
    "ret1847": {
      "unwatch": "fn()"
    },
    "ret1848": {
      "unwatch": "fn()"
    },
    "ret1849": {
      "unwatch": "fn()"
    },
    "ret1850": {
      "unwatch": "fn()"
    },
    "ret1851": {
      "unwatch": "fn()"
    },
    "ret1852": {
      "unwatch": "fn()"
    },
    "ret1853": {
      "unwatch": "fn()"
    },
    "ret1854": {
      "unwatch": "fn()"
    },
    "ret1855": {
      "unwatch": "fn()"
    },
    "ret1856": {
      "unwatch": "fn()"
    },
    "ret1857": {
      "unwatch": "fn()"
    },
    "ret1858": {
      "unwatch": "fn()"
    },
    "ret1859": {
      "unwatch": "fn()"
    },
    "ret1860": {
      "unwatch": "fn()"
    },
    "ret1861": {
      "unwatch": "fn()"
    },
    "ret1862": {
      "unwatch": "fn()"
    },
    "ret1863": {
      "unwatch": "fn()"
    },
    "ret1864": {
      "unwatch": "fn()"
    },
    "ret1865": {
      "unwatch": "fn()"
    },
    "ret1866": {
      "unwatch": "fn()"
    },
    "ret1867": {
      "unwatch": "fn()"
    },
    "ret1868": {
      "unwatch": "fn()"
    },
    "ret1869": {
      "unwatch": "fn()"
    },
    "ret1870": {
      "unwatch": "fn()"
    },
    "ret1871": {
      "unwatch": "fn()"
    },
    "ret1872": {
      "unwatch": "fn()"
    },
    "ret1873": {
      "unwatch": "fn()"
    },
    "ret1874": {
      "unwatch": "fn()"
    },
    "ret1875": {
      "unwatch": "fn()"
    },
    "ret1876": {
      "unwatch": "fn()"
    },
    "ret1877": {
      "unwatch": "fn()"
    },
    "ret1878": {
      "unwatch": "fn()"
    },
    "ret1879": {
      "unwatch": "fn()"
    },
    "ret1880": {
      "unwatch": "fn()"
    },
    "ret1881": {
      "unwatch": "fn()"
    },
    "ret1882": {
      "unwatch": "fn()"
    },
    "ret1883": {
      "unwatch": "fn()"
    },
    "ret1884": {
      "unwatch": "fn()"
    },
    "ret1885": {
      "unwatch": "fn()"
    },
    "ret1886": {
      "unwatch": "fn()"
    },
    "ret1887": {
      "unwatch": "fn()"
    },
    "ret1888": {
      "unwatch": "fn()"
    },
    "ret1889": {
      "unwatch": "fn()"
    },
    "ret1890": {
      "unwatch": "fn()"
    },
    "ret1891": {
      "unwatch": "fn()"
    },
    "ret1892": {
      "unwatch": "fn()"
    },
    "ret1893": {
      "unwatch": "fn()"
    },
    "ret1894": {
      "unwatch": "fn()"
    },
    "ret1895": {
      "unwatch": "fn()"
    },
    "ret1896": {
      "unwatch": "fn()"
    },
    "ret1897": {
      "unwatch": "fn()"
    },
    "ret1898": {
      "unwatch": "fn()"
    },
    "ret1899": {
      "unwatch": "fn()"
    },
    "ret1900": {
      "unwatch": "fn()"
    },
    "ret1901": {
      "unwatch": "fn()"
    },
    "ret1902": {
      "unwatch": "fn()"
    },
    "ret1903": {
      "unwatch": "fn()"
    },
    "ret1904": {
      "unwatch": "fn()"
    },
    "ret1905": {
      "unwatch": "fn()"
    },
    "ret1906": {
      "unwatch": "fn()"
    },
    "ret1907": {
      "unwatch": "fn()"
    },
    "ret1908": {
      "unwatch": "fn()"
    },
    "ret1909": {
      "unwatch": "fn()"
    },
    "ret1910": {
      "unwatch": "fn()"
    },
    "ret1911": {
      "unwatch": "fn()"
    },
    "ret1912": {
      "unwatch": "fn()"
    },
    "ret1913": {
      "unwatch": "fn()"
    },
    "ret1914": {
      "unwatch": "fn()"
    },
    "ret1915": {
      "unwatch": "fn()"
    },
    "ret1916": {
      "unwatch": "fn()"
    },
    "ret1917": {
      "unwatch": "fn()"
    },
    "ret1918": {
      "unwatch": "fn()"
    },
    "ret1919": {
      "unwatch": "fn()"
    },
    "ret1920": {
      "unwatch": "fn()"
    },
    "ret1921": {
      "unwatch": "fn()"
    },
    "ret1922": {
      "unwatch": "fn()"
    },
    "ret1923": {
      "unwatch": "fn()"
    },
    "ret1924": {
      "unwatch": "fn()"
    },
    "ret1925": {
      "unwatch": "fn()"
    },
    "ret1926": {
      "unwatch": "fn()"
    },
    "ret1927": {
      "unwatch": "fn()"
    },
    "ret1928": {
      "unwatch": "fn()"
    },
    "ret1929": {
      "unwatch": "fn()"
    },
    "ret1930": {
      "unwatch": "fn()"
    },
    "ret1931": {
      "unwatch": "fn()"
    },
    "ret1932": {
      "unwatch": "fn()"
    },
    "ret1933": {
      "unwatch": "fn()"
    },
    "ret1934": {
      "unwatch": "fn()"
    },
    "ret1935": {
      "unwatch": "fn()"
    },
    "ret1936": {
      "unwatch": "fn()"
    },
    "ret1937": {
      "unwatch": "fn()"
    },
    "ret1938": {
      "unwatch": "fn()"
    },
    "ret1939": {
      "unwatch": "fn()"
    },
    "ret1940": {
      "unwatch": "fn()"
    },
    "ret1941": {
      "unwatch": "fn()"
    },
    "ret1942": {
      "unwatch": "fn()"
    },
    "ret1943": {
      "unwatch": "fn()"
    },
    "ret1944": {
      "unwatch": "fn()"
    },
    "ret1945": {
      "unwatch": "fn()"
    },
    "ret1946": {
      "unwatch": "fn()"
    },
    "ret1947": {
      "unwatch": "fn()"
    },
    "ret1948": {
      "unwatch": "fn()"
    },
    "ret1949": {
      "unwatch": "fn()"
    },
    "ret1950": {
      "unwatch": "fn()"
    },
    "ret1951": {
      "unwatch": "fn()"
    },
    "ret1952": {
      "unwatch": "fn()"
    },
    "ret1953": {
      "unwatch": "fn()"
    },
    "ret1954": {
      "unwatch": "fn()"
    },
    "ret1955": {
      "unwatch": "fn()"
    },
    "ret1956": {
      "unwatch": "fn()"
    },
    "ret1957": {
      "unwatch": "fn()"
    },
    "ret1958": {
      "unwatch": "fn()"
    },
    "ret1959": {
      "unwatch": "fn()"
    },
    "ret1960": {
      "unwatch": "fn()"
    },
    "ret1961": {
      "unwatch": "fn()"
    },
    "ret1962": {
      "unwatch": "fn()"
    },
    "ret1963": {
      "unwatch": "fn()"
    },
    "ret1964": {
      "unwatch": "fn()"
    },
    "ret1965": {
      "unwatch": "fn()"
    },
    "ret1966": {
      "unwatch": "fn()"
    },
    "ret1967": {
      "unwatch": "fn()"
    },
    "ret1968": {
      "unwatch": "fn()"
    },
    "ret1969": {
      "unwatch": "fn()"
    },
    "ret1970": {
      "unwatch": "fn()"
    },
    "ret1971": {
      "unwatch": "fn()"
    },
    "ret1972": {
      "unwatch": "fn()"
    },
    "ret1973": {
      "unwatch": "fn()"
    },
    "ret1974": {
      "unwatch": "fn()"
    },
    "ret1975": {
      "unwatch": "fn()"
    },
    "ret1976": {
      "unwatch": "fn()"
    },
    "ret1977": {
      "unwatch": "fn()"
    },
    "ret1978": {
      "unwatch": "fn()"
    },
    "ret1979": {
      "unwatch": "fn()"
    },
    "ret1980": {
      "unwatch": "fn()"
    },
    "ret1981": {
      "unwatch": "fn()"
    },
    "ret1982": {
      "unwatch": "fn()"
    },
    "ret1983": {
      "unwatch": "fn()"
    },
    "ret1984": {
      "unwatch": "fn()"
    },
    "ret1985": {
      "unwatch": "fn()"
    },
    "ret1986": {
      "unwatch": "fn()"
    },
    "ret1987": {
      "unwatch": "fn()"
    },
    "ret1988": {
      "unwatch": "fn()"
    },
    "ret1989": {
      "unwatch": "fn()"
    },
    "ret1990": {
      "unwatch": "fn()"
    },
    "ret1991": {
      "unwatch": "fn()"
    },
    "ret1992": {
      "unwatch": "fn()"
    },
    "ret1993": {
      "unwatch": "fn()"
    },
    "ret1994": {
      "unwatch": "fn()"
    },
    "ret1995": {
      "unwatch": "fn()"
    },
    "ret1996": {
      "unwatch": "fn()"
    },
    "ret1997": {
      "unwatch": "fn()"
    },
    "ret1998": {
      "unwatch": "fn()"
    },
    "ret1999": {
      "unwatch": "fn()"
    },
    "ret2000": {
      "unwatch": "fn()"
    },
    "ret2001": {
      "unwatch": "fn()"
    },
    "ret2002": {
      "unwatch": "fn()"
    },
    "ret2003": {
      "unwatch": "fn()"
    },
    "ret2004": {
      "unwatch": "fn()"
    },
    "ret2005": {
      "unwatch": "fn()"
    },
    "ret2006": {
      "unwatch": "fn()"
    },
    "ret2007": {
      "unwatch": "fn()"
    },
    "ret2008": {
      "unwatch": "fn()"
    },
    "ret2009": {
      "unwatch": "fn()"
    },
    "ret2010": {
      "unwatch": "fn()"
    },
    "ret2011": {
      "unwatch": "fn()"
    },
    "ret2012": {
      "unwatch": "fn()"
    },
    "ret2013": {
      "unwatch": "fn()"
    },
    "ret2014": {
      "unwatch": "fn()"
    },
    "ret2015": {
      "unwatch": "fn()"
    },
    "ret2016": {
      "unwatch": "fn()"
    },
    "ret2017": {
      "unwatch": "fn()"
    },
    "ret2018": {
      "unwatch": "fn()"
    },
    "ret2019": {
      "unwatch": "fn()"
    },
    "ret2020": {
      "unwatch": "fn()"
    },
    "ret2021": {
      "unwatch": "fn()"
    },
    "ret2022": {
      "unwatch": "fn()"
    },
    "ret2023": {
      "unwatch": "fn()"
    },
    "ret2024": {
      "unwatch": "fn()"
    },
    "ret2025": {
      "unwatch": "fn()"
    },
    "ret2026": {
      "unwatch": "fn()"
    },
    "ret2027": {
      "unwatch": "fn()"
    },
    "ret2028": {
      "unwatch": "fn()"
    },
    "ret2029": {
      "unwatch": "fn()"
    },
    "ret2030": {
      "unwatch": "fn()"
    },
    "ret2031": {
      "unwatch": "fn()"
    },
    "ret2032": {
      "unwatch": "fn()"
    },
    "ret2033": {
      "unwatch": "fn()"
    },
    "ret2034": {
      "unwatch": "fn()"
    },
    "ret2035": {
      "unwatch": "fn()"
    },
    "ret2036": {
      "unwatch": "fn()"
    },
    "ret2037": {
      "unwatch": "fn()"
    },
    "ret2038": {
      "unwatch": "fn()"
    },
    "ret2039": {
      "unwatch": "fn()"
    },
    "ret2040": {
      "unwatch": "fn()"
    },
    "ret2041": {
      "unwatch": "fn()"
    },
    "ret2042": {
      "unwatch": "fn()"
    },
    "ret2043": {
      "unwatch": "fn()"
    },
    "ret2044": {
      "unwatch": "fn()"
    },
    "ret2045": {
      "unwatch": "fn()"
    },
    "ret2046": {
      "unwatch": "fn()"
    },
    "ret2047": {
      "unwatch": "fn()"
    },
    "ret2048": {
      "unwatch": "fn()"
    },
    "ret2049": {
      "unwatch": "fn()"
    },
    "ret2050": {
      "unwatch": "fn()"
    },
    "ret2051": {
      "unwatch": "fn()"
    },
    "ret2052": {
      "unwatch": "fn()"
    },
    "ret2053": {
      "unwatch": "fn()"
    },
    "ret2054": {
      "unwatch": "fn()"
    },
    "ret2055": {
      "unwatch": "fn()"
    },
    "ret2056": {
      "unwatch": "fn()"
    },
    "ret2057": {
      "unwatch": "fn()"
    },
    "ret2058": {
      "unwatch": "fn()"
    },
    "ret2059": {
      "unwatch": "fn()"
    },
    "ret2060": {
      "unwatch": "fn()"
    },
    "ret2061": {
      "unwatch": "fn()"
    },
    "ret2062": {
      "unwatch": "fn()"
    },
    "ret2063": {
      "unwatch": "fn()"
    },
    "ret2064": {
      "unwatch": "fn()"
    },
    "ret2065": {
      "unwatch": "fn()"
    },
    "ret2066": {
      "unwatch": "fn()"
    },
    "ret2067": {
      "unwatch": "fn()"
    },
    "ret2068": {
      "unwatch": "fn()"
    },
    "ret2069": {
      "unwatch": "fn()"
    },
    "ret2070": {
      "unwatch": "fn()"
    },
    "ret2071": {
      "unwatch": "fn()"
    },
    "ret2072": {
      "unwatch": "fn()"
    },
    "ret2073": {
      "unwatch": "fn()"
    },
    "ret2074": {
      "unwatch": "fn()"
    },
    "ret2075": {
      "unwatch": "fn()"
    },
    "ret2076": {
      "unwatch": "fn()"
    },
    "ret2077": {
      "unwatch": "fn()"
    },
    "ret2078": {
      "unwatch": "fn()"
    },
    "ret2079": {
      "unwatch": "fn()"
    },
    "ret2080": {
      "unwatch": "fn()"
    },
    "ret2081": {
      "unwatch": "fn()"
    },
    "ret2082": {
      "unwatch": "fn()"
    },
    "ret2083": {
      "unwatch": "fn()"
    },
    "ret2084": {
      "unwatch": "fn()"
    },
    "ret2085": {
      "unwatch": "fn()"
    },
    "ret2086": {
      "unwatch": "fn()"
    },
    "ret2087": {
      "unwatch": "fn()"
    },
    "ret2088": {
      "unwatch": "fn()"
    },
    "ret2089": {
      "unwatch": "fn()"
    },
    "ret2090": {
      "unwatch": "fn()"
    },
    "ret2091": {
      "unwatch": "fn()"
    },
    "ret2092": {
      "unwatch": "fn()"
    },
    "ret2093": {
      "unwatch": "fn()"
    },
    "ret2094": {
      "unwatch": "fn()"
    },
    "ret2095": {
      "unwatch": "fn()"
    },
    "ret2096": {
      "unwatch": "fn()"
    },
    "ret2097": {
      "unwatch": "fn()"
    },
    "ret2098": {
      "unwatch": "fn()"
    },
    "ret2099": {
      "unwatch": "fn()"
    },
    "ret2100": {
      "unwatch": "fn()"
    },
    "ret2101": {
      "unwatch": "fn()"
    },
    "ret2102": {
      "unwatch": "fn()"
    },
    "ret2103": {
      "unwatch": "fn()"
    },
    "ret2104": {
      "unwatch": "fn()"
    },
    "ret2105": {
      "unwatch": "fn()"
    },
    "ret2106": {
      "unwatch": "fn()"
    },
    "ret2107": {
      "unwatch": "fn()"
    },
    "ret2108": {
      "unwatch": "fn()"
    },
    "ret2109": {
      "unwatch": "fn()"
    },
    "ret2110": {
      "unwatch": "fn()"
    },
    "ret2111": {
      "unwatch": "fn()"
    },
    "ret2112": {
      "unwatch": "fn()"
    },
    "ret2113": {
      "unwatch": "fn()"
    },
    "ret2114": {
      "unwatch": "fn()"
    },
    "ret2115": {
      "unwatch": "fn()"
    },
    "ret2116": {
      "unwatch": "fn()"
    },
    "ret2117": {
      "unwatch": "fn()"
    },
    "ret2118": {
      "unwatch": "fn()"
    },
    "ret2119": {
      "unwatch": "fn()"
    },
    "ret2120": {
      "unwatch": "fn()"
    },
    "ret2121": {
      "unwatch": "fn()"
    },
    "ret2122": {
      "unwatch": "fn()"
    },
    "ret2123": {
      "unwatch": "fn()"
    },
    "ret2124": {
      "unwatch": "fn()"
    },
    "ret2125": {
      "unwatch": "fn()"
    },
    "ret2126": {
      "unwatch": "fn()"
    },
    "ret2127": {
      "unwatch": "fn()"
    },
    "ret2128": {
      "unwatch": "fn()"
    },
    "ret2129": {
      "unwatch": "fn()"
    },
    "ret2130": {
      "unwatch": "fn()"
    },
    "ret2131": {
      "unwatch": "fn()"
    },
    "ret2132": {
      "unwatch": "fn()"
    },
    "ret2133": {
      "unwatch": "fn()"
    },
    "ret2134": {
      "unwatch": "fn()"
    },
    "ret2135": {
      "unwatch": "fn()"
    },
    "ret2136": {
      "unwatch": "fn()"
    },
    "ret2137": {
      "unwatch": "fn()"
    },
    "ret2138": {
      "unwatch": "fn()"
    },
    "ret2139": {
      "unwatch": "fn()"
    },
    "ret2140": {
      "unwatch": "fn()"
    },
    "ret2141": {
      "unwatch": "fn()"
    },
    "ret2142": {
      "unwatch": "fn()"
    },
    "ret2143": {
      "unwatch": "fn()"
    },
    "ret2144": {
      "unwatch": "fn()"
    },
    "ret2145": {
      "unwatch": "fn()"
    },
    "ret2146": {
      "unwatch": "fn()"
    },
    "ret2147": {
      "unwatch": "fn()"
    },
    "ret2148": {
      "unwatch": "fn()"
    },
    "ret2149": {
      "unwatch": "fn()"
    },
    "ret2150": {
      "unwatch": "fn()"
    },
    "ret2151": {
      "unwatch": "fn()"
    },
    "ret2152": {
      "unwatch": "fn()"
    },
    "ret2153": {
      "unwatch": "fn()"
    },
    "ret2154": {
      "unwatch": "fn()"
    },
    "ret2155": {
      "unwatch": "fn()"
    },
    "ret2156": {
      "unwatch": "fn()"
    },
    "ret2157": {
      "unwatch": "fn()"
    },
    "ret2158": {
      "unwatch": "fn()"
    },
    "ret2159": {
      "unwatch": "fn()"
    },
    "ret2160": {
      "unwatch": "fn()"
    },
    "ret2161": {
      "unwatch": "fn()"
    },
    "ret2162": {
      "unwatch": "fn()"
    },
    "ret2163": {
      "unwatch": "fn()"
    },
    "ret2164": {
      "unwatch": "fn()"
    },
    "ret2165": {
      "unwatch": "fn()"
    },
    "ret2166": {
      "unwatch": "fn()"
    },
    "ret2167": {
      "unwatch": "fn()"
    },
    "ret2168": {
      "unwatch": "fn()"
    },
    "ret2169": {
      "unwatch": "fn()"
    },
    "ret2170": {
      "unwatch": "fn()"
    },
    "ret2171": {
      "unwatch": "fn()"
    },
    "ret2172": {
      "unwatch": "fn()"
    },
    "ret2173": {
      "unwatch": "fn()"
    },
    "ret2174": {
      "unwatch": "fn()"
    },
    "ret2175": {
      "unwatch": "fn()"
    },
    "ret2176": {
      "unwatch": "fn()"
    },
    "ret2177": {
      "unwatch": "fn()"
    },
    "ret2178": {
      "unwatch": "fn()"
    },
    "ret2179": {
      "unwatch": "fn()"
    },
    "ret2180": {
      "unwatch": "fn()"
    },
    "ret2181": {
      "unwatch": "fn()"
    },
    "ret2182": {
      "unwatch": "fn()"
    },
    "ret2183": {
      "unwatch": "fn()"
    },
    "ret2184": {
      "unwatch": "fn()"
    },
    "ret2185": {
      "unwatch": "fn()"
    },
    "ret2186": {
      "unwatch": "fn()"
    },
    "ret2187": {
      "unwatch": "fn()"
    },
    "ret2188": {
      "unwatch": "fn()"
    },
    "ret2189": {
      "unwatch": "fn()"
    },
    "ret2190": {
      "unwatch": "fn()"
    },
    "ret2191": {
      "unwatch": "fn()"
    },
    "ret2192": {
      "unwatch": "fn()"
    },
    "ret2193": {
      "unwatch": "fn()"
    },
    "ret2194": {
      "unwatch": "fn()"
    },
    "ret2195": {
      "unwatch": "fn()"
    },
    "ret2196": {
      "unwatch": "fn()"
    },
    "ret2197": {
      "unwatch": "fn()"
    },
    "ret2198": {
      "unwatch": "fn()"
    },
    "ret2199": {
      "unwatch": "fn()"
    },
    "ret2200": {
      "unwatch": "fn()"
    },
    "ret2201": {
      "unwatch": "fn()"
    },
    "ret2202": {
      "unwatch": "fn()"
    },
    "ret2203": {
      "unwatch": "fn()"
    },
    "ret2204": {
      "unwatch": "fn()"
    },
    "ret2205": {
      "unwatch": "fn()"
    },
    "ret2206": {
      "unwatch": "fn()"
    },
    "ret2207": {
      "unwatch": "fn()"
    },
    "ret2208": {
      "unwatch": "fn()"
    },
    "ret2209": {
      "unwatch": "fn()"
    },
    "ret2210": {
      "unwatch": "fn()"
    },
    "ret2211": {
      "unwatch": "fn()"
    },
    "ret2212": {
      "unwatch": "fn()"
    },
    "ret2213": {
      "unwatch": "fn()"
    },
    "ret2214": {
      "unwatch": "fn()"
    },
    "ret2215": {
      "unwatch": "fn()"
    },
    "ret2216": {
      "unwatch": "fn()"
    },
    "ret2217": {
      "unwatch": "fn()"
    },
    "ret2218": {
      "unwatch": "fn()"
    },
    "ret2219": {
      "unwatch": "fn()"
    },
    "ret2220": {
      "unwatch": "fn()"
    },
    "ret2221": {
      "unwatch": "fn()"
    },
    "ret2222": {
      "unwatch": "fn()"
    },
    "ret2223": {
      "unwatch": "fn()"
    },
    "ret2224": {
      "unwatch": "fn()"
    },
    "ret2225": {
      "unwatch": "fn()"
    },
    "ret2226": {
      "unwatch": "fn()"
    },
    "ret2227": {
      "unwatch": "fn()"
    },
    "ret2228": {
      "unwatch": "fn()"
    },
    "ret2229": {
      "unwatch": "fn()"
    },
    "ret2230": {
      "unwatch": "fn()"
    },
    "ret2231": {
      "unwatch": "fn()"
    },
    "ret2232": {
      "unwatch": "fn()"
    },
    "ret2233": {
      "unwatch": "fn()"
    },
    "ret2234": {
      "unwatch": "fn()"
    },
    "ret2235": {
      "unwatch": "fn()"
    },
    "ret2236": {
      "unwatch": "fn()"
    },
    "ret2237": {
      "unwatch": "fn()"
    },
    "ret2238": {
      "unwatch": "fn()"
    },
    "ret2239": {
      "unwatch": "fn()"
    },
    "ret2240": {
      "unwatch": "fn()"
    },
    "ret2241": {
      "unwatch": "fn()"
    },
    "ret2242": {
      "unwatch": "fn()"
    },
    "ret2243": {
      "unwatch": "fn()"
    },
    "ret2244": {
      "unwatch": "fn()"
    },
    "ret2245": {
      "unwatch": "fn()"
    },
    "ret2246": {
      "unwatch": "fn()"
    },
    "ret2247": {
      "unwatch": "fn()"
    },
    "ret2248": {
      "unwatch": "fn()"
    },
    "ret2249": {
      "unwatch": "fn()"
    },
    "ret2250": {
      "unwatch": "fn()"
    },
    "ret2251": {
      "unwatch": "fn()"
    },
    "ret2252": {
      "unwatch": "fn()"
    },
    "ret2253": {
      "unwatch": "fn()"
    },
    "ret2254": {
      "unwatch": "fn()"
    },
    "ret2255": {
      "unwatch": "fn()"
    },
    "ret2256": {
      "unwatch": "fn()"
    },
    "ret2257": {
      "unwatch": "fn()"
    },
    "ret2258": {
      "unwatch": "fn()"
    },
    "ret2259": {
      "unwatch": "fn()"
    },
    "ret2260": {
      "unwatch": "fn()"
    },
    "ret2261": {
      "unwatch": "fn()"
    },
    "ret2262": {
      "unwatch": "fn()"
    },
    "ret2263": {
      "unwatch": "fn()"
    },
    "ret2264": {
      "unwatch": "fn()"
    },
    "ret2265": {
      "unwatch": "fn()"
    },
    "ret2266": {
      "unwatch": "fn()"
    },
    "ret2267": {
      "unwatch": "fn()"
    },
    "ret2268": {
      "unwatch": "fn()"
    },
    "ret2269": {
      "unwatch": "fn()"
    },
    "ret2270": {
      "unwatch": "fn()"
    },
    "ret2271": {
      "unwatch": "fn()"
    },
    "ret2272": {
      "unwatch": "fn()"
    },
    "ret2273": {
      "unwatch": "fn()"
    },
    "ret2274": {
      "unwatch": "fn()"
    },
    "ret2275": {
      "unwatch": "fn()"
    },
    "ret2276": {
      "unwatch": "fn()"
    },
    "ret2277": {
      "unwatch": "fn()"
    },
    "ret2278": {
      "unwatch": "fn()"
    },
    "ret2279": {
      "unwatch": "fn()"
    },
    "ret2280": {
      "unwatch": "fn()"
    },
    "ret2281": {
      "unwatch": "fn()"
    },
    "ret2282": {
      "unwatch": "fn()"
    },
    "ret2283": {
      "unwatch": "fn()"
    },
    "ret2284": {
      "unwatch": "fn()"
    },
    "ret2285": {
      "unwatch": "fn()"
    },
    "ret2286": {
      "unwatch": "fn()"
    },
    "ret2287": {
      "unwatch": "fn()"
    },
    "ret2288": {
      "unwatch": "fn()"
    },
    "ret2289": {
      "unwatch": "fn()"
    },
    "ret2290": {
      "unwatch": "fn()"
    },
    "ret2291": {
      "unwatch": "fn()"
    },
    "ret2292": {
      "unwatch": "fn()"
    },
    "ret2293": {
      "unwatch": "fn()"
    },
    "ret2294": {
      "unwatch": "fn()"
    },
    "ret2295": {
      "unwatch": "fn()"
    },
    "ret2296": {
      "unwatch": "fn()"
    },
    "ret2297": {
      "unwatch": "fn()"
    },
    "ret2298": {
      "unwatch": "fn()"
    },
    "ret2299": {
      "unwatch": "fn()"
    },
    "ret2300": {
      "unwatch": "fn()"
    },
    "ret2301": {
      "unwatch": "fn()"
    },
    "ret2302": {
      "unwatch": "fn()"
    },
    "ret2303": {
      "unwatch": "fn()"
    },
    "ret2304": {
      "unwatch": "fn()"
    },
    "ret2305": {
      "unwatch": "fn()"
    },
    "ret2306": {
      "unwatch": "fn()"
    },
    "ret2307": {
      "unwatch": "fn()"
    },
    "ret2308": {
      "unwatch": "fn()"
    },
    "ret2309": {
      "unwatch": "fn()"
    },
    "ret2310": {
      "unwatch": "fn()"
    },
    "ret2311": {
      "unwatch": "fn()"
    },
    "ret2312": {
      "unwatch": "fn()"
    },
    "ret2313": {
      "unwatch": "fn()"
    },
    "ret2314": {
      "unwatch": "fn()"
    },
    "ret2315": {
      "unwatch": "fn()"
    },
    "ret2316": {
      "unwatch": "fn()"
    },
    "ret2317": {
      "unwatch": "fn()"
    },
    "ret2318": {
      "unwatch": "fn()"
    },
    "ret2319": {
      "unwatch": "fn()"
    },
    "ret2320": {
      "unwatch": "fn()"
    },
    "ret2321": {
      "unwatch": "fn()"
    },
    "ret2322": {
      "unwatch": "fn()"
    },
    "ret2323": {
      "unwatch": "fn()"
    },
    "ret2324": {
      "unwatch": "fn()"
    },
    "ret2325": {
      "unwatch": "fn()"
    },
    "ret2326": {
      "unwatch": "fn()"
    },
    "ret2327": {
      "unwatch": "fn()"
    },
    "ret2328": {
      "unwatch": "fn()"
    },
    "ret2329": {
      "unwatch": "fn()"
    },
    "ret2330": {
      "unwatch": "fn()"
    },
    "ret2331": {
      "unwatch": "fn()"
    },
    "ret2332": {
      "unwatch": "fn()"
    },
    "ret2333": {
      "unwatch": "fn()"
    },
    "ret2334": {
      "unwatch": "fn()"
    },
    "ret2335": {
      "unwatch": "fn()"
    },
    "ret2336": {
      "unwatch": "fn()"
    },
    "ret2337": {
      "unwatch": "fn()"
    },
    "ret2338": {
      "unwatch": "fn()"
    },
    "ret2339": {
      "unwatch": "fn()"
    },
    "ret2340": {
      "unwatch": "fn()"
    },
    "ret2341": {
      "unwatch": "fn()"
    },
    "ret2342": {
      "unwatch": "fn()"
    },
    "ret2343": {
      "unwatch": "fn()"
    },
    "ret2344": {
      "unwatch": "fn()"
    },
    "ret2345": {
      "unwatch": "fn()"
    },
    "ret2346": {
      "unwatch": "fn()"
    },
    "ret2347": {
      "unwatch": "fn()"
    },
    "ret2348": {
      "unwatch": "fn()"
    },
    "ret2349": {
      "unwatch": "fn()"
    },
    "ret2350": {
      "unwatch": "fn()"
    },
    "ret2351": {
      "unwatch": "fn()"
    },
    "ret2352": {
      "unwatch": "fn()"
    },
    "ret2353": {
      "unwatch": "fn()"
    },
    "ret2354": {
      "unwatch": "fn()"
    },
    "ret2355": {
      "unwatch": "fn()"
    },
    "ret2356": {
      "unwatch": "fn()"
    },
    "ret2357": {
      "unwatch": "fn()"
    },
    "ret2358": {
      "unwatch": "fn()"
    },
    "ret2359": {
      "unwatch": "fn()"
    },
    "ret2360": {
      "unwatch": "fn()"
    },
    "ret2361": {
      "unwatch": "fn()"
    },
    "ret2362": {
      "unwatch": "fn()"
    },
    "ret2363": {
      "unwatch": "fn()"
    },
    "ret2364": {
      "unwatch": "fn()"
    },
    "ret2365": {
      "unwatch": "fn()"
    },
    "ret2366": {
      "unwatch": "fn()"
    },
    "ret2367": {
      "unwatch": "fn()"
    },
    "ret2368": {
      "unwatch": "fn()"
    },
    "ret2369": {
      "unwatch": "fn()"
    },
    "ret2370": {
      "unwatch": "fn()"
    },
    "ret2371": {
      "unwatch": "fn()"
    },
    "ret2372": {
      "unwatch": "fn()"
    },
    "ret2373": {
      "unwatch": "fn()"
    },
    "ret2374": {
      "unwatch": "fn()"
    },
    "ret2375": {
      "unwatch": "fn()"
    },
    "ret2376": {
      "unwatch": "fn()"
    },
    "ret2377": {
      "unwatch": "fn()"
    },
    "ret2378": {
      "unwatch": "fn()"
    },
    "ret2379": {
      "unwatch": "fn()"
    },
    "ret2380": {
      "unwatch": "fn()"
    },
    "ret2381": {
      "unwatch": "fn()"
    },
    "ret2382": {
      "unwatch": "fn()"
    },
    "ret2383": {
      "unwatch": "fn()"
    },
    "ret2384": {
      "unwatch": "fn()"
    },
    "ret2385": {
      "unwatch": "fn()"
    },
    "ret2386": {
      "unwatch": "fn()"
    },
    "ret2387": {
      "unwatch": "fn()"
    },
    "ret2388": {
      "unwatch": "fn()"
    },
    "ret2389": {
      "unwatch": "fn()"
    },
    "ret2390": {
      "unwatch": "fn()"
    },
    "ret2391": {
      "unwatch": "fn()"
    },
    "ret2392": {
      "unwatch": "fn()"
    },
    "ret2393": {
      "unwatch": "fn()"
    },
    "ret2394": {
      "unwatch": "fn()"
    },
    "ret2395": {
      "unwatch": "fn()"
    },
    "ret2396": {
      "unwatch": "fn()"
    },
    "ret2397": {
      "unwatch": "fn()"
    },
    "ret2398": {
      "unwatch": "fn()"
    },
    "ret2399": {
      "unwatch": "fn()"
    },
    "ret2400": {
      "unwatch": "fn()"
    },
    "ret2401": {
      "unwatch": "fn()"
    },
    "ret2402": {
      "unwatch": "fn()"
    },
    "ret2403": {
      "unwatch": "fn()"
    },
    "ret2404": {
      "unwatch": "fn()"
    },
    "ret2405": {
      "unwatch": "fn()"
    },
    "ret2406": {
      "unwatch": "fn()"
    },
    "ret2407": {
      "unwatch": "fn()"
    },
    "ret2408": {
      "unwatch": "fn()"
    },
    "ret2409": {
      "unwatch": "fn()"
    },
    "ret2410": {
      "unwatch": "fn()"
    },
    "ret2411": {
      "unwatch": "fn()"
    },
    "ret2412": {
      "unwatch": "fn()"
    },
    "ret2413": {
      "unwatch": "fn()"
    },
    "ret2414": {
      "unwatch": "fn()"
    },
    "ret2415": {
      "unwatch": "fn()"
    },
    "ret2416": {
      "unwatch": "fn()"
    },
    "ret2417": {
      "unwatch": "fn()"
    },
    "ret2418": {
      "unwatch": "fn()"
    },
    "ret2419": {
      "unwatch": "fn()"
    },
    "ret2420": {
      "unwatch": "fn()"
    },
    "ret2421": {
      "unwatch": "fn()"
    },
    "ret2422": {
      "unwatch": "fn()"
    },
    "ret2423": {
      "unwatch": "fn()"
    },
    "ret2424": {
      "unwatch": "fn()"
    },
    "ret2425": {
      "unwatch": "fn()"
    },
    "ret2426": {
      "unwatch": "fn()"
    },
    "ret2427": {
      "unwatch": "fn()"
    },
    "ret2428": {
      "unwatch": "fn()"
    },
    "ret2429": {
      "unwatch": "fn()"
    },
    "ret2430": {
      "unwatch": "fn()"
    },
    "ret2431": {
      "unwatch": "fn()"
    },
    "ret2432": {
      "unwatch": "fn()"
    },
    "ret2433": {
      "unwatch": "fn()"
    },
    "ret2434": {
      "unwatch": "fn()"
    },
    "ret2435": {
      "unwatch": "fn()"
    },
    "ret2436": {
      "unwatch": "fn()"
    },
    "ret2437": {
      "unwatch": "fn()"
    },
    "ret2438": {
      "unwatch": "fn()"
    },
    "ret2439": {
      "unwatch": "fn()"
    },
    "ret2440": {
      "unwatch": "fn()"
    },
    "ret2441": {
      "unwatch": "fn()"
    },
    "ret2442": {
      "unwatch": "fn()"
    },
    "ret2443": {
      "unwatch": "fn()"
    },
    "ret2444": {
      "unwatch": "fn()"
    },
    "ret2445": {
      "unwatch": "fn()"
    },
    "ret2446": {
      "unwatch": "fn()"
    },
    "ret2447": {
      "unwatch": "fn()"
    },
    "ret2448": {
      "unwatch": "fn()"
    },
    "ret2449": {
      "unwatch": "fn()"
    },
    "ret2450": {
      "unwatch": "fn()"
    },
    "ret2451": {
      "unwatch": "fn()"
    },
    "ret2452": {
      "unwatch": "fn()"
    },
    "ret2453": {
      "unwatch": "fn()"
    },
    "ret2454": {
      "unwatch": "fn()"
    },
    "ret2455": {
      "unwatch": "fn()"
    },
    "ret2456": {
      "unwatch": "fn()"
    },
    "ret2457": {
      "unwatch": "fn()"
    },
    "ret2458": {
      "unwatch": "fn()"
    },
    "ret2459": {
      "unwatch": "fn()"
    },
    "ret2460": {
      "unwatch": "fn()"
    },
    "ret2461": {
      "unwatch": "fn()"
    },
    "ret2462": {
      "unwatch": "fn()"
    },
    "ret2463": {
      "unwatch": "fn()"
    },
    "ret2464": {
      "unwatch": "fn()"
    },
    "ret2465": {
      "unwatch": "fn()"
    },
    "ret2466": {
      "unwatch": "fn()"
    },
    "ret2467": {
      "unwatch": "fn()"
    },
    "ret2468": {
      "unwatch": "fn()"
    },
    "ret2469": {
      "unwatch": "fn()"
    },
    "ret2470": {
      "unwatch": "fn()"
    },
    "ret2471": {
      "unwatch": "fn()"
    },
    "ret2472": {
      "unwatch": "fn()"
    },
    "ret2473": {
      "unwatch": "fn()"
    },
    "ret2474": {
      "unwatch": "fn()"
    },
    "ret2475": {
      "unwatch": "fn()"
    },
    "ret2476": {
      "unwatch": "fn()"
    },
    "ret2477": {
      "unwatch": "fn()"
    },
    "ret2478": {
      "unwatch": "fn()"
    },
    "ret2479": {
      "unwatch": "fn()"
    },
    "ret2480": {
      "unwatch": "fn()"
    },
    "ret2481": {
      "unwatch": "fn()"
    },
    "ret2482": {
      "unwatch": "fn()"
    },
    "ret2483": {
      "unwatch": "fn()"
    },
    "ret2484": {
      "unwatch": "fn()"
    },
    "ret2485": {
      "unwatch": "fn()"
    },
    "ret2486": {
      "unwatch": "fn()"
    },
    "ret2487": {
      "unwatch": "fn()"
    },
    "ret2488": {
      "unwatch": "fn()"
    },
    "ret2489": {
      "unwatch": "fn()"
    },
    "ret2490": {
      "unwatch": "fn()"
    },
    "ret2491": {
      "unwatch": "fn()"
    },
    "ret2492": {
      "unwatch": "fn()"
    },
    "ret2493": {
      "unwatch": "fn()"
    },
    "ret2494": {
      "unwatch": "fn()"
    },
    "ret2495": {
      "unwatch": "fn()"
    },
    "ret2496": {
      "unwatch": "fn()"
    },
    "ret2497": {
      "unwatch": "fn()"
    },
    "ret2498": {
      "unwatch": "fn()"
    },
    "ret2499": {
      "unwatch": "fn()"
    },
    "ret2500": {
      "unwatch": "fn()"
    },
    "ret2501": {
      "unwatch": "fn()"
    },
    "ret2502": {
      "unwatch": "fn()"
    },
    "ret2503": {
      "unwatch": "fn()"
    },
    "ret2504": {
      "unwatch": "fn()"
    },
    "ret2505": {
      "unwatch": "fn()"
    },
    "ret2506": {
      "unwatch": "fn()"
    },
    "ret2507": {
      "unwatch": "fn()"
    },
    "ret2508": {
      "unwatch": "fn()"
    },
    "ret2509": {
      "unwatch": "fn()"
    },
    "ret2510": {
      "unwatch": "fn()"
    },
    "ret2511": {
      "unwatch": "fn()"
    },
    "ret2512": {
      "unwatch": "fn()"
    },
    "ret2513": {
      "unwatch": "fn()"
    },
    "ret2514": {
      "unwatch": "fn()"
    },
    "ret2515": {
      "unwatch": "fn()"
    },
    "ret2516": {
      "unwatch": "fn()"
    },
    "ret2517": {
      "unwatch": "fn()"
    },
    "ret2518": {
      "unwatch": "fn()"
    },
    "ret2519": {
      "unwatch": "fn()"
    },
    "ret2520": {
      "unwatch": "fn()"
    },
    "ret2521": {
      "unwatch": "fn()"
    },
    "ret2522": {
      "unwatch": "fn()"
    },
    "ret2523": {
      "unwatch": "fn()"
    },
    "ret2524": {
      "unwatch": "fn()"
    },
    "ret2525": {
      "unwatch": "fn()"
    },
    "ret2526": {
      "unwatch": "fn()"
    },
    "ret2527": {
      "unwatch": "fn()"
    },
    "ret2528": {
      "unwatch": "fn()"
    },
    "ret2529": {
      "unwatch": "fn()"
    },
    "ret2530": {
      "unwatch": "fn()"
    },
    "ret2531": {
      "unwatch": "fn()"
    },
    "ret2532": {
      "unwatch": "fn()"
    },
    "ret2533": {
      "unwatch": "fn()"
    },
    "ret2534": {
      "unwatch": "fn()"
    },
    "ret2535": {
      "unwatch": "fn()"
    },
    "ret2536": {
      "unwatch": "fn()"
    },
    "ret2537": {
      "unwatch": "fn()"
    },
    "ret2538": {
      "unwatch": "fn()"
    },
    "ret2539": {
      "unwatch": "fn()"
    },
    "ret2540": {
      "unwatch": "fn()"
    },
    "ret2541": {
      "unwatch": "fn()"
    },
    "ret2542": {
      "unwatch": "fn()"
    },
    "ret2543": {
      "unwatch": "fn()"
    },
    "ret2544": {
      "unwatch": "fn()"
    },
    "ret2545": {
      "unwatch": "fn()"
    },
    "ret2546": {
      "unwatch": "fn()"
    },
    "ret2547": {
      "unwatch": "fn()"
    },
    "ret2548": {
      "unwatch": "fn()"
    },
    "ret2549": {
      "unwatch": "fn()"
    },
    "ret2550": {
      "unwatch": "fn()"
    },
    "ret2551": {
      "unwatch": "fn()"
    },
    "ret2552": {
      "unwatch": "fn()"
    },
    "ret2553": {
      "unwatch": "fn()"
    },
    "ret2554": {
      "unwatch": "fn()"
    },
    "ret2555": {
      "unwatch": "fn()"
    },
    "ret2556": {
      "unwatch": "fn()"
    },
    "ret2557": {
      "unwatch": "fn()"
    },
    "ret2558": {
      "unwatch": "fn()"
    },
    "ret2559": {
      "unwatch": "fn()"
    },
    "ret2560": {
      "unwatch": "fn()"
    },
    "ret2561": {
      "unwatch": "fn()"
    },
    "ret2562": {
      "unwatch": "fn()"
    },
    "ret2563": {
      "unwatch": "fn()"
    },
    "ret2564": {
      "unwatch": "fn()"
    },
    "ret2565": {
      "unwatch": "fn()"
    },
    "ret2566": {
      "unwatch": "fn()"
    },
    "ret2567": {
      "unwatch": "fn()"
    },
    "ret2568": {
      "unwatch": "fn()"
    },
    "ret2569": {
      "unwatch": "fn()"
    },
    "ret2570": {
      "unwatch": "fn()"
    },
    "ret2571": {
      "unwatch": "fn()"
    },
    "ret2572": {
      "unwatch": "fn()"
    },
    "ret2573": {
      "unwatch": "fn()"
    },
    "ret2574": {
      "unwatch": "fn()"
    },
    "ret2575": {
      "unwatch": "fn()"
    },
    "ret2576": {
      "unwatch": "fn()"
    },
    "ret2577": {
      "unwatch": "fn()"
    },
    "ret2578": {
      "unwatch": "fn()"
    },
    "ret2579": {
      "unwatch": "fn()"
    },
    "ret2580": {
      "unwatch": "fn()"
    },
    "ret2581": {
      "unwatch": "fn()"
    },
    "ret2582": {
      "unwatch": "fn()"
    },
    "ret2583": {
      "unwatch": "fn()"
    },
    "ret2584": {
      "unwatch": "fn()"
    },
    "ret2585": {
      "unwatch": "fn()"
    },
    "ret2586": {
      "unwatch": "fn()"
    },
    "ret2587": {
      "unwatch": "fn()"
    },
    "ret2588": {
      "unwatch": "fn()"
    },
    "ret2589": {
      "unwatch": "fn()"
    },
    "ret2590": {
      "unwatch": "fn()"
    },
    "ret2591": {
      "unwatch": "fn()"
    },
    "ret2592": {
      "unwatch": "fn()"
    },
    "ret2593": {
      "unwatch": "fn()"
    },
    "ret2594": {
      "unwatch": "fn()"
    },
    "ret2595": {
      "unwatch": "fn()"
    },
    "ret2596": {
      "unwatch": "fn()"
    },
    "ret2597": {
      "unwatch": "fn()"
    },
    "ret2598": {
      "unwatch": "fn()"
    },
    "ret2599": {
      "unwatch": "fn()"
    },
    "ret2600": {
      "unwatch": "fn()"
    },
    "ret2601": {
      "unwatch": "fn()"
    },
    "ret2602": {
      "unwatch": "fn()"
    },
    "ret2603": {
      "unwatch": "fn()"
    },
    "ret2604": {
      "unwatch": "fn()"
    },
    "ret2605": {
      "unwatch": "fn()"
    },
    "ret2606": {
      "unwatch": "fn()"
    },
    "ret2607": {
      "unwatch": "fn()"
    },
    "ret2608": {
      "unwatch": "fn()"
    },
    "ret2609": {
      "unwatch": "fn()"
    },
    "ret2610": {
      "unwatch": "fn()"
    },
    "ret2611": {
      "unwatch": "fn()"
    },
    "ret2612": {
      "unwatch": "fn()"
    },
    "ret2613": {
      "unwatch": "fn()"
    },
    "ret2614": {
      "unwatch": "fn()"
    },
    "ret2615": {
      "unwatch": "fn()"
    },
    "ret2616": {
      "unwatch": "fn()"
    },
    "ret2617": {
      "unwatch": "fn()"
    },
    "ret2618": {
      "unwatch": "fn()"
    },
    "ret2619": {
      "unwatch": "fn()"
    },
    "ret2620": {
      "unwatch": "fn()"
    },
    "ret2621": {
      "unwatch": "fn()"
    },
    "ret2622": {
      "unwatch": "fn()"
    },
    "ret2623": {
      "unwatch": "fn()"
    },
    "ret2624": {
      "unwatch": "fn()"
    },
    "ret2625": {
      "unwatch": "fn()"
    },
    "ret2626": {
      "unwatch": "fn()"
    },
    "ret2627": {
      "unwatch": "fn()"
    },
    "ret2628": {
      "unwatch": "fn()"
    },
    "ret2629": {
      "unwatch": "fn()"
    },
    "ret2630": {
      "unwatch": "fn()"
    },
    "ret2631": {
      "unwatch": "fn()"
    },
    "ret2632": {
      "unwatch": "fn()"
    },
    "ret2633": {
      "unwatch": "fn()"
    },
    "ret2634": {
      "unwatch": "fn()"
    },
    "ret2635": {
      "unwatch": "fn()"
    },
    "ret2636": {
      "unwatch": "fn()"
    },
    "ret2637": {
      "unwatch": "fn()"
    },
    "ret2638": {
      "unwatch": "fn()"
    },
    "ret2639": {
      "unwatch": "fn()"
    },
    "ret2640": {
      "unwatch": "fn()"
    },
    "ret2641": {
      "unwatch": "fn()"
    },
    "ret2642": {
      "unwatch": "fn()"
    },
    "ret2643": {
      "unwatch": "fn()"
    },
    "ret2644": {
      "unwatch": "fn()"
    },
    "ret2645": {
      "unwatch": "fn()"
    },
    "ret2646": {
      "unwatch": "fn()"
    },
    "ret2647": {
      "unwatch": "fn()"
    },
    "ret2648": {
      "unwatch": "fn()"
    },
    "ret2649": {
      "unwatch": "fn()"
    },
    "ret2650": {
      "unwatch": "fn()"
    },
    "ret2651": {
      "unwatch": "fn()"
    },
    "ret2652": {
      "unwatch": "fn()"
    },
    "ret2653": {
      "unwatch": "fn()"
    },
    "ret2654": {
      "unwatch": "fn()"
    },
    "ret2655": {
      "unwatch": "fn()"
    },
    "ret2656": {
      "unwatch": "fn()"
    },
    "ret2657": {
      "unwatch": "fn()"
    },
    "ret2658": {
      "unwatch": "fn()"
    },
    "ret2659": {
      "unwatch": "fn()"
    },
    "ret2660": {
      "unwatch": "fn()"
    },
    "ret2661": {
      "unwatch": "fn()"
    },
    "ret2662": {
      "unwatch": "fn()"
    },
    "ret2663": {
      "unwatch": "fn()"
    },
    "ret2664": {
      "unwatch": "fn()"
    },
    "ret2665": {
      "unwatch": "fn()"
    },
    "ret2666": {
      "unwatch": "fn()"
    },
    "ret2667": {
      "unwatch": "fn()"
    },
    "ret2668": {
      "unwatch": "fn()"
    },
    "ret2669": {
      "unwatch": "fn()"
    },
    "ret2670": {
      "unwatch": "fn()"
    },
    "ret2671": {
      "unwatch": "fn()"
    },
    "ret2672": {
      "unwatch": "fn()"
    },
    "ret2673": {
      "unwatch": "fn()"
    },
    "ret2674": {
      "unwatch": "fn()"
    },
    "ret2675": {
      "unwatch": "fn()"
    },
    "ret2676": {
      "unwatch": "fn()"
    },
    "ret2677": {
      "unwatch": "fn()"
    },
    "ret2678": {
      "unwatch": "fn()"
    },
    "ret2679": {
      "unwatch": "fn()"
    },
    "ret2680": {
      "unwatch": "fn()"
    },
    "ret2681": {
      "unwatch": "fn()"
    },
    "ret2682": {
      "unwatch": "fn()"
    },
    "ret2683": {
      "unwatch": "fn()"
    },
    "ret2684": {
      "unwatch": "fn()"
    },
    "ret2685": {
      "unwatch": "fn()"
    },
    "ret2686": {
      "unwatch": "fn()"
    },
    "ret2687": {
      "unwatch": "fn()"
    },
    "ret2688": {
      "unwatch": "fn()"
    },
    "ret2689": {
      "unwatch": "fn()"
    },
    "ret2690": {
      "unwatch": "fn()"
    },
    "ret2691": {
      "unwatch": "fn()"
    },
    "ret2692": {
      "unwatch": "fn()"
    },
    "ret2693": {
      "unwatch": "fn()"
    },
    "ret2694": {
      "unwatch": "fn()"
    },
    "ret2695": {
      "unwatch": "fn()"
    },
    "ret2696": {
      "unwatch": "fn()"
    },
    "ret2697": {
      "unwatch": "fn()"
    },
    "ret2698": {
      "unwatch": "fn()"
    },
    "ret2699": {
      "unwatch": "fn()"
    },
    "ret2700": {
      "unwatch": "fn()"
    },
    "ret2701": {
      "unwatch": "fn()"
    },
    "ret2702": {
      "unwatch": "fn()"
    },
    "ret2703": {
      "unwatch": "fn()"
    },
    "ret2704": {
      "unwatch": "fn()"
    },
    "ret2705": {
      "unwatch": "fn()"
    },
    "ret2706": {
      "unwatch": "fn()"
    },
    "ret2707": {
      "unwatch": "fn()"
    },
    "ret2708": {
      "unwatch": "fn()"
    },
    "ret2709": {
      "unwatch": "fn()"
    },
    "ret2710": {
      "unwatch": "fn()"
    },
    "ret2711": {
      "unwatch": "fn()"
    },
    "ret2712": {
      "unwatch": "fn()"
    },
    "ret2713": {
      "unwatch": "fn()"
    },
    "ret2714": {
      "unwatch": "fn()"
    },
    "ret2715": {
      "unwatch": "fn()"
    },
    "ret2716": {
      "unwatch": "fn()"
    },
    "ret2717": {
      "unwatch": "fn()"
    },
    "ret2718": {
      "unwatch": "fn()"
    },
    "ret2719": {
      "unwatch": "fn()"
    },
    "ret2720": {
      "unwatch": "fn()"
    },
    "ret2721": {
      "unwatch": "fn()"
    },
    "ret2722": {
      "unwatch": "fn()"
    },
    "ret2723": {
      "unwatch": "fn()"
    },
    "ret2724": {
      "unwatch": "fn()"
    },
    "ret2725": {
      "unwatch": "fn()"
    },
    "ret2726": {
      "unwatch": "fn()"
    },
    "ret2727": {
      "unwatch": "fn()"
    },
    "ret2728": {
      "unwatch": "fn()"
    },
    "ret2729": {
      "unwatch": "fn()"
    },
    "ret2730": {
      "unwatch": "fn()"
    },
    "ret2731": {
      "unwatch": "fn()"
    },
    "ret2732": {
      "unwatch": "fn()"
    },
    "ret2733": {
      "unwatch": "fn()"
    },
    "ret2734": {
      "unwatch": "fn()"
    },
    "ret2735": {
      "unwatch": "fn()"
    },
    "ret2736": {
      "unwatch": "fn()"
    },
    "ret2737": {
      "unwatch": "fn()"
    },
    "ret2738": {
      "unwatch": "fn()"
    },
    "ret2739": {
      "unwatch": "fn()"
    },
    "ret2740": {
      "unwatch": "fn()"
    },
    "ret2741": {
      "unwatch": "fn()"
    },
    "ret2742": {
      "unwatch": "fn()"
    },
    "ret2743": {
      "unwatch": "fn()"
    },
    "ret2744": {
      "unwatch": "fn()"
    },
    "ret2745": {
      "unwatch": "fn()"
    },
    "ret2746": {
      "unwatch": "fn()"
    },
    "ret2747": {
      "unwatch": "fn()"
    },
    "ret2748": {
      "unwatch": "fn()"
    },
    "ret2749": {
      "unwatch": "fn()"
    },
    "ret2750": {
      "unwatch": "fn()"
    },
    "ret2751": {
      "unwatch": "fn()"
    },
    "ret2752": {
      "unwatch": "fn()"
    },
    "ret2753": {
      "unwatch": "fn()"
    },
    "ret2754": {
      "unwatch": "fn()"
    },
    "ret2755": {
      "unwatch": "fn()"
    },
    "ret2756": {
      "unwatch": "fn()"
    },
    "ret2757": {
      "unwatch": "fn()"
    },
    "ret2758": {
      "unwatch": "fn()"
    },
    "ret2759": {
      "unwatch": "fn()"
    },
    "ret2760": {
      "unwatch": "fn()"
    },
    "ret2761": {
      "unwatch": "fn()"
    },
    "ret2762": {
      "unwatch": "fn()"
    },
    "ret2763": {
      "unwatch": "fn()"
    },
    "ret2764": {
      "unwatch": "fn()"
    },
    "ret2765": {
      "unwatch": "fn()"
    },
    "ret2766": {
      "unwatch": "fn()"
    },
    "ret2767": {
      "unwatch": "fn()"
    },
    "ret2768": {
      "unwatch": "fn()"
    },
    "ret2769": {
      "unwatch": "fn()"
    },
    "ret2770": {
      "unwatch": "fn()"
    },
    "ret2771": {
      "unwatch": "fn()"
    },
    "ret2772": {
      "unwatch": "fn()"
    },
    "ret2773": {
      "unwatch": "fn()"
    },
    "ret2774": {
      "unwatch": "fn()"
    },
    "ret2775": {
      "unwatch": "fn()"
    },
    "ret2776": {
      "unwatch": "fn()"
    },
    "ret2777": {
      "unwatch": "fn()"
    },
    "ret2778": {
      "unwatch": "fn()"
    },
    "ret2779": {
      "unwatch": "fn()"
    },
    "ret2780": {
      "unwatch": "fn()"
    },
    "ret2781": {
      "unwatch": "fn()"
    },
    "ret2782": {
      "unwatch": "fn()"
    },
    "ret2783": {
      "unwatch": "fn()"
    },
    "ret2784": {
      "unwatch": "fn()"
    },
    "ret2785": {
      "unwatch": "fn()"
    },
    "ret2786": {
      "unwatch": "fn()"
    },
    "ret2787": {
      "unwatch": "fn()"
    },
    "ret2788": {
      "unwatch": "fn()"
    },
    "ret2789": {
      "unwatch": "fn()"
    },
    "ret2790": {
      "unwatch": "fn()"
    },
    "ret2791": {
      "unwatch": "fn()"
    },
    "ret2792": {
      "unwatch": "fn()"
    },
    "ret2793": {
      "unwatch": "fn()"
    },
    "ret2794": {
      "unwatch": "fn()"
    },
    "ret2795": {
      "unwatch": "fn()"
    },
    "ret2796": {
      "unwatch": "fn()"
    },
    "ret2797": {
      "unwatch": "fn()"
    },
    "ret2798": {
      "unwatch": "fn()"
    },
    "ret2799": {
      "unwatch": "fn()"
    },
    "ret2800": {
      "unwatch": "fn()"
    },
    "ret2801": {
      "unwatch": "fn()"
    },
    "ret2802": {
      "unwatch": "fn()"
    },
    "ret2803": {
      "unwatch": "fn()"
    },
    "ret2804": {
      "unwatch": "fn()"
    },
    "ret2805": {
      "unwatch": "fn()"
    },
    "ret2806": {
      "unwatch": "fn()"
    },
    "ret2807": {
      "unwatch": "fn()"
    },
    "ret2808": {
      "unwatch": "fn()"
    },
    "ret2809": {
      "unwatch": "fn()"
    },
    "ret2810": {
      "unwatch": "fn()"
    },
    "ret2811": {
      "unwatch": "fn()"
    },
    "ret2812": {
      "unwatch": "fn()"
    },
    "ret2813": {
      "unwatch": "fn()"
    },
    "ret2814": {
      "unwatch": "fn()"
    },
    "ret2815": {
      "unwatch": "fn()"
    },
    "ret2816": {
      "unwatch": "fn()"
    },
    "ret2817": {
      "unwatch": "fn()"
    },
    "ret2818": {
      "unwatch": "fn()"
    },
    "ret2819": {
      "unwatch": "fn()"
    },
    "ret2820": {
      "unwatch": "fn()"
    },
    "ret2821": {
      "unwatch": "fn()"
    },
    "ret2822": {
      "unwatch": "fn()"
    },
    "ret2823": {
      "unwatch": "fn()"
    },
    "ret2824": {
      "unwatch": "fn()"
    },
    "ret2825": {
      "unwatch": "fn()"
    },
    "ret2826": {
      "unwatch": "fn()"
    },
    "ret2827": {
      "unwatch": "fn()"
    },
    "ret2828": {
      "unwatch": "fn()"
    },
    "ret2829": {
      "unwatch": "fn()"
    },
    "ret2830": {
      "unwatch": "fn()"
    },
    "ret2831": {
      "unwatch": "fn()"
    },
    "ret2832": {
      "unwatch": "fn()"
    },
    "ret2833": {
      "unwatch": "fn()"
    },
    "ret2834": {
      "unwatch": "fn()"
    },
    "ret2835": {
      "unwatch": "fn()"
    },
    "ret2836": {
      "unwatch": "fn()"
    },
    "ret2837": {
      "unwatch": "fn()"
    },
    "ret2838": {
      "unwatch": "fn()"
    },
    "ret2839": {
      "unwatch": "fn()"
    },
    "ret2840": {
      "unwatch": "fn()"
    },
    "ret2841": {
      "unwatch": "fn()"
    },
    "ret2842": {
      "unwatch": "fn()"
    },
    "ret2843": {
      "unwatch": "fn()"
    },
    "ret2844": {
      "unwatch": "fn()"
    },
    "ret2845": {
      "unwatch": "fn()"
    },
    "ret2846": {
      "unwatch": "fn()"
    },
    "ret2847": {
      "unwatch": "fn()"
    },
    "ret2848": {
      "unwatch": "fn()"
    },
    "ret2849": {
      "unwatch": "fn()"
    },
    "ret2850": {
      "unwatch": "fn()"
    },
    "ret2851": {
      "unwatch": "fn()"
    },
    "ret2852": {
      "unwatch": "fn()"
    },
    "ret2853": {
      "unwatch": "fn()"
    },
    "ret2854": {
      "unwatch": "fn()"
    },
    "ret2855": {
      "unwatch": "fn()"
    },
    "ret2856": {
      "unwatch": "fn()"
    },
    "ret2857": {
      "unwatch": "fn()"
    },
    "ret2858": {
      "unwatch": "fn()"
    },
    "ret2859": {
      "unwatch": "fn()"
    },
    "ret2860": {
      "unwatch": "fn()"
    },
    "ret2861": {
      "unwatch": "fn()"
    },
    "ret2862": {
      "unwatch": "fn()"
    },
    "ret2863": {
      "unwatch": "fn()"
    },
    "ret2864": {
      "unwatch": "fn()"
    },
    "ret2865": {
      "unwatch": "fn()"
    },
    "ret2866": {
      "unwatch": "fn()"
    },
    "ret2867": {
      "unwatch": "fn()"
    },
    "ret2868": {
      "unwatch": "fn()"
    },
    "ret2869": {
      "unwatch": "fn()"
    },
    "ret2870": {
      "unwatch": "fn()"
    },
    "ret2871": {
      "unwatch": "fn()"
    },
    "ret2872": {
      "unwatch": "fn()"
    },
    "ret2873": {
      "unwatch": "fn()"
    },
    "ret2874": {
      "unwatch": "fn()"
    },
    "ret2875": {
      "unwatch": "fn()"
    },
    "ret2876": {
      "unwatch": "fn()"
    },
    "ret2877": {
      "unwatch": "fn()"
    },
    "ret2878": {
      "unwatch": "fn()"
    },
    "ret2879": {
      "unwatch": "fn()"
    },
    "ret2880": {
      "unwatch": "fn()"
    },
    "ret2881": {
      "unwatch": "fn()"
    },
    "ret2882": {
      "unwatch": "fn()"
    },
    "ret2883": {
      "unwatch": "fn()"
    },
    "ret2884": {
      "unwatch": "fn()"
    },
    "ret2885": {
      "unwatch": "fn()"
    },
    "ret2886": {
      "unwatch": "fn()"
    },
    "ret2887": {
      "unwatch": "fn()"
    },
    "ret2888": {
      "unwatch": "fn()"
    },
    "ret2889": {
      "unwatch": "fn()"
    },
    "ret2890": {
      "unwatch": "fn()"
    },
    "ret2891": {
      "unwatch": "fn()"
    },
    "ret2892": {
      "unwatch": "fn()"
    },
    "ret2893": {
      "unwatch": "fn()"
    },
    "ret2894": {
      "unwatch": "fn()"
    },
    "ret2895": {
      "unwatch": "fn()"
    },
    "ret2896": {
      "unwatch": "fn()"
    },
    "ret2897": {
      "unwatch": "fn()"
    },
    "ret2898": {
      "unwatch": "fn()"
    },
    "ret2899": {
      "unwatch": "fn()"
    },
    "ret2900": {
      "unwatch": "fn()"
    },
    "ret2901": {
      "unwatch": "fn()"
    },
    "ret2902": {
      "unwatch": "fn()"
    },
    "ret2903": {
      "unwatch": "fn()"
    },
    "ret2904": {
      "unwatch": "fn()"
    },
    "ret2905": {
      "unwatch": "fn()"
    },
    "ret2906": {
      "unwatch": "fn()"
    },
    "ret2907": {
      "unwatch": "fn()"
    },
    "ret2908": {
      "unwatch": "fn()"
    },
    "ret2909": {
      "unwatch": "fn()"
    },
    "ret2910": {
      "unwatch": "fn()"
    },
    "ret2911": {
      "unwatch": "fn()"
    },
    "ret2912": {
      "unwatch": "fn()"
    },
    "ret2913": {
      "unwatch": "fn()"
    },
    "ret2914": {
      "unwatch": "fn()"
    },
    "ret2915": {
      "unwatch": "fn()"
    },
    "ret2916": {
      "unwatch": "fn()"
    },
    "ret2917": {
      "unwatch": "fn()"
    },
    "ret2918": {
      "unwatch": "fn()"
    },
    "ret2919": {
      "unwatch": "fn()"
    },
    "ret2920": {
      "unwatch": "fn()"
    },
    "ret2921": {
      "unwatch": "fn()"
    },
    "ret2922": {
      "unwatch": "fn()"
    },
    "ret2923": {
      "unwatch": "fn()"
    },
    "ret2924": {
      "unwatch": "fn()"
    },
    "ret2925": {
      "unwatch": "fn()"
    },
    "ret2926": {
      "unwatch": "fn()"
    },
    "ret2927": {
      "unwatch": "fn()"
    },
    "ret2928": {
      "unwatch": "fn()"
    },
    "ret2929": {
      "unwatch": "fn()"
    },
    "ret2930": {
      "unwatch": "fn()"
    },
    "ret2931": {
      "unwatch": "fn()"
    },
    "ret2932": {
      "unwatch": "fn()"
    },
    "ret2933": {
      "unwatch": "fn()"
    },
    "ret2934": {
      "unwatch": "fn()"
    },
    "ret2935": {
      "unwatch": "fn()"
    },
    "ret2936": {
      "unwatch": "fn()"
    },
    "ret2937": {
      "unwatch": "fn()"
    },
    "ret2938": {
      "unwatch": "fn()"
    },
    "ret2939": {
      "unwatch": "fn()"
    },
    "ret2940": {
      "unwatch": "fn()"
    },
    "ret2941": {
      "unwatch": "fn()"
    },
    "ret2942": {
      "unwatch": "fn()"
    },
    "ret2943": {
      "unwatch": "fn()"
    },
    "ret2944": {
      "unwatch": "fn()"
    },
    "ret2945": {
      "unwatch": "fn()"
    },
    "ret2946": {
      "unwatch": "fn()"
    },
    "ret2947": {
      "unwatch": "fn()"
    },
    "ret2948": {
      "unwatch": "fn()"
    },
    "ret2949": {
      "unwatch": "fn()"
    },
    "ret2950": {
      "unwatch": "fn()"
    },
    "ret2951": {
      "unwatch": "fn()"
    },
    "ret2952": {
      "unwatch": "fn()"
    },
    "ret2953": {
      "unwatch": "fn()"
    },
    "ret2954": {
      "unwatch": "fn()"
    },
    "ret2955": {
      "unwatch": "fn()"
    },
    "ret2956": {
      "unwatch": "fn()"
    },
    "ret2957": {
      "unwatch": "fn()"
    },
    "ret2958": {
      "unwatch": "fn()"
    },
    "ret2959": {
      "unwatch": "fn()"
    },
    "ret2960": {
      "unwatch": "fn()"
    },
    "ret2961": {
      "unwatch": "fn()"
    },
    "ret2962": {
      "unwatch": "fn()"
    },
    "ret2963": {
      "unwatch": "fn()"
    },
    "ret2964": {
      "unwatch": "fn()"
    },
    "ret2965": {
      "unwatch": "fn()"
    },
    "ret2966": {
      "unwatch": "fn()"
    },
    "ret2967": {
      "unwatch": "fn()"
    },
    "ret2968": {
      "unwatch": "fn()"
    },
    "ret2969": {
      "unwatch": "fn()"
    },
    "ret2970": {
      "unwatch": "fn()"
    },
    "ret2971": {
      "unwatch": "fn()"
    },
    "ret2972": {
      "unwatch": "fn()"
    },
    "ret2973": {
      "unwatch": "fn()"
    },
    "ret2974": {
      "unwatch": "fn()"
    },
    "ret2975": {
      "unwatch": "fn()"
    },
    "ret2976": {
      "unwatch": "fn()"
    },
    "ret2977": {
      "unwatch": "fn()"
    },
    "ret2978": {
      "unwatch": "fn()"
    },
    "ret2979": {
      "unwatch": "fn()"
    },
    "ret2980": {
      "unwatch": "fn()"
    },
    "ret2981": {
      "unwatch": "fn()"
    },
    "ret2982": {
      "unwatch": "fn()"
    },
    "ret2983": {
      "unwatch": "fn()"
    },
    "ret2984": {
      "unwatch": "fn()"
    },
    "ret2985": {
      "unwatch": "fn()"
    },
    "ret2986": {
      "unwatch": "fn()"
    },
    "ret2987": {
      "unwatch": "fn()"
    },
    "ret2988": {
      "unwatch": "fn()"
    },
    "ret2989": {
      "unwatch": "fn()"
    },
    "ret2990": {
      "unwatch": "fn()"
    },
    "ret2991": {
      "unwatch": "fn()"
    },
    "ret2992": {
      "unwatch": "fn()"
    },
    "ret2993": {
      "unwatch": "fn()"
    },
    "ret2994": {
      "unwatch": "fn()"
    },
    "ret2995": {
      "unwatch": "fn()"
    },
    "ret2996": {
      "unwatch": "fn()"
    },
    "ret2997": {
      "unwatch": "fn()"
    },
    "ret2998": {
      "unwatch": "fn()"
    },
    "ret2999": {
      "unwatch": "fn()"
    },
    "ret3000": {
      "unwatch": "fn()"
    },
    "ret3001": {
      "unwatch": "fn()"
    },
    "ret3002": {
      "unwatch": "fn()"
    },
    "ret3003": {
      "unwatch": "fn()"
    },
    "ret3004": {
      "unwatch": "fn()"
    },
    "ret3005": {
      "unwatch": "fn()"
    },
    "ret3006": {
      "unwatch": "fn()"
    },
    "ret3007": {
      "unwatch": "fn()"
    },
    "ret3008": {
      "unwatch": "fn()"
    },
    "ret3009": {
      "unwatch": "fn()"
    },
    "ret3010": {
      "unwatch": "fn()"
    },
    "ret3011": {
      "unwatch": "fn()"
    },
    "ret3012": {
      "unwatch": "fn()"
    },
    "ret3013": {
      "unwatch": "fn()"
    },
    "ret3014": {
      "unwatch": "fn()"
    },
    "ret3015": {
      "unwatch": "fn()"
    },
    "ret3016": {
      "unwatch": "fn()"
    },
    "ret3017": {
      "unwatch": "fn()"
    },
    "ret3018": {
      "unwatch": "fn()"
    },
    "ret3019": {
      "unwatch": "fn()"
    },
    "ret3020": {
      "unwatch": "fn()"
    },
    "ret3021": {
      "unwatch": "fn()"
    },
    "ret3022": {
      "unwatch": "fn()"
    },
    "ret3023": {
      "unwatch": "fn()"
    },
    "ret3024": {
      "unwatch": "fn()"
    },
    "ret3025": {
      "unwatch": "fn()"
    },
    "ret3026": {
      "unwatch": "fn()"
    },
    "ret3027": {
      "unwatch": "fn()"
    },
    "ret3028": {
      "unwatch": "fn()"
    },
    "ret3029": {
      "unwatch": "fn()"
    },
    "ret3030": {
      "unwatch": "fn()"
    },
    "ret3031": {
      "unwatch": "fn()"
    },
    "ret3032": {
      "unwatch": "fn()"
    },
    "ret3033": {
      "unwatch": "fn()"
    },
    "ret3034": {
      "unwatch": "fn()"
    },
    "ret3035": {
      "unwatch": "fn()"
    },
    "ret3036": {
      "unwatch": "fn()"
    },
    "ret3037": {
      "unwatch": "fn()"
    },
    "ret3038": {
      "unwatch": "fn()"
    },
    "ret3039": {
      "unwatch": "fn()"
    },
    "ret3040": {
      "unwatch": "fn()"
    },
    "ret3041": {
      "unwatch": "fn()"
    },
    "ret3042": {
      "unwatch": "fn()"
    },
    "ret3043": {
      "unwatch": "fn()"
    },
    "ret3044": {
      "unwatch": "fn()"
    },
    "ret3045": {
      "unwatch": "fn()"
    },
    "ret3046": {
      "unwatch": "fn()"
    },
    "ret3047": {
      "unwatch": "fn()"
    },
    "ret3048": {
      "unwatch": "fn()"
    },
    "ret3049": {
      "unwatch": "fn()"
    },
    "ret3050": {
      "unwatch": "fn()"
    },
    "ret3051": {
      "unwatch": "fn()"
    },
    "ret3052": {
      "unwatch": "fn()"
    },
    "ret3053": {
      "unwatch": "fn()"
    },
    "ret3054": {
      "unwatch": "fn()"
    },
    "ret3055": {
      "unwatch": "fn()"
    },
    "ret3056": {
      "unwatch": "fn()"
    },
    "ret3057": {
      "unwatch": "fn()"
    },
    "ret3058": {
      "unwatch": "fn()"
    },
    "ret3059": {
      "unwatch": "fn()"
    },
    "ret3060": {
      "unwatch": "fn()"
    },
    "ret3061": {
      "unwatch": "fn()"
    },
    "ret3062": {
      "unwatch": "fn()"
    },
    "ret3063": {
      "unwatch": "fn()"
    },
    "ret3064": {
      "unwatch": "fn()"
    },
    "ret3065": {
      "unwatch": "fn()"
    },
    "ret3066": {
      "unwatch": "fn()"
    },
    "ret3067": {
      "unwatch": "fn()"
    },
    "ret3068": {
      "unwatch": "fn()"
    },
    "ret3069": {
      "unwatch": "fn()"
    },
    "ret3070": {
      "unwatch": "fn()"
    },
    "ret3071": {
      "unwatch": "fn()"
    },
    "ret3072": {
      "unwatch": "fn()"
    },
    "ret3073": {
      "unwatch": "fn()"
    },
    "ret3074": {
      "unwatch": "fn()"
    },
    "ret3075": {
      "unwatch": "fn()"
    },
    "ret3076": {
      "unwatch": "fn()"
    },
    "ret3077": {
      "unwatch": "fn()"
    },
    "ret3078": {
      "unwatch": "fn()"
    },
    "ret3079": {
      "unwatch": "fn()"
    },
    "ret3080": {
      "unwatch": "fn()"
    },
    "ret3081": {
      "unwatch": "fn()"
    },
    "ret3082": {
      "unwatch": "fn()"
    },
    "ret3083": {
      "unwatch": "fn()"
    },
    "ret3084": {
      "unwatch": "fn()"
    },
    "ret3085": {
      "unwatch": "fn()"
    },
    "ret3086": {
      "unwatch": "fn()"
    },
    "ret3087": {
      "unwatch": "fn()"
    },
    "ret3088": {
      "unwatch": "fn()"
    },
    "ret3089": {
      "unwatch": "fn()"
    },
    "ret3090": {
      "unwatch": "fn()"
    },
    "ret3091": {
      "unwatch": "fn()"
    },
    "ret3092": {
      "unwatch": "fn()"
    },
    "ret3093": {
      "unwatch": "fn()"
    },
    "ret3094": {
      "unwatch": "fn()"
    },
    "ret3095": {
      "unwatch": "fn()"
    },
    "ret3096": {
      "unwatch": "fn()"
    },
    "ret3097": {
      "unwatch": "fn()"
    },
    "ret3098": {
      "unwatch": "fn()"
    },
    "ret3099": {
      "unwatch": "fn()"
    },
    "ret3100": {
      "unwatch": "fn()"
    },
    "ret3101": {
      "unwatch": "fn()"
    },
    "ret3102": {
      "unwatch": "fn()"
    },
    "ret3103": {
      "unwatch": "fn()"
    },
    "ret3104": {
      "unwatch": "fn()"
    },
    "ret3105": {
      "unwatch": "fn()"
    },
    "ret3106": {
      "unwatch": "fn()"
    },
    "ret3107": {
      "unwatch": "fn()"
    },
    "ret3108": {
      "unwatch": "fn()"
    },
    "ret3109": {
      "unwatch": "fn()"
    },
    "ret3110": {
      "unwatch": "fn()"
    },
    "ret3111": {
      "unwatch": "fn()"
    },
    "ret3112": {
      "unwatch": "fn()"
    },
    "ret3113": {
      "unwatch": "fn()"
    },
    "ret3114": {
      "unwatch": "fn()"
    },
    "ret3115": {
      "unwatch": "fn()"
    },
    "ret3116": {
      "unwatch": "fn()"
    },
    "ret3117": {
      "unwatch": "fn()"
    },
    "ret3118": {
      "unwatch": "fn()"
    },
    "ret3119": {
      "unwatch": "fn()"
    },
    "ret3120": {
      "unwatch": "fn()"
    },
    "ret3121": {
      "unwatch": "fn()"
    },
    "ret3122": {
      "unwatch": "fn()"
    },
    "ret3123": {
      "unwatch": "fn()"
    },
    "ret3124": {
      "unwatch": "fn()"
    },
    "ret3125": {
      "unwatch": "fn()"
    },
    "ret3126": {
      "unwatch": "fn()"
    },
    "ret3127": {
      "unwatch": "fn()"
    },
    "ret3128": {
      "unwatch": "fn()"
    },
    "ret3129": {
      "unwatch": "fn()"
    },
    "ret3130": {
      "unwatch": "fn()"
    },
    "ret3131": {
      "unwatch": "fn()"
    },
    "ret3132": {
      "unwatch": "fn()"
    },
    "ret3133": {
      "unwatch": "fn()"
    },
    "ret3134": {
      "unwatch": "fn()"
    },
    "ret3135": {
      "unwatch": "fn()"
    },
    "ret3136": {
      "unwatch": "fn()"
    },
    "ret3137": {
      "unwatch": "fn()"
    },
    "ret3138": {
      "unwatch": "fn()"
    },
    "ret3139": {
      "unwatch": "fn()"
    },
    "ret3140": {
      "unwatch": "fn()"
    },
    "ret3141": {
      "unwatch": "fn()"
    },
    "ret3142": {
      "unwatch": "fn()"
    },
    "ret3143": {
      "unwatch": "fn()"
    },
    "ret3144": {
      "unwatch": "fn()"
    },
    "ret3145": {
      "unwatch": "fn()"
    },
    "ret3146": {
      "unwatch": "fn()"
    },
    "ret3147": {
      "unwatch": "fn()"
    },
    "ret3148": {
      "unwatch": "fn()"
    },
    "ret3149": {
      "unwatch": "fn()"
    },
    "ret3150": {
      "unwatch": "fn()"
    },
    "ret3151": {
      "unwatch": "fn()"
    },
    "ret3152": {
      "unwatch": "fn()"
    },
    "ret3153": {
      "unwatch": "fn()"
    },
    "ret3154": {
      "unwatch": "fn()"
    },
    "ret3155": {
      "unwatch": "fn()"
    },
    "ret3156": {
      "unwatch": "fn()"
    },
    "ret3157": {
      "unwatch": "fn()"
    },
    "ret3158": {
      "unwatch": "fn()"
    },
    "ret3159": {
      "unwatch": "fn()"
    },
    "ret3160": {
      "unwatch": "fn()"
    },
    "ret3161": {
      "unwatch": "fn()"
    },
    "ret3162": {
      "unwatch": "fn()"
    },
    "ret3163": {
      "unwatch": "fn()"
    },
    "ret3164": {
      "unwatch": "fn()"
    },
    "ret3165": {
      "unwatch": "fn()"
    },
    "ret3166": {
      "unwatch": "fn()"
    },
    "ret3167": {
      "unwatch": "fn()"
    },
    "ret3168": {
      "unwatch": "fn()"
    },
    "ret3169": {
      "unwatch": "fn()"
    },
    "ret3170": {
      "unwatch": "fn()"
    },
    "ret3171": {
      "unwatch": "fn()"
    },
    "ret3172": {
      "unwatch": "fn()"
    },
    "ret3173": {
      "unwatch": "fn()"
    },
    "ret3174": {
      "unwatch": "fn()"
    },
    "ret3175": {
      "unwatch": "fn()"
    },
    "ret3176": {
      "unwatch": "fn()"
    },
    "ret3177": {
      "unwatch": "fn()"
    },
    "ret3178": {
      "unwatch": "fn()"
    },
    "ret3179": {
      "unwatch": "fn()"
    },
    "ret3180": {
      "unwatch": "fn()"
    },
    "ret3181": {
      "unwatch": "fn()"
    },
    "ret3182": {
      "unwatch": "fn()"
    },
    "ret3183": {
      "unwatch": "fn()"
    },
    "ret3184": {
      "unwatch": "fn()"
    },
    "ret3185": {
      "unwatch": "fn()"
    },
    "ret3186": {
      "unwatch": "fn()"
    },
    "ret3187": {
      "unwatch": "fn()"
    },
    "ret3188": {
      "unwatch": "fn()"
    },
    "ret3189": {
      "unwatch": "fn()"
    },
    "ret3190": {
      "unwatch": "fn()"
    },
    "ret3191": {
      "unwatch": "fn()"
    },
    "ret3192": {
      "unwatch": "fn()"
    },
    "ret3193": {
      "unwatch": "fn()"
    },
    "ret3194": {
      "unwatch": "fn()"
    }
  }
}
