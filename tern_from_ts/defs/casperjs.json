{
  "CasperModule": {
    "create": "fn(options: CasperOptions) -> Casper",
    "selectXPath": "fn(expression: string) -> Object"
  },
  "EventEmitter": {
    "removeAllFilters": "fn(filter: string) -> Casper",
    "setFilter": "fn(filter: string, cb: Function) -> bool"
  },
  "Casper": {
    "test": "Tester",
    "options": "CasperOptions",
    "__utils__": "ClientUtils",
    "back": "fn() -> Casper",
    "base64encode": "fn(url: string, method?: string, data?: ?) -> string",
    "bypass": "fn(nb: number) -> ?",
    "click": "fn(selector: string) -> bool",
    "clickLabel": "fn(label: string, tag?: string) -> bool",
    "capture": "fn(targetFilePath: string, clipRect: ClipRect) -> Casper",
    "captureBase64": "fn(format: string) -> string",
    "captureSelector": "fn(targetFile: string, selector: string) -> Casper",
    "clear": "fn() -> Casper",
    "debugHTML": "fn(selector?: string, outer?: bool) -> Casper",
    "debugPage": "fn() -> Casper",
    "die": "fn(message: string, status?: number) -> Casper",
    "download": "fn(url: string, target?: string, method?: string, data?: ?) -> Casper",
    "each": "fn(array: [T], fn: fn(self: Casper, item: T, index: number)) -> Casper",
    "echo": "fn(message: string, style?: string) -> Casper",
    "evaluate": "fn(fn: fn(), args: [?]) -> T",
    "evaluateOrDie": "fn(fn: fn(), message?: string, status?: number) -> Casper",
    "exit": "fn(status?: number) -> Casper",
    "exists": "fn(selector: string) -> bool",
    "fetchText": "fn(selector: string) -> string",
    "forward": "fn() -> Casper",
    "log": "fn(message: string, level?: string, space?: string) -> Casper",
    "fill": "fn(selector: string, values: ?, submit?: bool)",
    "fillSelectors": "fn(selector: string, values: ?, submit?: bool)",
    "fillXPath": "fn(selector: string, values: ?, submit?: bool)",
    "getCurrentUrl": "fn() -> string",
    "getElementAttribute": "fn(selector: string, attribute: string) -> string",
    "getElementsAttribute": "fn(selector: string, attribute: string) -> string",
    "getElementBounds": "fn(selector: string) -> ElementBounds",
    "getElementsBounds": "fn(selector: string) -> [ElementBounds]",
    "getElementInfo": "fn(selector: string) -> ElementInfo",
    "getElementsInfo": "fn(selector: string) -> ElementInfo",
    "getFormValues": "fn(selector: string) -> ?",
    "getGlobal": "fn(name: string) -> ?",
    "getHTML": "fn(selector?: string, outer?: bool) -> string",
    "getPageContent": "fn() -> string",
    "getTitle": "fn() -> string",
    "mouseEvent": "fn(type: string, selector: string) -> bool",
    "open": "fn(location: string, settings: OpenSettings) -> Casper",
    "reload": "fn(then?: fn(response: HttpResponse)) -> Casper",
    "repeat": "fn(times: number, then: Function) -> Casper",
    "resourceExists": "fn(test: Function) -> bool",
    "run": "fn(onComplete: Function, time?: number) -> Casper",
    "scrollTo": "fn(x: number, y: number) -> Casper",
    "scrollToBottom": "fn() -> Casper",
    "sendKeys": "fn(selector: string, keys: string, options?: ?) -> Casper",
    "setHttpAuth": "fn(username: string, password: string) -> Casper",
    "start": "fn(url?: string, then?: fn(response: HttpResponse)) -> Casper",
    "status": "fn(asString: bool) -> ?",
    "then": "fn(fn: fn(self?: Casper)) -> Casper",
    "thenBypass": "fn(nb: number) -> Casper",
    "thenBypassIf": "fn(condition: ?, nb: number) -> Casper",
    "thenBypassUnless": "fn(condition: ?, nb: number) -> Casper",
    "thenClick": "fn(selector: string) -> Casper",
    "thenEvaluate": "fn(fn: fn(), args: [?]) -> Casper",
    "thenOpen": "fn(location: string, then?: fn(response: HttpResponse)) -> Casper",
    "thenOpenAndEvaluate": "fn(location: string, then?: Function, args: [?]) -> Casper",
    "unwait": "fn() -> Casper",
    "userAgent": "fn(agent: string) -> string",
    "viewport": "fn(width: number, height: number) -> Casper",
    "visible": "fn(selector: string) -> bool",
    "wait": "fn(timeout: number, then?: Function) -> Casper",
    "waitFor": "fn(testFx: Function, then?: Function, onTimeout?: Function, timeout?: number) -> Casper",
    "waitForAlert": "fn(then: Function, onTimeout?: Function, timeout?: number) -> Casper",
    "waitForPopup": "fn(urlPattern: string, then?: Function, onTimeout?: Function, timeout?: number) -> Casper",
    "waitForUrl": "fn(url: string, then?: Function, onTimeout?: Function, timeout?: number) -> Casper",
    "waitForSelector": "fn(selector: string, then?: Function, onTimeout?: Function, timeout?: number) -> Casper",
    "waitWhileSelector": "fn(selector: string, then?: Function, onTimeout?: Function, timeout?: number) -> Casper",
    "waitForResource": "fn(testFx: Function, then?: Function, onTimeout?: Function, timeout?: number) -> Casper",
    "waitForText": "fn(pattern: string, then?: Function, onTimeout?: Function, timeout?: number) -> Casper",
    "waitUntilVisible": "fn(selector: string, then?: Function, onTimeout?: Function, timeout?: number) -> Casper",
    "waitWhileVisible": "fn(selector: string, then?: Function, onTimeout?: Function, timeout?: number) -> Casper",
    "warn": "fn(message: string) -> Casper",
    "withFrame": "fn(frameInfo: string, then: Function) -> Casper",
    "withPopup": "fn(popupInfo: string, step: Function) -> Casper",
    "zoom": "fn(factor: number) -> Casper"
  },
  "HttpResponse": {
    "contentType": "string",
    "headers": "[?]",
    "id": "number",
    "redirectURL": "string",
    "stage": "string",
    "status": "number",
    "statusText": "string",
    "time": "string",
    "url": "string"
  },
  "OpenSettings": {
    "method": "string",
    "data": "?",
    "headers": "?"
  },
  "ElementBounds": {
    "top": "number",
    "left": "number",
    "width": "number",
    "height": "number"
  },
  "ElementInfo": {
    "nodeName": "string",
    "attributes": "?",
    "tag": "string",
    "html": "string",
    "text": "string",
    "x": "number",
    "y": "number",
    "width": "number",
    "height": "number",
    "visible": "bool"
  },
  "CasperOptions": {
    "clientScripts": "[?]",
    "exitOnError": "bool",
    "httpStatusHandlers": "?",
    "logLevel": "string",
    "onAlert": "Function",
    "onDie": "Function",
    "onError": "Function",
    "onLoadError": "Function",
    "onPageInitialized": "Function",
    "onResourceReceived": "Function",
    "onResourceRequested": "Function",
    "onStepComplete": "Function",
    "onStepTimeout": "Function",
    "onTimeout": "Function",
    "onWaitTimeout": "Function",
    "page": "WebPage",
    "pageSettings": "?",
    "remoteScripts": "[?]",
    "safeLogs": "bool",
    "silentErrors": "bool",
    "stepTimeout": "number",
    "timeout": "number",
    "verbose": "bool",
    "viewportSize": "?",
    "retryTimeout": "number",
    "waitTimeout": "number"
  },
  "ClientUtils": {
    "echo": "fn(message: string)",
    "encode": "fn(contents: string)",
    "exists": "fn(selector: string)",
    "findAll": "fn(selector: string)",
    "findOne": "fn(selector: string)",
    "getBase64": "fn(url: string, method?: string, data?: ?)",
    "getBinary": "fn(url: string, method?: string, data?: ?)",
    "getDocumentHeight": "fn()",
    "getElementBounds": "fn(selector: string)",
    "getElementsBounds": "fn(selector: string)",
    "getElementByXPath": "fn(expression: string, scope?: HTMLElement)",
    "getElementsByXPath": "fn(expression: string, scope?: HTMLElement)",
    "getFieldValue": "fn(inputName: string)",
    "getFormValues": "fn(selector: string)",
    "mouseEvent": "fn(type: string, selector: string)",
    "removeElementsByXPath": "fn(expression: string)",
    "sendAJAX": "fn(url: string, method?: string, data?: ?, async?: bool)",
    "visible": "fn(selector: string)"
  },
  "Colorizer": {
    "colorize": "fn(text: string, styleName: string)",
    "format": "fn(text: string, style: ?)"
  },
  "Tester": {
    "assert": "fn(condition: bool, message?: string) -> ?",
    "assertDoesntExist": "fn(selector: string, message?: string) -> ?",
    "assertElementCount": "fn(selctor: string, expected: number, message?: string) -> ?",
    "assertEquals": "fn(testValue: ?, expected: ?, message?: string) -> ?",
    "assertEval": "fn(fn: Function, message: string, arguments: ?) -> ?",
    "assertEvalEquals": "fn(fn: Function, expected: ?, message?: string, arguments?: ?) -> ?",
    "assertExists": "fn(selector: string, message?: string) -> ?",
    "assertFalsy": "fn(subject: ?, message?: string) -> ?",
    "assertField": "fn(inputName: string, expected: string, message?: string) -> ?",
    "assertFieldName": "fn(inputName: string, expected: string, message?: string, options?: ?) -> ?",
    "assertFieldCSS": "fn(cssSelector: string, expected: string, message?: string) -> ?",
    "assertFieldXPath": "fn(xpathSelector: string, expected: string, message?: string) -> ?",
    "assertHttpStatus": "fn(status: number, message?: string) -> ?",
    "assertMatch": "fn(subject: ?, pattern: RegExp, message?: string) -> ?",
    "assertNot": "fn(subject: ?, message?: string) -> ?",
    "assertNotEquals": "fn(testValue: ?, expected: ?, message?: string) -> ?",
    "assertNotVisible": "fn(selector: string, message?: string) -> ?",
    "assertRaises": "fn(fn: Function, args: [?], message?: string) -> ?",
    "assertSelectorDoesntHaveText": "fn(selector: string, text: string, message?: string) -> ?",
    "assertSelectorExists": "fn(selector: string, message?: string) -> ?",
    "assertSelectorHasText": "fn(selector: string, text: string, message?: string) -> ?",
    "assertResourceExists": "fn(testFx: Function, message?: string) -> ?",
    "assertTextExists": "fn(expected: string, message?: string) -> ?",
    "assertTextDoesntExist": "fn(unexpected: string, message: string) -> ?",
    "assertTitle": "fn(expected: string, message?: string) -> ?",
    "assertTitleMatch": "fn(pattern: RegExp, message?: string) -> ?",
    "assertTruthy": "fn(subject: ?, message?: string) -> ?",
    "assertType": "fn(input: ?, type: string, message?: string) -> ?",
    "assertInstanceOf": "fn(input: ?, ctor: Function, message?: string) -> ?",
    "assertUrlMatch": "fn(pattern: string, message?: string) -> ?",
    "assertVisible": "fn(selector: string, message?: string) -> ?",
    "begin": "fn(description: string, planned: number, suite: Function) -> ?",
    "colorize": "fn(message: string, style: string) -> ?",
    "comment": "fn(message: string) -> ?",
    "done": "fn(expected?: number) -> ?",
    "error": "fn(message: string) -> ?",
    "fail": "fn(message: string) -> ?",
    "formatMessage": "fn(message: string, style: string) -> ?",
    "getFailures": "fn() -> Cases",
    "getPasses": "fn() -> Cases",
    "info": "fn(message: string) -> ?",
    "pass": "fn(message: string) -> ?",
    "renderResults": "fn(exit: bool, status: number, save: string) -> ?",
    "setup": "fn(fn: Function) -> ?",
    "skip": "fn(nb: number, message: string) -> ?",
    "tearDown": "fn(fn: Function) -> ?"
  },
  "Cases": {
    "length": "number",
    "cases": "[Case]"
  },
  "Case": {
    "success": "bool",
    "type": "string",
    "standard": "string",
    "file": "string",
    "values": "CaseValues"
  },
  "CaseValues": {
    "subject": "bool",
    "expected": "bool"
  },
  "Utils": {
    "betterTypeOf": "fn(input: ?) -> ?",
    "dump": "fn(value: ?) -> ?",
    "fileExt": "fn(file: string) -> ?",
    "fillBlanks": "fn(text: string, pad: number) -> ?",
    "format": "fn(f: string, args: [?]) -> ?",
    "getPropertyPath": "fn(obj: ?, path: string) -> ?",
    "inherits": "fn(ctor: ?, superCtor: ?) -> ?",
    "isArray": "fn(value: ?) -> ?",
    "isCasperObject": "fn(value: ?) -> ?",
    "isClipRect": "fn(value: ?) -> ?",
    "isFalsy": "fn(subject: ?) -> ?",
    "isFunction": "fn(value: ?) -> ?",
    "isJsFile": "fn(file: string) -> ?",
    "isNull": "fn(value: ?) -> ?",
    "isNumber": "fn(value: ?) -> ?",
    "isObject": "fn(value: ?) -> ?",
    "isRegExp": "fn(value: ?) -> ?",
    "isString": "fn(value: ?) -> ?",
    "isTruthy": "fn(subject: ?) -> ?",
    "isType": "fn(what: ?, type: string) -> ?",
    "isUndefined": "fn(value: ?) -> ?",
    "isWebPage": "fn(what: ?) -> ?",
    "mergeObjects": "fn(origin: ?, add: ?) -> ?",
    "node": "fn(name: string, attributes: ?) -> ?",
    "serialize": "fn(value: ?) -> ?",
    "unique": "fn(array: [?]) -> ?"
  },
  "!name": "casperjs"
}
