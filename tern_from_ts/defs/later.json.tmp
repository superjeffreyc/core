{
  "Later": {
    "IScheduleData": {
      "schedules": "[IRecurrence]",
      "exceptions": "[IRecurrence]",
      "error": "number"
    },
    "IRecurrence": {
      "t": "[number]",
      "s": "[number]",
      "m": "[number]",
      "h": "[number]",
      "D": "[number]",
      "dw": "[number]",
      "dc": "[number]",
      "dy": "[number]",
      "wm": "[number]",
      "wy": "[number]",
      "M": "[number]",
      "Y": "[number]",
      "t_a": "[number]",
      "s_a": "[number]",
      "m_a": "[number]",
      "h_a": "[number]",
      "D_a": "[number]",
      "dw_a": "[number]",
      "dc_a": "[number]",
      "dy_a": "[number]",
      "wm_a": "[number]",
      "wy_a": "[number]",
      "M_a": "[number]",
      "Y_a": "[number]",
      "t_b": "[number]",
      "s_b": "[number]",
      "m_b": "[number]",
      "h_b": "[number]",
      "D_b": "[number]",
      "dw_b": "[number]",
      "dc_b": "[number]",
      "dy_b": "[number]",
      "wm_b": "[number]",
      "wy_b": "[number]",
      "M_b": "[number]",
      "Y_b": "[number]"
    },
    "IParseStatic": {
      "recur": "fn() -> IRecurrenceBuilder",
      "cron": "fn(input?: string) -> IScheduleData",
      "text": "fn(input?: string) -> IScheduleData"
    },
    "ITimer": {
      "clear": "fn()"
    },
    "ISchedule": {
      "next": "fn(numberOfInst: number, dateFrom?: Date, dateTo?: Date) -> [Date]",
      "nextRange": "fn(numberOfInst: number, dateFrom?: Date, dateTo?: Date) -> [Date]",
      "prev": "fn(numberOfInst: number, dateFrom?: Date, dateTo?: Date) -> [Date]",
      "prevRange": "fn(numberOfInst: number, dateFrom?: Date, dateTo?: Date) -> [Date]"
    },
    "IRecurrenceBuilder": {
      "second": "fn() -> IRecurrenceBuilder",
      "minute": "fn() -> IRecurrenceBuilder",
      "hour": "fn() -> IRecurrenceBuilder",
      "time": "fn() -> IRecurrenceBuilder",
      "dayOfWeek": "fn() -> IRecurrenceBuilder",
      "dayOfWeekCount": "fn() -> IRecurrenceBuilder",
      "dayOfMonth": "fn() -> IRecurrenceBuilder",
      "dayOfYear": "fn() -> IRecurrenceBuilder",
      "weekOfMonth": "fn() -> IRecurrenceBuilder",
      "weekOfYear": "fn() -> IRecurrenceBuilder",
      "month": "fn() -> IRecurrenceBuilder",
      "year": "fn() -> IRecurrenceBuilder",
      "fullDate": "fn() -> IRecurrenceBuilder",
      "on": "fn(values: [number]) -> IRecurrenceBuilder",
      "every": "fn(value?: number) -> IRecurrenceBuilder",
      "between": "fn(start: number, end: number) -> IRecurrenceBuilder",
      "after": "fn(value: number) -> IRecurrenceBuilder",
      "before": "fn(value: number) -> IRecurrenceBuilder",
      "startingOn": "fn(value: number) -> IRecurrenceBuilder",
      "first": "fn() -> IRecurrenceBuilder",
      "last": "fn() -> IRecurrenceBuilder",
      "onWeekend": "fn() -> IRecurrenceBuilder",
      "onWeekday": "fn() -> IRecurrenceBuilder",
      "and": "fn() -> IRecurrenceBuilder",
      "except": "fn() -> IRecurrenceBuilder",
      "customPeriod": "fn(key: string) -> IRecurrenceBuilder",
      "customModifier": "fn(key: string, values: number) -> IRecurrenceBuilder"
    },
    "IDateProvider": {
      "UTC": "fn()",
      "localTime": "fn()",
      "next": "fn(Y?: number, M?: number, D?: number, h?: number, m?: number, s?: number) -> Date",
      "prev": "fn(Y?: number, M?: number, D?: number, h?: number, m?: number, s?: number) -> Date",
      "nextRollover": "fn(d: Date, val: number, constraint: IModifier, period: ITimePeriod) -> Date",
      "prevRollover": "fn(d: Date, val: number, constraint: IModifier, period: ITimePeriod) -> Date"
    },
    "ITimePeriod": {
      "name": "string",
      "range": "number",
      "val": "fn(date: Date) -> number",
      "isValid": "fn(date: Date, value: ?) -> bool",
      "extent": "fn(date?: Date) -> [number]",
      "start": "fn(date: Date) -> Date",
      "end": "fn(date: Date) -> Date",
      "next": "fn(date: Date, value: ?) -> Date",
      "prev": "fn(date: Date, value: ?) -> Date"
    },
    "IModifier": {},
    "IModifierStatic": {
      "after": "IModifier",
      "before": "IModifier"
    },
    "IStatic": {
      "schedule": "fn(input: ?) -> ISchedule",
      "parse": "IParseStatic",
      "date": "IDateProvider",
      "setTimeout": "fn(callback: fn(), time: IScheduleData) -> ITimer",
      "setInterval": "fn(callback: fn(), time: IScheduleData) -> ITimer",
      "time": "ITimePeriod",
      "second": "ITimePeriod",
      "minute": "ITimePeriod",
      "hour": "ITimePeriod",
      "day": "ITimePeriod",
      "dayOfWeek": "ITimePeriod",
      "dayOfWeekCount": "ITimePeriod",
      "dayOfYear": "ITimePeriod",
      "weekOfMonth": "ITimePeriod",
      "weekOfYear": "ITimePeriod",
      "month": "ITimePeriod",
      "year": "ITimePeriod",
      "modifier": "IModifierStatic"
    }
  },
  "later": "Later.IStatic",
  "!name": "later.d.ts"
}
