{
  "DataStream": {
    "BIG_ENDIAN": "bool",
    "LITTLE_ENDIAN": "bool",
    "!type": "fn(arrayBuffer: ArrayBuffer)",
    "prototype": {
      "save": "fn(filename: string)",
      "dynamicSize": "bool",
      "byteLength": "number",
      "buffer": "ArrayBuffer",
      "byteOffset": "number",
      "dataView": "Object",
      "seek": "fn(pos: number)",
      "isEof": "fn() -> bool",
      "mapInt32Array": "fn(length: number) -> Int32Array",
      "mapInt16Array": "fn(length: number) -> Int16Array",
      "mapInt8Array": "fn(length: number) -> Int8Array",
      "mapUint32Array": "fn(length: number) -> Uint32Array",
      "mapUint16Array": "fn(length: number) -> Uint16Array",
      "mapUint8Array": "fn(length: number) -> Uint8Array",
      "mapFloat64Array": "fn(length: number) -> Float64Array",
      "mapFloat32Array": "fn(length: number) -> Float32Array",
      "readInt32Array": "fn(length: number) -> Int32Array",
      "readInt16Array": "fn(length: number) -> Int16Array",
      "readInt8Array": "fn(length: number) -> Int8Array",
      "readUint32Array": "fn(length: number) -> Uint32Array",
      "readUint16Array": "fn(length: number) -> Uint16Array",
      "readUint8Array": "fn(length: number) -> Uint8Array",
      "readFloat64Array": "fn(length: number, e: bool) -> Float64Array",
      "readFloat32Array": "fn(length: number, e: bool) -> Float32Array",
      "writeInt32Array": "fn(arr: Int32Array, e: bool)",
      "writeInt16Array": "fn(arr: Int16Array, e: bool)",
      "writeInt8Array": "fn(arr: Int8Array)",
      "writeUint32Array": "fn(arr: Uint32Array, e: bool)",
      "writeUint16Array": "fn(arr: Uint16Array, e: bool)",
      "writeUint8Array": "fn(arr: Uint8Array)",
      "writeFloat64Array": "fn(arr: Float64Array)",
      "writeFloat32Array": "fn(arr: Float32Array)",
      "readInt32": "fn() -> number",
      "readInt16": "fn() -> number",
      "readInt8": "fn() -> number",
      "readUint32": "fn() -> number",
      "readUint16": "fn() -> number",
      "readUint8": "fn() -> number",
      "readFloat32": "fn() -> number",
      "readFloat64": "fn() -> number",
      "writeInt32": "fn(v: number)",
      "writeInt16": "fn(v: number)",
      "writeInt8": "fn(v: number)",
      "writeUint32": "fn(v: number)",
      "writeUint16": "fn(v: number)",
      "writeUint8": "fn(v: number)",
      "writeFloat32": "fn(v: number)",
      "writeFloat64": "fn(v: number)",
      "readStruct": "fn(structDefinition: [?]) -> Object",
      "writeStruct": "fn(structDefinition: Object, struct: Object)",
      "readUCS2String": "fn(length: number) -> string",
      "writeUCS2String": "fn(str: string)",
      "readString": "fn(length: number) -> string",
      "writeString": "fn(s: string)",
      "readCString": "fn() -> string",
      "writeCString": "fn(s: string)",
      "readType": "fn(t: Object) -> Object",
      "writeType": "fn(t: Object, v: Object, struct: Object)"
    }
  },
  "!name": "DataStream.js"
}
