{
  "dojox": {
    "dtl": {
      "_Templated": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attachScope": "Object",
          "searchContainerNode": "bool",
          "templatePath": "string",
          "templateString": "string",
          "buildRendering": "fn()",
          "destroyRendering": "fn()",
          "getCachedTemplate": "fn(templatePath: ?, templateString: ?, alwaysUseString: ?) -> ?",
          "render": "fn()",
          "startup": "fn()"
        }
      },
      "_base": {
        "BOOLS": {
          "checked": "number",
          "disabled": "number",
          "readonly": "number"
        },
        "data": {},
        "date": {},
        "dates": {},
        "dijit": {},
        "dom": {
          "getTemplate": "fn(text: ?) -> Object",
          "tokenize": "fn(nodes: HTMLElement) -> [?]"
        },
        "html": {},
        "htmlstrings": {},
        "integers": {},
        "lists": {},
        "loader": {},
        "logic": {},
        "loop": {},
        "misc": {},
        "objects": {},
        "register": {
          "filters": "fn(base: String, locations: Object)",
          "tags": "fn(base: String, locations: Object)"
        },
        "strings": {},
        "text": {
          "getFilter": "fn(name: ?, errorless: ?) -> ?",
          "getTag": "fn(name: ?, errorless: ?) -> ?",
          "getTemplate": "fn(file: ?) -> ?",
          "getTemplateString": "fn(file: ?) -> String",
          "tokenize": "fn(str: ?) -> ?"
        },
        "TOKEN_ATTR": "number",
        "TOKEN_BLOCK": "number",
        "TOKEN_CHANGE": "number",
        "TOKEN_COMMENT": "number",
        "TOKEN_CUSTOM": "number",
        "TOKEN_NODE": "number",
        "TOKEN_TEXT": "number",
        "TOKEN_VAR": "number",
        "AttributeNode": "fn(key: ?, value: ?)",
        "ChangeNode": "fn(node: ?, up: bool, root: bool)",
        "Context": "fn(dict: Object)",
        "DomBuffer": "fn(parent: HTMLElement)",
        "DomInline": "fn(args: ?, node: ?)",
        "DomTemplate": "fn(obj: String)",
        "Inline": "fn(args: ?, node: ?)",
        "mark_safe": "fn(value: ?)",
        "quickFilter": "fn(str: ?)",
        "Template": "fn(template: String, isString: bool)",
        "_base": {
          "escape": "fn(value: ?)",
          "safe": "fn(value: ?)"
        }
      },
      "dom": {
        "getTemplate": "fn(text: ?) -> Object",
        "tokenize": "fn(nodes: HTMLElement) -> [?]",
        "_uppers": {},
        "_attributes": {}
      },
      "_DomTemplated": {
        "buildRendering": {},
        "render": {},
        "setTemplate": {}
      },
      "Context": {
        "extend": {},
        "filter": {},
        "get": {},
        "getKeys": {},
        "getThis": {},
        "hasKey": {},
        "pop": {},
        "push": {},
        "setThis": {},
        "update": {}
      },
      "DomInline": {
        "!type": "fn(args: Object, node: HTMLElement)",
        "prototype": {
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "context": "Object",
          "declaredClass": "string",
          "dir": "string",
          "domNode": "HTMLElement",
          "focused": "bool",
          "id": "string",
          "lang": "string",
          "ownerDocument": "Object",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "title": "string",
          "tooltip": "string",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn(preserveDom: bool)",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "get": "fn(name: ?) -> ?",
          "getChildren": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "render": "fn(context: dojox.dtl.Context)",
          "set": "fn(name: ?, value: ?) -> ?",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "watch": "fn(name: String, callback: Function) -> ?"
        }
      },
      "Inline": {
        "!type": "fn(args: Object, node: HTMLElement)",
        "prototype": {
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "context": "Object",
          "declaredClass": "string",
          "dir": "string",
          "domNode": "HTMLElement",
          "focused": "bool",
          "id": "string",
          "lang": "string",
          "ownerDocument": "Object",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "title": "string",
          "tooltip": "string",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn(preserveDom: bool)",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "get": "fn(name: ?) -> ?",
          "getChildren": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "render": "fn(context: Object)",
          "set": "fn(name: ?, value: ?) -> ?",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "watch": "fn(name: String, callback: Function) -> ?"
        }
      },
      "contrib": {
        "objects": {
          "key": "fn(value: ?, arg: ?) -> ?"
        },
        "dijit": {
          "widgetsInTemplate": "bool",
          "AttachNode": "fn(keys: ?, object: ?)",
          "data_dojo_attach_event": "fn(parser: ?, token: ?) -> ?",
          "data_dojo_attach_point": "fn(parser: ?, token: ?) -> ?",
          "data_dojo_type": "fn(parser: ?, token: ?) -> ?",
          "dojoAttachEvent": "fn(parser: ?, token: ?) -> ?",
          "dojoAttachPoint": "fn(parser: ?, token: ?) -> ?",
          "dojoType": "fn(parser: ?, token: ?) -> ?",
          "DojoTypeNode": "fn(node: ?, parsed: ?)",
          "EventNode": "fn(command: ?, obj: ?)",
          "on": "fn(parser: ?, token: ?) -> ?"
        },
        "data": {
          "bind_data": "fn(parser: ?, token: ?) -> ?",
          "bind_query": "fn(parser: ?, token: ?) -> ?",
          "BindDataNode": "fn(items: ?, query: ?, store: ?, alias: ?)"
        },
        "dom": {
          "buffer": "fn(parser: ?, token: ?) -> ?",
          "BufferNode": "fn(nodelist: ?, options: ?)",
          "html": "fn(parser: ?, token: ?) -> ?",
          "style_": "fn(parser: ?, token: ?) -> ?",
          "StyleNode": "fn(styles: ?)"
        }
      },
      "ext_dojo": {
        "NodeList": {
          "events": "[?]",
          "addClass": {},
          "addClassFx": {},
          "addContent": {},
          "adopt": {},
          "after": {},
          "andSelf": {},
          "anim": {},
          "animateProperty": {},
          "append": {},
          "appendTo": {},
          "at": {},
          "attr": {},
          "before": {},
          "children": {},
          "clone": {},
          "closest": {},
          "concat": {},
          "connect": {},
          "coords": {},
          "data": {},
          "delegate": {},
          "dtl": {},
          "empty": {},
          "end": {},
          "even": {},
          "every": {},
          "fadeIn": {},
          "fadeOut": {},
          "filter": {},
          "first": {},
          "forEach": {},
          "html": {},
          "indexOf": {},
          "innerHTML": {},
          "insertAfter": {},
          "insertBefore": {},
          "instantiate": {},
          "last": {},
          "lastIndexOf": {},
          "map": {},
          "marginBox": {},
          "next": {},
          "nextAll": {},
          "odd": {},
          "on": {},
          "orphan": {},
          "parent": {},
          "parents": {},
          "place": {},
          "position": {},
          "prepend": {},
          "prependTo": {},
          "prev": {},
          "prevAll": {},
          "query": {},
          "remove": {},
          "removeAttr": {},
          "removeClass": {},
          "removeClassFx": {},
          "removeData": {},
          "replaceAll": {},
          "replaceClass": {},
          "replaceWith": {},
          "siblings": {},
          "slice": {},
          "slideTo": {},
          "some": {},
          "splice": {},
          "style": {},
          "text": {},
          "toggleClass": {},
          "toggleClassFx": {},
          "val": {},
          "wipeIn": {},
          "wipeOut": {},
          "wrap": {},
          "wrapAll": {},
          "wrapInner": {},
          "_nodeDataCache": {}
        }
      },
      "filter": {
        "dates": {
          "date": "fn(value: ?, arg: ?) -> String",
          "time": "fn(value: ?, arg: ?) -> String",
          "timesince": "fn(value: ?, arg: ?) -> String",
          "timeuntil": "fn(value: ?, arg: ?) -> String"
        },
        "htmlstrings": {
          "linebreaks": "fn(value: ?) -> ?",
          "linebreaksbr": "fn(value: ?) -> ?",
          "removetags": "fn(value: ?, arg: ?) -> ?",
          "striptags": "fn(value: ?) -> ?"
        },
        "integers": {
          "add": "fn(value: ?, arg: ?) -> number",
          "get_digit": "fn(value: ?, arg: ?) -> number"
        },
        "logic": {
          "default_": "fn(value: ?, arg: ?) -> String",
          "default_if_none": "fn(value: ?, arg: ?) -> String",
          "divisibleby": "fn(value: ?, arg: ?) -> bool",
          "yesno": "fn(value: ?, arg: ?) -> ?"
        },
        "misc": {
          "filesizeformat": "fn(value: ?) -> String",
          "phone2numeric": "fn(value: ?) -> String",
          "pluralize": "fn(value: ?, arg: ?) -> String",
          "pprint": "fn(value: ?) -> ?",
          "_phone2numeric": {
            "a": "number",
            "b": "number",
            "c": "number",
            "d": "number",
            "e": "number",
            "f": "number",
            "g": "number",
            "h": "number",
            "i": "number",
            "j": "number",
            "k": "number",
            "l": "number",
            "m": "number",
            "n": "number",
            "o": "number",
            "p": "number",
            "r": "number",
            "s": "number",
            "t": "number",
            "u": "number",
            "v": "number",
            "w": "number",
            "x": "number",
            "y": "number"
          }
        },
        "lists": {
          "dictsort": "fn(value: ?, arg: ?) -> ?",
          "dictsortreversed": "fn(value: ?, arg: ?) -> ?",
          "first": "fn(value: ?) -> String",
          "join": "fn(value: ?, arg: ?) -> ?",
          "length": "fn(value: ?) -> ?",
          "length_is": "fn(value: ?, arg: ?) -> bool",
          "random": "fn(value: ?) -> ?",
          "slice": "fn(value: ?, arg: ?) -> ?",
          "unordered_list": "fn(value: ?) -> ?"
        },
        "strings": {
          "addslashes": "fn(value: ?) -> ?",
          "capfirst": "fn(value: ?) -> number",
          "center": "fn(value: ?, arg: ?) -> String",
          "cut": "fn(value: ?, arg: ?) -> ?",
          "fix_ampersands": "fn(value: ?) -> ?",
          "floatformat": "fn(value: ?, arg: ?) -> ?",
          "iriencode": "fn(value: ?) -> ?",
          "linenumbers": "fn(value: ?) -> ?",
          "ljust": "fn(value: ?, arg: ?) -> String",
          "lower": "fn(value: ?) -> ?",
          "make_list": "fn(value: ?) -> [?]",
          "rjust": "fn(value: ?, arg: ?) -> String",
          "slugify": "fn(value: ?) -> ?",
          "stringformat": "fn(value: ?, arg: ?) -> ?",
          "title": "fn(value: ?) -> String",
          "truncatewords": "fn(value: ?, arg: number) -> ?",
          "truncatewords_html": "fn(value: ?, arg: ?) -> String",
          "upper": "fn(value: ?) -> ?",
          "urlencode": "fn(value: ?) -> ?",
          "urlize": "fn(value: ?) -> ?",
          "urlizetrunc": "fn(value: ?, arg: ?) -> ?",
          "wordcount": "fn(value: ?) -> number",
          "wordwrap": "fn(value: String, arg: ?) -> ?",
          "_strings": {},
          "_truncate_singlets": {
            "area": "bool",
            "base": "bool",
            "br": "bool",
            "col": "bool",
            "hr": "bool",
            "img": "bool",
            "input": "bool",
            "link": "bool",
            "param": "bool"
          }
        }
      },
      "render": {
        "dom": {
          "Render": "fn(attachPoint: HTMLElement, tpl: dojox.dtl._DomTemplated)"
        },
        "html": {
          "Render": "fn(attachPoint: HTMLElement, tpl: dojox.dtl._DomTemplated)"
        }
      },
      "tag": {
        "date": {
          "now": "fn(parser: ?, token: ?)",
          "NowNode": "fn(format: ?, node: ?)"
        },
        "logic": {
          "for_": "fn(parser: ?, token: ?) -> ?",
          "ForNode": "fn(assign: ?, loop: ?, reversed: ?, nodelist: ?)",
          "if_": "fn(parser: ?, token: ?) -> ?",
          "ifequal": "fn(parser: ?, token: ?) -> ?",
          "IfEqualNode": "fn(var1: ?, var2: ?, trues: ?, falses: ?, negate: ?)",
          "IfNode": "fn(bools: ?, trues: ?, falses: ?, type: ?)",
          "ifnotequal": "fn(parser: ?, token: ?) -> ?"
        },
        "loader": {
          "block": "fn(parser: ?, token: ?) -> ?",
          "BlockNode": "fn(name: ?, nodelist: ?)",
          "extends_": "fn(parser: ?, token: ?) -> ?",
          "ExtendsNode": "fn(getTemplate: ?, nodelist: ?, shared: ?, parent: ?, key: ?)",
          "include": "fn(parser: ?, token: ?) -> ?",
          "IncludeNode": "fn(path: ?, constant: ?, getTemplate: ?, text: ?, parsed: ?)",
          "ssi": "fn(parser: ?, token: ?) -> ?"
        },
        "loop": {
          "cycle": "fn(parser: ?, token: ?) -> ?",
          "CycleNode": "fn(cyclevars: ?, name: ?, text: ?, shared: ?)",
          "ifchanged": "fn(parser: ?, token: ?) -> ?",
          "IfChangedNode": "fn(nodes: ?, vars: ?, shared: ?)",
          "regroup": "fn(parser: ?, token: ?) -> ?",
          "RegroupNode": "fn(expression: ?, key: ?, alias: ?)"
        },
        "misc": {
          "comment": "fn(parser: ?, token: ?) -> ?",
          "debug": "fn(parser: ?, token: ?) -> ?",
          "DebugNode": "fn(text: ?)",
          "filter": "fn(parser: ?, token: ?) -> ?",
          "FilterNode": "fn(varnode: ?, nodelist: ?)",
          "firstof": "fn(parser: ?, token: ?) -> ?",
          "FirstOfNode": "fn(vars: ?, text: ?)",
          "spaceless": "fn(parser: ?, token: ?) -> ?",
          "SpacelessNode": "fn(nodelist: ?, text: ?)",
          "templatetag": "fn(parser: ?, token: ?) -> ?",
          "TemplateTagNode": "fn(tag: ?, text: ?)",
          "widthratio": "fn(parser: ?, token: ?) -> ?",
          "WidthRatioNode": "fn(current: ?, max: ?, width: ?, text: ?)",
          "with_": "fn(parser: ?, token: ?) -> ?",
          "WithNode": "fn(target: ?, alias: ?, nodelist: ?)"
        }
      },
      "utils": {
        "date": {
          "DateFormat": "fn(format: String)"
        }
      }
    }
  },
  "dojox/dtl": "exp",
  "dojox/dtl/_Templated": "exp",
  "dojox/dtl/Context": "exp",
  "dojox/dtl/_DomTemplated": "exp",
  "dojox/dtl/DomInline": "exp",
  "dojox/dtl/Inline": "exp",
  "dojox/dtl/_base": "exp",
  "dojox/dtl/_base._base": "exp",
  "dojox/dtl/_base.BOOLS": "exp",
  "dojox/dtl/_base.data": "exp",
  "dojox/dtl/_base.date": "exp",
  "dojox/dtl/_base.dates": "exp",
  "dojox/dtl/_base.dijit": "exp",
  "dojox/dtl/_base.html": "exp",
  "dojox/dtl/_base.htmlstrings": "exp",
  "dojox/dtl/_base.dom": "exp",
  "dojox/dtl/_base.integers": "exp",
  "dojox/dtl/_base.logic": "exp",
  "dojox/dtl/_base.loader": "exp",
  "dojox/dtl/_base.loop": "exp",
  "dojox/dtl/_base.misc": "exp",
  "dojox/dtl/_base.objects": "exp",
  "dojox/dtl/_base.strings": "exp",
  "dojox/dtl/_base.register": "exp",
  "dojox/dtl/_base.text": "exp",
  "dojox/dtl/dom": "exp",
  "dojox/dtl/dom._uppers": "exp",
  "dojox/dtl/dom._attributes": "exp",
  "dojox/dtl/contrib/data": "exp",
  "dojox/dtl/contrib/objects": "exp",
  "dojox/dtl/contrib/dom": "exp",
  "dojox/dtl/contrib/dijit": "exp",
  "dojox/dtl/ext-dojo/NodeList": "exp",
  "dojox/dtl/ext-dojo/NodeList._nodeDataCache": "exp",
  "dojox/dtl/filter/dates": "exp",
  "dojox/dtl/filter/htmlstrings": "exp",
  "dojox/dtl/filter/integers": "exp",
  "dojox/dtl/filter/logic": "exp",
  "dojox/dtl/filter/misc": "exp",
  "dojox/dtl/filter/misc._phone2numeric": "exp",
  "dojox/dtl/filter/lists": "exp",
  "dojox/dtl/filter/strings": "exp",
  "dojox/dtl/filter/strings._strings": "exp",
  "dojox/dtl/filter/strings._truncate_singlets": "exp",
  "dojox/dtl/render/html": "exp",
  "dojox/dtl/render/dom": "exp",
  "dojox/dtl/tag/date": "exp",
  "dojox/dtl/tag/loader": "exp",
  "dojox/dtl/tag/logic": "exp",
  "dojox/dtl/tag/loop": "exp",
  "dojox/dtl/tag/misc": "exp",
  "dojox/dtl/utils/date": "exp",
  "!name": "dojox.dtl"
}
