{
  "GitHubElectron": {
    "NativeImage": {
      "createEmpty": "fn() -> NativeImage",
      "createFromPath": "fn(path: string) -> NativeImage",
      "createFromBuffer": "fn(buffer: Buffer, scaleFactor?: number) -> NativeImage",
      "createFromDataURL": "fn(dataURL: string) -> NativeImage",
      "prototype": {
        "toPng": "fn() -> Buffer",
        "toJpeg": "fn(quality: number) -> Buffer",
        "toDataURL": "fn() -> string",
        "isEmpty": "fn() -> bool",
        "getSize": "fn() -> ?",
        "setTemplateImage": "fn(option: bool)"
      }
    },
    "Clipboard": {
      "readImage": "GitHubElectron.Clipboard.readImage",
      "writeImage": "GitHubElectron.Clipboard.writeImage",
      "readText": "fn(type?: string) -> string",
      "writeText": "fn(text: string, type?: string)",
      "clear": "fn(type?: string)",
      "has": "fn(format: string, type?: string) -> bool",
      "read": "fn(format: string, type?: string) -> ?"
    },
    "Screen": {
      "prototype": {
        "addListener": "fn(event: string, listener: Function) -> Screen",
        "on": "fn(event: string, listener: Function) -> Screen",
        "once": "fn(event: string, listener: Function) -> Screen",
        "removeListener": "fn(event: string, listener: Function) -> Screen",
        "removeAllListeners": "fn(event?: string) -> Screen",
        "setMaxListeners": "fn(n: number) -> Screen",
        "getMaxListeners": "fn() -> number",
        "listeners": "fn(event: string) -> [Function]",
        "emit": "fn(event: string, args: [?]) -> bool",
        "listenerCount": "fn(type: string) -> number",
        "getCursorScreenPoint": "fn() -> ?",
        "getPrimaryDisplay": "fn() -> ?",
        "getAllDisplays": "fn() -> [?]",
        "getDisplayNearestPoint": "fn(point: ?) -> ?",
        "getDisplayMatching": "fn(rect: Rectangle) -> ?"
      }
    },
    "BrowserWindow": {
      "!type": "fn(options?: BrowserWindowOptions)",
      "getAllWindows": "fn() -> [BrowserWindow]",
      "getFocusedWindow": "fn() -> BrowserWindow",
      "fromWebContents": "fn(webContents: WebContents) -> BrowserWindow",
      "fromId": "fn(id: number) -> BrowserWindow",
      "addDevToolsExtension": "fn(path: string) -> string",
      "removeDevToolsExtension": "fn(name: string)",
      "prototype": {
        "addListener": "fn(event: string, listener: Function) -> WebContents",
        "on": "fn(event: string, listener: Function) -> WebContents",
        "once": "fn(event: string, listener: Function) -> WebContents",
        "removeListener": "fn(event: string, listener: Function) -> WebContents",
        "removeAllListeners": "fn(event?: string) -> WebContents",
        "setMaxListeners": "fn(n: number) -> WebContents",
        "getMaxListeners": "fn() -> number",
        "listeners": "fn(event: string) -> [Function]",
        "emit": "fn(event: string, args: [?]) -> bool",
        "listenerCount": "fn(type: string) -> number",
        "webContents": "WebContents",
        "devToolsWebContents": "WebContents",
        "id": "number",
        "destroy": "fn()",
        "close": "fn()",
        "focus": "fn()",
        "isFocused": "fn() -> bool",
        "show": "fn()",
        "showInactive": "fn()",
        "hide": "fn()",
        "isVisible": "fn() -> bool",
        "maximize": "fn()",
        "unmaximize": "fn()",
        "isMaximized": "fn() -> bool",
        "minimize": "fn()",
        "restore": "fn()",
        "isMinimized": "fn() -> bool",
        "setFullScreen": "fn(flag: bool)",
        "isFullScreen": "fn() -> bool",
        "setBounds": "fn(options: Rectangle)",
        "getBounds": "fn() -> Rectangle",
        "setSize": "fn(width: number, height: number)",
        "getSize": "fn() -> [number]",
        "setContentSize": "fn(width: number, height: number)",
        "getContentSize": "fn() -> [number]",
        "setMinimumSize": "fn(width: number, height: number)",
        "getMinimumSize": "fn() -> [number]",
        "setMaximumSize": "fn(width: number, height: number)",
        "getMaximumSize": "fn() -> [number]",
        "setResizable": "fn(resizable: bool)",
        "isResizable": "fn() -> bool",
        "setAlwaysOnTop": "fn(flag: bool)",
        "isAlwaysOnTop": "fn() -> bool",
        "center": "fn()",
        "setPosition": "fn(x: number, y: number)",
        "getPosition": "fn() -> [number]",
        "setTitle": "fn(title: string)",
        "getTitle": "fn() -> string",
        "flashFrame": "fn(flag: bool)",
        "setSkipTaskbar": "fn(skip: bool)",
        "setKiosk": "fn(flag: bool)",
        "isKiosk": "fn() -> bool",
        "setRepresentedFilename": "fn(filename: string)",
        "getRepresentedFilename": "fn() -> string",
        "setDocumentEdited": "fn(edited: bool)",
        "isDocumentEdited": "fn() -> bool",
        "reloadIgnoringCache": "fn()",
        "inspectElement": "fn(x: number, y: number)",
        "focusOnWebView": "fn()",
        "blurWebView": "fn()",
        "capturePage": "fn(rect: Rectangle, callback: fn(image: NativeImage))",
        "print": "fn(options?: ?)",
        "printToPDF": "fn(options: ?, callback: fn(error: Error, data: Buffer))",
        "loadURL": "fn(url: string, options?: ?)",
        "reload": "fn()",
        "setMenu": "fn(menu: Menu)",
        "setProgressBar": "fn(progress: number)",
        "setOverlayIcon": "fn(overlay: NativeImage, description: string)",
        "showDefinitionForSelection": "fn()",
        "setAutoHideMenuBar": "fn(hide: bool)",
        "isMenuBarAutoHide": "fn() -> bool",
        "setMenuBarVisibility": "fn(visibile: bool)",
        "isMenuBarVisible": "fn() -> bool",
        "setVisibleOnAllWorkspaces": "fn(visible: bool)",
        "isVisibleOnAllWorkspaces": "fn() -> bool"
      }
    },
    "WebPreferences": {
      "nodeIntegration": "bool",
      "preload": "string",
      "partition": "string",
      "zoomFactor": "number",
      "javascript": "bool",
      "webSecurity": "bool",
      "allowDisplayingInsecureContent": "bool",
      "allowRunningInsecureContent": "bool",
      "images": "bool",
      "textAreasAreResizable": "bool",
      "webgl": "bool",
      "webaudio": "bool",
      "plugins": "bool",
      "experimentalFeatures": "bool",
      "experimentalCanvasFeatures": "bool",
      "overlayScrollbars": "bool",
      "sharedWorker": "bool",
      "directWrite": "bool",
      "pageVisibility": "bool"
    },
    "BrowserWindowOptions": {
      "show": "bool",
      "useContentSize": "bool",
      "center": "bool",
      "minWidth": "number",
      "minHeight": "number",
      "maxWidth": "number",
      "maxHeight": "number",
      "resizable": "bool",
      "alwaysOnTop": "bool",
      "fullscreen": "bool",
      "skipTaskbar": "bool",
      "zoomFactor": "number",
      "kiosk": "bool",
      "title": "string",
      "icon": "NativeImage",
      "string": "?",
      "frame": "bool",
      "acceptFirstMouse": "bool",
      "disableAutoHideCursor": "bool",
      "autoHideMenuBar": "bool",
      "enableLargerThanScreen": "bool",
      "darkTheme": "bool",
      "preload": "string",
      "transparent": "bool",
      "type": "string",
      "standardWindow": "bool",
      "webPreferences": "WebPreferences",
      "java": "bool",
      "textAreasAreResizable": "bool",
      "extraPluginDirs": "[string]",
      "subpixelFontScaling": "bool",
      "overlayFullscreenVideo": "bool",
      "titleBarStyle": "string"
    },
    "Rectangle": {
      "x": "number",
      "y": "number",
      "width": "number",
      "height": "number"
    },
    "WebContents": {
      "prototype": {
        "addListener": "fn(event: string, listener: Function) -> WebContents",
        "on": "fn(event: string, listener: Function) -> WebContents",
        "once": "fn(event: string, listener: Function) -> WebContents",
        "removeListener": "fn(event: string, listener: Function) -> WebContents",
        "removeAllListeners": "fn(event?: string) -> WebContents",
        "setMaxListeners": "fn(n: number) -> WebContents",
        "getMaxListeners": "fn() -> number",
        "listeners": "fn(event: string) -> [Function]",
        "emit": "fn(event: string, args: [?]) -> bool",
        "listenerCount": "fn(type: string) -> number",
        "loadURL": "fn(url: string, options?: ?)",
        "getURL": "fn() -> string",
        "getTitle": "fn() -> string",
        "getFavicon": "fn() -> NativeImage",
        "isLoading": "fn() -> bool",
        "isWaitingForResponse": "fn() -> bool",
        "stop": "fn()",
        "reload": "fn()",
        "reloadIgnoringCache": "fn()",
        "canGoBack": "fn() -> bool",
        "canGoForward": "fn() -> bool",
        "canGoToOffset": "fn(offset: number) -> bool",
        "goBack": "fn()",
        "goForward": "fn()",
        "goToIndex": "fn(index: number)",
        "goToOffset": "fn(offset: number)",
        "isCrashed": "fn() -> bool",
        "setUserAgent": "fn(userAgent: string)",
        "insertCSS": "fn(css: string)",
        "executeJavaScript": "fn(code: string)",
        "undo": "fn()",
        "redo": "fn()",
        "cut": "fn()",
        "copy": "fn()",
        "paste": "fn()",
        "delete": "fn()",
        "selectAll": "fn()",
        "unselect": "fn()",
        "replace": "fn(text: string)",
        "replaceMisspelling": "fn(text: string)",
        "hasServiceWorker": "fn(callback: fn(hasServiceWorker: bool))",
        "unregisterServiceWorker": "fn(callback: fn(isFulfilled: bool))",
        "print": "fn(options?: ?)",
        "printToPDF": "fn(options: ?, callback: fn(error: Error, data: Buffer))",
        "addWorkSpace": "fn(path: string)",
        "removeWorkSpace": "fn(path: string)",
        "openDevTools": "fn(options?: ?)",
        "closeDevTools": "fn()",
        "isDevToolsOpened": "fn() -> bool",
        "toggleDevTools": "fn()",
        "send": "fn(channel: string, args: [?])"
      }
    },
    "Menu": {
      "!type": "fn()",
      "setApplicationMenu": "fn(menu: Menu)",
      "sendActionToFirstResponder": "fn(action: string)",
      "buildFromTemplate": "fn(template: [MenuItemOptions]) -> Menu",
      "prototype": {
        "popup": "fn(browserWindow: BrowserWindow, x?: number, y?: number)",
        "append": "fn(menuItem: MenuItem)",
        "insert": "fn(position: number, menuItem: MenuItem)",
        "items": "[MenuItem]"
      }
    },
    "MenuItem": {
      "!type": "fn(options?: MenuItemOptions)",
      "prototype": {
        "options": "MenuItemOptions"
      }
    },
    "MenuItemOptions": {
      "click": "Function",
      "selector": "string",
      "type": "string",
      "label": "string",
      "sublabel": "string",
      "accelerator": "string",
      "icon": "NativeImage",
      "string": "?",
      "enabled": "bool",
      "visible": "bool",
      "checked": "bool",
      "submenu": "[MenuItemOptions]",
      "id": "string",
      "position": "string",
      "role": "string"
    },
    "BrowserWindowProxy": {
      "prototype": {
        "blur": "fn()",
        "close": "fn()",
        "closed": "bool",
        "eval": "fn(code: string)",
        "focus": "fn()",
        "postMessage": "fn(message: string, targetOrigin: string)"
      }
    },
    "App": {
      "prototype": {
        "addListener": "fn(event: string, listener: Function) -> App",
        "on": "fn(event: string, listener: Function) -> App",
        "once": "fn(event: string, listener: Function) -> App",
        "removeListener": "fn(event: string, listener: Function) -> App",
        "removeAllListeners": "fn(event?: string) -> App",
        "setMaxListeners": "fn(n: number) -> App",
        "getMaxListeners": "fn() -> number",
        "listeners": "fn(event: string) -> [Function]",
        "emit": "fn(event: string, args: [?]) -> bool",
        "listenerCount": "fn(type: string) -> number",
        "quit": "fn()",
        "terminate": "fn()",
        "getAppPath": "fn() -> string",
        "getPath": "fn(name: string) -> string",
        "setPath": "fn(name: string, path: string)",
        "getVersion": "fn() -> string",
        "getName": "fn() -> string",
        "resolveProxy": "fn(url: string, callback: Function)",
        "addRecentDocument": "fn(path: string)",
        "clearRecentDocuments": "fn()",
        "setUserTasks": "fn(tasks: [Task])",
        "dock": "BrowserWindow",
        "commandLine": "CommandLine",
        "makeSingleInstance": "fn(callback: fn(args: [string], workingDirectory: string)) -> bool"
      }
    },
    "CommandLine": {
      "appendSwitch": "fn(_switch: string, value?: string, number: ?)",
      "appendArgument": "fn(value: ?)"
    },
    "Task": {
      "program": "string",
      "arguments": "string",
      "title": "string",
      "description": "string",
      "iconPath": "string",
      "iconIndex": "number",
      "commandLine": "CommandLine",
      "dock": {
        "bounce": "fn(type?: string) -> ?",
        "cancelBounce": "fn(id: number)",
        "setBadge": "fn(text: string)",
        "getBadge": "fn() -> string",
        "hide": "fn()",
        "show": "fn()",
        "setMenu": "fn(menu: Menu)"
      }
    },
    "AutoUpdater": {
      "prototype": {
        "addListener": "fn(event: string, listener: Function) -> AutoUpdater",
        "on": "fn(event: string, listener: Function) -> AutoUpdater",
        "once": "fn(event: string, listener: Function) -> AutoUpdater",
        "removeListener": "fn(event: string, listener: Function) -> AutoUpdater",
        "removeAllListeners": "fn(event?: string) -> AutoUpdater",
        "setMaxListeners": "fn(n: number) -> AutoUpdater",
        "getMaxListeners": "fn() -> number",
        "listeners": "fn(event: string) -> [Function]",
        "emit": "fn(event: string, args: [?]) -> bool",
        "listenerCount": "fn(type: string) -> number",
        "setFeedURL": "fn(url: string)",
        "checkForUpdates": "fn() -> ?"
      }
    },
    "Dialog": {
      "showOpenDialog": "GitHubElectron.Dialog.showOpenDialog",
      "OpenDialogOptions": {
        "title": "string",
        "defaultPath": "string",
        "filters": "[]",
        "properties": "string",
        "string": "?"
      },
      "showSaveDialog": "GitHubElectron.Dialog.showSaveDialog",
      "showMessageBox": "GitHubElectron.Dialog.showMessageBox",
      "ShowMessageBoxOptions": {
        "type": "string",
        "buttons": "[string]",
        "title": "string",
        "message": "string",
        "detail": "string",
        "icon": "NativeImage"
      },
      "showErrorBox": "fn(title: string, content: string)"
    },
    "Tray": {
      "!type": "fn(image: NativeImage, string: ?)",
      "prototype": {
        "addListener": "fn(event: string, listener: Function) -> Tray",
        "on": "fn(event: string, listener: Function) -> Tray",
        "once": "fn(event: string, listener: Function) -> Tray",
        "removeListener": "fn(event: string, listener: Function) -> Tray",
        "removeAllListeners": "fn(event?: string) -> Tray",
        "setMaxListeners": "fn(n: number) -> Tray",
        "getMaxListeners": "fn() -> number",
        "listeners": "fn(event: string) -> [Function]",
        "emit": "fn(event: string, args: [?]) -> bool",
        "listenerCount": "fn(type: string) -> number",
        "destroy": "fn()",
        "setImage": "fn(image: NativeImage, string: ?)",
        "setPressedImage": "fn(image: NativeImage)",
        "setToolTip": "fn(toolTip: string)",
        "setTitle": "fn(title: string)",
        "setHighlightMode": "fn(highlight: bool)",
        "displayBalloon": "fn(options?: ?)",
        "setContextMenu": "fn(menu: Menu)"
      }
    },
    "CrashReporterStartOptions": {
      "productName": "string",
      "companyName": "string",
      "submitURL": "string",
      "autoSubmit": "bool",
      "ignoreSystemCrashHandler": "bool",
      "extra": {}
    },
    "CrashReporterPayload": {
      "rept": "string",
      "ver": "string",
      "platform": "string",
      "process_type": "string",
      "ptime": "number",
      "_version": "string",
      "_productName": "string",
      "prod": "string",
      "_companyName": "string",
      "upload_file_minidump": "File"
    },
    "CrashReporter": {
      "start": "fn(options?: CrashReporterStartOptions)",
      "getLastCrashReport": "fn() -> CrashReporterPayload"
    },
    "Shell": {
      "showItemInFolder": "fn(fullPath: string)",
      "openItem": "fn(fullPath: string)",
      "openExternal": "fn(url: string)",
      "moveItemToTrash": "fn(fullPath: string)",
      "beep": "fn()"
    },
    "IpcRenderer": {
      "prototype": {
        "addListener": "fn(event: string, listener: Function) -> IpcRenderer",
        "on": "fn(event: string, listener: Function) -> IpcRenderer",
        "once": "fn(event: string, listener: Function) -> IpcRenderer",
        "removeListener": "fn(event: string, listener: Function) -> IpcRenderer",
        "removeAllListeners": "fn(event?: string) -> IpcRenderer",
        "setMaxListeners": "fn(n: number) -> IpcRenderer",
        "getMaxListeners": "fn() -> number",
        "listeners": "fn(event: string) -> [Function]",
        "emit": "fn(event: string, args: [?]) -> bool",
        "listenerCount": "fn(type: string) -> number",
        "send": "fn(channel: string, args: [?])",
        "sendSync": "fn(channel: string, args: [?]) -> string",
        "sendToHost": "fn(channel: string, args: [?])"
      }
    },
    "Remote": {
      "require": "fn(module: string) -> ?",
      "getCurrentWindow": "fn() -> BrowserWindow",
      "getGlobal": "fn(name: string) -> ?",
      "process": "?"
    },
    "WebFrame": {
      "setZoomFactor": "fn(factor: number)",
      "getZoomFactor": "fn() -> number",
      "setZoomLevel": "fn(level: number)",
      "getZoomLevel": "fn() -> number",
      "setSpellCheckProvider": "fn(language: string, autoCorrectWord: bool, provider: ?)",
      "registerURLSchemeAsSecure": "fn(scheme: string)"
    },
    "ContentTracing": {
      "getCategories": "fn(callback: fn(categoryGroups: [?]))",
      "startRecording": "fn(categoryFilter: string, options: number, callback: Function)",
      "stopRecording": "fn(resultFilePath: string, callback: fn(filePath: string))",
      "startMonitoring": "fn(categoryFilter: string, options: number, callback: Function)",
      "stopMonitoring": "fn(callback: Function)",
      "captureMonitoringSnapshot": "fn(resultFilePath: string, callback: fn(filePath: string))",
      "getTraceBufferUsage": "fn(callback: Function)",
      "setWatchEvent": "fn(categoryName: string, eventName: string, callback: Function)",
      "cancelWatchEvent": "fn()",
      "DEFAULT_OPTIONS": "number",
      "ENABLE_SYSTRACE": "number",
      "ENABLE_SAMPLING": "number",
      "RECORD_CONTINUOUSLY": "number"
    },
    "GlobalShortcut": {
      "register": "fn(accelerator: string, callback: Function)",
      "isRegistered": "fn(accelerator: string) -> bool",
      "unregister": "fn(accelerator: string)",
      "unregisterAll": "fn()"
    },
    "RequestFileJob": {
      "!type": "fn(path: string)",
      "prototype": {}
    },
    "RequestStringJob": {
      "!type": "fn(options?: ?)",
      "prototype": {}
    },
    "RequestBufferJob": {
      "!type": "fn(options?: ?)",
      "prototype": {}
    },
    "Protocol": {
      "registerProtocol": "fn(scheme: string, handler: fn(request: ?))",
      "unregisterProtocol": "fn(scheme: string)",
      "isHandledProtocol": "fn(scheme: string) -> bool",
      "interceptProtocol": "fn(scheme: string, handler: fn(request: ?))",
      "uninterceptProtocol": "fn(scheme: string)",
      "RequestFileJob": "RequestFileJob",
      "RequestStringJob": "RequestStringJob",
      "RequestBufferJob": "RequestBufferJob"
    },
    "Electron": {
      "clipboard": "GitHubElectron.Clipboard",
      "crashReporter": "GitHubElectron.CrashReporter",
      "nativeImage": "GitHubElectron.NativeImage",
      "screen": "GitHubElectron.Screen",
      "shell": "GitHubElectron.Shell",
      "remote": "GitHubElectron.Remote",
      "ipcRenderer": "GitHubElectron.IpcRenderer",
      "webFrame": "GitHubElectron.WebFrame",
      "app": "GitHubElectron.App",
      "autoUpdater": "GitHubElectron.AutoUpdater",
      "BrowserWindow": "GitHubElectron.BrowserWindow",
      "contentTracing": "GitHubElectron.ContentTracing",
      "dialog": "GitHubElectron.Dialog",
      "globalShortcut": "GitHubElectron.GlobalShortcut",
      "ipcMain": "NodeJS.EventEmitter",
      "Menu": "GitHubElectron.Menu",
      "MenuItem": "GitHubElectron.MenuItem",
      "powerMonitor": "NodeJS.EventEmitter",
      "protocol": "GitHubElectron.Protocol",
      "Tray": "GitHubElectron.Tray",
      "hideInternalModules": "fn()"
    }
  },
  "Window": {
    "open": "fn(url: string, frameName?: string, features?: string) -> GitHubElectron.BrowserWindowProxy"
  },
  "File": {
    "path": "string"
  },
  "'electron'": "electron",
  "NodeRequireFunction": {},
  "!name": "github-electron",
  "!define": {
    "": {
      "name": "string",
      "extensions": "[string]"
    }
  }
}
