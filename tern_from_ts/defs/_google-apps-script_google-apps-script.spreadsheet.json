{
  "GoogleAppsScript": {
    "Spreadsheet": {
      "ContainerInfo": {
        "getAnchorColumn": "fn() -> Integer",
        "getAnchorRow": "fn() -> Integer",
        "getOffsetX": "fn() -> Integer",
        "getOffsetY": "fn() -> Integer"
      },
      "DataValidation": {
        "copy": "fn() -> DataValidationBuilder",
        "getAllowInvalid": "fn() -> bool",
        "getCriteriaType": "fn() -> DataValidationCriteria",
        "getCriteriaValues": "fn() -> [Object]",
        "getHelpText": "fn() -> string"
      },
      "DataValidationBuilder": {
        "build": "fn() -> DataValidation",
        "copy": "fn() -> DataValidationBuilder",
        "getAllowInvalid": "fn() -> bool",
        "getCriteriaType": "fn() -> DataValidationCriteria",
        "getCriteriaValues": "fn() -> [Object]",
        "getHelpText": "fn() -> string",
        "requireDate": "fn() -> DataValidationBuilder",
        "requireDateAfter": "fn(date: Date) -> DataValidationBuilder",
        "requireDateBefore": "fn(date: Date) -> DataValidationBuilder",
        "requireDateBetween": "fn(start: Date, end: Date) -> DataValidationBuilder",
        "requireDateEqualTo": "fn(date: Date) -> DataValidationBuilder",
        "requireDateNotBetween": "fn(start: Date, end: Date) -> DataValidationBuilder",
        "requireDateOnOrAfter": "fn(date: Date) -> DataValidationBuilder",
        "requireDateOnOrBefore": "fn(date: Date) -> DataValidationBuilder",
        "requireFormulaSatisfied": "fn(formula: string) -> DataValidationBuilder",
        "requireNumberBetween": "fn(start: Number, end: Number) -> DataValidationBuilder",
        "requireNumberEqualTo": "fn(number: Number) -> DataValidationBuilder",
        "requireNumberGreaterThan": "fn(number: Number) -> DataValidationBuilder",
        "requireNumberGreaterThanOrEqualTo": "fn(number: Number) -> DataValidationBuilder",
        "requireNumberLessThan": "fn(number: Number) -> DataValidationBuilder",
        "requireNumberLessThanOrEqualTo": "fn(number: Number) -> DataValidationBuilder",
        "requireNumberNotBetween": "fn(start: Number, end: Number) -> DataValidationBuilder",
        "requireNumberNotEqualTo": "fn(number: Number) -> DataValidationBuilder",
        "requireTextContains": "fn(text: string) -> DataValidationBuilder",
        "requireTextDoesNotContain": "fn(text: string) -> DataValidationBuilder",
        "requireTextEqualTo": "fn(text: string) -> DataValidationBuilder",
        "requireTextIsEmail": "fn() -> DataValidationBuilder",
        "requireTextIsUrl": "fn() -> DataValidationBuilder",
        "requireValueInList": "fn(values: [String]) -> DataValidationBuilder",
        "requireValueInRange": "fn(range: Range) -> DataValidationBuilder",
        "setAllowInvalid": "fn(allowInvalidData: bool) -> DataValidationBuilder",
        "setHelpText": "fn(helpText: string) -> DataValidationBuilder",
        "withCriteria": "fn(criteria: DataValidationCriteria, args: [Object]) -> DataValidationBuilder"
      },
      "DataValidationCriteria": "number",
      "EmbeddedAreaChartBuilder": {
        "addRange": "fn(range: Range) -> EmbeddedChartBuilder",
        "asAreaChart": "fn() -> EmbeddedAreaChartBuilder",
        "asBarChart": "fn() -> EmbeddedBarChartBuilder",
        "asColumnChart": "fn() -> EmbeddedColumnChartBuilder",
        "asLineChart": "fn() -> EmbeddedLineChartBuilder",
        "asPieChart": "fn() -> EmbeddedPieChartBuilder",
        "asScatterChart": "fn() -> EmbeddedScatterChartBuilder",
        "asTableChart": "fn() -> EmbeddedTableChartBuilder",
        "build": "fn() -> EmbeddedChart",
        "getChartType": "fn() -> Charts.ChartType",
        "getContainer": "fn() -> ContainerInfo",
        "getRanges": "fn() -> [Range]",
        "removeRange": "fn(range: Range) -> EmbeddedChartBuilder",
        "reverseCategories": "fn() -> EmbeddedAreaChartBuilder",
        "setBackgroundColor": "fn(cssValue: string) -> EmbeddedAreaChartBuilder",
        "setChartType": "fn(type: Charts.ChartType) -> EmbeddedChartBuilder",
        "setColors": "fn(cssValues: [String]) -> EmbeddedAreaChartBuilder",
        "setLegendPosition": "fn(position: Charts.Position) -> EmbeddedAreaChartBuilder",
        "setLegendTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedAreaChartBuilder",
        "setOption": "fn(option: string, value: Object) -> EmbeddedChartBuilder",
        "setPointStyle": "fn(style: Charts.PointStyle) -> EmbeddedAreaChartBuilder",
        "setPosition": "fn(anchorRowPos: Integer, anchorColPos: Integer, offsetX: Integer, offsetY: Integer) -> EmbeddedChartBuilder",
        "setRange": "fn(start: Number, end: Number) -> EmbeddedAreaChartBuilder",
        "setStacked": "fn() -> EmbeddedAreaChartBuilder",
        "setTitle": "fn(chartTitle: string) -> EmbeddedAreaChartBuilder",
        "setTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedAreaChartBuilder",
        "setXAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedAreaChartBuilder",
        "setXAxisTitle": "fn(title: string) -> EmbeddedAreaChartBuilder",
        "setXAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedAreaChartBuilder",
        "setYAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedAreaChartBuilder",
        "setYAxisTitle": "fn(title: string) -> EmbeddedAreaChartBuilder",
        "setYAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedAreaChartBuilder",
        "useLogScale": "fn() -> EmbeddedAreaChartBuilder"
      },
      "EmbeddedBarChartBuilder": {
        "addRange": "fn(range: Range) -> EmbeddedChartBuilder",
        "asAreaChart": "fn() -> EmbeddedAreaChartBuilder",
        "asBarChart": "fn() -> EmbeddedBarChartBuilder",
        "asColumnChart": "fn() -> EmbeddedColumnChartBuilder",
        "asLineChart": "fn() -> EmbeddedLineChartBuilder",
        "asPieChart": "fn() -> EmbeddedPieChartBuilder",
        "asScatterChart": "fn() -> EmbeddedScatterChartBuilder",
        "asTableChart": "fn() -> EmbeddedTableChartBuilder",
        "build": "fn() -> EmbeddedChart",
        "getChartType": "fn() -> Charts.ChartType",
        "getContainer": "fn() -> ContainerInfo",
        "getRanges": "fn() -> [Range]",
        "removeRange": "fn(range: Range) -> EmbeddedChartBuilder",
        "reverseCategories": "fn() -> EmbeddedBarChartBuilder",
        "reverseDirection": "fn() -> EmbeddedBarChartBuilder",
        "setBackgroundColor": "fn(cssValue: string) -> EmbeddedBarChartBuilder",
        "setChartType": "fn(type: Charts.ChartType) -> EmbeddedChartBuilder",
        "setColors": "fn(cssValues: [String]) -> EmbeddedBarChartBuilder",
        "setLegendPosition": "fn(position: Charts.Position) -> EmbeddedBarChartBuilder",
        "setLegendTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedBarChartBuilder",
        "setOption": "fn(option: string, value: Object) -> EmbeddedChartBuilder",
        "setPosition": "fn(anchorRowPos: Integer, anchorColPos: Integer, offsetX: Integer, offsetY: Integer) -> EmbeddedChartBuilder",
        "setRange": "fn(start: Number, end: Number) -> EmbeddedBarChartBuilder",
        "setStacked": "fn() -> EmbeddedBarChartBuilder",
        "setTitle": "fn(chartTitle: string) -> EmbeddedBarChartBuilder",
        "setTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedBarChartBuilder",
        "setXAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedBarChartBuilder",
        "setXAxisTitle": "fn(title: string) -> EmbeddedBarChartBuilder",
        "setXAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedBarChartBuilder",
        "setYAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedBarChartBuilder",
        "setYAxisTitle": "fn(title: string) -> EmbeddedBarChartBuilder",
        "setYAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedBarChartBuilder",
        "useLogScale": "fn() -> EmbeddedBarChartBuilder"
      },
      "EmbeddedChart": {
        "getAs": "fn(contentType: string) -> Base.Blob",
        "getBlob": "fn() -> Base.Blob",
        "getContainerInfo": "fn() -> ContainerInfo",
        "getId": "fn() -> string",
        "getOptions": "fn() -> Charts.ChartOptions",
        "getRanges": "fn() -> [Range]",
        "getType": "fn() -> string",
        "modify": "fn() -> EmbeddedChartBuilder",
        "setId": "fn(id: string) -> Charts.Chart"
      },
      "EmbeddedChartBuilder": {
        "addRange": "fn(range: Range) -> EmbeddedChartBuilder",
        "asAreaChart": "fn() -> EmbeddedAreaChartBuilder",
        "asBarChart": "fn() -> EmbeddedBarChartBuilder",
        "asColumnChart": "fn() -> EmbeddedColumnChartBuilder",
        "asLineChart": "fn() -> EmbeddedLineChartBuilder",
        "asPieChart": "fn() -> EmbeddedPieChartBuilder",
        "asScatterChart": "fn() -> EmbeddedScatterChartBuilder",
        "asTableChart": "fn() -> EmbeddedTableChartBuilder",
        "build": "fn() -> EmbeddedChart",
        "getChartType": "fn() -> Charts.ChartType",
        "getContainer": "fn() -> ContainerInfo",
        "getRanges": "fn() -> [Range]",
        "removeRange": "fn(range: Range) -> EmbeddedChartBuilder",
        "setChartType": "fn(type: Charts.ChartType) -> EmbeddedChartBuilder",
        "setOption": "fn(option: string, value: Object) -> EmbeddedChartBuilder",
        "setPosition": "fn(anchorRowPos: Integer, anchorColPos: Integer, offsetX: Integer, offsetY: Integer) -> EmbeddedChartBuilder"
      },
      "EmbeddedColumnChartBuilder": {
        "addRange": "fn(range: Range) -> EmbeddedChartBuilder",
        "asAreaChart": "fn() -> EmbeddedAreaChartBuilder",
        "asBarChart": "fn() -> EmbeddedBarChartBuilder",
        "asColumnChart": "fn() -> EmbeddedColumnChartBuilder",
        "asLineChart": "fn() -> EmbeddedLineChartBuilder",
        "asPieChart": "fn() -> EmbeddedPieChartBuilder",
        "asScatterChart": "fn() -> EmbeddedScatterChartBuilder",
        "asTableChart": "fn() -> EmbeddedTableChartBuilder",
        "build": "fn() -> EmbeddedChart",
        "getChartType": "fn() -> Charts.ChartType",
        "getContainer": "fn() -> ContainerInfo",
        "getRanges": "fn() -> [Range]",
        "removeRange": "fn(range: Range) -> EmbeddedChartBuilder",
        "reverseCategories": "fn() -> EmbeddedColumnChartBuilder",
        "setBackgroundColor": "fn(cssValue: string) -> EmbeddedColumnChartBuilder",
        "setChartType": "fn(type: Charts.ChartType) -> EmbeddedChartBuilder",
        "setColors": "fn(cssValues: [String]) -> EmbeddedColumnChartBuilder",
        "setLegendPosition": "fn(position: Charts.Position) -> EmbeddedColumnChartBuilder",
        "setLegendTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedColumnChartBuilder",
        "setOption": "fn(option: string, value: Object) -> EmbeddedChartBuilder",
        "setPosition": "fn(anchorRowPos: Integer, anchorColPos: Integer, offsetX: Integer, offsetY: Integer) -> EmbeddedChartBuilder",
        "setRange": "fn(start: Number, end: Number) -> EmbeddedColumnChartBuilder",
        "setStacked": "fn() -> EmbeddedColumnChartBuilder",
        "setTitle": "fn(chartTitle: string) -> EmbeddedColumnChartBuilder",
        "setTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedColumnChartBuilder",
        "setXAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedColumnChartBuilder",
        "setXAxisTitle": "fn(title: string) -> EmbeddedColumnChartBuilder",
        "setXAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedColumnChartBuilder",
        "setYAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedColumnChartBuilder",
        "setYAxisTitle": "fn(title: string) -> EmbeddedColumnChartBuilder",
        "setYAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedColumnChartBuilder",
        "useLogScale": "fn() -> EmbeddedColumnChartBuilder"
      },
      "EmbeddedLineChartBuilder": {
        "addRange": "fn(range: Range) -> EmbeddedChartBuilder",
        "asAreaChart": "fn() -> EmbeddedAreaChartBuilder",
        "asBarChart": "fn() -> EmbeddedBarChartBuilder",
        "asColumnChart": "fn() -> EmbeddedColumnChartBuilder",
        "asLineChart": "fn() -> EmbeddedLineChartBuilder",
        "asPieChart": "fn() -> EmbeddedPieChartBuilder",
        "asScatterChart": "fn() -> EmbeddedScatterChartBuilder",
        "asTableChart": "fn() -> EmbeddedTableChartBuilder",
        "build": "fn() -> EmbeddedChart",
        "getChartType": "fn() -> Charts.ChartType",
        "getContainer": "fn() -> ContainerInfo",
        "getRanges": "fn() -> [Range]",
        "removeRange": "fn(range: Range) -> EmbeddedChartBuilder",
        "reverseCategories": "fn() -> EmbeddedLineChartBuilder",
        "setBackgroundColor": "fn(cssValue: string) -> EmbeddedLineChartBuilder",
        "setChartType": "fn(type: Charts.ChartType) -> EmbeddedChartBuilder",
        "setColors": "fn(cssValues: [String]) -> EmbeddedLineChartBuilder",
        "setCurveStyle": "fn(style: Charts.CurveStyle) -> EmbeddedLineChartBuilder",
        "setLegendPosition": "fn(position: Charts.Position) -> EmbeddedLineChartBuilder",
        "setLegendTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedLineChartBuilder",
        "setOption": "fn(option: string, value: Object) -> EmbeddedChartBuilder",
        "setPointStyle": "fn(style: Charts.PointStyle) -> EmbeddedLineChartBuilder",
        "setPosition": "fn(anchorRowPos: Integer, anchorColPos: Integer, offsetX: Integer, offsetY: Integer) -> EmbeddedChartBuilder",
        "setRange": "fn(start: Number, end: Number) -> EmbeddedLineChartBuilder",
        "setTitle": "fn(chartTitle: string) -> EmbeddedLineChartBuilder",
        "setTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedLineChartBuilder",
        "setXAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedLineChartBuilder",
        "setXAxisTitle": "fn(title: string) -> EmbeddedLineChartBuilder",
        "setXAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedLineChartBuilder",
        "setYAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedLineChartBuilder",
        "setYAxisTitle": "fn(title: string) -> EmbeddedLineChartBuilder",
        "setYAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedLineChartBuilder",
        "useLogScale": "fn() -> EmbeddedLineChartBuilder"
      },
      "EmbeddedPieChartBuilder": {
        "addRange": "fn(range: Range) -> EmbeddedChartBuilder",
        "asAreaChart": "fn() -> EmbeddedAreaChartBuilder",
        "asBarChart": "fn() -> EmbeddedBarChartBuilder",
        "asColumnChart": "fn() -> EmbeddedColumnChartBuilder",
        "asLineChart": "fn() -> EmbeddedLineChartBuilder",
        "asPieChart": "fn() -> EmbeddedPieChartBuilder",
        "asScatterChart": "fn() -> EmbeddedScatterChartBuilder",
        "asTableChart": "fn() -> EmbeddedTableChartBuilder",
        "build": "fn() -> EmbeddedChart",
        "getChartType": "fn() -> Charts.ChartType",
        "getContainer": "fn() -> ContainerInfo",
        "getRanges": "fn() -> [Range]",
        "removeRange": "fn(range: Range) -> EmbeddedChartBuilder",
        "reverseCategories": "fn() -> EmbeddedPieChartBuilder",
        "set3D": "fn() -> EmbeddedPieChartBuilder",
        "setBackgroundColor": "fn(cssValue: string) -> EmbeddedPieChartBuilder",
        "setChartType": "fn(type: Charts.ChartType) -> EmbeddedChartBuilder",
        "setColors": "fn(cssValues: [String]) -> EmbeddedPieChartBuilder",
        "setLegendPosition": "fn(position: Charts.Position) -> EmbeddedPieChartBuilder",
        "setLegendTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedPieChartBuilder",
        "setOption": "fn(option: string, value: Object) -> EmbeddedChartBuilder",
        "setPosition": "fn(anchorRowPos: Integer, anchorColPos: Integer, offsetX: Integer, offsetY: Integer) -> EmbeddedChartBuilder",
        "setTitle": "fn(chartTitle: string) -> EmbeddedPieChartBuilder",
        "setTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedPieChartBuilder"
      },
      "EmbeddedScatterChartBuilder": {
        "addRange": "fn(range: Range) -> EmbeddedChartBuilder",
        "asAreaChart": "fn() -> EmbeddedAreaChartBuilder",
        "asBarChart": "fn() -> EmbeddedBarChartBuilder",
        "asColumnChart": "fn() -> EmbeddedColumnChartBuilder",
        "asLineChart": "fn() -> EmbeddedLineChartBuilder",
        "asPieChart": "fn() -> EmbeddedPieChartBuilder",
        "asScatterChart": "fn() -> EmbeddedScatterChartBuilder",
        "asTableChart": "fn() -> EmbeddedTableChartBuilder",
        "build": "fn() -> EmbeddedChart",
        "getChartType": "fn() -> Charts.ChartType",
        "getContainer": "fn() -> ContainerInfo",
        "getRanges": "fn() -> [Range]",
        "removeRange": "fn(range: Range) -> EmbeddedChartBuilder",
        "setBackgroundColor": "fn(cssValue: string) -> EmbeddedScatterChartBuilder",
        "setChartType": "fn(type: Charts.ChartType) -> EmbeddedChartBuilder",
        "setColors": "fn(cssValues: [String]) -> EmbeddedScatterChartBuilder",
        "setLegendPosition": "fn(position: Charts.Position) -> EmbeddedScatterChartBuilder",
        "setLegendTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedScatterChartBuilder",
        "setOption": "fn(option: string, value: Object) -> EmbeddedChartBuilder",
        "setPointStyle": "fn(style: Charts.PointStyle) -> EmbeddedScatterChartBuilder",
        "setPosition": "fn(anchorRowPos: Integer, anchorColPos: Integer, offsetX: Integer, offsetY: Integer) -> EmbeddedChartBuilder",
        "setTitle": "fn(chartTitle: string) -> EmbeddedScatterChartBuilder",
        "setTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedScatterChartBuilder",
        "setXAxisLogScale": "fn() -> EmbeddedScatterChartBuilder",
        "setXAxisRange": "fn(start: Number, end: Number) -> EmbeddedScatterChartBuilder",
        "setXAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedScatterChartBuilder",
        "setXAxisTitle": "fn(title: string) -> EmbeddedScatterChartBuilder",
        "setXAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedScatterChartBuilder",
        "setYAxisLogScale": "fn() -> EmbeddedScatterChartBuilder",
        "setYAxisRange": "fn(start: Number, end: Number) -> EmbeddedScatterChartBuilder",
        "setYAxisTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedScatterChartBuilder",
        "setYAxisTitle": "fn(title: string) -> EmbeddedScatterChartBuilder",
        "setYAxisTitleTextStyle": "fn(textStyle: Charts.TextStyle) -> EmbeddedScatterChartBuilder"
      },
      "EmbeddedTableChartBuilder": {
        "addRange": "fn(range: Range) -> EmbeddedChartBuilder",
        "asAreaChart": "fn() -> EmbeddedAreaChartBuilder",
        "asBarChart": "fn() -> EmbeddedBarChartBuilder",
        "asColumnChart": "fn() -> EmbeddedColumnChartBuilder",
        "asLineChart": "fn() -> EmbeddedLineChartBuilder",
        "asPieChart": "fn() -> EmbeddedPieChartBuilder",
        "asScatterChart": "fn() -> EmbeddedScatterChartBuilder",
        "asTableChart": "fn() -> EmbeddedTableChartBuilder",
        "build": "fn() -> EmbeddedChart",
        "enablePaging": "fn(enablePaging: bool) -> EmbeddedTableChartBuilder",
        "enableRtlTable": "fn(rtlEnabled: bool) -> EmbeddedTableChartBuilder",
        "enableSorting": "fn(enableSorting: bool) -> EmbeddedTableChartBuilder",
        "getChartType": "fn() -> Charts.ChartType",
        "getContainer": "fn() -> ContainerInfo",
        "getRanges": "fn() -> [Range]",
        "removeRange": "fn(range: Range) -> EmbeddedChartBuilder",
        "setChartType": "fn(type: Charts.ChartType) -> EmbeddedChartBuilder",
        "setFirstRowNumber": "fn(number: Integer) -> EmbeddedTableChartBuilder",
        "setInitialSortingAscending": "fn(column: Integer) -> EmbeddedTableChartBuilder",
        "setInitialSortingDescending": "fn(column: Integer) -> EmbeddedTableChartBuilder",
        "setOption": "fn(option: string, value: Object) -> EmbeddedChartBuilder",
        "setPosition": "fn(anchorRowPos: Integer, anchorColPos: Integer, offsetX: Integer, offsetY: Integer) -> EmbeddedChartBuilder",
        "showRowNumberColumn": "fn(showRowNumber: bool) -> EmbeddedTableChartBuilder",
        "useAlternatingRowStyle": "fn(alternate: bool) -> EmbeddedTableChartBuilder"
      },
      "PageProtection": {
        "addUser": "fn(email: string)",
        "getUsers": "fn() -> [String]",
        "isProtected": "fn() -> bool",
        "removeUser": "fn(user: string)",
        "setProtected": "fn(protection: bool)"
      },
      "Protection": {
        "addEditor": "fn(emailAddress: string) -> Protection",
        "addEditors": "fn(emailAddresses: [String]) -> Protection",
        "canDomainEdit": "fn() -> bool",
        "canEdit": "fn() -> bool",
        "getDescription": "fn() -> string",
        "getEditors": "fn() -> [Base.User]",
        "getProtectionType": "fn() -> ProtectionType",
        "getRange": "fn() -> Range",
        "getRangeName": "fn() -> string",
        "getUnprotectedRanges": "fn() -> [Range]",
        "isWarningOnly": "fn() -> bool",
        "remove": "fn()",
        "removeEditor": "fn(emailAddress: string) -> Protection",
        "removeEditors": "fn(emailAddresses: [String]) -> Protection",
        "setDescription": "fn(description: string) -> Protection",
        "setDomainEdit": "fn(editable: bool) -> Protection",
        "setRange": "fn(range: Range) -> Protection",
        "setRangeName": "fn(rangeName: string) -> Protection",
        "setUnprotectedRanges": "fn(ranges: [Range]) -> Protection",
        "setWarningOnly": "fn(warningOnly: bool) -> Protection"
      },
      "ProtectionType": "number",
      "Range": {
        "activate": "fn() -> Range",
        "breakApart": "fn() -> Range",
        "canEdit": "fn() -> bool",
        "clear": "fn() -> Range",
        "clearContent": "fn() -> Range",
        "clearDataValidations": "fn() -> Range",
        "clearFormat": "fn() -> Range",
        "clearNote": "fn() -> Range",
        "copyFormatToRange": "fn(gridId: Integer, column: Integer, columnEnd: Integer, row: Integer, rowEnd: Integer)",
        "copyTo": "fn(destination: Range)",
        "copyValuesToRange": "fn(gridId: Integer, column: Integer, columnEnd: Integer, row: Integer, rowEnd: Integer)",
        "getA1Notation": "fn() -> string",
        "getBackground": "fn() -> string",
        "getBackgrounds": "fn() -> [[String]]",
        "getCell": "fn(row: Integer, column: Integer) -> Range",
        "getColumn": "fn() -> Integer",
        "getDataSourceUrl": "fn() -> string",
        "getDataTable": "fn() -> Charts.DataTable",
        "getDataValidation": "fn() -> DataValidation",
        "getDataValidations": "fn() -> [[DataValidation]]",
        "getFontColor": "fn() -> string",
        "getFontColors": "fn() -> [[String]]",
        "getFontFamilies": "fn() -> [[String]]",
        "getFontFamily": "fn() -> string",
        "getFontLine": "fn() -> string",
        "getFontLines": "fn() -> [[String]]",
        "getFontSize": "fn() -> Integer",
        "getFontSizes": "fn() -> [[Integer]]",
        "getFontStyle": "fn() -> string",
        "getFontStyles": "fn() -> [[String]]",
        "getFontWeight": "fn() -> string",
        "getFontWeights": "fn() -> [[String]]",
        "getFormula": "fn() -> string",
        "getFormulaR1C1": "fn() -> string",
        "getFormulas": "fn() -> [[String]]",
        "getFormulasR1C1": "fn() -> [[String]]",
        "getGridId": "fn() -> Integer",
        "getHeight": "fn() -> Integer",
        "getHorizontalAlignment": "fn() -> string",
        "getHorizontalAlignments": "fn() -> [[String]]",
        "getLastColumn": "fn() -> Integer",
        "getLastRow": "fn() -> Integer",
        "getNote": "fn() -> string",
        "getNotes": "fn() -> [[String]]",
        "getNumColumns": "fn() -> Integer",
        "getNumRows": "fn() -> Integer",
        "getNumberFormat": "fn() -> string",
        "getNumberFormats": "fn() -> [[String]]",
        "getRow": "fn() -> Integer",
        "getRowIndex": "fn() -> Integer",
        "getSheet": "fn() -> Sheet",
        "getValue": "fn() -> Object",
        "getValues": "fn() -> [[Object]]",
        "getVerticalAlignment": "fn() -> string",
        "getVerticalAlignments": "fn() -> [[String]]",
        "getWidth": "fn() -> Integer",
        "getWrap": "fn() -> bool",
        "getWraps": "fn() -> [[Boolean]]",
        "isBlank": "fn() -> bool",
        "isEndColumnBounded": "fn() -> bool",
        "isEndRowBounded": "fn() -> bool",
        "isStartColumnBounded": "fn() -> bool",
        "isStartRowBounded": "fn() -> bool",
        "merge": "fn() -> Range",
        "mergeAcross": "fn() -> Range",
        "mergeVertically": "fn() -> Range",
        "moveTo": "fn(target: Range)",
        "offset": "fn(rowOffset: Integer, columnOffset: Integer) -> Range",
        "protect": "fn() -> Protection",
        "setBackground": "fn(color: string) -> Range",
        "setBackgroundRGB": "fn(red: Integer, green: Integer, blue: Integer) -> Range",
        "setBackgrounds": "fn(color: [[String]]) -> Range",
        "setBorder": "fn(top: bool, left: bool, bottom: bool, right: bool, vertical: bool, horizontal: bool) -> Range",
        "setDataValidation": "fn(rule: DataValidation) -> Range",
        "setDataValidations": "fn(rules: [[DataValidation]]) -> Range",
        "setFontColor": "fn(color: string) -> Range",
        "setFontColors": "fn(colors: [[Object]]) -> Range",
        "setFontFamilies": "fn(fontFamilies: [[Object]]) -> Range",
        "setFontFamily": "fn(fontFamily: string) -> Range",
        "setFontLine": "fn(fontLine: string) -> Range",
        "setFontLines": "fn(fontLines: [[Object]]) -> Range",
        "setFontSize": "fn(size: Integer) -> Range",
        "setFontSizes": "fn(sizes: [[Object]]) -> Range",
        "setFontStyle": "fn(fontStyle: string) -> Range",
        "setFontStyles": "fn(fontStyles: [[Object]]) -> Range",
        "setFontWeight": "fn(fontWeight: string) -> Range",
        "setFontWeights": "fn(fontWeights: [[Object]]) -> Range",
        "setFormula": "fn(formula: string) -> Range",
        "setFormulaR1C1": "fn(formula: string) -> Range",
        "setFormulas": "fn(formulas: [[String]]) -> Range",
        "setFormulasR1C1": "fn(formulas: [[String]]) -> Range",
        "setHorizontalAlignment": "fn(alignment: string) -> Range",
        "setHorizontalAlignments": "fn(alignments: [[Object]]) -> Range",
        "setNote": "fn(note: string) -> Range",
        "setNotes": "fn(notes: [[Object]]) -> Range",
        "setNumberFormat": "fn(numberFormat: string) -> Range",
        "setNumberFormats": "fn(numberFormats: [[Object]]) -> Range",
        "setValue": "fn(value: Object) -> Range",
        "setValues": "fn(values: [[Object]]) -> Range",
        "setVerticalAlignment": "fn(alignment: string) -> Range",
        "setVerticalAlignments": "fn(alignments: [[Object]]) -> Range",
        "setWrap": "fn(isWrapEnabled: bool) -> Range",
        "setWraps": "fn(isWrapEnabled: [[Object]]) -> Range",
        "sort": "fn(sortSpecObj: Object) -> Range"
      },
      "Sheet": {
        "activate": "fn() -> Sheet",
        "appendRow": "fn(rowContents: [Object]) -> Sheet",
        "autoResizeColumn": "fn(columnPosition: Integer) -> Sheet",
        "clear": "fn() -> Sheet",
        "clearContents": "fn() -> Sheet",
        "clearFormats": "fn() -> Sheet",
        "clearNotes": "fn() -> Sheet",
        "copyTo": "fn(spreadsheet: Spreadsheet) -> Sheet",
        "deleteColumn": "fn(columnPosition: Integer) -> Sheet",
        "deleteColumns": "fn(columnPosition: Integer, howMany: Integer)",
        "deleteRow": "fn(rowPosition: Integer) -> Sheet",
        "deleteRows": "fn(rowPosition: Integer, howMany: Integer)",
        "getActiveCell": "fn() -> Range",
        "getActiveRange": "fn() -> Range",
        "getCharts": "fn() -> [EmbeddedChart]",
        "getColumnWidth": "fn(columnPosition: Integer) -> Integer",
        "getDataRange": "fn() -> Range",
        "getFrozenColumns": "fn() -> Integer",
        "getFrozenRows": "fn() -> Integer",
        "getIndex": "fn() -> Integer",
        "getLastColumn": "fn() -> Integer",
        "getLastRow": "fn() -> Integer",
        "getMaxColumns": "fn() -> Integer",
        "getMaxRows": "fn() -> Integer",
        "getName": "fn() -> string",
        "getParent": "fn() -> Spreadsheet",
        "getProtections": "fn(type: ProtectionType) -> [Protection]",
        "getRange": "fn(row: Integer, column: Integer) -> Range",
        "getRowHeight": "fn(rowPosition: Integer) -> Integer",
        "getSheetId": "fn() -> Integer",
        "getSheetName": "fn() -> string",
        "getSheetValues": "fn(startRow: Integer, startColumn: Integer, numRows: Integer, numColumns: Integer) -> [[Object]]",
        "hideColumn": "fn(column: Range)",
        "hideColumns": "fn(columnIndex: Integer)",
        "hideRow": "fn(row: Range)",
        "hideRows": "fn(rowIndex: Integer)",
        "hideSheet": "fn() -> Sheet",
        "insertChart": "fn(chart: EmbeddedChart)",
        "insertColumnAfter": "fn(afterPosition: Integer) -> Sheet",
        "insertColumnBefore": "fn(beforePosition: Integer) -> Sheet",
        "insertColumns": "fn(columnIndex: Integer)",
        "insertColumnsAfter": "fn(afterPosition: Integer, howMany: Integer) -> Sheet",
        "insertColumnsBefore": "fn(beforePosition: Integer, howMany: Integer) -> Sheet",
        "insertImage": "fn(blob: Base.Blob, column: Integer, row: Integer)",
        "insertRowAfter": "fn(afterPosition: Integer) -> Sheet",
        "insertRowBefore": "fn(beforePosition: Integer) -> Sheet",
        "insertRows": "fn(rowIndex: Integer)",
        "insertRowsAfter": "fn(afterPosition: Integer, howMany: Integer) -> Sheet",
        "insertRowsBefore": "fn(beforePosition: Integer, howMany: Integer) -> Sheet",
        "isSheetHidden": "fn() -> bool",
        "newChart": "fn() -> EmbeddedChartBuilder",
        "protect": "fn() -> Protection",
        "removeChart": "fn(chart: EmbeddedChart)",
        "setActiveRange": "fn(range: Range) -> Range",
        "setActiveSelection": "fn(range: Range) -> Range",
        "setColumnWidth": "fn(columnPosition: Integer, width: Integer) -> Sheet",
        "setFrozenColumns": "fn(columns: Integer)",
        "setFrozenRows": "fn(rows: Integer)",
        "setName": "fn(name: string) -> Sheet",
        "setRowHeight": "fn(rowPosition: Integer, height: Integer) -> Sheet",
        "showColumns": "fn(columnIndex: Integer)",
        "showRows": "fn(rowIndex: Integer)",
        "showSheet": "fn() -> Sheet",
        "sort": "fn(columnPosition: Integer) -> Sheet",
        "unhideColumn": "fn(column: Range)",
        "unhideRow": "fn(row: Range)",
        "updateChart": "fn(chart: EmbeddedChart)",
        "getSheetProtection": "fn() -> PageProtection",
        "setSheetProtection": "fn(permissions: PageProtection)"
      },
      "Spreadsheet": {
        "addEditor": "fn(emailAddress: string) -> Spreadsheet",
        "addEditors": "fn(emailAddresses: [String]) -> Spreadsheet",
        "addMenu": "fn(name: string, subMenus: [Object])",
        "addViewer": "fn(emailAddress: string) -> Spreadsheet",
        "addViewers": "fn(emailAddresses: [String]) -> Spreadsheet",
        "appendRow": "fn(rowContents: [Object]) -> Sheet",
        "autoResizeColumn": "fn(columnPosition: Integer) -> Sheet",
        "copy": "fn(name: string) -> Spreadsheet",
        "deleteActiveSheet": "fn() -> Sheet",
        "deleteColumn": "fn(columnPosition: Integer) -> Sheet",
        "deleteColumns": "fn(columnPosition: Integer, howMany: Integer)",
        "deleteRow": "fn(rowPosition: Integer) -> Sheet",
        "deleteRows": "fn(rowPosition: Integer, howMany: Integer)",
        "deleteSheet": "fn(sheet: Sheet)",
        "duplicateActiveSheet": "fn() -> Sheet",
        "getActiveCell": "fn() -> Range",
        "getActiveRange": "fn() -> Range",
        "getActiveSheet": "fn() -> Sheet",
        "getAs": "fn(contentType: string) -> Base.Blob",
        "getBlob": "fn() -> Base.Blob",
        "getColumnWidth": "fn(columnPosition: Integer) -> Integer",
        "getDataRange": "fn() -> Range",
        "getEditors": "fn() -> [Base.User]",
        "getFormUrl": "fn() -> string",
        "getFrozenColumns": "fn() -> Integer",
        "getFrozenRows": "fn() -> Integer",
        "getId": "fn() -> string",
        "getLastColumn": "fn() -> Integer",
        "getLastRow": "fn() -> Integer",
        "getName": "fn() -> string",
        "getNumSheets": "fn() -> Integer",
        "getOwner": "fn() -> Base.User",
        "getProtections": "fn(type: ProtectionType) -> [Protection]",
        "getRange": "fn(a1Notation: string) -> Range",
        "getRangeByName": "fn(name: string) -> Range",
        "getRowHeight": "fn(rowPosition: Integer) -> Integer",
        "getSheetByName": "fn(name: string) -> Sheet",
        "getSheetId": "fn() -> Integer",
        "getSheetName": "fn() -> string",
        "getSheetValues": "fn(startRow: Integer, startColumn: Integer, numRows: Integer, numColumns: Integer) -> [[Object]]",
        "getSheets": "fn() -> [Sheet]",
        "getSpreadsheetLocale": "fn() -> string",
        "getSpreadsheetTimeZone": "fn() -> string",
        "getUrl": "fn() -> string",
        "getViewers": "fn() -> [Base.User]",
        "hideColumn": "fn(column: Range)",
        "hideRow": "fn(row: Range)",
        "insertColumnAfter": "fn(afterPosition: Integer) -> Sheet",
        "insertColumnBefore": "fn(beforePosition: Integer) -> Sheet",
        "insertColumnsAfter": "fn(afterPosition: Integer, howMany: Integer) -> Sheet",
        "insertColumnsBefore": "fn(beforePosition: Integer, howMany: Integer) -> Sheet",
        "insertImage": "fn(blob: Base.Blob, column: Integer, row: Integer)",
        "insertRowAfter": "fn(afterPosition: Integer) -> Sheet",
        "insertRowBefore": "fn(beforePosition: Integer) -> Sheet",
        "insertRowsAfter": "fn(afterPosition: Integer, howMany: Integer) -> Sheet",
        "insertRowsBefore": "fn(beforePosition: Integer, howMany: Integer) -> Sheet",
        "insertSheet": "fn() -> Sheet",
        "moveActiveSheet": "fn(pos: Integer)",
        "removeEditor": "fn(emailAddress: string) -> Spreadsheet",
        "removeMenu": "fn(name: string)",
        "removeNamedRange": "fn(name: string)",
        "removeViewer": "fn(emailAddress: string) -> Spreadsheet",
        "rename": "fn(newName: string)",
        "renameActiveSheet": "fn(newName: string)",
        "setActiveRange": "fn(range: Range) -> Range",
        "setActiveSelection": "fn(range: Range) -> Range",
        "setActiveSheet": "fn(sheet: Sheet) -> Sheet",
        "setColumnWidth": "fn(columnPosition: Integer, width: Integer) -> Sheet",
        "setFrozenColumns": "fn(columns: Integer)",
        "setFrozenRows": "fn(rows: Integer)",
        "setNamedRange": "fn(name: string, range: Range)",
        "setRowHeight": "fn(rowPosition: Integer, height: Integer) -> Sheet",
        "setSpreadsheetLocale": "fn(locale: string)",
        "setSpreadsheetTimeZone": "fn(timezone: string)",
        "show": "fn(userInterface: Object)",
        "sort": "fn(columnPosition: Integer) -> Sheet",
        "toast": "fn(msg: string)",
        "unhideColumn": "fn(column: Range)",
        "unhideRow": "fn(row: Range)",
        "updateMenu": "fn(name: string, subMenus: [Object])",
        "getSheetProtection": "fn() -> PageProtection",
        "isAnonymousView": "fn() -> bool",
        "isAnonymousWrite": "fn() -> bool",
        "setAnonymousAccess": "fn(anonymousReadAllowed: bool, anonymousWriteAllowed: bool)",
        "setSheetProtection": "fn(permissions: PageProtection)"
      },
      "SpreadsheetApp": {
        "DataValidationCriteria": "DataValidationCriteria",
        "ProtectionType": "ProtectionType",
        "create": "fn(name: string) -> Spreadsheet",
        "flush": "fn()",
        "getActive": "fn() -> Spreadsheet",
        "getActiveRange": "fn() -> Range",
        "getActiveSheet": "fn() -> Sheet",
        "getActiveSpreadsheet": "fn() -> Spreadsheet",
        "getUi": "fn() -> Base.Ui",
        "newDataValidation": "fn() -> DataValidationBuilder",
        "open": "fn(file: Drive.File) -> Spreadsheet",
        "openById": "fn(id: string) -> Spreadsheet",
        "openByUrl": "fn(url: string) -> Spreadsheet",
        "setActiveRange": "fn(range: Range) -> Range",
        "setActiveSheet": "fn(sheet: Sheet) -> Sheet",
        "setActiveSpreadsheet": "fn(newActiveSpreadsheet: Spreadsheet)"
      }
    }
  },
  "SpreadsheetApp": "GoogleAppsScript.Spreadsheet.SpreadsheetApp",
  "!name": "google-apps-script.spreadsheet"
}
