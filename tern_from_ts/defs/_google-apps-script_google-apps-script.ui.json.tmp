{
  "GoogleAppsScript": {
    "UI": {
      "AbsolutePanel": {
        "add": "fn(widget: Widget) -> AbsolutePanel",
        "addStyleDependentName": "fn(styleName: string) -> AbsolutePanel",
        "addStyleName": "fn(styleName: string) -> AbsolutePanel",
        "clear": "fn() -> AbsolutePanel",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "remove": "fn(index: Integer) -> AbsolutePanel",
        "setHeight": "fn(height: string) -> AbsolutePanel",
        "setId": "fn(id: string) -> AbsolutePanel",
        "setLayoutData": "fn(layout: Object) -> AbsolutePanel",
        "setPixelSize": "fn(width: Integer, height: Integer) -> AbsolutePanel",
        "setSize": "fn(width: string, height: string) -> AbsolutePanel",
        "setStyleAttribute": "fn(attribute: string, value: string) -> AbsolutePanel",
        "setStyleAttributes": "fn(attributes: Object) -> AbsolutePanel",
        "setStyleName": "fn(styleName: string) -> AbsolutePanel",
        "setStylePrimaryName": "fn(styleName: string) -> AbsolutePanel",
        "setTag": "fn(tag: string) -> AbsolutePanel",
        "setTitle": "fn(title: string) -> AbsolutePanel",
        "setVisible": "fn(visible: bool) -> AbsolutePanel",
        "setWidgetPosition": "fn(widget: Widget, left: Integer, top: Integer) -> AbsolutePanel",
        "setWidth": "fn(width: string) -> AbsolutePanel"
      },
      "Anchor": {
        "addBlurHandler": "fn(handler: Handler) -> Anchor",
        "addClickHandler": "fn(handler: Handler) -> Anchor",
        "addFocusHandler": "fn(handler: Handler) -> Anchor",
        "addKeyDownHandler": "fn(handler: Handler) -> Anchor",
        "addKeyPressHandler": "fn(handler: Handler) -> Anchor",
        "addKeyUpHandler": "fn(handler: Handler) -> Anchor",
        "addMouseDownHandler": "fn(handler: Handler) -> Anchor",
        "addMouseMoveHandler": "fn(handler: Handler) -> Anchor",
        "addMouseOutHandler": "fn(handler: Handler) -> Anchor",
        "addMouseOverHandler": "fn(handler: Handler) -> Anchor",
        "addMouseUpHandler": "fn(handler: Handler) -> Anchor",
        "addMouseWheelHandler": "fn(handler: Handler) -> Anchor",
        "addStyleDependentName": "fn(styleName: string) -> Anchor",
        "addStyleName": "fn(styleName: string) -> Anchor",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setAccessKey": "fn(accessKey: Char) -> Anchor",
        "setDirection": "fn(direction: Component) -> Anchor",
        "setEnabled": "fn(enabled: bool) -> Anchor",
        "setFocus": "fn(focus: bool) -> Anchor",
        "setHTML": "fn(html: string) -> Anchor",
        "setHeight": "fn(height: string) -> Anchor",
        "setHorizontalAlignment": "fn(horizontalAlignment: HorizontalAlignment) -> Anchor",
        "setHref": "fn(href: string) -> Anchor",
        "setId": "fn(id: string) -> Anchor",
        "setLayoutData": "fn(layout: Object) -> Anchor",
        "setName": "fn(name: string) -> Anchor",
        "setPixelSize": "fn(width: Integer, height: Integer) -> Anchor",
        "setSize": "fn(width: string, height: string) -> Anchor",
        "setStyleAttribute": "fn(attribute: string, value: string) -> Anchor",
        "setStyleAttributes": "fn(attributes: Object) -> Anchor",
        "setStyleName": "fn(styleName: string) -> Anchor",
        "setStylePrimaryName": "fn(styleName: string) -> Anchor",
        "setTabIndex": "fn(index: Integer) -> Anchor",
        "setTag": "fn(tag: string) -> Anchor",
        "setTarget": "fn(target: string) -> Anchor",
        "setText": "fn(text: string) -> Anchor",
        "setTitle": "fn(title: string) -> Anchor",
        "setVisible": "fn(visible: bool) -> Anchor",
        "setWidth": "fn(width: string) -> Anchor",
        "setWordWrap": "fn(wordWrap: bool) -> Anchor"
      },
      "Button": {
        "addBlurHandler": "fn(handler: Handler) -> Button",
        "addClickHandler": "fn(handler: Handler) -> Button",
        "addFocusHandler": "fn(handler: Handler) -> Button",
        "addKeyDownHandler": "fn(handler: Handler) -> Button",
        "addKeyPressHandler": "fn(handler: Handler) -> Button",
        "addKeyUpHandler": "fn(handler: Handler) -> Button",
        "addMouseDownHandler": "fn(handler: Handler) -> Button",
        "addMouseMoveHandler": "fn(handler: Handler) -> Button",
        "addMouseOutHandler": "fn(handler: Handler) -> Button",
        "addMouseOverHandler": "fn(handler: Handler) -> Button",
        "addMouseUpHandler": "fn(handler: Handler) -> Button",
        "addMouseWheelHandler": "fn(handler: Handler) -> Button",
        "addStyleDependentName": "fn(styleName: string) -> Button",
        "addStyleName": "fn(styleName: string) -> Button",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setAccessKey": "fn(accessKey: Char) -> Button",
        "setEnabled": "fn(enabled: bool) -> Button",
        "setFocus": "fn(focus: bool) -> Button",
        "setHTML": "fn(html: string) -> Button",
        "setHeight": "fn(height: string) -> Button",
        "setId": "fn(id: string) -> Button",
        "setLayoutData": "fn(layout: Object) -> Button",
        "setPixelSize": "fn(width: Integer, height: Integer) -> Button",
        "setSize": "fn(width: string, height: string) -> Button",
        "setStyleAttribute": "fn(attribute: string, value: string) -> Button",
        "setStyleAttributes": "fn(attributes: Object) -> Button",
        "setStyleName": "fn(styleName: string) -> Button",
        "setStylePrimaryName": "fn(styleName: string) -> Button",
        "setTabIndex": "fn(index: Integer) -> Button",
        "setTag": "fn(tag: string) -> Button",
        "setText": "fn(text: string) -> Button",
        "setTitle": "fn(title: string) -> Button",
        "setVisible": "fn(visible: bool) -> Button",
        "setWidth": "fn(width: string) -> Button"
      },
      "CaptionPanel": {
        "add": "fn(widget: Widget) -> CaptionPanel",
        "addStyleDependentName": "fn(styleName: string) -> CaptionPanel",
        "addStyleName": "fn(styleName: string) -> CaptionPanel",
        "clear": "fn() -> CaptionPanel",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setCaptionText": "fn(text: string) -> CaptionPanel",
        "setContentWidget": "fn(widget: Widget) -> CaptionPanel",
        "setHeight": "fn(height: string) -> CaptionPanel",
        "setId": "fn(id: string) -> CaptionPanel",
        "setLayoutData": "fn(layout: Object) -> CaptionPanel",
        "setPixelSize": "fn(width: Integer, height: Integer) -> CaptionPanel",
        "setSize": "fn(width: string, height: string) -> CaptionPanel",
        "setStyleAttribute": "fn(attribute: string, value: string) -> CaptionPanel",
        "setStyleAttributes": "fn(attributes: Object) -> CaptionPanel",
        "setStyleName": "fn(styleName: string) -> CaptionPanel",
        "setStylePrimaryName": "fn(styleName: string) -> CaptionPanel",
        "setTag": "fn(tag: string) -> CaptionPanel",
        "setText": "fn(text: string) -> CaptionPanel",
        "setTitle": "fn(title: string) -> CaptionPanel",
        "setVisible": "fn(visible: bool) -> CaptionPanel",
        "setWidget": "fn(widget: Widget) -> CaptionPanel",
        "setWidth": "fn(width: string) -> CaptionPanel"
      },
      "CheckBox": {
        "addBlurHandler": "fn(handler: Handler) -> CheckBox",
        "addClickHandler": "fn(handler: Handler) -> CheckBox",
        "addFocusHandler": "fn(handler: Handler) -> CheckBox",
        "addKeyDownHandler": "fn(handler: Handler) -> CheckBox",
        "addKeyPressHandler": "fn(handler: Handler) -> CheckBox",
        "addKeyUpHandler": "fn(handler: Handler) -> CheckBox",
        "addMouseDownHandler": "fn(handler: Handler) -> CheckBox",
        "addMouseMoveHandler": "fn(handler: Handler) -> CheckBox",
        "addMouseOutHandler": "fn(handler: Handler) -> CheckBox",
        "addMouseOverHandler": "fn(handler: Handler) -> CheckBox",
        "addMouseUpHandler": "fn(handler: Handler) -> CheckBox",
        "addMouseWheelHandler": "fn(handler: Handler) -> CheckBox",
        "addStyleDependentName": "fn(styleName: string) -> CheckBox",
        "addStyleName": "fn(styleName: string) -> CheckBox",
        "addValueChangeHandler": "fn(handler: Handler) -> CheckBox",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setAccessKey": "fn(accessKey: Char) -> CheckBox",
        "setEnabled": "fn(enabled: bool) -> CheckBox",
        "setFocus": "fn(focus: bool) -> CheckBox",
        "setFormValue": "fn(formValue: string) -> CheckBox",
        "setHTML": "fn(html: string) -> CheckBox",
        "setHeight": "fn(height: string) -> CheckBox",
        "setId": "fn(id: string) -> CheckBox",
        "setLayoutData": "fn(layout: Object) -> CheckBox",
        "setName": "fn(name: string) -> CheckBox",
        "setPixelSize": "fn(width: Integer, height: Integer) -> CheckBox",
        "setSize": "fn(width: string, height: string) -> CheckBox",
        "setStyleAttribute": "fn(attribute: string, value: string) -> CheckBox",
        "setStyleAttributes": "fn(attributes: Object) -> CheckBox",
        "setStyleName": "fn(styleName: string) -> CheckBox",
        "setStylePrimaryName": "fn(styleName: string) -> CheckBox",
        "setTabIndex": "fn(index: Integer) -> CheckBox",
        "setTag": "fn(tag: string) -> CheckBox",
        "setText": "fn(text: string) -> CheckBox",
        "setTitle": "fn(title: string) -> CheckBox",
        "setValue": "fn(value: bool) -> CheckBox",
        "setVisible": "fn(visible: bool) -> CheckBox",
        "setWidth": "fn(width: string) -> CheckBox"
      },
      "ClientHandler": {
        "forEventSource": "fn() -> ClientHandler",
        "forTargets": "fn(widgets: [Object]) -> ClientHandler",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setEnabled": "fn(enabled: bool) -> ClientHandler",
        "setHTML": "fn(html: string) -> ClientHandler",
        "setId": "fn(id: string) -> ClientHandler",
        "setStyleAttribute": "fn(row: Integer, column: Integer, attribute: string, value: string) -> ClientHandler",
        "setStyleAttributes": "fn(row: Integer, column: Integer, attributes: Object) -> ClientHandler",
        "setTag": "fn(tag: string) -> ClientHandler",
        "setText": "fn(text: string) -> ClientHandler",
        "setValue": "fn(value: bool) -> ClientHandler",
        "setVisible": "fn(visible: bool) -> ClientHandler",
        "validateEmail": "fn(widget: Widget) -> ClientHandler",
        "validateInteger": "fn(widget: Widget) -> ClientHandler",
        "validateLength": "fn(widget: Widget, min: Integer, max: Integer) -> ClientHandler",
        "validateMatches": "fn(widget: Widget, pattern: string) -> ClientHandler",
        "validateNotEmail": "fn(widget: Widget) -> ClientHandler",
        "validateNotInteger": "fn(widget: Widget) -> ClientHandler",
        "validateNotLength": "fn(widget: Widget, min: Integer, max: Integer) -> ClientHandler",
        "validateNotMatches": "fn(widget: Widget, pattern: string) -> ClientHandler",
        "validateNotNumber": "fn(widget: Widget) -> ClientHandler",
        "validateNotOptions": "fn(widget: Widget, options: [String]) -> ClientHandler",
        "validateNotRange": "fn(widget: Widget, min: Number, max: Number) -> ClientHandler",
        "validateNotSum": "fn(widgets: [Widget], sum: Integer) -> ClientHandler",
        "validateNumber": "fn(widget: Widget) -> ClientHandler",
        "validateOptions": "fn(widget: Widget, options: [String]) -> ClientHandler",
        "validateRange": "fn(widget: Widget, min: Number, max: Number) -> ClientHandler",
        "validateSum": "fn(widgets: [Widget], sum: Integer) -> ClientHandler"
      },
      "Component": {
        "getId": "fn() -> string",
        "getType": "fn() -> string"
      },
      "DateBox": {
        "addStyleDependentName": "fn(styleName: string) -> DateBox",
        "addStyleName": "fn(styleName: string) -> DateBox",
        "addValueChangeHandler": "fn(handler: Handler) -> DateBox",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "hideDatePicker": "fn() -> DateBox",
        "setAccessKey": "fn(accessKey: Char) -> DateBox",
        "setEnabled": "fn(enabled: bool) -> DateBox",
        "setFireEventsForInvalid": "fn(fireEvents: bool) -> DateBox",
        "setFocus": "fn(focus: bool) -> DateBox",
        "setFormat": "fn(dateTimeFormat: DateTimeFormat) -> DateBox",
        "setHeight": "fn(height: string) -> DateBox",
        "setId": "fn(id: string) -> DateBox",
        "setLayoutData": "fn(layout: Object) -> DateBox",
        "setName": "fn(name: string) -> DateBox",
        "setPixelSize": "fn(width: Integer, height: Integer) -> DateBox",
        "setSize": "fn(width: string, height: string) -> DateBox",
        "setStyleAttribute": "fn(attribute: string, value: string) -> DateBox",
        "setStyleAttributes": "fn(attributes: Object) -> DateBox",
        "setStyleName": "fn(styleName: string) -> DateBox",
        "setStylePrimaryName": "fn(styleName: string) -> DateBox",
        "setTabIndex": "fn(index: Integer) -> DateBox",
        "setTag": "fn(tag: string) -> DateBox",
        "setTitle": "fn(title: string) -> DateBox",
        "setValue": "fn(date: Date) -> DateBox",
        "setVisible": "fn(visible: bool) -> DateBox",
        "setWidth": "fn(width: string) -> DateBox",
        "showDatePicker": "fn() -> DateBox"
      },
      "DatePicker": {
        "addStyleDependentName": "fn(styleName: string) -> DatePicker",
        "addStyleName": "fn(styleName: string) -> DatePicker",
        "addValueChangeHandler": "fn(handler: Handler) -> DatePicker",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setCurrentMonth": "fn(date: Date) -> DatePicker",
        "setHeight": "fn(height: string) -> DatePicker",
        "setId": "fn(id: string) -> DatePicker",
        "setLayoutData": "fn(layout: Object) -> DatePicker",
        "setName": "fn(name: string) -> DatePicker",
        "setPixelSize": "fn(width: Integer, height: Integer) -> DatePicker",
        "setSize": "fn(width: string, height: string) -> DatePicker",
        "setStyleAttribute": "fn(attribute: string, value: string) -> DatePicker",
        "setStyleAttributes": "fn(attributes: Object) -> DatePicker",
        "setStyleName": "fn(styleName: string) -> DatePicker",
        "setStylePrimaryName": "fn(styleName: string) -> DatePicker",
        "setTag": "fn(tag: string) -> DatePicker",
        "setTitle": "fn(title: string) -> DatePicker",
        "setValue": "fn(date: Date) -> DatePicker",
        "setVisible": "fn(visible: bool) -> DatePicker",
        "setWidth": "fn(width: string) -> DatePicker"
      },
      "DateTimeFormat": "number",
      "DecoratedStackPanel": {
        "add": "fn(widget: Widget) -> DecoratedStackPanel",
        "addStyleDependentName": "fn(styleName: string) -> DecoratedStackPanel",
        "addStyleName": "fn(styleName: string) -> DecoratedStackPanel",
        "clear": "fn() -> DecoratedStackPanel",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "remove": "fn(index: Integer) -> DecoratedStackPanel",
        "setHeight": "fn(height: string) -> DecoratedStackPanel",
        "setId": "fn(id: string) -> DecoratedStackPanel",
        "setLayoutData": "fn(layout: Object) -> DecoratedStackPanel",
        "setPixelSize": "fn(width: Integer, height: Integer) -> DecoratedStackPanel",
        "setSize": "fn(width: string, height: string) -> DecoratedStackPanel",
        "setStackText": "fn(index: Integer, text: string) -> DecoratedStackPanel",
        "setStyleAttribute": "fn(attribute: string, value: string) -> DecoratedStackPanel",
        "setStyleAttributes": "fn(attributes: Object) -> DecoratedStackPanel",
        "setStyleName": "fn(styleName: string) -> DecoratedStackPanel",
        "setStylePrimaryName": "fn(styleName: string) -> DecoratedStackPanel",
        "setTag": "fn(tag: string) -> DecoratedStackPanel",
        "setTitle": "fn(title: string) -> DecoratedStackPanel",
        "setVisible": "fn(visible: bool) -> DecoratedStackPanel",
        "setWidth": "fn(width: string) -> DecoratedStackPanel"
      },
      "DecoratedTabBar": {
        "addBeforeSelectionHandler": "fn(handler: Handler) -> DecoratedTabBar",
        "addSelectionHandler": "fn(handler: Handler) -> DecoratedTabBar",
        "addStyleDependentName": "fn(styleName: string) -> DecoratedTabBar",
        "addStyleName": "fn(styleName: string) -> DecoratedTabBar",
        "addTab": "fn(title: string) -> DecoratedTabBar",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "selectTab": "fn(index: Integer) -> DecoratedTabBar",
        "setHeight": "fn(height: string) -> DecoratedTabBar",
        "setId": "fn(id: string) -> DecoratedTabBar",
        "setLayoutData": "fn(layout: Object) -> DecoratedTabBar",
        "setPixelSize": "fn(width: Integer, height: Integer) -> DecoratedTabBar",
        "setSize": "fn(width: string, height: string) -> DecoratedTabBar",
        "setStyleAttribute": "fn(attribute: string, value: string) -> DecoratedTabBar",
        "setStyleAttributes": "fn(attributes: Object) -> DecoratedTabBar",
        "setStyleName": "fn(styleName: string) -> DecoratedTabBar",
        "setStylePrimaryName": "fn(styleName: string) -> DecoratedTabBar",
        "setTabEnabled": "fn(index: Integer, enabled: bool) -> DecoratedTabBar",
        "setTabText": "fn(index: Integer, text: string) -> DecoratedTabBar",
        "setTag": "fn(tag: string) -> DecoratedTabBar",
        "setTitle": "fn(title: string) -> DecoratedTabBar",
        "setVisible": "fn(visible: bool) -> DecoratedTabBar",
        "setWidth": "fn(width: string) -> DecoratedTabBar"
      },
      "DecoratedTabPanel": {
        "add": "fn(widget: Widget) -> DecoratedTabPanel",
        "addBeforeSelectionHandler": "fn(handler: Handler) -> DecoratedTabPanel",
        "addSelectionHandler": "fn(handler: Handler) -> DecoratedTabPanel",
        "addStyleDependentName": "fn(styleName: string) -> DecoratedTabPanel",
        "addStyleName": "fn(styleName: string) -> DecoratedTabPanel",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "selectTab": "fn(index: Integer) -> DecoratedTabPanel",
        "setAnimationEnabled": "fn(animationEnabled: bool) -> DecoratedTabPanel",
        "setHeight": "fn(height: string) -> DecoratedTabPanel",
        "setId": "fn(id: string) -> DecoratedTabPanel",
        "setLayoutData": "fn(layout: Object) -> DecoratedTabPanel",
        "setPixelSize": "fn(width: Integer, height: Integer) -> DecoratedTabPanel",
        "setSize": "fn(width: string, height: string) -> DecoratedTabPanel",
        "setStyleAttribute": "fn(attribute: string, value: string) -> DecoratedTabPanel",
        "setStyleAttributes": "fn(attributes: Object) -> DecoratedTabPanel",
        "setStyleName": "fn(styleName: string) -> DecoratedTabPanel",
        "setStylePrimaryName": "fn(styleName: string) -> DecoratedTabPanel",
        "setTag": "fn(tag: string) -> DecoratedTabPanel",
        "setTitle": "fn(title: string) -> DecoratedTabPanel",
        "setVisible": "fn(visible: bool) -> DecoratedTabPanel",
        "setWidth": "fn(width: string) -> DecoratedTabPanel"
      },
      "DecoratorPanel": {
        "add": "fn(widget: Widget) -> DecoratorPanel",
        "addStyleDependentName": "fn(styleName: string) -> DecoratorPanel",
        "addStyleName": "fn(styleName: string) -> DecoratorPanel",
        "clear": "fn() -> DecoratorPanel",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setHeight": "fn(height: string) -> DecoratorPanel",
        "setId": "fn(id: string) -> DecoratorPanel",
        "setLayoutData": "fn(layout: Object) -> DecoratorPanel",
        "setPixelSize": "fn(width: Integer, height: Integer) -> DecoratorPanel",
        "setSize": "fn(width: string, height: string) -> DecoratorPanel",
        "setStyleAttribute": "fn(attribute: string, value: string) -> DecoratorPanel",
        "setStyleAttributes": "fn(attributes: Object) -> DecoratorPanel",
        "setStyleName": "fn(styleName: string) -> DecoratorPanel",
        "setStylePrimaryName": "fn(styleName: string) -> DecoratorPanel",
        "setTag": "fn(tag: string) -> DecoratorPanel",
        "setTitle": "fn(title: string) -> DecoratorPanel",
        "setVisible": "fn(visible: bool) -> DecoratorPanel",
        "setWidget": "fn(widget: Widget) -> DecoratorPanel",
        "setWidth": "fn(width: string) -> DecoratorPanel"
      },
      "DialogBox": {
        "add": "fn(widget: Widget) -> DialogBox",
        "addAutoHidePartner": "fn(partner: Component) -> DialogBox",
        "addCloseHandler": "fn(handler: Handler) -> DialogBox",
        "addStyleDependentName": "fn(styleName: string) -> DialogBox",
        "addStyleName": "fn(styleName: string) -> DialogBox",
        "clear": "fn() -> DialogBox",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "hide": "fn() -> DialogBox",
        "setAnimationEnabled": "fn(animationEnabled: bool) -> DialogBox",
        "setAutoHideEnabled": "fn(enabled: bool) -> DialogBox",
        "setGlassEnabled": "fn(enabled: bool) -> DialogBox",
        "setGlassStyleName": "fn(styleName: string) -> DialogBox",
        "setHTML": "fn(html: string) -> DialogBox",
        "setHeight": "fn(height: string) -> DialogBox",
        "setId": "fn(id: string) -> DialogBox",
        "setLayoutData": "fn(layout: Object) -> DialogBox",
        "setModal": "fn(modal: bool) -> DialogBox",
        "setPixelSize": "fn(width: Integer, height: Integer) -> DialogBox",
        "setPopupPosition": "fn(left: Integer, top: Integer) -> DialogBox",
        "setPopupPositionAndShow": "fn(a: Component) -> DialogBox",
        "setPreviewingAllNativeEvents": "fn(previewing: bool) -> DialogBox",
        "setSize": "fn(width: string, height: string) -> DialogBox",
        "setStyleAttribute": "fn(attribute: string, value: string) -> DialogBox",
        "setStyleAttributes": "fn(attributes: Object) -> DialogBox",
        "setStyleName": "fn(styleName: string) -> DialogBox",
        "setStylePrimaryName": "fn(styleName: string) -> DialogBox",
        "setTag": "fn(tag: string) -> DialogBox",
        "setText": "fn(text: string) -> DialogBox",
        "setTitle": "fn(title: string) -> DialogBox",
        "setVisible": "fn(visible: bool) -> DialogBox",
        "setWidget": "fn(widget: Widget) -> DialogBox",
        "setWidth": "fn(width: string) -> DialogBox",
        "show": "fn() -> DialogBox"
      },
      "DocsListDialog": {
        "addCloseHandler": "fn(handler: Handler) -> DocsListDialog",
        "addSelectionHandler": "fn(handler: Handler) -> DocsListDialog",
        "addView": "fn(fileType: FileType) -> DocsListDialog",
        "getId": "fn() -> string",
        "getType": "fn() -> string",
        "setDialogTitle": "fn(title: string) -> DocsListDialog",
        "setHeight": "fn(height: Integer) -> DocsListDialog",
        "setInitialView": "fn(fileType: FileType) -> DocsListDialog",
        "setMultiSelectEnabled": "fn(multiSelectEnabled: bool) -> DocsListDialog",
        "setOAuthToken": "fn(oAuthToken: string) -> DocsListDialog",
        "setWidth": "fn(width: Integer) -> DocsListDialog",
        "showDocsPicker": "fn() -> DocsListDialog"
      },
      "FileType": "number",
      "FileUpload": {
        "addChangeHandler": "fn(handler: Handler) -> FileUpload",
        "addStyleDependentName": "fn(styleName: string) -> FileUpload",
        "addStyleName": "fn(styleName: string) -> FileUpload",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setEnabled": "fn(enabled: bool) -> FileUpload",
        "setHeight": "fn(height: string) -> FileUpload",
        "setId": "fn(id: string) -> FileUpload",
        "setLayoutData": "fn(layout: Object) -> FileUpload",
        "setName": "fn(name: string) -> FileUpload",
        "setPixelSize": "fn(width: Integer, height: Integer) -> FileUpload",
        "setSize": "fn(width: string, height: string) -> FileUpload",
        "setStyleAttribute": "fn(attribute: string, value: string) -> FileUpload",
        "setStyleAttributes": "fn(attributes: Object) -> FileUpload",
        "setStyleName": "fn(styleName: string) -> FileUpload",
        "setStylePrimaryName": "fn(styleName: string) -> FileUpload",
        "setTag": "fn(tag: string) -> FileUpload",
        "setTitle": "fn(title: string) -> FileUpload",
        "setVisible": "fn(visible: bool) -> FileUpload",
        "setWidth": "fn(width: string) -> FileUpload"
      },
      "FlexTable": {
        "addCell": "fn(row: Integer) -> FlexTable",
        "addClickHandler": "fn(handler: Handler) -> FlexTable",
        "addStyleDependentName": "fn(styleName: string) -> FlexTable",
        "addStyleName": "fn(styleName: string) -> FlexTable",
        "clear": "fn() -> FlexTable",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "insertCell": "fn(beforeRow: Integer, beforeColumn: Integer) -> FlexTable",
        "insertRow": "fn(beforeRow: Integer) -> FlexTable",
        "removeCell": "fn(row: Integer, column: Integer) -> FlexTable",
        "removeCells": "fn(row: Integer, column: Integer, num: Integer) -> FlexTable",
        "removeRow": "fn(row: Integer) -> FlexTable",
        "setBorderWidth": "fn(width: Integer) -> FlexTable",
        "setCellPadding": "fn(padding: Integer) -> FlexTable",
        "setCellSpacing": "fn(spacing: Integer) -> FlexTable",
        "setColumnStyleAttribute": "fn(column: Integer, attribute: string, value: string) -> FlexTable",
        "setColumnStyleAttributes": "fn(column: Integer, attributes: Object) -> FlexTable",
        "setHeight": "fn(height: string) -> FlexTable",
        "setId": "fn(id: string) -> FlexTable",
        "setLayoutData": "fn(layout: Object) -> FlexTable",
        "setPixelSize": "fn(width: Integer, height: Integer) -> FlexTable",
        "setRowStyleAttribute": "fn(row: Integer, attribute: string, value: string) -> FlexTable",
        "setRowStyleAttributes": "fn(row: Integer, attributes: Object) -> FlexTable",
        "setSize": "fn(width: string, height: string) -> FlexTable",
        "setStyleAttribute": "fn(row: Integer, column: Integer, attribute: string, value: string) -> FlexTable",
        "setStyleAttributes": "fn(row: Integer, column: Integer, attributes: Object) -> FlexTable",
        "setStyleName": "fn(styleName: string) -> FlexTable",
        "setStylePrimaryName": "fn(styleName: string) -> FlexTable",
        "setTag": "fn(tag: string) -> FlexTable",
        "setText": "fn(row: Integer, column: Integer, text: string) -> FlexTable",
        "setTitle": "fn(title: string) -> FlexTable",
        "setVisible": "fn(visible: bool) -> FlexTable",
        "setWidget": "fn(row: Integer, column: Integer, widget: Widget) -> FlexTable",
        "setWidth": "fn(width: string) -> FlexTable"
      },
      "FlowPanel": {
        "add": "fn(widget: Widget) -> FlowPanel",
        "addStyleDependentName": "fn(styleName: string) -> FlowPanel",
        "addStyleName": "fn(styleName: string) -> FlowPanel",
        "clear": "fn() -> FlowPanel",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "insert": "fn(widget: Widget, beforeIndex: Integer) -> FlowPanel",
        "remove": "fn(index: Integer) -> FlowPanel",
        "setHeight": "fn(height: string) -> FlowPanel",
        "setId": "fn(id: string) -> FlowPanel",
        "setLayoutData": "fn(layout: Object) -> FlowPanel",
        "setPixelSize": "fn(width: Integer, height: Integer) -> FlowPanel",
        "setSize": "fn(width: string, height: string) -> FlowPanel",
        "setStyleAttribute": "fn(attribute: string, value: string) -> FlowPanel",
        "setStyleAttributes": "fn(attributes: Object) -> FlowPanel",
        "setStyleName": "fn(styleName: string) -> FlowPanel",
        "setStylePrimaryName": "fn(styleName: string) -> FlowPanel",
        "setTag": "fn(tag: string) -> FlowPanel",
        "setTitle": "fn(title: string) -> FlowPanel",
        "setVisible": "fn(visible: bool) -> FlowPanel",
        "setWidth": "fn(width: string) -> FlowPanel"
      },
      "FocusPanel": {
        "add": "fn(widget: Widget) -> FocusPanel",
        "addBlurHandler": "fn(handler: Handler) -> FocusPanel",
        "addClickHandler": "fn(handler: Handler) -> FocusPanel",
        "addFocusHandler": "fn(handler: Handler) -> FocusPanel",
        "addKeyDownHandler": "fn(handler: Handler) -> FocusPanel",
        "addKeyPressHandler": "fn(handler: Handler) -> FocusPanel",
        "addKeyUpHandler": "fn(handler: Handler) -> FocusPanel",
        "addMouseDownHandler": "fn(handler: Handler) -> FocusPanel",
        "addMouseMoveHandler": "fn(handler: Handler) -> FocusPanel",
        "addMouseOutHandler": "fn(handler: Handler) -> FocusPanel",
        "addMouseOverHandler": "fn(handler: Handler) -> FocusPanel",
        "addMouseUpHandler": "fn(handler: Handler) -> FocusPanel",
        "addMouseWheelHandler": "fn(handler: Handler) -> FocusPanel",
        "addStyleDependentName": "fn(styleName: string) -> FocusPanel",
        "addStyleName": "fn(styleName: string) -> FocusPanel",
        "clear": "fn() -> FocusPanel",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setAccessKey": "fn(accessKey: Char) -> FocusPanel",
        "setFocus": "fn(focus: bool) -> FocusPanel",
        "setHeight": "fn(height: string) -> FocusPanel",
        "setId": "fn(id: string) -> FocusPanel",
        "setLayoutData": "fn(layout: Object) -> FocusPanel",
        "setPixelSize": "fn(width: Integer, height: Integer) -> FocusPanel",
        "setSize": "fn(width: string, height: string) -> FocusPanel",
        "setStyleAttribute": "fn(attribute: string, value: string) -> FocusPanel",
        "setStyleAttributes": "fn(attributes: Object) -> FocusPanel",
        "setStyleName": "fn(styleName: string) -> FocusPanel",
        "setStylePrimaryName": "fn(styleName: string) -> FocusPanel",
        "setTabIndex": "fn(index: Integer) -> FocusPanel",
        "setTag": "fn(tag: string) -> FocusPanel",
        "setTitle": "fn(title: string) -> FocusPanel",
        "setVisible": "fn(visible: bool) -> FocusPanel",
        "setWidget": "fn(widget: Widget) -> FocusPanel",
        "setWidth": "fn(width: string) -> FocusPanel"
      },
      "FormPanel": {
        "add": "fn(widget: Widget) -> FormPanel",
        "addStyleDependentName": "fn(styleName: string) -> FormPanel",
        "addStyleName": "fn(styleName: string) -> FormPanel",
        "addSubmitCompleteHandler": "fn(handler: Handler) -> FormPanel",
        "addSubmitHandler": "fn(handler: Handler) -> FormPanel",
        "clear": "fn() -> FormPanel",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setAction": "fn(action: string) -> FormPanel",
        "setEncoding": "fn(encoding: string) -> FormPanel",
        "setHeight": "fn(height: string) -> FormPanel",
        "setId": "fn(id: string) -> FormPanel",
        "setLayoutData": "fn(layout: Object) -> FormPanel",
        "setMethod": "fn(method: string) -> FormPanel",
        "setPixelSize": "fn(width: Integer, height: Integer) -> FormPanel",
        "setSize": "fn(width: string, height: string) -> FormPanel",
        "setStyleAttribute": "fn(attribute: string, value: string) -> FormPanel",
        "setStyleAttributes": "fn(attributes: Object) -> FormPanel",
        "setStyleName": "fn(styleName: string) -> FormPanel",
        "setStylePrimaryName": "fn(styleName: string) -> FormPanel",
        "setTag": "fn(tag: string) -> FormPanel",
        "setTitle": "fn(title: string) -> FormPanel",
        "setVisible": "fn(visible: bool) -> FormPanel",
        "setWidget": "fn(widget: Widget) -> FormPanel",
        "setWidth": "fn(width: string) -> FormPanel"
      },
      "Grid": {
        "addClickHandler": "fn(handler: Handler) -> Grid",
        "addStyleDependentName": "fn(styleName: string) -> Grid",
        "addStyleName": "fn(styleName: string) -> Grid",
        "clear": "fn() -> Grid",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "resize": "fn(rows: Integer, columns: Integer) -> Grid",
        "setBorderWidth": "fn(width: Integer) -> Grid",
        "setCellPadding": "fn(padding: Integer) -> Grid",
        "setCellSpacing": "fn(spacing: Integer) -> Grid",
        "setColumnStyleAttribute": "fn(column: Integer, attribute: string, value: string) -> Grid",
        "setColumnStyleAttributes": "fn(column: Integer, attributes: Object) -> Grid",
        "setHeight": "fn(height: string) -> Grid",
        "setId": "fn(id: string) -> Grid",
        "setLayoutData": "fn(layout: Object) -> Grid",
        "setPixelSize": "fn(width: Integer, height: Integer) -> Grid",
        "setRowStyleAttribute": "fn(row: Integer, attribute: string, value: string) -> Grid",
        "setRowStyleAttributes": "fn(row: Integer, attributes: Object) -> Grid",
        "setSize": "fn(width: string, height: string) -> Grid",
        "setStyleAttribute": "fn(row: Integer, column: Integer, attribute: string, value: string) -> Grid",
        "setStyleAttributes": "fn(row: Integer, column: Integer, attributes: Object) -> Grid",
        "setStyleName": "fn(styleName: string) -> Grid",
        "setStylePrimaryName": "fn(styleName: string) -> Grid",
        "setTag": "fn(tag: string) -> Grid",
        "setText": "fn(row: Integer, column: Integer, text: string) -> Grid",
        "setTitle": "fn(title: string) -> Grid",
        "setVisible": "fn(visible: bool) -> Grid",
        "setWidget": "fn(row: Integer, column: Integer, widget: Widget) -> Grid",
        "setWidth": "fn(width: string) -> Grid"
      },
      "HTML": {
        "addClickHandler": "fn(handler: Handler) -> HTML",
        "addMouseDownHandler": "fn(handler: Handler) -> HTML",
        "addMouseMoveHandler": "fn(handler: Handler) -> HTML",
        "addMouseOutHandler": "fn(handler: Handler) -> HTML",
        "addMouseOverHandler": "fn(handler: Handler) -> HTML",
        "addMouseUpHandler": "fn(handler: Handler) -> HTML",
        "addMouseWheelHandler": "fn(handler: Handler) -> HTML",
        "addStyleDependentName": "fn(styleName: string) -> HTML",
        "addStyleName": "fn(styleName: string) -> HTML",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setDirection": "fn(direction: Component) -> HTML",
        "setHTML": "fn(html: string) -> HTML",
        "setHeight": "fn(height: string) -> HTML",
        "setHorizontalAlignment": "fn(horizontalAlignment: HorizontalAlignment) -> HTML",
        "setId": "fn(id: string) -> HTML",
        "setLayoutData": "fn(layout: Object) -> HTML",
        "setPixelSize": "fn(width: Integer, height: Integer) -> HTML",
        "setSize": "fn(width: string, height: string) -> HTML",
        "setStyleAttribute": "fn(attribute: string, value: string) -> HTML",
        "setStyleAttributes": "fn(attributes: Object) -> HTML",
        "setStyleName": "fn(styleName: string) -> HTML",
        "setStylePrimaryName": "fn(styleName: string) -> HTML",
        "setTag": "fn(tag: string) -> HTML",
        "setText": "fn(text: string) -> HTML",
        "setTitle": "fn(title: string) -> HTML",
        "setVisible": "fn(visible: bool) -> HTML",
        "setWidth": "fn(width: string) -> HTML",
        "setWordWrap": "fn(wordWrap: bool) -> HTML"
      },
      "Handler": {
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setId": "fn(id: string) -> Handler",
        "setTag": "fn(tag: string) -> Handler",
        "validateEmail": "fn(widget: Widget) -> Handler",
        "validateInteger": "fn(widget: Widget) -> Handler",
        "validateLength": "fn(widget: Widget, min: Integer, max: Integer) -> Handler",
        "validateMatches": "fn(widget: Widget, pattern: string) -> Handler",
        "validateNotEmail": "fn(widget: Widget) -> Handler",
        "validateNotInteger": "fn(widget: Widget) -> Handler",
        "validateNotLength": "fn(widget: Widget, min: Integer, max: Integer) -> Handler",
        "validateNotMatches": "fn(widget: Widget, pattern: string) -> Handler",
        "validateNotNumber": "fn(widget: Widget) -> Handler",
        "validateNotOptions": "fn(widget: Widget, options: [String]) -> Handler",
        "validateNotRange": "fn(widget: Widget, min: Number, max: Number) -> Handler",
        "validateNotSum": "fn(widgets: [Widget], sum: Integer) -> Handler",
        "validateNumber": "fn(widget: Widget) -> Handler",
        "validateOptions": "fn(widget: Widget, options: [String]) -> Handler",
        "validateRange": "fn(widget: Widget, min: Number, max: Number) -> Handler",
        "validateSum": "fn(widgets: [Widget], sum: Integer) -> Handler"
      },
      "Hidden": {
        "addStyleDependentName": "fn(styleName: string) -> Hidden",
        "addStyleName": "fn(styleName: string) -> Hidden",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setDefaultValue": "fn(value: string) -> Hidden",
        "setHeight": "fn(height: string) -> Hidden",
        "setID": "fn(id: string) -> Hidden",
        "setId": "fn(id: string) -> Hidden",
        "setLayoutData": "fn(layout: Object) -> Hidden",
        "setName": "fn(name: string) -> Hidden",
        "setPixelSize": "fn(width: Integer, height: Integer) -> Hidden",
        "setSize": "fn(width: string, height: string) -> Hidden",
        "setStyleAttribute": "fn(attribute: string, value: string) -> Hidden",
        "setStyleAttributes": "fn(attributes: Object) -> Hidden",
        "setStyleName": "fn(styleName: string) -> Hidden",
        "setStylePrimaryName": "fn(styleName: string) -> Hidden",
        "setTag": "fn(tag: string) -> Hidden",
        "setTitle": "fn(title: string) -> Hidden",
        "setValue": "fn(value: string) -> Hidden",
        "setVisible": "fn(visible: bool) -> Hidden",
        "setWidth": "fn(width: string) -> Hidden"
      },
      "HorizontalAlignment": "number",
      "HorizontalPanel": {
        "add": "fn(widget: Widget) -> HorizontalPanel",
        "addStyleDependentName": "fn(styleName: string) -> HorizontalPanel",
        "addStyleName": "fn(styleName: string) -> HorizontalPanel",
        "clear": "fn() -> HorizontalPanel",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "remove": "fn(index: Integer) -> HorizontalPanel",
        "setBorderWidth": "fn(width: Integer) -> HorizontalPanel",
        "setCellHeight": "fn(widget: Widget, height: string) -> HorizontalPanel",
        "setCellHorizontalAlignment": "fn(widget: Widget, horizontalAlignment: HorizontalAlignment) -> HorizontalPanel",
        "setCellVerticalAlignment": "fn(widget: Widget, verticalAlignment: VerticalAlignment) -> HorizontalPanel",
        "setCellWidth": "fn(widget: Widget, width: string) -> HorizontalPanel",
        "setHeight": "fn(height: string) -> HorizontalPanel",
        "setHorizontalAlignment": "fn(horizontalAlignment: HorizontalAlignment) -> HorizontalPanel",
        "setId": "fn(id: string) -> HorizontalPanel",
        "setLayoutData": "fn(layout: Object) -> HorizontalPanel",
        "setPixelSize": "fn(width: Integer, height: Integer) -> HorizontalPanel",
        "setSize": "fn(width: string, height: string) -> HorizontalPanel",
        "setSpacing": "fn(spacing: Integer) -> HorizontalPanel",
        "setStyleAttribute": "fn(attribute: string, value: string) -> HorizontalPanel",
        "setStyleAttributes": "fn(attributes: Object) -> HorizontalPanel",
        "setStyleName": "fn(styleName: string) -> HorizontalPanel",
        "setStylePrimaryName": "fn(styleName: string) -> HorizontalPanel",
        "setTag": "fn(tag: string) -> HorizontalPanel",
        "setTitle": "fn(title: string) -> HorizontalPanel",
        "setVerticalAlignment": "fn(verticalAlignment: VerticalAlignment) -> HorizontalPanel",
        "setVisible": "fn(visible: bool) -> HorizontalPanel",
        "setWidth": "fn(width: string) -> HorizontalPanel"
      },
      "Image": {
        "addClickHandler": "fn(handler: Handler) -> Image",
        "addErrorHandler": "fn(handler: Handler) -> Image",
        "addLoadHandler": "fn(handler: Handler) -> Image",
        "addMouseDownHandler": "fn(handler: Handler) -> Image",
        "addMouseMoveHandler": "fn(handler: Handler) -> Image",
        "addMouseOutHandler": "fn(handler: Handler) -> Image",
        "addMouseOverHandler": "fn(handler: Handler) -> Image",
        "addMouseUpHandler": "fn(handler: Handler) -> Image",
        "addMouseWheelHandler": "fn(handler: Handler) -> Image",
        "addStyleDependentName": "fn(styleName: string) -> Image",
        "addStyleName": "fn(styleName: string) -> Image",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setHeight": "fn(height: string) -> Image",
        "setId": "fn(id: string) -> Image",
        "setLayoutData": "fn(layout: Object) -> Image",
        "setPixelSize": "fn(width: Integer, height: Integer) -> Image",
        "setResource": "fn(resource: Component) -> Image",
        "setSize": "fn(width: string, height: string) -> Image",
        "setStyleAttribute": "fn(attribute: string, value: string) -> Image",
        "setStyleAttributes": "fn(attributes: Object) -> Image",
        "setStyleName": "fn(styleName: string) -> Image",
        "setStylePrimaryName": "fn(styleName: string) -> Image",
        "setTag": "fn(tag: string) -> Image",
        "setTitle": "fn(title: string) -> Image",
        "setUrl": "fn(url: string) -> Image",
        "setUrlAndVisibleRect": "fn(url: string, left: Integer, top: Integer, width: Integer, height: Integer) -> Image",
        "setVisible": "fn(visible: bool) -> Image",
        "setVisibleRect": "fn(left: Integer, top: Integer, width: Integer, height: Integer) -> Image",
        "setWidth": "fn(width: string) -> Image"
      },
      "InlineLabel": {
        "addClickHandler": "fn(handler: Handler) -> InlineLabel",
        "addMouseDownHandler": "fn(handler: Handler) -> InlineLabel",
        "addMouseMoveHandler": "fn(handler: Handler) -> InlineLabel",
        "addMouseOutHandler": "fn(handler: Handler) -> InlineLabel",
        "addMouseOverHandler": "fn(handler: Handler) -> InlineLabel",
        "addMouseUpHandler": "fn(handler: Handler) -> InlineLabel",
        "addMouseWheelHandler": "fn(handler: Handler) -> InlineLabel",
        "addStyleDependentName": "fn(styleName: string) -> InlineLabel",
        "addStyleName": "fn(styleName: string) -> InlineLabel",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setDirection": "fn(direction: Component) -> InlineLabel",
        "setHeight": "fn(height: string) -> InlineLabel",
        "setHorizontalAlignment": "fn(horizontalAlignment: HorizontalAlignment) -> InlineLabel",
        "setId": "fn(id: string) -> InlineLabel",
        "setLayoutData": "fn(layout: Object) -> InlineLabel",
        "setPixelSize": "fn(width: Integer, height: Integer) -> InlineLabel",
        "setSize": "fn(width: string, height: string) -> InlineLabel",
        "setStyleAttribute": "fn(attribute: string, value: string) -> InlineLabel",
        "setStyleAttributes": "fn(attributes: Object) -> InlineLabel",
        "setStyleName": "fn(styleName: string) -> InlineLabel",
        "setStylePrimaryName": "fn(styleName: string) -> InlineLabel",
        "setTag": "fn(tag: string) -> InlineLabel",
        "setText": "fn(text: string) -> InlineLabel",
        "setTitle": "fn(title: string) -> InlineLabel",
        "setVisible": "fn(visible: bool) -> InlineLabel",
        "setWidth": "fn(width: string) -> InlineLabel",
        "setWordWrap": "fn(wordWrap: bool) -> InlineLabel"
      },
      "Label": {
        "addClickHandler": "fn(handler: Handler) -> Label",
        "addMouseDownHandler": "fn(handler: Handler) -> Label",
        "addMouseMoveHandler": "fn(handler: Handler) -> Label",
        "addMouseOutHandler": "fn(handler: Handler) -> Label",
        "addMouseOverHandler": "fn(handler: Handler) -> Label",
        "addMouseUpHandler": "fn(handler: Handler) -> Label",
        "addMouseWheelHandler": "fn(handler: Handler) -> Label",
        "addStyleDependentName": "fn(styleName: string) -> Label",
        "addStyleName": "fn(styleName: string) -> Label",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setDirection": "fn(direction: Component) -> Label",
        "setHeight": "fn(height: string) -> Label",
        "setHorizontalAlignment": "fn(horizontalAlignment: HorizontalAlignment) -> Label",
        "setId": "fn(id: string) -> Label",
        "setLayoutData": "fn(layout: Object) -> Label",
        "setPixelSize": "fn(width: Integer, height: Integer) -> Label",
        "setSize": "fn(width: string, height: string) -> Label",
        "setStyleAttribute": "fn(attribute: string, value: string) -> Label",
        "setStyleAttributes": "fn(attributes: Object) -> Label",
        "setStyleName": "fn(styleName: string) -> Label",
        "setStylePrimaryName": "fn(styleName: string) -> Label",
        "setTag": "fn(tag: string) -> Label",
        "setText": "fn(text: string) -> Label",
        "setTitle": "fn(title: string) -> Label",
        "setVisible": "fn(visible: bool) -> Label",
        "setWidth": "fn(width: string) -> Label",
        "setWordWrap": "fn(wordWrap: bool) -> Label"
      },
      "ListBox": {
        "addBlurHandler": "fn(handler: Handler) -> ListBox",
        "addChangeHandler": "fn(handler: Handler) -> ListBox",
        "addClickHandler": "fn(handler: Handler) -> ListBox",
        "addFocusHandler": "fn(handler: Handler) -> ListBox",
        "addItem": "fn(text: string) -> ListBox",
        "addKeyDownHandler": "fn(handler: Handler) -> ListBox",
        "addKeyPressHandler": "fn(handler: Handler) -> ListBox",
        "addKeyUpHandler": "fn(handler: Handler) -> ListBox",
        "addMouseDownHandler": "fn(handler: Handler) -> ListBox",
        "addMouseMoveHandler": "fn(handler: Handler) -> ListBox",
        "addMouseOutHandler": "fn(handler: Handler) -> ListBox",
        "addMouseOverHandler": "fn(handler: Handler) -> ListBox",
        "addMouseUpHandler": "fn(handler: Handler) -> ListBox",
        "addMouseWheelHandler": "fn(handler: Handler) -> ListBox",
        "addStyleDependentName": "fn(styleName: string) -> ListBox",
        "addStyleName": "fn(styleName: string) -> ListBox",
        "clear": "fn() -> ListBox",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "removeItem": "fn(index: Integer) -> ListBox",
        "setAccessKey": "fn(accessKey: Char) -> ListBox",
        "setEnabled": "fn(enabled: bool) -> ListBox",
        "setFocus": "fn(focus: bool) -> ListBox",
        "setHeight": "fn(height: string) -> ListBox",
        "setId": "fn(id: string) -> ListBox",
        "setItemSelected": "fn(index: Integer, selected: bool) -> ListBox",
        "setItemText": "fn(index: Integer, text: string) -> ListBox",
        "setLayoutData": "fn(layout: Object) -> ListBox",
        "setName": "fn(name: string) -> ListBox",
        "setPixelSize": "fn(width: Integer, height: Integer) -> ListBox",
        "setSelectedIndex": "fn(index: Integer) -> ListBox",
        "setSize": "fn(width: string, height: string) -> ListBox",
        "setStyleAttribute": "fn(attribute: string, value: string) -> ListBox",
        "setStyleAttributes": "fn(attributes: Object) -> ListBox",
        "setStyleName": "fn(styleName: string) -> ListBox",
        "setStylePrimaryName": "fn(styleName: string) -> ListBox",
        "setTabIndex": "fn(index: Integer) -> ListBox",
        "setTag": "fn(tag: string) -> ListBox",
        "setTitle": "fn(title: string) -> ListBox",
        "setValue": "fn(index: Integer, value: string) -> ListBox",
        "setVisible": "fn(visible: bool) -> ListBox",
        "setVisibleItemCount": "fn(count: Integer) -> ListBox",
        "setWidth": "fn(width: string) -> ListBox"
      },
      "MenuBar": {
        "addCloseHandler": "fn(handler: Handler) -> MenuBar",
        "addItem": "fn(item: MenuItem) -> MenuBar",
        "addSeparator": "fn() -> MenuBar",
        "addStyleDependentName": "fn(styleName: string) -> MenuBar",
        "addStyleName": "fn(styleName: string) -> MenuBar",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setAnimationEnabled": "fn(animationEnabled: bool) -> MenuBar",
        "setAutoOpen": "fn(autoOpen: bool) -> MenuBar",
        "setHeight": "fn(height: string) -> MenuBar",
        "setId": "fn(id: string) -> MenuBar",
        "setLayoutData": "fn(layout: Object) -> MenuBar",
        "setPixelSize": "fn(width: Integer, height: Integer) -> MenuBar",
        "setSize": "fn(width: string, height: string) -> MenuBar",
        "setStyleAttribute": "fn(attribute: string, value: string) -> MenuBar",
        "setStyleAttributes": "fn(attributes: Object) -> MenuBar",
        "setStyleName": "fn(styleName: string) -> MenuBar",
        "setStylePrimaryName": "fn(styleName: string) -> MenuBar",
        "setTag": "fn(tag: string) -> MenuBar",
        "setTitle": "fn(title: string) -> MenuBar",
        "setVisible": "fn(visible: bool) -> MenuBar",
        "setWidth": "fn(width: string) -> MenuBar"
      },
      "MenuItem": {
        "addStyleDependentName": "fn(styleName: string) -> MenuItem",
        "addStyleName": "fn(styleName: string) -> MenuItem",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setCommand": "fn(handler: Handler) -> MenuItem",
        "setHTML": "fn(html: string) -> MenuItem",
        "setHeight": "fn(height: string) -> MenuItem",
        "setId": "fn(id: string) -> MenuItem",
        "setPixelSize": "fn(width: Integer, height: Integer) -> MenuItem",
        "setSize": "fn(width: string, height: string) -> MenuItem",
        "setStyleAttribute": "fn(attribute: string, value: string) -> MenuItem",
        "setStyleAttributes": "fn(attributes: Object) -> MenuItem",
        "setStyleName": "fn(styleName: string) -> MenuItem",
        "setStylePrimaryName": "fn(styleName: string) -> MenuItem",
        "setSubMenu": "fn(subMenu: MenuBar) -> MenuItem",
        "setTag": "fn(tag: string) -> MenuItem",
        "setText": "fn(text: string) -> MenuItem",
        "setTitle": "fn(title: string) -> MenuItem",
        "setVisible": "fn(visible: bool) -> MenuItem",
        "setWidth": "fn(width: string) -> MenuItem"
      },
      "MenuItemSeparator": {
        "addStyleDependentName": "fn(styleName: string) -> MenuItemSeparator",
        "addStyleName": "fn(styleName: string) -> MenuItemSeparator",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setHeight": "fn(height: string) -> MenuItemSeparator",
        "setId": "fn(id: string) -> MenuItemSeparator",
        "setPixelSize": "fn(width: Integer, height: Integer) -> MenuItemSeparator",
        "setSize": "fn(width: string, height: string) -> MenuItemSeparator",
        "setStyleAttribute": "fn(attribute: string, value: string) -> MenuItemSeparator",
        "setStyleAttributes": "fn(attributes: Object) -> MenuItemSeparator",
        "setStyleName": "fn(styleName: string) -> MenuItemSeparator",
        "setStylePrimaryName": "fn(styleName: string) -> MenuItemSeparator",
        "setTag": "fn(tag: string) -> MenuItemSeparator",
        "setTitle": "fn(title: string) -> MenuItemSeparator",
        "setVisible": "fn(visible: bool) -> MenuItemSeparator",
        "setWidth": "fn(width: string) -> MenuItemSeparator"
      },
      "PasswordTextBox": {
        "addBlurHandler": "fn(handler: Handler) -> PasswordTextBox",
        "addChangeHandler": "fn(handler: Handler) -> PasswordTextBox",
        "addClickHandler": "fn(handler: Handler) -> PasswordTextBox",
        "addFocusHandler": "fn(handler: Handler) -> PasswordTextBox",
        "addKeyDownHandler": "fn(handler: Handler) -> PasswordTextBox",
        "addKeyPressHandler": "fn(handler: Handler) -> PasswordTextBox",
        "addKeyUpHandler": "fn(handler: Handler) -> PasswordTextBox",
        "addMouseDownHandler": "fn(handler: Handler) -> PasswordTextBox",
        "addMouseMoveHandler": "fn(handler: Handler) -> PasswordTextBox",
        "addMouseOutHandler": "fn(handler: Handler) -> PasswordTextBox",
        "addMouseOverHandler": "fn(handler: Handler) -> PasswordTextBox",
        "addMouseUpHandler": "fn(handler: Handler) -> PasswordTextBox",
        "addMouseWheelHandler": "fn(handler: Handler) -> PasswordTextBox",
        "addStyleDependentName": "fn(styleName: string) -> PasswordTextBox",
        "addStyleName": "fn(styleName: string) -> PasswordTextBox",
        "addValueChangeHandler": "fn(handler: Handler) -> PasswordTextBox",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setAccessKey": "fn(accessKey: Char) -> PasswordTextBox",
        "setCursorPos": "fn(position: Integer) -> PasswordTextBox",
        "setDirection": "fn(direction: Component) -> PasswordTextBox",
        "setEnabled": "fn(enabled: bool) -> PasswordTextBox",
        "setFocus": "fn(focus: bool) -> PasswordTextBox",
        "setHeight": "fn(height: string) -> PasswordTextBox",
        "setId": "fn(id: string) -> PasswordTextBox",
        "setLayoutData": "fn(layout: Object) -> PasswordTextBox",
        "setMaxLength": "fn(length: Integer) -> PasswordTextBox",
        "setName": "fn(name: string) -> PasswordTextBox",
        "setPixelSize": "fn(width: Integer, height: Integer) -> PasswordTextBox",
        "setReadOnly": "fn(readOnly: bool) -> PasswordTextBox",
        "setSelectionRange": "fn(position: Integer, length: Integer) -> PasswordTextBox",
        "setSize": "fn(width: string, height: string) -> PasswordTextBox",
        "setStyleAttribute": "fn(attribute: string, value: string) -> PasswordTextBox",
        "setStyleAttributes": "fn(attributes: Object) -> PasswordTextBox",
        "setStyleName": "fn(styleName: string) -> PasswordTextBox",
        "setStylePrimaryName": "fn(styleName: string) -> PasswordTextBox",
        "setTabIndex": "fn(index: Integer) -> PasswordTextBox",
        "setTag": "fn(tag: string) -> PasswordTextBox",
        "setText": "fn(text: string) -> PasswordTextBox",
        "setTextAlignment": "fn(textAlign: Component) -> PasswordTextBox",
        "setTitle": "fn(title: string) -> PasswordTextBox",
        "setValue": "fn(value: string) -> PasswordTextBox",
        "setVisible": "fn(visible: bool) -> PasswordTextBox",
        "setVisibleLength": "fn(length: Integer) -> PasswordTextBox",
        "setWidth": "fn(width: string) -> PasswordTextBox"
      },
      "PopupPanel": {
        "add": "fn(widget: Widget) -> PopupPanel",
        "addAutoHidePartner": "fn(partner: Component) -> PopupPanel",
        "addCloseHandler": "fn(handler: Handler) -> PopupPanel",
        "addStyleDependentName": "fn(styleName: string) -> PopupPanel",
        "addStyleName": "fn(styleName: string) -> PopupPanel",
        "clear": "fn() -> PopupPanel",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "hide": "fn() -> PopupPanel",
        "setAnimationEnabled": "fn(animationEnabled: bool) -> PopupPanel",
        "setAutoHideEnabled": "fn(enabled: bool) -> PopupPanel",
        "setGlassEnabled": "fn(enabled: bool) -> PopupPanel",
        "setGlassStyleName": "fn(styleName: string) -> PopupPanel",
        "setHeight": "fn(height: string) -> PopupPanel",
        "setId": "fn(id: string) -> PopupPanel",
        "setLayoutData": "fn(layout: Object) -> PopupPanel",
        "setModal": "fn(modal: bool) -> PopupPanel",
        "setPixelSize": "fn(width: Integer, height: Integer) -> PopupPanel",
        "setPopupPosition": "fn(left: Integer, top: Integer) -> PopupPanel",
        "setPopupPositionAndShow": "fn(a: Component) -> PopupPanel",
        "setPreviewingAllNativeEvents": "fn(previewing: bool) -> PopupPanel",
        "setSize": "fn(width: string, height: string) -> PopupPanel",
        "setStyleAttribute": "fn(attribute: string, value: string) -> PopupPanel",
        "setStyleAttributes": "fn(attributes: Object) -> PopupPanel",
        "setStyleName": "fn(styleName: string) -> PopupPanel",
        "setStylePrimaryName": "fn(styleName: string) -> PopupPanel",
        "setTag": "fn(tag: string) -> PopupPanel",
        "setTitle": "fn(title: string) -> PopupPanel",
        "setVisible": "fn(visible: bool) -> PopupPanel",
        "setWidget": "fn(widget: Widget) -> PopupPanel",
        "setWidth": "fn(width: string) -> PopupPanel",
        "show": "fn() -> PopupPanel"
      },
      "PushButton": {
        "addBlurHandler": "fn(handler: Handler) -> PushButton",
        "addClickHandler": "fn(handler: Handler) -> PushButton",
        "addFocusHandler": "fn(handler: Handler) -> PushButton",
        "addKeyDownHandler": "fn(handler: Handler) -> PushButton",
        "addKeyPressHandler": "fn(handler: Handler) -> PushButton",
        "addKeyUpHandler": "fn(handler: Handler) -> PushButton",
        "addMouseDownHandler": "fn(handler: Handler) -> PushButton",
        "addMouseMoveHandler": "fn(handler: Handler) -> PushButton",
        "addMouseOutHandler": "fn(handler: Handler) -> PushButton",
        "addMouseOverHandler": "fn(handler: Handler) -> PushButton",
        "addMouseUpHandler": "fn(handler: Handler) -> PushButton",
        "addMouseWheelHandler": "fn(handler: Handler) -> PushButton",
        "addStyleDependentName": "fn(styleName: string) -> PushButton",
        "addStyleName": "fn(styleName: string) -> PushButton",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setAccessKey": "fn(accessKey: Char) -> PushButton",
        "setEnabled": "fn(enabled: bool) -> PushButton",
        "setFocus": "fn(focus: bool) -> PushButton",
        "setHTML": "fn(html: string) -> PushButton",
        "setHeight": "fn(height: string) -> PushButton",
        "setId": "fn(id: string) -> PushButton",
        "setLayoutData": "fn(layout: Object) -> PushButton",
        "setPixelSize": "fn(width: Integer, height: Integer) -> PushButton",
        "setSize": "fn(width: string, height: string) -> PushButton",
        "setStyleAttribute": "fn(attribute: string, value: string) -> PushButton",
        "setStyleAttributes": "fn(attributes: Object) -> PushButton",
        "setStyleName": "fn(styleName: string) -> PushButton",
        "setStylePrimaryName": "fn(styleName: string) -> PushButton",
        "setTabIndex": "fn(index: Integer) -> PushButton",
        "setTag": "fn(tag: string) -> PushButton",
        "setText": "fn(text: string) -> PushButton",
        "setTitle": "fn(title: string) -> PushButton",
        "setVisible": "fn(visible: bool) -> PushButton",
        "setWidth": "fn(width: string) -> PushButton"
      },
      "RadioButton": {
        "addBlurHandler": "fn(handler: Handler) -> RadioButton",
        "addClickHandler": "fn(handler: Handler) -> RadioButton",
        "addFocusHandler": "fn(handler: Handler) -> RadioButton",
        "addKeyDownHandler": "fn(handler: Handler) -> RadioButton",
        "addKeyPressHandler": "fn(handler: Handler) -> RadioButton",
        "addKeyUpHandler": "fn(handler: Handler) -> RadioButton",
        "addMouseDownHandler": "fn(handler: Handler) -> RadioButton",
        "addMouseMoveHandler": "fn(handler: Handler) -> RadioButton",
        "addMouseOutHandler": "fn(handler: Handler) -> RadioButton",
        "addMouseOverHandler": "fn(handler: Handler) -> RadioButton",
        "addMouseUpHandler": "fn(handler: Handler) -> RadioButton",
        "addMouseWheelHandler": "fn(handler: Handler) -> RadioButton",
        "addStyleDependentName": "fn(styleName: string) -> RadioButton",
        "addStyleName": "fn(styleName: string) -> RadioButton",
        "addValueChangeHandler": "fn(handler: Handler) -> RadioButton",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setAccessKey": "fn(accessKey: Char) -> RadioButton",
        "setEnabled": "fn(enabled: bool) -> RadioButton",
        "setFocus": "fn(focus: bool) -> RadioButton",
        "setFormValue": "fn(formValue: string) -> RadioButton",
        "setHTML": "fn(html: string) -> RadioButton",
        "setHeight": "fn(height: string) -> RadioButton",
        "setId": "fn(id: string) -> RadioButton",
        "setLayoutData": "fn(layout: Object) -> RadioButton",
        "setName": "fn(name: string) -> RadioButton",
        "setPixelSize": "fn(width: Integer, height: Integer) -> RadioButton",
        "setSize": "fn(width: string, height: string) -> RadioButton",
        "setStyleAttribute": "fn(attribute: string, value: string) -> RadioButton",
        "setStyleAttributes": "fn(attributes: Object) -> RadioButton",
        "setStyleName": "fn(styleName: string) -> RadioButton",
        "setStylePrimaryName": "fn(styleName: string) -> RadioButton",
        "setTabIndex": "fn(index: Integer) -> RadioButton",
        "setTag": "fn(tag: string) -> RadioButton",
        "setText": "fn(text: string) -> RadioButton",
        "setTitle": "fn(title: string) -> RadioButton",
        "setValue": "fn(value: bool) -> RadioButton",
        "setVisible": "fn(visible: bool) -> RadioButton",
        "setWidth": "fn(width: string) -> RadioButton"
      },
      "ResetButton": {
        "addBlurHandler": "fn(handler: Handler) -> ResetButton",
        "addClickHandler": "fn(handler: Handler) -> ResetButton",
        "addFocusHandler": "fn(handler: Handler) -> ResetButton",
        "addKeyDownHandler": "fn(handler: Handler) -> ResetButton",
        "addKeyPressHandler": "fn(handler: Handler) -> ResetButton",
        "addKeyUpHandler": "fn(handler: Handler) -> ResetButton",
        "addMouseDownHandler": "fn(handler: Handler) -> ResetButton",
        "addMouseMoveHandler": "fn(handler: Handler) -> ResetButton",
        "addMouseOutHandler": "fn(handler: Handler) -> ResetButton",
        "addMouseOverHandler": "fn(handler: Handler) -> ResetButton",
        "addMouseUpHandler": "fn(handler: Handler) -> ResetButton",
        "addMouseWheelHandler": "fn(handler: Handler) -> ResetButton",
        "addStyleDependentName": "fn(styleName: string) -> ResetButton",
        "addStyleName": "fn(styleName: string) -> ResetButton",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setAccessKey": "fn(accessKey: Char) -> ResetButton",
        "setEnabled": "fn(enabled: bool) -> ResetButton",
        "setFocus": "fn(focus: bool) -> ResetButton",
        "setHTML": "fn(html: string) -> ResetButton",
        "setHeight": "fn(height: string) -> ResetButton",
        "setId": "fn(id: string) -> ResetButton",
        "setLayoutData": "fn(layout: Object) -> ResetButton",
        "setPixelSize": "fn(width: Integer, height: Integer) -> ResetButton",
        "setSize": "fn(width: string, height: string) -> ResetButton",
        "setStyleAttribute": "fn(attribute: string, value: string) -> ResetButton",
        "setStyleAttributes": "fn(attributes: Object) -> ResetButton",
        "setStyleName": "fn(styleName: string) -> ResetButton",
        "setStylePrimaryName": "fn(styleName: string) -> ResetButton",
        "setTabIndex": "fn(index: Integer) -> ResetButton",
        "setTag": "fn(tag: string) -> ResetButton",
        "setText": "fn(text: string) -> ResetButton",
        "setTitle": "fn(title: string) -> ResetButton",
        "setVisible": "fn(visible: bool) -> ResetButton",
        "setWidth": "fn(width: string) -> ResetButton"
      },
      "ScrollPanel": {
        "add": "fn(widget: Widget) -> ScrollPanel",
        "addScrollHandler": "fn(handler: Handler) -> ScrollPanel",
        "addStyleDependentName": "fn(styleName: string) -> ScrollPanel",
        "addStyleName": "fn(styleName: string) -> ScrollPanel",
        "clear": "fn() -> ScrollPanel",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setAlwaysShowScrollBars": "fn(alwaysShow: bool) -> ScrollPanel",
        "setHeight": "fn(height: string) -> ScrollPanel",
        "setHorizontalScrollPosition": "fn(position: Integer) -> ScrollPanel",
        "setId": "fn(id: string) -> ScrollPanel",
        "setLayoutData": "fn(layout: Object) -> ScrollPanel",
        "setPixelSize": "fn(width: Integer, height: Integer) -> ScrollPanel",
        "setScrollPosition": "fn(position: Integer) -> ScrollPanel",
        "setSize": "fn(width: string, height: string) -> ScrollPanel",
        "setStyleAttribute": "fn(attribute: string, value: string) -> ScrollPanel",
        "setStyleAttributes": "fn(attributes: Object) -> ScrollPanel",
        "setStyleName": "fn(styleName: string) -> ScrollPanel",
        "setStylePrimaryName": "fn(styleName: string) -> ScrollPanel",
        "setTag": "fn(tag: string) -> ScrollPanel",
        "setTitle": "fn(title: string) -> ScrollPanel",
        "setVisible": "fn(visible: bool) -> ScrollPanel",
        "setWidget": "fn(widget: Widget) -> ScrollPanel",
        "setWidth": "fn(width: string) -> ScrollPanel"
      },
      "ServerHandler": {
        "addCallbackElement": "fn(widget: Widget) -> ServerHandler",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setCallbackFunction": "fn(functionToInvoke: string) -> ServerHandler",
        "setId": "fn(id: string) -> ServerHandler",
        "setTag": "fn(tag: string) -> ServerHandler",
        "validateEmail": "fn(widget: Widget) -> ServerHandler",
        "validateInteger": "fn(widget: Widget) -> ServerHandler",
        "validateLength": "fn(widget: Widget, min: Integer, max: Integer) -> ServerHandler",
        "validateMatches": "fn(widget: Widget, pattern: string) -> ServerHandler",
        "validateNotEmail": "fn(widget: Widget) -> ServerHandler",
        "validateNotInteger": "fn(widget: Widget) -> ServerHandler",
        "validateNotLength": "fn(widget: Widget, min: Integer, max: Integer) -> ServerHandler",
        "validateNotMatches": "fn(widget: Widget, pattern: string) -> ServerHandler",
        "validateNotNumber": "fn(widget: Widget) -> ServerHandler",
        "validateNotOptions": "fn(widget: Widget, options: [String]) -> ServerHandler",
        "validateNotRange": "fn(widget: Widget, min: Number, max: Number) -> ServerHandler",
        "validateNotSum": "fn(widgets: [Widget], sum: Integer) -> ServerHandler",
        "validateNumber": "fn(widget: Widget) -> ServerHandler",
        "validateOptions": "fn(widget: Widget, options: [String]) -> ServerHandler",
        "validateRange": "fn(widget: Widget, min: Number, max: Number) -> ServerHandler",
        "validateSum": "fn(widgets: [Widget], sum: Integer) -> ServerHandler"
      },
      "SimpleCheckBox": {
        "addBlurHandler": "fn(handler: Handler) -> SimpleCheckBox",
        "addClickHandler": "fn(handler: Handler) -> SimpleCheckBox",
        "addFocusHandler": "fn(handler: Handler) -> SimpleCheckBox",
        "addKeyDownHandler": "fn(handler: Handler) -> SimpleCheckBox",
        "addKeyPressHandler": "fn(handler: Handler) -> SimpleCheckBox",
        "addKeyUpHandler": "fn(handler: Handler) -> SimpleCheckBox",
        "addMouseDownHandler": "fn(handler: Handler) -> SimpleCheckBox",
        "addMouseMoveHandler": "fn(handler: Handler) -> SimpleCheckBox",
        "addMouseOutHandler": "fn(handler: Handler) -> SimpleCheckBox",
        "addMouseOverHandler": "fn(handler: Handler) -> SimpleCheckBox",
        "addMouseUpHandler": "fn(handler: Handler) -> SimpleCheckBox",
        "addMouseWheelHandler": "fn(handler: Handler) -> SimpleCheckBox",
        "addStyleDependentName": "fn(styleName: string) -> SimpleCheckBox",
        "addStyleName": "fn(styleName: string) -> SimpleCheckBox",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setAccessKey": "fn(accessKey: Char) -> SimpleCheckBox",
        "setChecked": "fn(checked: bool) -> SimpleCheckBox",
        "setEnabled": "fn(enabled: bool) -> SimpleCheckBox",
        "setFocus": "fn(focus: bool) -> SimpleCheckBox",
        "setHeight": "fn(height: string) -> SimpleCheckBox",
        "setId": "fn(id: string) -> SimpleCheckBox",
        "setLayoutData": "fn(layout: Object) -> SimpleCheckBox",
        "setName": "fn(name: string) -> SimpleCheckBox",
        "setPixelSize": "fn(width: Integer, height: Integer) -> SimpleCheckBox",
        "setSize": "fn(width: string, height: string) -> SimpleCheckBox",
        "setStyleAttribute": "fn(attribute: string, value: string) -> SimpleCheckBox",
        "setStyleAttributes": "fn(attributes: Object) -> SimpleCheckBox",
        "setStyleName": "fn(styleName: string) -> SimpleCheckBox",
        "setStylePrimaryName": "fn(styleName: string) -> SimpleCheckBox",
        "setTabIndex": "fn(index: Integer) -> SimpleCheckBox",
        "setTag": "fn(tag: string) -> SimpleCheckBox",
        "setTitle": "fn(title: string) -> SimpleCheckBox",
        "setVisible": "fn(visible: bool) -> SimpleCheckBox",
        "setWidth": "fn(width: string) -> SimpleCheckBox"
      },
      "SimplePanel": {
        "add": "fn(widget: Widget) -> SimplePanel",
        "addStyleDependentName": "fn(styleName: string) -> SimplePanel",
        "addStyleName": "fn(styleName: string) -> SimplePanel",
        "clear": "fn() -> SimplePanel",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setHeight": "fn(height: string) -> SimplePanel",
        "setId": "fn(id: string) -> SimplePanel",
        "setLayoutData": "fn(layout: Object) -> SimplePanel",
        "setPixelSize": "fn(width: Integer, height: Integer) -> SimplePanel",
        "setSize": "fn(width: string, height: string) -> SimplePanel",
        "setStyleAttribute": "fn(attribute: string, value: string) -> SimplePanel",
        "setStyleAttributes": "fn(attributes: Object) -> SimplePanel",
        "setStyleName": "fn(styleName: string) -> SimplePanel",
        "setStylePrimaryName": "fn(styleName: string) -> SimplePanel",
        "setTag": "fn(tag: string) -> SimplePanel",
        "setTitle": "fn(title: string) -> SimplePanel",
        "setVisible": "fn(visible: bool) -> SimplePanel",
        "setWidget": "fn(widget: Widget) -> SimplePanel",
        "setWidth": "fn(width: string) -> SimplePanel"
      },
      "SimpleRadioButton": {
        "addBlurHandler": "fn(handler: Handler) -> SimpleRadioButton",
        "addClickHandler": "fn(handler: Handler) -> SimpleRadioButton",
        "addFocusHandler": "fn(handler: Handler) -> SimpleRadioButton",
        "addKeyDownHandler": "fn(handler: Handler) -> SimpleRadioButton",
        "addKeyPressHandler": "fn(handler: Handler) -> SimpleRadioButton",
        "addKeyUpHandler": "fn(handler: Handler) -> SimpleRadioButton",
        "addMouseDownHandler": "fn(handler: Handler) -> SimpleRadioButton",
        "addMouseMoveHandler": "fn(handler: Handler) -> SimpleRadioButton",
        "addMouseOutHandler": "fn(handler: Handler) -> SimpleRadioButton",
        "addMouseOverHandler": "fn(handler: Handler) -> SimpleRadioButton",
        "addMouseUpHandler": "fn(handler: Handler) -> SimpleRadioButton",
        "addMouseWheelHandler": "fn(handler: Handler) -> SimpleRadioButton",
        "addStyleDependentName": "fn(styleName: string) -> SimpleRadioButton",
        "addStyleName": "fn(styleName: string) -> SimpleRadioButton",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setAccessKey": "fn(accessKey: Char) -> SimpleRadioButton",
        "setChecked": "fn(checked: bool) -> SimpleRadioButton",
        "setEnabled": "fn(enabled: bool) -> SimpleRadioButton",
        "setFocus": "fn(focus: bool) -> SimpleRadioButton",
        "setHeight": "fn(height: string) -> SimpleRadioButton",
        "setId": "fn(id: string) -> SimpleRadioButton",
        "setLayoutData": "fn(layout: Object) -> SimpleRadioButton",
        "setName": "fn(name: string) -> SimpleRadioButton",
        "setPixelSize": "fn(width: Integer, height: Integer) -> SimpleRadioButton",
        "setSize": "fn(width: string, height: string) -> SimpleRadioButton",
        "setStyleAttribute": "fn(attribute: string, value: string) -> SimpleRadioButton",
        "setStyleAttributes": "fn(attributes: Object) -> SimpleRadioButton",
        "setStyleName": "fn(styleName: string) -> SimpleRadioButton",
        "setStylePrimaryName": "fn(styleName: string) -> SimpleRadioButton",
        "setTabIndex": "fn(index: Integer) -> SimpleRadioButton",
        "setTag": "fn(tag: string) -> SimpleRadioButton",
        "setTitle": "fn(title: string) -> SimpleRadioButton",
        "setVisible": "fn(visible: bool) -> SimpleRadioButton",
        "setWidth": "fn(width: string) -> SimpleRadioButton"
      },
      "SplitLayoutPanel": {
        "add": "fn(widget: Widget) -> SplitLayoutPanel",
        "addEast": "fn(widget: Widget, width: Number) -> SplitLayoutPanel",
        "addNorth": "fn(widget: Widget, height: Number) -> SplitLayoutPanel",
        "addSouth": "fn(widget: Widget, height: Number) -> SplitLayoutPanel",
        "addStyleDependentName": "fn(styleName: string) -> SplitLayoutPanel",
        "addStyleName": "fn(styleName: string) -> SplitLayoutPanel",
        "addWest": "fn(widget: Widget, width: Number) -> SplitLayoutPanel",
        "clear": "fn() -> SplitLayoutPanel",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "remove": "fn(index: Integer) -> SplitLayoutPanel",
        "setHeight": "fn(height: string) -> SplitLayoutPanel",
        "setId": "fn(id: string) -> SplitLayoutPanel",
        "setLayoutData": "fn(layout: Object) -> SplitLayoutPanel",
        "setPixelSize": "fn(width: Integer, height: Integer) -> SplitLayoutPanel",
        "setSize": "fn(width: string, height: string) -> SplitLayoutPanel",
        "setStyleAttribute": "fn(attribute: string, value: string) -> SplitLayoutPanel",
        "setStyleAttributes": "fn(attributes: Object) -> SplitLayoutPanel",
        "setStyleName": "fn(styleName: string) -> SplitLayoutPanel",
        "setStylePrimaryName": "fn(styleName: string) -> SplitLayoutPanel",
        "setTag": "fn(tag: string) -> SplitLayoutPanel",
        "setTitle": "fn(title: string) -> SplitLayoutPanel",
        "setVisible": "fn(visible: bool) -> SplitLayoutPanel",
        "setWidgetMinSize": "fn(widget: Widget, minSize: Integer) -> SplitLayoutPanel",
        "setWidth": "fn(width: string) -> SplitLayoutPanel"
      },
      "StackPanel": {
        "add": "fn(widget: Widget) -> StackPanel",
        "addStyleDependentName": "fn(styleName: string) -> StackPanel",
        "addStyleName": "fn(styleName: string) -> StackPanel",
        "clear": "fn() -> StackPanel",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "remove": "fn(index: Integer) -> StackPanel",
        "setHeight": "fn(height: string) -> StackPanel",
        "setId": "fn(id: string) -> StackPanel",
        "setLayoutData": "fn(layout: Object) -> StackPanel",
        "setPixelSize": "fn(width: Integer, height: Integer) -> StackPanel",
        "setSize": "fn(width: string, height: string) -> StackPanel",
        "setStackText": "fn(index: Integer, text: string) -> StackPanel",
        "setStyleAttribute": "fn(attribute: string, value: string) -> StackPanel",
        "setStyleAttributes": "fn(attributes: Object) -> StackPanel",
        "setStyleName": "fn(styleName: string) -> StackPanel",
        "setStylePrimaryName": "fn(styleName: string) -> StackPanel",
        "setTag": "fn(tag: string) -> StackPanel",
        "setTitle": "fn(title: string) -> StackPanel",
        "setVisible": "fn(visible: bool) -> StackPanel",
        "setWidth": "fn(width: string) -> StackPanel"
      },
      "SubmitButton": {
        "addBlurHandler": "fn(handler: Handler) -> SubmitButton",
        "addClickHandler": "fn(handler: Handler) -> SubmitButton",
        "addFocusHandler": "fn(handler: Handler) -> SubmitButton",
        "addKeyDownHandler": "fn(handler: Handler) -> SubmitButton",
        "addKeyPressHandler": "fn(handler: Handler) -> SubmitButton",
        "addKeyUpHandler": "fn(handler: Handler) -> SubmitButton",
        "addMouseDownHandler": "fn(handler: Handler) -> SubmitButton",
        "addMouseMoveHandler": "fn(handler: Handler) -> SubmitButton",
        "addMouseOutHandler": "fn(handler: Handler) -> SubmitButton",
        "addMouseOverHandler": "fn(handler: Handler) -> SubmitButton",
        "addMouseUpHandler": "fn(handler: Handler) -> SubmitButton",
        "addMouseWheelHandler": "fn(handler: Handler) -> SubmitButton",
        "addStyleDependentName": "fn(styleName: string) -> SubmitButton",
        "addStyleName": "fn(styleName: string) -> SubmitButton",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setAccessKey": "fn(accessKey: Char) -> SubmitButton",
        "setEnabled": "fn(enabled: bool) -> SubmitButton",
        "setFocus": "fn(focus: bool) -> SubmitButton",
        "setHTML": "fn(html: string) -> SubmitButton",
        "setHeight": "fn(height: string) -> SubmitButton",
        "setId": "fn(id: string) -> SubmitButton",
        "setLayoutData": "fn(layout: Object) -> SubmitButton",
        "setPixelSize": "fn(width: Integer, height: Integer) -> SubmitButton",
        "setSize": "fn(width: string, height: string) -> SubmitButton",
        "setStyleAttribute": "fn(attribute: string, value: string) -> SubmitButton",
        "setStyleAttributes": "fn(attributes: Object) -> SubmitButton",
        "setStyleName": "fn(styleName: string) -> SubmitButton",
        "setStylePrimaryName": "fn(styleName: string) -> SubmitButton",
        "setTabIndex": "fn(index: Integer) -> SubmitButton",
        "setTag": "fn(tag: string) -> SubmitButton",
        "setText": "fn(text: string) -> SubmitButton",
        "setTitle": "fn(title: string) -> SubmitButton",
        "setVisible": "fn(visible: bool) -> SubmitButton",
        "setWidth": "fn(width: string) -> SubmitButton"
      },
      "SuggestBox": {
        "addKeyDownHandler": "fn(handler: Handler) -> SuggestBox",
        "addKeyPressHandler": "fn(handler: Handler) -> SuggestBox",
        "addKeyUpHandler": "fn(handler: Handler) -> SuggestBox",
        "addSelectionHandler": "fn(handler: Handler) -> SuggestBox",
        "addStyleDependentName": "fn(styleName: string) -> SuggestBox",
        "addStyleName": "fn(styleName: string) -> SuggestBox",
        "addValueChangeHandler": "fn(handler: Handler) -> SuggestBox",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setAccessKey": "fn(accessKey: Char) -> SuggestBox",
        "setAnimationEnabled": "fn(animationEnabled: bool) -> SuggestBox",
        "setAutoSelectEnabled": "fn(autoSelectEnabled: bool) -> SuggestBox",
        "setFocus": "fn(focus: bool) -> SuggestBox",
        "setHeight": "fn(height: string) -> SuggestBox",
        "setId": "fn(id: string) -> SuggestBox",
        "setLayoutData": "fn(layout: Object) -> SuggestBox",
        "setLimit": "fn(limit: Integer) -> SuggestBox",
        "setPixelSize": "fn(width: Integer, height: Integer) -> SuggestBox",
        "setPopupStyleName": "fn(styleName: string) -> SuggestBox",
        "setSize": "fn(width: string, height: string) -> SuggestBox",
        "setStyleAttribute": "fn(attribute: string, value: string) -> SuggestBox",
        "setStyleAttributes": "fn(attributes: Object) -> SuggestBox",
        "setStyleName": "fn(styleName: string) -> SuggestBox",
        "setStylePrimaryName": "fn(styleName: string) -> SuggestBox",
        "setTabIndex": "fn(index: Integer) -> SuggestBox",
        "setTag": "fn(tag: string) -> SuggestBox",
        "setText": "fn(text: string) -> SuggestBox",
        "setTitle": "fn(title: string) -> SuggestBox",
        "setValue": "fn(value: string) -> SuggestBox",
        "setVisible": "fn(visible: bool) -> SuggestBox",
        "setWidth": "fn(width: string) -> SuggestBox"
      },
      "TabBar": {
        "addBeforeSelectionHandler": "fn(handler: Handler) -> TabBar",
        "addSelectionHandler": "fn(handler: Handler) -> TabBar",
        "addStyleDependentName": "fn(styleName: string) -> TabBar",
        "addStyleName": "fn(styleName: string) -> TabBar",
        "addTab": "fn(title: string) -> TabBar",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "selectTab": "fn(index: Integer) -> TabBar",
        "setHeight": "fn(height: string) -> TabBar",
        "setId": "fn(id: string) -> TabBar",
        "setLayoutData": "fn(layout: Object) -> TabBar",
        "setPixelSize": "fn(width: Integer, height: Integer) -> TabBar",
        "setSize": "fn(width: string, height: string) -> TabBar",
        "setStyleAttribute": "fn(attribute: string, value: string) -> TabBar",
        "setStyleAttributes": "fn(attributes: Object) -> TabBar",
        "setStyleName": "fn(styleName: string) -> TabBar",
        "setStylePrimaryName": "fn(styleName: string) -> TabBar",
        "setTabEnabled": "fn(index: Integer, enabled: bool) -> TabBar",
        "setTabText": "fn(index: Integer, text: string) -> TabBar",
        "setTag": "fn(tag: string) -> TabBar",
        "setTitle": "fn(title: string) -> TabBar",
        "setVisible": "fn(visible: bool) -> TabBar",
        "setWidth": "fn(width: string) -> TabBar"
      },
      "TabPanel": {
        "add": "fn(widget: Widget) -> TabPanel",
        "addBeforeSelectionHandler": "fn(handler: Handler) -> TabPanel",
        "addSelectionHandler": "fn(handler: Handler) -> TabPanel",
        "addStyleDependentName": "fn(styleName: string) -> TabPanel",
        "addStyleName": "fn(styleName: string) -> TabPanel",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "selectTab": "fn(index: Integer) -> TabPanel",
        "setAnimationEnabled": "fn(animationEnabled: bool) -> TabPanel",
        "setHeight": "fn(height: string) -> TabPanel",
        "setId": "fn(id: string) -> TabPanel",
        "setLayoutData": "fn(layout: Object) -> TabPanel",
        "setPixelSize": "fn(width: Integer, height: Integer) -> TabPanel",
        "setSize": "fn(width: string, height: string) -> TabPanel",
        "setStyleAttribute": "fn(attribute: string, value: string) -> TabPanel",
        "setStyleAttributes": "fn(attributes: Object) -> TabPanel",
        "setStyleName": "fn(styleName: string) -> TabPanel",
        "setStylePrimaryName": "fn(styleName: string) -> TabPanel",
        "setTag": "fn(tag: string) -> TabPanel",
        "setTitle": "fn(title: string) -> TabPanel",
        "setVisible": "fn(visible: bool) -> TabPanel",
        "setWidth": "fn(width: string) -> TabPanel"
      },
      "TextArea": {
        "addBlurHandler": "fn(handler: Handler) -> TextArea",
        "addChangeHandler": "fn(handler: Handler) -> TextArea",
        "addClickHandler": "fn(handler: Handler) -> TextArea",
        "addFocusHandler": "fn(handler: Handler) -> TextArea",
        "addKeyDownHandler": "fn(handler: Handler) -> TextArea",
        "addKeyPressHandler": "fn(handler: Handler) -> TextArea",
        "addKeyUpHandler": "fn(handler: Handler) -> TextArea",
        "addMouseDownHandler": "fn(handler: Handler) -> TextArea",
        "addMouseMoveHandler": "fn(handler: Handler) -> TextArea",
        "addMouseOutHandler": "fn(handler: Handler) -> TextArea",
        "addMouseOverHandler": "fn(handler: Handler) -> TextArea",
        "addMouseUpHandler": "fn(handler: Handler) -> TextArea",
        "addMouseWheelHandler": "fn(handler: Handler) -> TextArea",
        "addStyleDependentName": "fn(styleName: string) -> TextArea",
        "addStyleName": "fn(styleName: string) -> TextArea",
        "addValueChangeHandler": "fn(handler: Handler) -> TextArea",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setAccessKey": "fn(accessKey: Char) -> TextArea",
        "setCharacterWidth": "fn(width: Integer) -> TextArea",
        "setCursorPos": "fn(position: Integer) -> TextArea",
        "setDirection": "fn(direction: Component) -> TextArea",
        "setEnabled": "fn(enabled: bool) -> TextArea",
        "setFocus": "fn(focus: bool) -> TextArea",
        "setHeight": "fn(height: string) -> TextArea",
        "setId": "fn(id: string) -> TextArea",
        "setLayoutData": "fn(layout: Object) -> TextArea",
        "setName": "fn(name: string) -> TextArea",
        "setPixelSize": "fn(width: Integer, height: Integer) -> TextArea",
        "setReadOnly": "fn(readOnly: bool) -> TextArea",
        "setSelectionRange": "fn(position: Integer, length: Integer) -> TextArea",
        "setSize": "fn(width: string, height: string) -> TextArea",
        "setStyleAttribute": "fn(attribute: string, value: string) -> TextArea",
        "setStyleAttributes": "fn(attributes: Object) -> TextArea",
        "setStyleName": "fn(styleName: string) -> TextArea",
        "setStylePrimaryName": "fn(styleName: string) -> TextArea",
        "setTabIndex": "fn(index: Integer) -> TextArea",
        "setTag": "fn(tag: string) -> TextArea",
        "setText": "fn(text: string) -> TextArea",
        "setTextAlignment": "fn(textAlign: Component) -> TextArea",
        "setTitle": "fn(title: string) -> TextArea",
        "setValue": "fn(value: string) -> TextArea",
        "setVisible": "fn(visible: bool) -> TextArea",
        "setVisibleLines": "fn(lines: Integer) -> TextArea",
        "setWidth": "fn(width: string) -> TextArea"
      },
      "TextBox": {
        "addBlurHandler": "fn(handler: Handler) -> TextBox",
        "addChangeHandler": "fn(handler: Handler) -> TextBox",
        "addClickHandler": "fn(handler: Handler) -> TextBox",
        "addFocusHandler": "fn(handler: Handler) -> TextBox",
        "addKeyDownHandler": "fn(handler: Handler) -> TextBox",
        "addKeyPressHandler": "fn(handler: Handler) -> TextBox",
        "addKeyUpHandler": "fn(handler: Handler) -> TextBox",
        "addMouseDownHandler": "fn(handler: Handler) -> TextBox",
        "addMouseMoveHandler": "fn(handler: Handler) -> TextBox",
        "addMouseOutHandler": "fn(handler: Handler) -> TextBox",
        "addMouseOverHandler": "fn(handler: Handler) -> TextBox",
        "addMouseUpHandler": "fn(handler: Handler) -> TextBox",
        "addMouseWheelHandler": "fn(handler: Handler) -> TextBox",
        "addStyleDependentName": "fn(styleName: string) -> TextBox",
        "addStyleName": "fn(styleName: string) -> TextBox",
        "addValueChangeHandler": "fn(handler: Handler) -> TextBox",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setAccessKey": "fn(accessKey: Char) -> TextBox",
        "setCursorPos": "fn(position: Integer) -> TextBox",
        "setDirection": "fn(direction: Component) -> TextBox",
        "setEnabled": "fn(enabled: bool) -> TextBox",
        "setFocus": "fn(focus: bool) -> TextBox",
        "setHeight": "fn(height: string) -> TextBox",
        "setId": "fn(id: string) -> TextBox",
        "setLayoutData": "fn(layout: Object) -> TextBox",
        "setMaxLength": "fn(length: Integer) -> TextBox",
        "setName": "fn(name: string) -> TextBox",
        "setPixelSize": "fn(width: Integer, height: Integer) -> TextBox",
        "setReadOnly": "fn(readOnly: bool) -> TextBox",
        "setSelectionRange": "fn(position: Integer, length: Integer) -> TextBox",
        "setSize": "fn(width: string, height: string) -> TextBox",
        "setStyleAttribute": "fn(attribute: string, value: string) -> TextBox",
        "setStyleAttributes": "fn(attributes: Object) -> TextBox",
        "setStyleName": "fn(styleName: string) -> TextBox",
        "setStylePrimaryName": "fn(styleName: string) -> TextBox",
        "setTabIndex": "fn(index: Integer) -> TextBox",
        "setTag": "fn(tag: string) -> TextBox",
        "setText": "fn(text: string) -> TextBox",
        "setTextAlignment": "fn(textAlign: Component) -> TextBox",
        "setTitle": "fn(title: string) -> TextBox",
        "setValue": "fn(value: string) -> TextBox",
        "setVisible": "fn(visible: bool) -> TextBox",
        "setVisibleLength": "fn(length: Integer) -> TextBox",
        "setWidth": "fn(width: string) -> TextBox"
      },
      "ToggleButton": {
        "addBlurHandler": "fn(handler: Handler) -> ToggleButton",
        "addClickHandler": "fn(handler: Handler) -> ToggleButton",
        "addFocusHandler": "fn(handler: Handler) -> ToggleButton",
        "addKeyDownHandler": "fn(handler: Handler) -> ToggleButton",
        "addKeyPressHandler": "fn(handler: Handler) -> ToggleButton",
        "addKeyUpHandler": "fn(handler: Handler) -> ToggleButton",
        "addMouseDownHandler": "fn(handler: Handler) -> ToggleButton",
        "addMouseMoveHandler": "fn(handler: Handler) -> ToggleButton",
        "addMouseOutHandler": "fn(handler: Handler) -> ToggleButton",
        "addMouseOverHandler": "fn(handler: Handler) -> ToggleButton",
        "addMouseUpHandler": "fn(handler: Handler) -> ToggleButton",
        "addMouseWheelHandler": "fn(handler: Handler) -> ToggleButton",
        "addStyleDependentName": "fn(styleName: string) -> ToggleButton",
        "addStyleName": "fn(styleName: string) -> ToggleButton",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setAccessKey": "fn(accessKey: Char) -> ToggleButton",
        "setDown": "fn(down: bool) -> ToggleButton",
        "setEnabled": "fn(enabled: bool) -> ToggleButton",
        "setFocus": "fn(focus: bool) -> ToggleButton",
        "setHTML": "fn(html: string) -> ToggleButton",
        "setHeight": "fn(height: string) -> ToggleButton",
        "setId": "fn(id: string) -> ToggleButton",
        "setLayoutData": "fn(layout: Object) -> ToggleButton",
        "setPixelSize": "fn(width: Integer, height: Integer) -> ToggleButton",
        "setSize": "fn(width: string, height: string) -> ToggleButton",
        "setStyleAttribute": "fn(attribute: string, value: string) -> ToggleButton",
        "setStyleAttributes": "fn(attributes: Object) -> ToggleButton",
        "setStyleName": "fn(styleName: string) -> ToggleButton",
        "setStylePrimaryName": "fn(styleName: string) -> ToggleButton",
        "setTabIndex": "fn(index: Integer) -> ToggleButton",
        "setTag": "fn(tag: string) -> ToggleButton",
        "setText": "fn(text: string) -> ToggleButton",
        "setTitle": "fn(title: string) -> ToggleButton",
        "setVisible": "fn(visible: bool) -> ToggleButton",
        "setWidth": "fn(width: string) -> ToggleButton"
      },
      "Tree": {
        "add": "fn(widget: Widget) -> Tree",
        "addBlurHandler": "fn(handler: Handler) -> Tree",
        "addCloseHandler": "fn(handler: Handler) -> Tree",
        "addFocusHandler": "fn(handler: Handler) -> Tree",
        "addItem": "fn(text: string) -> Tree",
        "addKeyDownHandler": "fn(handler: Handler) -> Tree",
        "addKeyPressHandler": "fn(handler: Handler) -> Tree",
        "addKeyUpHandler": "fn(handler: Handler) -> Tree",
        "addMouseDownHandler": "fn(handler: Handler) -> Tree",
        "addMouseMoveHandler": "fn(handler: Handler) -> Tree",
        "addMouseOutHandler": "fn(handler: Handler) -> Tree",
        "addMouseOverHandler": "fn(handler: Handler) -> Tree",
        "addMouseUpHandler": "fn(handler: Handler) -> Tree",
        "addMouseWheelHandler": "fn(handler: Handler) -> Tree",
        "addOpenHandler": "fn(handler: Handler) -> Tree",
        "addSelectionHandler": "fn(handler: Handler) -> Tree",
        "addStyleDependentName": "fn(styleName: string) -> Tree",
        "addStyleName": "fn(styleName: string) -> Tree",
        "clear": "fn() -> Tree",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setAccessKey": "fn(accessKey: Char) -> Tree",
        "setAnimationEnabled": "fn(animationEnabled: bool) -> Tree",
        "setFocus": "fn(focus: bool) -> Tree",
        "setHeight": "fn(height: string) -> Tree",
        "setId": "fn(id: string) -> Tree",
        "setLayoutData": "fn(layout: Object) -> Tree",
        "setPixelSize": "fn(width: Integer, height: Integer) -> Tree",
        "setSelectedItem": "fn(item: TreeItem) -> Tree",
        "setSize": "fn(width: string, height: string) -> Tree",
        "setStyleAttribute": "fn(attribute: string, value: string) -> Tree",
        "setStyleAttributes": "fn(attributes: Object) -> Tree",
        "setStyleName": "fn(styleName: string) -> Tree",
        "setStylePrimaryName": "fn(styleName: string) -> Tree",
        "setTabIndex": "fn(index: Integer) -> Tree",
        "setTag": "fn(tag: string) -> Tree",
        "setTitle": "fn(title: string) -> Tree",
        "setVisible": "fn(visible: bool) -> Tree",
        "setWidth": "fn(width: string) -> Tree"
      },
      "TreeItem": {
        "addItem": "fn(text: string) -> TreeItem",
        "addStyleDependentName": "fn(styleName: string) -> TreeItem",
        "addStyleName": "fn(styleName: string) -> TreeItem",
        "clear": "fn() -> TreeItem",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "setHTML": "fn(html: string) -> TreeItem",
        "setHeight": "fn(height: string) -> TreeItem",
        "setId": "fn(id: string) -> TreeItem",
        "setPixelSize": "fn(width: Integer, height: Integer) -> TreeItem",
        "setSelected": "fn(selected: bool) -> TreeItem",
        "setSize": "fn(width: string, height: string) -> TreeItem",
        "setState": "fn(open: bool) -> TreeItem",
        "setStyleAttribute": "fn(attribute: string, value: string) -> TreeItem",
        "setStyleAttributes": "fn(attributes: Object) -> TreeItem",
        "setStyleName": "fn(styleName: string) -> TreeItem",
        "setStylePrimaryName": "fn(styleName: string) -> TreeItem",
        "setTag": "fn(tag: string) -> TreeItem",
        "setText": "fn(text: string) -> TreeItem",
        "setTitle": "fn(title: string) -> TreeItem",
        "setUserObject": "fn(a: Object) -> TreeItem",
        "setVisible": "fn(visible: bool) -> TreeItem",
        "setWidget": "fn(widget: Widget) -> TreeItem",
        "setWidth": "fn(width: string) -> TreeItem"
      },
      "UiApp": {
        "DateTimeFormat": "DateTimeFormat",
        "FileType": "FileType",
        "HorizontalAlignment": "HorizontalAlignment",
        "VerticalAlignment": "VerticalAlignment",
        "createApplication": "fn() -> UiInstance",
        "getActiveApplication": "fn() -> UiInstance",
        "getUserAgent": "fn() -> string"
      },
      "UiInstance": {
        "add": "fn(child: Widget) -> UiInstance",
        "close": "fn() -> UiInstance",
        "createAbsolutePanel": "fn() -> AbsolutePanel",
        "createAnchor": "fn(text: string, asHtml: bool, href: string) -> Anchor",
        "createButton": "fn() -> Button",
        "createCaptionPanel": "fn() -> CaptionPanel",
        "createCheckBox": "fn() -> CheckBox",
        "createClientHandler": "fn() -> ClientHandler",
        "createDateBox": "fn() -> DateBox",
        "createDatePicker": "fn() -> DatePicker",
        "createDecoratedStackPanel": "fn() -> DecoratedStackPanel",
        "createDecoratedTabBar": "fn() -> DecoratedTabBar",
        "createDecoratedTabPanel": "fn() -> DecoratedTabPanel",
        "createDecoratorPanel": "fn() -> DecoratorPanel",
        "createDialogBox": "fn() -> DialogBox",
        "createDocsListDialog": "fn() -> DocsListDialog",
        "createFileUpload": "fn() -> FileUpload",
        "createFlexTable": "fn() -> FlexTable",
        "createFlowPanel": "fn() -> FlowPanel",
        "createFocusPanel": "fn() -> FocusPanel",
        "createFormPanel": "fn() -> FormPanel",
        "createGrid": "fn() -> Grid",
        "createHTML": "fn() -> HTML",
        "createHidden": "fn() -> Hidden",
        "createHorizontalPanel": "fn() -> HorizontalPanel",
        "createImage": "fn() -> Image",
        "createInlineLabel": "fn() -> InlineLabel",
        "createLabel": "fn() -> Label",
        "createListBox": "fn() -> ListBox",
        "createMenuBar": "fn() -> MenuBar",
        "createMenuItem": "fn(text: string, asHtml: bool, command: Handler) -> MenuItem",
        "createMenuItemSeparator": "fn() -> MenuItemSeparator",
        "createPasswordTextBox": "fn() -> PasswordTextBox",
        "createPopupPanel": "fn() -> PopupPanel",
        "createPushButton": "fn() -> PushButton",
        "createRadioButton": "fn(name: string) -> RadioButton",
        "createResetButton": "fn() -> ResetButton",
        "createScrollPanel": "fn() -> ScrollPanel",
        "createServerBlurHandler": "fn() -> ServerHandler",
        "createServerChangeHandler": "fn() -> ServerHandler",
        "createServerClickHandler": "fn() -> ServerHandler",
        "createServerCloseHandler": "fn() -> ServerHandler",
        "createServerCommand": "fn() -> ServerHandler",
        "createServerErrorHandler": "fn() -> ServerHandler",
        "createServerFocusHandler": "fn() -> ServerHandler",
        "createServerHandler": "fn() -> ServerHandler",
        "createServerInitializeHandler": "fn() -> ServerHandler",
        "createServerKeyHandler": "fn() -> ServerHandler",
        "createServerLoadHandler": "fn() -> ServerHandler",
        "createServerMouseHandler": "fn() -> ServerHandler",
        "createServerScrollHandler": "fn() -> ServerHandler",
        "createServerSelectionHandler": "fn() -> ServerHandler",
        "createServerSubmitHandler": "fn() -> ServerHandler",
        "createServerValueChangeHandler": "fn() -> ServerHandler",
        "createSimpleCheckBox": "fn() -> SimpleCheckBox",
        "createSimplePanel": "fn() -> SimplePanel",
        "createSimpleRadioButton": "fn(name: string) -> SimpleRadioButton",
        "createSplitLayoutPanel": "fn() -> SplitLayoutPanel",
        "createStackPanel": "fn() -> StackPanel",
        "createSubmitButton": "fn() -> SubmitButton",
        "createSuggestBox": "fn() -> SuggestBox",
        "createTabBar": "fn() -> TabBar",
        "createTabPanel": "fn() -> TabPanel",
        "createTextArea": "fn() -> TextArea",
        "createTextBox": "fn() -> TextBox",
        "createToggleButton": "fn() -> ToggleButton",
        "createTree": "fn() -> Tree",
        "createTreeItem": "fn() -> TreeItem",
        "createVerticalPanel": "fn() -> VerticalPanel",
        "getElementById": "fn(id: string) -> Component",
        "getId": "fn() -> string",
        "isStandardsMode": "fn() -> bool",
        "loadComponent": "fn(componentName: string) -> Component",
        "remove": "fn(index: Integer) -> UiInstance",
        "setHeight": "fn(height: Integer) -> UiInstance",
        "setStandardsMode": "fn(standardsMode: bool) -> UiInstance",
        "setStyleAttribute": "fn(attribute: string, value: string) -> UiInstance",
        "setTitle": "fn(title: string) -> UiInstance",
        "setWidth": "fn(width: Integer) -> UiInstance"
      },
      "VerticalAlignment": "number",
      "VerticalPanel": {
        "add": "fn(widget: Widget) -> VerticalPanel",
        "addStyleDependentName": "fn(styleName: string) -> VerticalPanel",
        "addStyleName": "fn(styleName: string) -> VerticalPanel",
        "clear": "fn() -> VerticalPanel",
        "getId": "fn() -> string",
        "getTag": "fn() -> string",
        "getType": "fn() -> string",
        "remove": "fn(index: Integer) -> VerticalPanel",
        "setBorderWidth": "fn(width: Integer) -> VerticalPanel",
        "setCellHeight": "fn(widget: Widget, height: string) -> VerticalPanel",
        "setCellHorizontalAlignment": "fn(widget: Widget, horizontalAlignment: HorizontalAlignment) -> VerticalPanel",
        "setCellVerticalAlignment": "fn(widget: Widget, verticalAlignment: VerticalAlignment) -> VerticalPanel",
        "setCellWidth": "fn(widget: Widget, width: string) -> VerticalPanel",
        "setHeight": "fn(height: string) -> VerticalPanel",
        "setHorizontalAlignment": "fn(horizontalAlignment: HorizontalAlignment) -> VerticalPanel",
        "setId": "fn(id: string) -> VerticalPanel",
        "setLayoutData": "fn(layout: Object) -> VerticalPanel",
        "setPixelSize": "fn(width: Integer, height: Integer) -> VerticalPanel",
        "setSize": "fn(width: string, height: string) -> VerticalPanel",
        "setSpacing": "fn(spacing: Integer) -> VerticalPanel",
        "setStyleAttribute": "fn(attribute: string, value: string) -> VerticalPanel",
        "setStyleAttributes": "fn(attributes: Object) -> VerticalPanel",
        "setStyleName": "fn(styleName: string) -> VerticalPanel",
        "setStylePrimaryName": "fn(styleName: string) -> VerticalPanel",
        "setTag": "fn(tag: string) -> VerticalPanel",
        "setTitle": "fn(title: string) -> VerticalPanel",
        "setVerticalAlignment": "fn(verticalAlignment: VerticalAlignment) -> VerticalPanel",
        "setVisible": "fn(visible: bool) -> VerticalPanel",
        "setWidth": "fn(width: string) -> VerticalPanel"
      },
      "Widget": {
        "getId": "fn() -> string",
        "getType": "fn() -> string"
      }
    }
  },
  "UiApp": "GoogleAppsScript.UI.UiApp",
  "!name": "google-apps-script.ui.d.ts"
}
