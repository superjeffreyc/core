{
  "dojox": {
    "grid": {
      "_EditManager": {
        "!type": "fn(inGrid: dojox.grid._Grid)",
        "prototype": {
          "info": "Object",
          "apply": "fn()",
          "applyCellEdit": "fn(inValue: ?, inCell: ?, inRowIndex: ?)",
          "applyRowEdit": "fn()",
          "cancel": "fn()",
          "cellFocus": "fn(inCell: ?, inRowIndex: number)",
          "destroy": "fn()",
          "dispatchEvent": "fn(e: ?) -> number",
          "editorApply": "fn()",
          "editorCancel": "fn()",
          "focusEditor": "fn()",
          "isEditCell": "fn(inRowIndex: number, inCellIndex: number) -> ?",
          "isEditing": "fn() -> ?",
          "isEditRow": "fn(inRowIndex: number) -> ?",
          "restore": "fn(inView: Object, inRowIndex: number)",
          "rowClick": "fn(e: ?)",
          "save": "fn(inRowIndex: number, inView: Object)",
          "setEditCell": "fn(inCell: Object, inRowIndex: number)",
          "start": "fn(inCell: ?, inRowIndex: ?, inEditing: ?)",
          "styleRow": "fn(inRow: ?)"
        }
      },
      "_Layout": {
        "!type": "fn(inGrid: ?)",
        "prototype": {
          "cells": "[?]",
          "defaultWidth": "string",
          "structure": "Object",
          "addCellDef": "fn(inRowIndex: ?, inCellIndex: ?, inDef: ?) -> ?",
          "addRowDef": "fn(inRowIndex: ?, inDef: ?) -> [?]",
          "addRowsDef": "fn(inDef: ?) -> [?]",
          "addViewDef": "fn(inDef: ?) -> Object",
          "moveColumn": "fn(sourceViewIndex: ?, destViewIndex: ?, cellIndex: ?, targetIndex: ?, before: ?)",
          "setColumnVisibility": "fn(columnIndex: ?, visible: ?) -> bool",
          "setStructure": "fn(inStructure: ?)"
        }
      },
      "_FocusManager": {
        "!type": "fn(inGrid: ?)",
        "prototype": {
          "focusClass": "string",
          "focusView": "Object",
          "tabbingOut": "bool",
          "blurHeader": "fn()",
          "colSizeAdjust": "fn(e: ?, colIdx: ?, delta: ?)",
          "destroy": "fn()",
          "doBlur": "fn(e: ?)",
          "doColHeaderBlur": "fn(e: ?)",
          "doColHeaderFocus": "fn(e: ?)",
          "doContextMenu": "fn(e: ?)",
          "doFocus": "fn(e: ?)",
          "doLastNodeBlur": "fn(e: ?)",
          "doLastNodeFocus": "fn(e: ?)",
          "findAndFocusGridCell": "fn() -> ?",
          "focusGrid": "fn(inSkipFocusCell: ?)",
          "focusGridView": "fn()",
          "focusHeader": "fn()",
          "getHeaderIndex": "fn() -> ?",
          "initFocusView": "fn()",
          "isFirstFocusCell": "fn() -> bool",
          "isFocusCell": "fn(inCell: Object, inRowIndex: number) -> ?",
          "isLastFocusCell": "fn() -> bool",
          "isNavHeader": "fn() -> ?",
          "isNoFocusCell": "fn() -> bool",
          "move": "fn(inRowDelta: number, inColDelta: number)",
          "next": "fn()",
          "nextKey": "fn(e: ?)",
          "previous": "fn()",
          "previousKey": "fn(e: ?)",
          "scrollIntoView": "fn() -> ?",
          "setFocusCell": "fn(inCell: Object, inRowIndex: number)",
          "setFocusIndex": "fn(inRowIndex: number, inCellIndex: number)",
          "styleRow": "fn(inRow: ?)",
          "tabOut": "fn(inFocusNode: ?)"
        }
      },
      "_Events": {
        "!type": "fn()",
        "prototype": {
          "cellOverClass": "string",
          "onApplyCellEdit": "fn(inValue: String, inRowIndex: number, inFieldIndex: number)",
          "onApplyEdit": "fn(inRowIndex: number)",
          "onCancelEdit": "fn(inRowIndex: number)",
          "onCanDeselect": "fn(inRowIndex: number) -> ?",
          "onCanSelect": "fn(inRowIndex: number) -> ?",
          "onCellClick": "fn(e: Event)",
          "onCellContextMenu": "fn(e: Event)",
          "onCellDblClick": "fn(e: Event)",
          "onCellFocus": "fn(inCell: Object, inRowIndex: number)",
          "onCellMouseDown": "fn(e: Event)",
          "onCellMouseOut": "fn(e: Event)",
          "onCellMouseOver": "fn(e: Event)",
          "onContentEvent": "fn(e: ?)",
          "onDeselected": "fn(inRowIndex: number)",
          "onHeaderCellClick": "fn(e: Event)",
          "onHeaderCellContextMenu": "fn(e: Event)",
          "onHeaderCellDblClick": "fn(e: Event)",
          "onHeaderCellMouseDown": "fn(e: Event)",
          "onHeaderCellMouseOut": "fn(e: Event)",
          "onHeaderCellMouseOver": "fn(e: Event)",
          "onHeaderClick": "fn(e: Event)",
          "onHeaderContextMenu": "fn(e: Event)",
          "onHeaderDblClick": "fn(e: Event)",
          "onHeaderEvent": "fn(e: ?)",
          "onHeaderMouseOut": "fn(e: Event)",
          "onHeaderMouseOver": "fn(e: Event)",
          "onKeyDown": "fn(e: ?)",
          "onKeyEvent": "fn(e: ?)",
          "onMouseDown": "fn(e: Event)",
          "onMouseDownRow": "fn(e: Event)",
          "onMouseOut": "fn(e: Event)",
          "onMouseOutRow": "fn(e: Event)",
          "onMouseOver": "fn(e: Event)",
          "onMouseOverRow": "fn(e: Event)",
          "onRowClick": "fn(e: Event)",
          "onRowContextMenu": "fn(e: Event)",
          "onRowDblClick": "fn(e: Event)",
          "onRowMouseDown": "fn(e: Event)",
          "onRowMouseOut": "fn(e: Event)",
          "onRowMouseOver": "fn(e: Event)",
          "onSelected": "fn(inRowIndex: number)",
          "onSelectionChanged": "fn()",
          "onStartEdit": "fn(inCell: Object, inRowIndex: number)",
          "onStyleRow": "fn(inRow: Object)"
        }
      },
      "_RowManager": {
        "!type": "fn(inGrid: ?)",
        "prototype": {
          "linesToEms": "number",
          "overRow": "number",
          "applyStyles": "fn(inRow: ?)",
          "isOver": "fn(inRowIndex: ?) -> bool",
          "prepareStylingRow": "fn(inRowIndex: ?, inRowNode: ?) -> Object",
          "setOverRow": "fn(inRowIndex: ?)",
          "styleRowNode": "fn(inRowIndex: ?, inRowNode: ?)",
          "updateStyles": "fn(inRowIndex: ?)"
        }
      },
      "_SelectionPreserver": {
        "!type": "fn(selection: ?)",
        "prototype": {
          "destroy": "fn()",
          "reset": "fn()"
        }
      },
      "_Scroller": {
        "!type": "fn(inContentNodes: ?)",
        "prototype": {
          "averageRowHeight": "number",
          "contentNode": "Object",
          "defaultPageHeight": "number",
          "defaultRowHeight": "number",
          "dummy": "number",
          "firstVisibleRow": "number",
          "keepPages": "number",
          "keepRows": "number",
          "lastVisibleRow": "number",
          "pacifying": "bool",
          "pacifyTicks": "number",
          "page": "number",
          "pageCount": "number",
          "pageTop": "number",
          "rowCount": "number",
          "scrollboxNode": "Object",
          "windowHeight": "number",
          "buildPage": "fn(inPageIndex: ?, inReuseNode: ?, inPos: ?)",
          "calcLastPageHeight": "fn() -> number",
          "createPageNode": "fn() -> ?",
          "destroy": "fn()",
          "destroyPage": "fn(inPageIndex: ?)",
          "doPacify": "fn() -> bool",
          "endPacify": "fn()",
          "findPage": "fn(inTop: ?)",
          "findScrollTop": "fn(inRow: ?) -> number",
          "findTopRow": "fn(inScrollTop: ?) -> number",
          "getDefaultNodes": "fn() -> Object",
          "getDefaultPageNode": "fn(inPageIndex: ?) -> ?",
          "getFirstVisibleRow": "fn(inPage: ?, inPageTop: number, inScrollTop: ?) -> ?",
          "getLastPageRow": "fn(inPage: ?) -> number",
          "getLastVisibleRow": "fn(inPage: ?, inBottom: number, inScrollBottom: ?) -> number",
          "getPageHeight": "fn(inPageIndex: ?) -> ?",
          "getPageNodePosition": "fn(inNode: ?) -> ?",
          "getPageRow": "fn(inPage: ?) -> number",
          "getScrollBottom": "fn(inTop: ?) -> number",
          "init": "fn(inRowCount: ?, inKeepRows: ?, inRowsPerPage: ?)",
          "installPage": "fn(inPageIndex: ?)",
          "invalidate": "fn()",
          "invalidateNodes": "fn()",
          "invalidatePageNode": "fn(inPageIndex: ?, inNodes: ?) -> ?",
          "measurePage": "fn(inPageIndex: ?) -> ?",
          "needPage": "fn(inPageIndex: ?, inPos: ?) -> ?",
          "onscroll": "fn()",
          "pacify": "fn(inShouldPacify: ?)",
          "pageExists": "fn(inPageIndex: ?) -> ?",
          "popPage": "fn() -> ?",
          "positionPage": "fn(inPageIndex: ?, inPos: ?)",
          "positionPageNode": "fn(inNode: ?, inPos: ?)",
          "preparePage": "fn(inPageIndex: ?, inReuseNode: ?)",
          "processEvent": "fn(e: ?) -> ?",
          "processNodeEvent": "fn(e: ?, inNode: ?) -> bool",
          "pushPage": "fn(inPageIndex: ?) -> ?",
          "removePage": "fn(inPageIndex: ?)",
          "removeRow": "fn(inRowIndex: ?)",
          "renderPage": "fn(inPageIndex: ?)",
          "renderRow": "fn(inRowIndex: ?, inPageNode: ?)",
          "repositionPages": "fn(inPageIndex: ?)",
          "resize": "fn()",
          "rowHeightChanged": "fn(inRowIndex: ?, fromAsynRendering: ?)",
          "scroll": "fn(inTop: ?)",
          "setContentNodes": "fn(inNodes: ?)",
          "setKeepInfo": "fn(inKeepRows: ?)",
          "setPacifying": "fn(inPacifying: ?)",
          "startPacify": "fn()",
          "updateContentHeight": "fn(inDh: ?)",
          "updatePageHeight": "fn(inPageIndex: ?, fromBuild: ?, fromAsynRendering: ?) -> ?",
          "updateRowCount": "fn(inRowCount: ?)"
        }
      },
      "_Grid": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attachScope": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret",
          "attributeMap": "Object",
          "autoHeight": "bool",
          "autoRender": "bool",
          "autoWidth": "bool",
          "baseClass": "string",
          "cellOverClass": "string",
          "class": "string",
          "classTag": "string",
          "columnReordering": "bool",
          "containerNode": "HTMLElement",
          "defaultHeight": "string",
          "delayScroll": "bool",
          "dir": "string",
          "domNode": "HTMLElement",
          "editable": "bool",
          "elasticView": "number",
          "errorMessage": "string",
          "escapeHTMLInData": "bool",
          "fastScroll": "bool",
          "focused": "bool",
          "formatterScope": "Object",
          "headerMenu": "Object",
          "height": "string",
          "id": "string",
          "initialWidth": "string",
          "invalidated": "Object",
          "keepRows": "number",
          "lang": "string",
          "loadingMessage": "string",
          "noDataMessage": "string",
          "observer": "string",
          "ownerDocument": "Object",
          "placeholderLabel": "string",
          "rowCount": "number",
          "rowHeight": "number",
          "rowSelector": "bool",
          "rowsPerPage": "number",
          "scrollRedrawThreshold": "number",
          "searchContainerNode": "bool",
          "selectable": "bool",
          "selectionMode": "string",
          "singleClickEdit": "bool",
          "sortInfo": "number",
          "srcNodeRef": "HTMLElement",
          "structure": "Object",
          "style": "string",
          "summary": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "updating": "bool",
          "addRow": "fn()",
          "attr": "fn(name: String, value: Object) -> ?",
          "beginUpdate": "fn()",
          "buildRendering": "fn()",
          "buildViews": "fn()",
          "canSort": "fn(inSortInfo: number) -> bool",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "createLayout": "fn()",
          "createManagers": "fn()",
          "createScroller": "fn()",
          "createSelection": "fn()",
          "createView": "fn(inClass: ?, idx: ?) -> ?",
          "createViews": "fn()",
          "defaultUpdate": "fn()",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn()",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "dispatchContentEvent": "fn(e: ?)",
          "dispatchHeaderEvent": "fn(e: ?)",
          "dispatchKeyEvent": "fn(e: ?)",
          "doApplyCellEdit": "fn(inValue: ?, inRowIndex: ?, inFieldIndex: ?)",
          "doApplyEdit": "fn(inRowIndex: ?)",
          "doCancelEdit": "fn(inRowIndex: ?)",
          "doclick": "fn(e: ?)",
          "docontextmenu": "fn(e: ?)",
          "dodblclick": "fn(e: ?)",
          "doheaderclick": "fn(e: ?)",
          "doheadercontextmenu": "fn(e: ?)",
          "doheaderdblclick": "fn(e: ?)",
          "dokeydown": "fn(e: ?)",
          "doKeyEvent": "fn(e: ?)",
          "doStartEdit": "fn(inCell: ?, inRowIndex: ?)",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "endUpdate": "fn()",
          "finishScrollJob": "fn()",
          "getCell": "fn(inIndex: number) -> ?",
          "getCellName": "fn(inCell: ?) -> String",
          "getCellNodeTextDirection": "fn(inColIndex: ?, inRowIndex: ?) -> ?",
          "getChildren": "fn() -> [?]",
          "getColumnTogglingItems": "fn() -> ?",
          "getDescendants": "fn() -> [?]",
          "getItem": "fn(inRowIndex: ?) -> ?",
          "getParent": "fn() -> ?",
          "getRowNode": "fn(inRowIndex: ?) -> ?",
          "getSortAsc": "fn(inSortInfo: ?) -> ?",
          "getSortIndex": "fn(inSortInfo: ?) -> number",
          "hasLayout": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "markupFactory": "fn(props: ?, node: ?, ctor: ?, cellFunc: ?)",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "postrender": "fn()",
          "postresize": "fn()",
          "prerender": "fn()",
          "removeSelectedRows": "fn()",
          "render": "fn()",
          "resize": "fn(changeSize: ?, resultSize: ?)",
          "rowHeightChanged": "fn(inRowIndex: number)",
          "scrollTo": "fn(inTop: number)",
          "scrollToRow": "fn(inRowIndex: number)",
          "setAttribute": "fn(attr: String, value: ?)",
          "setCellNodeTextDirection": "fn(inColIndex: ?, inRowIndex: ?, textDir: ?)",
          "setCellWidth": "fn(inIndex: ?, inUnitWidth: ?)",
          "setHeaderMenu": "fn(menu: dijit.Menu)",
          "setScrollTop": "fn(inTop: ?)",
          "setSortIndex": "fn(inIndex: number, inAsc: bool)",
          "setSortInfo": "fn(inSortInfo: ?)",
          "setStructure": "fn(inStructure: Object)",
          "setupHeaderMenu": "fn()",
          "showMessage": "fn(message: ?)",
          "sizeChange": "fn()",
          "sort": "fn()",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "textSizeChanged": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "update": "fn()",
          "updateRow": "fn(inRowIndex: number)",
          "updateRowCount": "fn(inRowCount: number)",
          "updateRows": "fn(startIndex: number, howMany: number)",
          "updateRowStyles": "fn(inRowIndex: ?)",
          "getCachedTemplate": "fn() -> ?",
          "onApplyCellEdit": "fn(inValue: String, inRowIndex: number, inFieldIndex: number)",
          "onApplyEdit": "fn(inRowIndex: number)",
          "onBlur": "fn()",
          "onCancelEdit": "fn(inRowIndex: number)",
          "onCanDeselect": "fn(inRowIndex: number) -> ?",
          "onCanSelect": "fn(inRowIndex: number) -> ?",
          "onCellClick": "fn(e: Event)",
          "onCellContextMenu": "fn(e: Event)",
          "onCellDblClick": "fn(e: Event)",
          "onCellFocus": "fn(inCell: Object, inRowIndex: number)",
          "onCellMouseDown": "fn(e: Event)",
          "onCellMouseOut": "fn(e: Event)",
          "onCellMouseOver": "fn(e: Event)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onContentEvent": "fn(e: ?)",
          "onDblClick": "fn(event: ?)",
          "onDeselected": "fn(inRowIndex: number)",
          "onFocus": "fn()",
          "onHeaderCellClick": "fn(e: Event)",
          "onHeaderCellContextMenu": "fn(e: Event)",
          "onHeaderCellDblClick": "fn(e: Event)",
          "onHeaderCellMouseDown": "fn(e: Event)",
          "onHeaderCellMouseOut": "fn(e: Event)",
          "onHeaderCellMouseOver": "fn(e: Event)",
          "onHeaderClick": "fn(e: Event)",
          "onHeaderContextMenu": "fn(e: Event)",
          "onHeaderDblClick": "fn(e: Event)",
          "onHeaderEvent": "fn(e: ?)",
          "onHeaderMouseOut": "fn(e: Event)",
          "onHeaderMouseOver": "fn(e: Event)",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyEvent": "fn(e: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseDownRow": "fn(e: Event)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOutRow": "fn(e: Event)",
          "onMouseOver": "fn(event: ?)",
          "onMouseOverRow": "fn(e: Event)",
          "onMouseUp": "fn(event: ?)",
          "onMoveColumn": "fn()",
          "onResizeColumn": "fn(cellIdx: number)",
          "onRowClick": "fn(e: Event)",
          "onRowContextMenu": "fn(e: Event)",
          "onRowDblClick": "fn(e: Event)",
          "onRowMouseDown": "fn(e: Event)",
          "onRowMouseOut": "fn(e: Event)",
          "onRowMouseOver": "fn(e: Event)",
          "onSelected": "fn(inRowIndex: number)",
          "onSelectionChanged": "fn()",
          "onShow": "fn()",
          "onStartEdit": "fn(inCell: Object, inRowIndex: number)",
          "onStyleRow": "fn(inRow: Object)"
        }
      },
      "_ViewManager": {
        "!type": "fn(inGrid: ?)",
        "prototype": {
          "defaultWidth": "number",
          "views": "[?]",
          "addView": "fn(inView: ?)",
          "arrange": "fn(l: number, w: number) -> number",
          "destroyViews": "fn()",
          "findClient": "fn(inAutoWidth: ?) -> ?",
          "forEach": "fn(inCallback: ?)",
          "getContentNodes": "fn() -> [?]",
          "getFirstScrollingView": "fn() -> ?",
          "getViewWidth": "fn(inIndex: ?) -> ?",
          "measureContent": "fn() -> number",
          "measureHeader": "fn() -> number",
          "normalizeHeaderNodeHeight": "fn()",
          "normalizeRowNodeHeights": "fn(inRowNodes: ?)",
          "render": "fn()",
          "renderRow": "fn(inRowIndex: ?, inNodes: ?, skipRenorm: ?)",
          "renormalizeRow": "fn(inRowIndex: ?)",
          "resetHeaderNodeHeight": "fn()",
          "resize": "fn()",
          "rowRemoved": "fn(inRowIndex: ?)",
          "setScrollTop": "fn(inTop: ?) -> ?",
          "updateRow": "fn(inRowIndex: ?, skipRenorm: ?)",
          "updateRowStyles": "fn(inRowIndex: ?)",
          "onEach": "fn(inMethod: ?, inArgs: ?)"
        }
      },
      "_TreeView": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attachScope": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret54",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "classTag": "string",
          "containerNode": "HTMLElement",
          "defaultWidth": "string",
          "dir": "string",
          "domNode": "HTMLElement",
          "firstScroll": "number",
          "focused": "bool",
          "id": "string",
          "lang": "string",
          "lastTop": "number",
          "marginBottom": "number",
          "observer": "string",
          "ownerDocument": "Object",
          "rowPad": "number",
          "searchContainerNode": "bool",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "viewWidth": "string",
          "adaptHeight": "fn(minusScroll: ?)",
          "adaptWidth": "fn()",
          "attr": "fn(name: String, value: Object) -> ?",
          "buildRendering": "fn()",
          "buildRow": "fn(inRowIndex: ?, inRowNode: ?)",
          "buildRowContent": "fn(inRowIndex: ?, inRowNode: ?)",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "convertColPctToFixed": "fn() -> bool",
          "createRowNode": "fn(inRowIndex: ?) -> ?",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn()",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "dispatchContentEvent": "fn(e: ?) -> ?",
          "dispatchHeaderEvent": "fn(e: ?) -> ?",
          "doContentEvent": "fn(e: ?)",
          "doHeaderEvent": "fn(e: ?)",
          "doscroll": "fn(inEvent: ?)",
          "doStyleRowNode": "fn(inRowIndex: ?, inRowNode: ?)",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "focus": "fn()",
          "getCellNode": "fn(inRowIndex: ?, inCellIndex: ?) -> ?",
          "getChildren": "fn() -> [?]",
          "getColumnsWidth": "fn() -> number",
          "getContentWidth": "fn() -> String",
          "getDescendants": "fn() -> [?]",
          "getHeaderCellNode": "fn(inCellIndex: ?) -> ?",
          "getParent": "fn() -> ?",
          "getRowNode": "fn(inRowIndex: ?) -> ?",
          "getScrollbarWidth": "fn() -> ?",
          "getWidth": "fn() -> String",
          "hasHScrollbar": "fn(reset: ?) -> bool",
          "hasVScrollbar": "fn(reset: ?) -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "render": "fn()",
          "renderHeader": "fn()",
          "renderRow": "fn(inRowIndex: ?) -> ?",
          "resize": "fn()",
          "rowRemoved": "fn(inRowIndex: ?)",
          "setAttribute": "fn(attr: String, value: ?)",
          "setColumnsWidth": "fn(width: ?)",
          "setColWidth": "fn(inIndex: ?, inWidth: ?)",
          "setScrollTop": "fn(inTop: ?) -> ?",
          "setSize": "fn(w: ?, h: ?)",
          "setStructure": "fn(inStructure: ?)",
          "startup": "fn()",
          "styleRow": "fn(inRowIndex: ?, inRowNode: ?)",
          "styleRowNode": "fn(inRowIndex: ?, inRowNode: ?)",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "testFlexCells": "fn() -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "update": "fn()",
          "updateRow": "fn(inRowIndex: ?) -> ?",
          "updateRowStyles": "fn(inRowIndex: ?)",
          "updateStructure": "fn()",
          "getCachedTemplate": "fn() -> ?",
          "onAfterRow": "fn(inRowIndex: ?, cells: ?, inRowNode: ?)",
          "onBeforeRow": "fn(inRowIndex: ?, cells: ?)",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "_Selector": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attachScope": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret81",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "classTag": "string",
          "containerNode": "HTMLElement",
          "defaultWidth": "string",
          "dir": "string",
          "domNode": "HTMLElement",
          "firstScroll": "number",
          "focused": "bool",
          "id": "string",
          "inputType": "string",
          "lang": "string",
          "lastTop": "number",
          "marginBottom": "number",
          "noscroll": "bool",
          "observer": "string",
          "ownerDocument": "Object",
          "padBorderWidth": "number",
          "rowPad": "number",
          "searchContainerNode": "bool",
          "selectionMode": "string",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "viewWidth": "string",
          "adaptHeight": "fn(minusScroll: ?)",
          "adaptWidth": "fn()",
          "attr": "fn(name: String, value: Object) -> ?",
          "buildRendering": "fn()",
          "buildRow": "fn(inRowIndex: ?, inRowNode: ?)",
          "buildRowContent": "fn(inRowIndex: ?, inRowNode: ?)",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "convertColPctToFixed": "fn() -> bool",
          "createRowNode": "fn(inRowIndex: ?) -> ?",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn()",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "dispatchContentEvent": "fn(e: ?) -> ?",
          "dispatchHeaderEvent": "fn(e: ?) -> ?",
          "doContentEvent": "fn(e: ?)",
          "doHeaderEvent": "fn(e: ?)",
          "doscroll": "fn(inEvent: ?)",
          "doStyleRowNode": "fn(inRowIndex: ?, inRowNode: ?)",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "focus": "fn()",
          "getCellNode": "fn(inRowIndex: ?, inCellIndex: ?) -> ?",
          "getChildren": "fn() -> [?]",
          "getColumnsWidth": "fn() -> number",
          "getContentWidth": "fn() -> String",
          "getDescendants": "fn() -> [?]",
          "getHeaderCellNode": "fn(inCellIndex: ?) -> ?",
          "getParent": "fn() -> ?",
          "getRowNode": "fn(inRowIndex: ?) -> ?",
          "getScrollbarWidth": "fn() -> ?",
          "getWidth": "fn() -> ?",
          "hasHScrollbar": "fn(reset: ?) -> bool",
          "hasVScrollbar": "fn(reset: ?) -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "render": "fn()",
          "renderHeader": "fn()",
          "renderRow": "fn(inRowIndex: ?) -> ?",
          "resize": "fn()",
          "rowRemoved": "fn(inRowIndex: ?)",
          "setAttribute": "fn(attr: String, value: ?)",
          "setColumnsWidth": "fn(width: ?)",
          "setColWidth": "fn(inIndex: ?, inWidth: ?)",
          "setScrollTop": "fn(inTop: ?) -> ?",
          "setSize": "fn(w: ?, h: ?)",
          "setStructure": "fn(s: ?)",
          "startup": "fn()",
          "styleRow": "fn(inRowIndex: ?, inRowNode: ?)",
          "styleRowNode": "fn(inRowIndex: ?, inRowNode: ?)",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "testFlexCells": "fn() -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "update": "fn()",
          "updateRow": "fn(inRowIndex: ?) -> ?",
          "updateRowStyles": "fn(inRowIndex: ?)",
          "updateStructure": "fn()",
          "getCachedTemplate": "fn() -> ?",
          "onAfterRow": "fn(inRowIndex: ?, cells: [Object], inRowNode: ?)",
          "onBeforeRow": "fn(inRowIndex: ?, cells: ?)",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onDeselected": "fn(inIndex: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onSelected": "fn(inIndex: ?)",
          "onShow": "fn()"
        }
      },
      "_RowSelector": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attachScope": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret112",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "classTag": "string",
          "containerNode": "HTMLElement",
          "defaultWidth": "string",
          "dir": "string",
          "domNode": "HTMLElement",
          "firstScroll": "number",
          "focused": "bool",
          "id": "string",
          "lang": "string",
          "lastTop": "number",
          "marginBottom": "number",
          "noscroll": "bool",
          "observer": "string",
          "ownerDocument": "Object",
          "padBorderWidth": "number",
          "rowPad": "number",
          "searchContainerNode": "bool",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "viewWidth": "string",
          "adaptHeight": "fn(minusScroll: ?)",
          "adaptWidth": "fn()",
          "attr": "fn(name: String, value: Object) -> ?",
          "buildRendering": "fn()",
          "buildRow": "fn(inRowIndex: ?, inRowNode: ?)",
          "buildRowContent": "fn(inRowIndex: ?, inRowNode: ?)",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "convertColPctToFixed": "fn() -> bool",
          "createRowNode": "fn(inRowIndex: ?) -> ?",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn()",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "dispatchContentEvent": "fn(e: ?) -> ?",
          "dispatchHeaderEvent": "fn(e: ?) -> ?",
          "doContentEvent": "fn(e: ?)",
          "doHeaderEvent": "fn(e: ?)",
          "domouseout": "fn(e: ?)",
          "domouseover": "fn(e: ?)",
          "doscroll": "fn(inEvent: ?)",
          "doStyleRowNode": "fn(inRowIndex: ?, inRowNode: ?)",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "focus": "fn()",
          "getCellNode": "fn(inRowIndex: ?, inCellIndex: ?) -> ?",
          "getChildren": "fn() -> [?]",
          "getColumnsWidth": "fn() -> number",
          "getContentWidth": "fn() -> String",
          "getDescendants": "fn() -> [?]",
          "getHeaderCellNode": "fn(inCellIndex: ?) -> ?",
          "getParent": "fn() -> ?",
          "getRowNode": "fn(inRowIndex: ?) -> ?",
          "getScrollbarWidth": "fn() -> ?",
          "getWidth": "fn() -> ?",
          "hasHScrollbar": "fn(reset: ?) -> bool",
          "hasVScrollbar": "fn(reset: ?) -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "render": "fn()",
          "renderHeader": "fn()",
          "renderRow": "fn(inRowIndex: ?) -> ?",
          "resize": "fn()",
          "rowRemoved": "fn(inRowIndex: ?)",
          "setAttribute": "fn(attr: String, value: ?)",
          "setColumnsWidth": "fn(width: ?)",
          "setColWidth": "fn(inIndex: ?, inWidth: ?)",
          "setScrollTop": "fn(inTop: ?) -> ?",
          "setSize": "fn(w: ?, h: ?)",
          "setStructure": "fn(inStructure: ?)",
          "startup": "fn()",
          "styleRow": "fn(inRowIndex: ?, inRowNode: ?)",
          "styleRowNode": "fn(inRowIndex: ?, inRowNode: ?)",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "testFlexCells": "fn() -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "update": "fn()",
          "updateRow": "fn()",
          "updateRowStyles": "fn(inRowIndex: ?)",
          "updateStructure": "fn()",
          "getCachedTemplate": "fn() -> ?",
          "onAfterRow": "fn(inRowIndex: ?, cells: [Object], inRowNode: ?)",
          "onBeforeRow": "fn(inRowIndex: ?, cells: ?)",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "DataSelection": {
        "!type": "fn(grid: ?)",
        "prototype": {
          "mode": "string",
          "rangeStartIndex": "number",
          "selected": "Object",
          "selectedIndex": "number",
          "updating": "number",
          "addToSelection": "fn(inItemOrIndex: ?)",
          "clear": "fn()",
          "clickSelect": "fn(inIndex: ?, inCtrlKey: ?, inShiftKey: ?)",
          "clickSelectEvent": "fn(e: ?)",
          "deselect": "fn(inItemOrIndex: ?)",
          "deselectAll": "fn(inItemOrIndex: ?)",
          "deselectRange": "fn(inFrom: ?, inTo: ?)",
          "destroy": "fn()",
          "getFirstSelected": "fn() -> ?",
          "getNextSelected": "fn(inPrev: ?) -> ?",
          "getSelected": "fn() -> [?]",
          "getSelectedCount": "fn() -> number",
          "insert": "fn(inIndex: ?)",
          "isSelected": "fn(inIndex: ?) -> ?",
          "remove": "fn(inIndex: ?)",
          "select": "fn(inIndex: ?)",
          "selectRange": "fn(inFrom: ?, inTo: ?)",
          "setMode": "fn(mode: ?)",
          "setSelected": "fn(inIndex: ?, inSelect: ?)",
          "toggleSelect": "fn(inIndex: ?)",
          "onCanDeselect": "fn(inIndex: ?) -> ?",
          "onCanSelect": "fn(inIndex: ?) -> ?",
          "onChanged": "fn()",
          "onChanging": "fn()",
          "onDeselected": "fn(inIndex: ?)",
          "onSelected": "fn(inIndex: ?)"
        }
      },
      "_View": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attachScope": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret141",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "classTag": "string",
          "containerNode": "HTMLElement",
          "defaultWidth": "string",
          "dir": "string",
          "domNode": "HTMLElement",
          "firstScroll": "number",
          "focused": "bool",
          "id": "string",
          "lang": "string",
          "lastTop": "number",
          "marginBottom": "number",
          "observer": "string",
          "ownerDocument": "Object",
          "rowPad": "number",
          "searchContainerNode": "bool",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "viewWidth": "string",
          "adaptHeight": "fn(minusScroll: ?)",
          "adaptWidth": "fn()",
          "attr": "fn(name: String, value: Object) -> ?",
          "buildRendering": "fn()",
          "buildRow": "fn(inRowIndex: ?, inRowNode: ?)",
          "buildRowContent": "fn(inRowIndex: ?, inRowNode: ?)",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "convertColPctToFixed": "fn() -> bool",
          "createRowNode": "fn(inRowIndex: ?) -> ?",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn()",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "dispatchContentEvent": "fn(e: ?) -> ?",
          "dispatchHeaderEvent": "fn(e: ?) -> ?",
          "doContentEvent": "fn(e: ?)",
          "doHeaderEvent": "fn(e: ?)",
          "doscroll": "fn(inEvent: ?)",
          "doStyleRowNode": "fn(inRowIndex: ?, inRowNode: ?)",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "focus": "fn()",
          "getCellNode": "fn(inRowIndex: ?, inCellIndex: ?) -> ?",
          "getChildren": "fn() -> [?]",
          "getColumnsWidth": "fn() -> number",
          "getContentWidth": "fn() -> String",
          "getDescendants": "fn() -> [?]",
          "getHeaderCellNode": "fn(inCellIndex: ?) -> ?",
          "getParent": "fn() -> ?",
          "getRowNode": "fn(inRowIndex: ?) -> ?",
          "getScrollbarWidth": "fn() -> ?",
          "getWidth": "fn() -> String",
          "hasHScrollbar": "fn(reset: ?) -> bool",
          "hasVScrollbar": "fn(reset: ?) -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "render": "fn()",
          "renderHeader": "fn()",
          "renderRow": "fn(inRowIndex: ?) -> ?",
          "resize": "fn()",
          "rowRemoved": "fn(inRowIndex: ?)",
          "setAttribute": "fn(attr: String, value: ?)",
          "setColumnsWidth": "fn(width: ?)",
          "setColWidth": "fn(inIndex: ?, inWidth: ?)",
          "setScrollTop": "fn(inTop: ?) -> ?",
          "setSize": "fn(w: ?, h: ?)",
          "setStructure": "fn(inStructure: ?)",
          "startup": "fn()",
          "styleRow": "fn(inRowIndex: ?, inRowNode: ?)",
          "styleRowNode": "fn(inRowIndex: ?, inRowNode: ?)",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "testFlexCells": "fn() -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "update": "fn()",
          "updateRow": "fn(inRowIndex: ?) -> ?",
          "updateRowStyles": "fn(inRowIndex: ?)",
          "updateStructure": "fn()",
          "getCachedTemplate": "fn() -> ?",
          "onAfterRow": "fn(inRowIndex: ?, cells: [Object], inRowNode: ?)",
          "onBeforeRow": "fn(inRowIndex: ?, cells: ?)",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "LazyTreeGridStoreModel": {
        "!type": "fn(args: Object)",
        "prototype": {
          "childrenAttrs": "Object",
          "deferItemLoadingUntilExpand": "bool",
          "labelAttr": "string",
          "newItemIdAttr": "string",
          "query": "string",
          "root": "Object",
          "rootId": "string",
          "rootLabel": "string",
          "serverStore": "bool",
          "store": "Object",
          "destroy": "fn()",
          "fetchItemByIdentity": "fn(keywordArgs: Object)",
          "getChildren": "fn(parentItem: dojo.data.api.Item, onComplete: ?, onError: Function, queryObj?: Object)",
          "getIdentity": "fn(item: ?) -> ?",
          "getLabel": "fn(item: ?) -> ?",
          "getRoot": "fn(onItem: ?, onError: ?)",
          "isItem": "fn(something: ?) -> bool",
          "mayHaveChildren": "fn(item: dojo.data.api.Item) -> ?",
          "newItem": "fn(args: dijit.tree.dndSource.__Item, parent: ?, insertIndex: number) -> ?",
          "pasteItem": "fn(childItem: ?, oldParentItem: ?, newParentItem: ?, bCopy: bool, insertIndex: number)",
          "onAddToRoot": "fn(item: ?)",
          "onChange": "fn(item: dojo.data.api.Item)",
          "onChildrenChange": "fn(parent: dojo.data.api.Item, newChildrenList: [dojo.data.api.Item])",
          "onDelete": "fn(item: dojo.data.api.Item)",
          "onDeleteItem": "fn(item: ?)",
          "onLeaveRoot": "fn(item: ?)",
          "onNewItem": "fn(item: ?, parentInfo: ?)",
          "onNewRootItem": "fn(args: dijit.tree.dndSource.__Item)",
          "onSetItem": "fn(item: ?, attribute: String, oldValue: Object, newValue: Object)"
        }
      },
      "Selection": {
        "!type": "fn(inGrid: ?)",
        "prototype": {
          "mode": "string",
          "rangeStartIndex": "number",
          "selected": "Object",
          "selectedIndex": "number",
          "updating": "number",
          "addToSelection": "fn(inIndex: ?)",
          "clear": "fn()",
          "clickSelect": "fn(inIndex: ?, inCtrlKey: ?, inShiftKey: ?)",
          "clickSelectEvent": "fn(e: ?)",
          "deselect": "fn(inIndex: ?)",
          "deselectAll": "fn(inExcept: ?)",
          "deselectRange": "fn(inFrom: ?, inTo: ?)",
          "getFirstSelected": "fn() -> number",
          "getNextSelected": "fn(inPrev: ?) -> number",
          "getSelected": "fn() -> [?]",
          "getSelectedCount": "fn() -> number",
          "insert": "fn(inIndex: ?)",
          "isSelected": "fn(inIndex: ?) -> ?",
          "remove": "fn(inIndex: ?)",
          "select": "fn(inIndex: ?)",
          "selectRange": "fn(inFrom: ?, inTo: ?)",
          "setMode": "fn(mode: ?)",
          "setSelected": "fn(inIndex: ?, inSelect: ?)",
          "toggleSelect": "fn(inIndex: ?)",
          "onCanDeselect": "fn(inIndex: ?) -> ?",
          "onCanSelect": "fn(inIndex: ?) -> ?",
          "onChanged": "fn()",
          "onChanging": "fn()",
          "onDeselected": "fn(inIndex: ?)",
          "onSelected": "fn(inIndex: ?)"
        }
      },
      "TreeSelection": {
        "!type": "fn(grid: ?)",
        "prototype": {
          "mode": "string",
          "rangeStartIndex": "number",
          "selected": "Object",
          "selectedIndex": "number",
          "updating": "number",
          "addToSelection": "fn(inItemOrIndex: ?)",
          "clear": "fn()",
          "clickSelect": "fn(inIndex: ?, inCtrlKey: ?, inShiftKey: ?)",
          "clickSelectEvent": "fn(e: ?)",
          "deselect": "fn(inItemOrIndex: ?)",
          "deselectAll": "fn(inItemOrIndex: ?)",
          "deselectRange": "fn(inFrom: ?, inTo: ?)",
          "destroy": "fn()",
          "getFirstSelected": "fn() -> ?",
          "getNextSelected": "fn(inPrev: ?) -> ?",
          "getSelected": "fn() -> [?]",
          "getSelectedCount": "fn() -> number",
          "insert": "fn(inIndex: ?)",
          "isSelected": "fn(inIndex: ?) -> ?",
          "remove": "fn(inIndex: ?)",
          "select": "fn(inIndex: ?)",
          "selectRange": "fn(inFrom: ?, inTo: ?)",
          "setMode": "fn(mode: ?)",
          "setSelected": "fn(inIndex: ?, inSelect: ?)",
          "toggleSelect": "fn(inIndex: ?)",
          "onCanDeselect": "fn(inIndex: ?) -> ?",
          "onCanSelect": "fn(inIndex: ?) -> ?",
          "onChanged": "fn()",
          "onChanging": "fn()",
          "onDeselected": "fn(inIndex: ?)",
          "onSelected": "fn(inIndex: ?)"
        }
      },
      "DataGrid": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attachScope": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret168",
          "attributeMap": "Object",
          "autoHeight": "bool",
          "autoRender": "bool",
          "autoWidth": "bool",
          "baseClass": "string",
          "cellOverClass": "string",
          "class": "string",
          "classTag": "string",
          "columnReordering": "bool",
          "containerNode": "HTMLElement",
          "defaultHeight": "string",
          "delayScroll": "bool",
          "dir": "string",
          "domNode": "HTMLElement",
          "editable": "bool",
          "elasticView": "number",
          "errorMessage": "string",
          "escapeHTMLInData": "bool",
          "fastScroll": "bool",
          "fetchText": "string",
          "focused": "bool",
          "formatterScope": "Object",
          "headerMenu": "Object",
          "height": "string",
          "id": "string",
          "initialWidth": "string",
          "invalidated": "Object",
          "items": "Object",
          "keepRows": "number",
          "keepSelection": "bool",
          "lang": "string",
          "loadingMessage": "string",
          "noDataMessage": "string",
          "observer": "string",
          "ownerDocument": "Object",
          "placeholderLabel": "string",
          "query": "Object",
          "queryOptions": "Object",
          "rowCount": "number",
          "rowHeight": "number",
          "rowSelector": "bool",
          "rowsPerPage": "number",
          "scrollRedrawThreshold": "number",
          "searchContainerNode": "bool",
          "selectable": "bool",
          "selectionMode": "string",
          "singleClickEdit": "bool",
          "sortFields": "Object",
          "sortInfo": "number",
          "srcNodeRef": "HTMLElement",
          "store": "Object",
          "structure": "Object",
          "style": "string",
          "summary": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "updateDelay": "number",
          "updating": "bool",
          "addRow": "fn()",
          "attr": "fn(name: String, value: Object) -> ?",
          "beginUpdate": "fn()",
          "buildRendering": "fn()",
          "buildViews": "fn()",
          "canEdit": "fn(inCell: ?, inRowIndex: ?) -> ?",
          "canSort": "fn() -> bool",
          "cell_markupFactory": "fn(cellFunc: ?, node: ?, cellDef: ?)",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "createLayout": "fn()",
          "createManagers": "fn()",
          "createScroller": "fn()",
          "createSelection": "fn()",
          "createView": "fn(inClass: ?, idx: ?) -> ?",
          "createViews": "fn()",
          "defaultUpdate": "fn()",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn()",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "dispatchContentEvent": "fn(e: ?)",
          "dispatchHeaderEvent": "fn(e: ?)",
          "dispatchKeyEvent": "fn(e: ?)",
          "doApplyCellEdit": "fn(inValue: ?, inRowIndex: ?, inAttrName: ?)",
          "doApplyEdit": "fn(inRowIndex: ?, inDataAttr?: ?)",
          "doCancelEdit": "fn(inRowIndex: ?)",
          "doclick": "fn(e: ?)",
          "docontextmenu": "fn(e: ?)",
          "dodblclick": "fn(e: ?)",
          "doheaderclick": "fn(e: ?)",
          "doheadercontextmenu": "fn(e: ?)",
          "doheaderdblclick": "fn(e: ?)",
          "dokeydown": "fn(e: ?)",
          "doKeyEvent": "fn(e: ?)",
          "doStartEdit": "fn(inCell: ?, inRowIndex: ?)",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "endUpdate": "fn()",
          "filter": "fn(query: ?, reRender: ?)",
          "finishScrollJob": "fn()",
          "getCell": "fn(inIndex: number) -> ?",
          "getCellName": "fn(inCell: ?) -> ?",
          "getCellNodeTextDirection": "fn(inColIndex: ?, inRowIndex: ?) -> ?",
          "getChildren": "fn() -> [?]",
          "getColumnTogglingItems": "fn() -> ?",
          "getDescendants": "fn() -> [?]",
          "getItem": "fn(idx: ?) -> ?",
          "getItemIndex": "fn(item: ?) -> ?",
          "getParent": "fn() -> ?",
          "getRowNode": "fn(inRowIndex: ?) -> ?",
          "getSortAsc": "fn(inSortInfo: ?) -> ?",
          "getSortIndex": "fn(inSortInfo: ?) -> number",
          "getSortProps": "fn() -> ?",
          "hasLayout": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "markupFactory": "fn(props: ?, node: ?, ctor: ?, cellFunc: ?)",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "postrender": "fn()",
          "postresize": "fn()",
          "prerender": "fn()",
          "removeSelectedRows": "fn()",
          "render": "fn()",
          "resize": "fn(changeSize: ?, resultSize: ?)",
          "rowHeightChanged": "fn(inRowIndex: number)",
          "scrollTo": "fn(inTop: number)",
          "scrollToRow": "fn(inRowIndex: number)",
          "setAttribute": "fn(attr: String, value: ?)",
          "setCellNodeTextDirection": "fn(inColIndex: ?, inRowIndex: ?, textDir: ?)",
          "setCellWidth": "fn(inIndex: ?, inUnitWidth: ?)",
          "setHeaderMenu": "fn(menu: dijit.Menu)",
          "setItems": "fn(items: ?)",
          "setQuery": "fn(query: ?, queryOptions: ?)",
          "setScrollTop": "fn(inTop: ?)",
          "setSortIndex": "fn(inIndex: number, inAsc: bool)",
          "setSortInfo": "fn(inSortInfo: ?)",
          "setStore": "fn(store: ?, query: ?, queryOptions: ?)",
          "setStructure": "fn(inStructure: Object)",
          "setupHeaderMenu": "fn()",
          "showMessage": "fn(message: ?)",
          "sizeChange": "fn()",
          "sort": "fn()",
          "startup": "fn()",
          "styleRowState": "fn(inRow: ?)",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "textSizeChanged": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "update": "fn()",
          "updateRow": "fn(inRowIndex: number)",
          "updateRowCount": "fn(inRowCount: number)",
          "updateRows": "fn(startIndex: number, howMany: number)",
          "updateRowStyles": "fn(inRowIndex: ?)",
          "getCachedTemplate": "fn() -> ?",
          "onApplyCellEdit": "fn(inValue: String, inRowIndex: number, inFieldIndex: number)",
          "onApplyEdit": "fn(inRowIndex: number)",
          "onBlur": "fn()",
          "onCancelEdit": "fn(inRowIndex: number)",
          "onCanDeselect": "fn(inRowIndex: number) -> ?",
          "onCanSelect": "fn(inRowIndex: number) -> ?",
          "onCellClick": "fn(e: Event)",
          "onCellContextMenu": "fn(e: Event)",
          "onCellDblClick": "fn(e: Event)",
          "onCellFocus": "fn(inCell: Object, inRowIndex: number)",
          "onCellMouseDown": "fn(e: Event)",
          "onCellMouseOut": "fn(e: Event)",
          "onCellMouseOver": "fn(e: Event)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onContentEvent": "fn(e: ?)",
          "onDblClick": "fn(event: ?)",
          "onDeselected": "fn(inRowIndex: number)",
          "onFetchError": "fn(err: ?, req: ?)",
          "onFocus": "fn()",
          "onHeaderCellClick": "fn(e: Event)",
          "onHeaderCellContextMenu": "fn(e: Event)",
          "onHeaderCellDblClick": "fn(e: Event)",
          "onHeaderCellMouseDown": "fn(e: Event)",
          "onHeaderCellMouseOut": "fn(e: Event)",
          "onHeaderCellMouseOver": "fn(e: Event)",
          "onHeaderClick": "fn(e: Event)",
          "onHeaderContextMenu": "fn(e: Event)",
          "onHeaderDblClick": "fn(e: Event)",
          "onHeaderEvent": "fn(e: ?)",
          "onHeaderMouseOut": "fn(e: Event)",
          "onHeaderMouseOver": "fn(e: Event)",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyEvent": "fn(e: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseDownRow": "fn(e: Event)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOutRow": "fn(e: Event)",
          "onMouseOver": "fn(event: ?)",
          "onMouseOverRow": "fn(e: Event)",
          "onMouseUp": "fn(event: ?)",
          "onMoveColumn": "fn()",
          "onResizeColumn": "fn(cellIdx: number)",
          "onRowClick": "fn(e: Event)",
          "onRowContextMenu": "fn(e: Event)",
          "onRowDblClick": "fn(e: Event)",
          "onRowMouseDown": "fn(e: Event)",
          "onRowMouseOut": "fn(e: Event)",
          "onRowMouseOver": "fn(e: Event)",
          "onSelected": "fn(inRowIndex: number)",
          "onSelectionChanged": "fn()",
          "onShow": "fn()",
          "onStartEdit": "fn(inCell: Object, inRowIndex: number)",
          "onStyleRow": "fn(inRow: ?)"
        }
      },
      "EnhancedGrid": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attachScope": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret230",
          "attributeMap": "Object",
          "autoHeight": "bool",
          "autoRender": "bool",
          "autoWidth": "bool",
          "baseClass": "string",
          "cellOverClass": "string",
          "class": "string",
          "classTag": "string",
          "columnReordering": "bool",
          "containerNode": "HTMLElement",
          "defaultHeight": "string",
          "delayScroll": "bool",
          "dir": "string",
          "domNode": "HTMLElement",
          "editable": "bool",
          "elasticView": "number",
          "errorMessage": "string",
          "escapeHTMLInData": "bool",
          "fastScroll": "bool",
          "fetchText": "string",
          "focused": "bool",
          "formatterScope": "Object",
          "headerMenu": "Object",
          "height": "string",
          "id": "string",
          "initialWidth": "string",
          "invalidated": "Object",
          "items": "Object",
          "keepRows": "number",
          "keepSelection": "bool",
          "lang": "string",
          "loadingMessage": "string",
          "noDataMessage": "string",
          "observer": "string",
          "ownerDocument": "Object",
          "placeholderLabel": "string",
          "pluginMgr": "Object",
          "plugins": "Object",
          "query": "Object",
          "queryOptions": "Object",
          "rowCount": "number",
          "rowHeight": "number",
          "rowSelector": "bool",
          "rowsPerPage": "number",
          "scrollRedrawThreshold": "number",
          "searchContainerNode": "bool",
          "selectable": "bool",
          "selectionMode": "string",
          "singleClickEdit": "bool",
          "sortFields": "Object",
          "sortInfo": "number",
          "srcNodeRef": "HTMLElement",
          "store": "Object",
          "structure": "Object",
          "style": "string",
          "summary": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "updateDelay": "number",
          "updating": "bool",
          "addRow": "fn()",
          "attr": "fn(name: String, value: Object) -> ?",
          "beginUpdate": "fn()",
          "buildRendering": "fn()",
          "buildViews": "fn()",
          "canEdit": "fn(inCell: ?, inRowIndex: ?) -> ?",
          "canSort": "fn(colIndex?: ?, field?: ?) -> bool",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "createLayout": "fn()",
          "createManagers": "fn()",
          "createScroller": "fn()",
          "createSelection": "fn()",
          "createView": "fn() -> ?",
          "createViews": "fn()",
          "defaultUpdate": "fn()",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn()",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "dispatchContentEvent": "fn(e: ?)",
          "dispatchHeaderEvent": "fn(e: ?)",
          "dispatchKeyEvent": "fn(e: ?)",
          "doApplyCellEdit": "fn(inValue: ?, inRowIndex: ?, inAttrName: ?)",
          "doApplyEdit": "fn(inRowIndex: ?, inDataAttr: ?)",
          "doCancelEdit": "fn(inRowIndex: ?)",
          "doclick": "fn(e: ?)",
          "docontextmenu": "fn(e: ?)",
          "dodblclick": "fn(e: ?)",
          "doheaderclick": "fn(e: ?)",
          "doheadercontextmenu": "fn(e: ?)",
          "doheaderdblclick": "fn(e: ?)",
          "dokeydown": "fn(e: ?)",
          "doKeyEvent": "fn(e: ?)",
          "doStartEdit": "fn(inCell: ?, inRowIndex: ?)",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "endUpdate": "fn()",
          "filter": "fn(query: ?, reRender: ?)",
          "finishScrollJob": "fn()",
          "getCell": "fn(inIndex: number) -> ?",
          "getCellByField": "fn(field: ?) -> ?",
          "getCellName": "fn(inCell: ?) -> ?",
          "getCellNodeTextDirection": "fn(inColIndex: ?, inRowIndex: ?) -> ?",
          "getChildren": "fn() -> [?]",
          "getColumnTogglingItems": "fn() -> ?",
          "getDescendants": "fn() -> [?]",
          "getItem": "fn(idx: ?) -> ?",
          "getItemIndex": "fn(item: ?) -> ?",
          "getParent": "fn() -> ?",
          "getRowNode": "fn(inRowIndex: ?) -> ?",
          "getSortAsc": "fn(inSortInfo: ?) -> ?",
          "getSortIndex": "fn(inSortInfo: ?) -> number",
          "getSortProps": "fn() -> ?",
          "hasLayout": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "markupFactory": "fn(props: ?, node: ?, ctor: ?, cellFunc: ?)",
          "mixin": "fn(target: ?, source: ?)",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "plugin": "fn(name: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "postrender": "fn()",
          "postresize": "fn()",
          "prerender": "fn()",
          "registerPlugin": "fn(clazz: ?, props: ?)",
          "removeSelectedRows": "fn()",
          "render": "fn()",
          "resize": "fn(changeSize: ?, resultSize: ?)",
          "rowHeightChanged": "fn(inRowIndex: number)",
          "scrollTo": "fn(inTop: number)",
          "scrollToRow": "fn(inRowIndex: number)",
          "setAttribute": "fn(attr: String, value: ?)",
          "setCellNodeTextDirection": "fn(inColIndex: ?, inRowIndex: ?, textDir: ?)",
          "setCellWidth": "fn(inIndex: ?, inUnitWidth: ?)",
          "setHeaderMenu": "fn(menu: dijit.Menu)",
          "setItems": "fn(items: ?)",
          "setQuery": "fn(query: ?, queryOptions: ?)",
          "setScrollTop": "fn(inTop: ?)",
          "setSortIndex": "fn(inIndex: number, inAsc: bool)",
          "setSortInfo": "fn(inSortInfo: ?)",
          "setStore": "fn(store: ?, query: ?, queryOptions: ?)",
          "setStructure": "fn(inStructure: Object)",
          "setupHeaderMenu": "fn()",
          "showMessage": "fn(message: ?)",
          "sizeChange": "fn()",
          "sort": "fn()",
          "startup": "fn()",
          "styleRowState": "fn(inRow: ?)",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "textSizeChanged": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "update": "fn()",
          "updateRow": "fn(inRowIndex: number)",
          "updateRowCount": "fn(inRowCount: number)",
          "updateRows": "fn(startIndex: number, howMany: number)",
          "updateRowStyles": "fn(inRowIndex: ?)",
          "getCachedTemplate": "fn() -> ?",
          "onApplyCellEdit": "fn(inValue: String, inRowIndex: number, inFieldIndex: number)",
          "onApplyEdit": "fn(inRowIndex: number)",
          "onBlur": "fn()",
          "onCancelEdit": "fn(inRowIndex: number)",
          "onCanDeselect": "fn(inRowIndex: number) -> ?",
          "onCanSelect": "fn(inRowIndex: number) -> ?",
          "onCellClick": "fn(e: Event)",
          "onCellContextMenu": "fn(e: Event)",
          "onCellDblClick": "fn(e: Event)",
          "onCellFocus": "fn(inCell: Object, inRowIndex: number)",
          "onCellMouseDown": "fn(e: Event)",
          "onCellMouseOut": "fn(e: Event)",
          "onCellMouseOver": "fn(e: Event)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onContentEvent": "fn(e: ?)",
          "onDblClick": "fn(event: ?)",
          "onDeselected": "fn(inRowIndex: number)",
          "onFetchError": "fn(err: ?, req: ?)",
          "onFocus": "fn()",
          "onHeaderCellClick": "fn(e: Event)",
          "onHeaderCellContextMenu": "fn(e: Event)",
          "onHeaderCellDblClick": "fn(e: Event)",
          "onHeaderCellMouseDown": "fn(e: Event)",
          "onHeaderCellMouseOut": "fn(e: Event)",
          "onHeaderCellMouseOver": "fn(e: Event)",
          "onHeaderClick": "fn(e: Event)",
          "onHeaderContextMenu": "fn(e: Event)",
          "onHeaderDblClick": "fn(e: Event)",
          "onHeaderEvent": "fn(e: ?)",
          "onHeaderMouseOut": "fn(e: Event)",
          "onHeaderMouseOver": "fn(e: Event)",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyEvent": "fn(e: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseDownRow": "fn(e: Event)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOutRow": "fn(e: Event)",
          "onMouseOver": "fn(event: ?)",
          "onMouseOverRow": "fn(e: Event)",
          "onMouseUp": "fn(e: ?)",
          "onMoveColumn": "fn()",
          "onResizeColumn": "fn(cellIdx: number)",
          "onRowClick": "fn(e: Event)",
          "onRowContextMenu": "fn(e: Event)",
          "onRowDblClick": "fn(e: Event)",
          "onRowMouseDown": "fn(e: Event)",
          "onRowMouseOut": "fn(e: Event)",
          "onRowMouseOver": "fn(e: Event)",
          "onSelected": "fn(inRowIndex: number)",
          "onSelectionChanged": "fn()",
          "onShow": "fn()",
          "onStartEdit": "fn(inCell: Object, inRowIndex: number)",
          "onStyleRow": "fn(inRow: ?)"
        }
      },
      "TreeGrid": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "aggregator": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret294",
          "attachScope": "Object",
          "attributeMap": "Object",
          "autoHeight": "bool",
          "autoRender": "bool",
          "autoWidth": "bool",
          "baseClass": "string",
          "cellOverClass": "string",
          "class": "string",
          "classTag": "string",
          "columnReordering": "bool",
          "containerNode": "HTMLElement",
          "defaultHeight": "string",
          "defaultOpen": "bool",
          "delayScroll": "bool",
          "dir": "string",
          "domNode": "HTMLElement",
          "editable": "bool",
          "elasticView": "number",
          "errorMessage": "string",
          "escapeHTMLInData": "bool",
          "expandoCell": "number",
          "fastScroll": "bool",
          "fetchText": "string",
          "focused": "bool",
          "formatterScope": "Object",
          "headerMenu": "Object",
          "height": "string",
          "id": "string",
          "initialWidth": "string",
          "invalidated": "Object",
          "items": "Object",
          "keepRows": "number",
          "keepSelection": "bool",
          "lang": "string",
          "loadingMessage": "string",
          "noDataMessage": "string",
          "observer": "string",
          "openAtLevels": "[?]",
          "ownerDocument": "Object",
          "placeholderLabel": "string",
          "query": "Object",
          "queryOptions": "Object",
          "rowCount": "number",
          "rowHeight": "number",
          "rowSelector": "bool",
          "rowsPerPage": "number",
          "scrollRedrawThreshold": "number",
          "searchContainerNode": "bool",
          "selectable": "bool",
          "selectionMode": "string",
          "singleClickEdit": "bool",
          "sortChildItems": "bool",
          "sortFields": "Object",
          "sortInfo": "number",
          "srcNodeRef": "HTMLElement",
          "store": "Object",
          "structure": "Object",
          "style": "string",
          "summary": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "treeModel": "Object",
          "updateDelay": "number",
          "updating": "bool",
          "addRow": "fn()",
          "attr": "fn(name: String, value: Object) -> ?",
          "beginUpdate": "fn()",
          "buildRendering": "fn()",
          "buildViews": "fn()",
          "canEdit": "fn(inCell: ?, inRowIndex: ?) -> ?",
          "canSort": "fn() -> bool",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "createLayout": "fn()",
          "createManagers": "fn()",
          "createScroller": "fn()",
          "createSelection": "fn()",
          "createView": "fn(inClass: ?, idx: ?) -> ?",
          "createViews": "fn()",
          "defaultUpdate": "fn()",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn()",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "dispatchContentEvent": "fn(e: ?)",
          "dispatchHeaderEvent": "fn(e: ?)",
          "dispatchKeyEvent": "fn(e: ?)",
          "doApplyCellEdit": "fn(inValue: ?, inRowIndex: ?, inAttrName: ?)",
          "doApplyEdit": "fn(inRowIndex: ?, inDataAttr: ?)",
          "doCancelEdit": "fn(inRowIndex: ?)",
          "doclick": "fn(e: ?)",
          "docontextmenu": "fn(e: ?)",
          "dodblclick": "fn(e: ?)",
          "doheaderclick": "fn(e: ?)",
          "doheadercontextmenu": "fn(e: ?)",
          "doheaderdblclick": "fn(e: ?)",
          "dokeydown": "fn(e: ?)",
          "doKeyEvent": "fn(e: ?)",
          "doStartEdit": "fn(inCell: ?, inRowIndex: ?)",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "endUpdate": "fn()",
          "filter": "fn(query: ?, reRender: ?)",
          "finishScrollJob": "fn()",
          "getCell": "fn(inIndex: number) -> ?",
          "getCellName": "fn(inCell: ?) -> ?",
          "getCellNodeTextDirection": "fn(inColIndex: ?, inRowIndex: ?) -> ?",
          "getChildren": "fn() -> [?]",
          "getColumnTogglingItems": "fn() -> ?",
          "getDefaultOpenState": "fn(cellDef: ?, item: ?) -> ?",
          "getDescendants": "fn() -> [?]",
          "getItem": "fn(idx: number) -> ?",
          "getItemIndex": "fn(item: ?) -> ?",
          "getParent": "fn() -> ?",
          "getRowNode": "fn(inRowIndex: ?) -> ?",
          "getSortAsc": "fn(inSortInfo: ?) -> ?",
          "getSortIndex": "fn(inSortInfo: ?) -> number",
          "getSortProps": "fn() -> ?",
          "hasLayout": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "markupFactory": "fn(props: ?, node: ?, ctor: ?, cellFunc: ?)",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "postrender": "fn()",
          "postresize": "fn()",
          "prerender": "fn()",
          "removeSelectedRows": "fn()",
          "render": "fn()",
          "resize": "fn(changeSize: ?, resultSize: ?)",
          "rowHeightChanged": "fn(inRowIndex: number)",
          "scrollTo": "fn(inTop: number)",
          "scrollToRow": "fn(inRowIndex: number)",
          "setAttribute": "fn(attr: String, value: ?)",
          "setCellNodeTextDirection": "fn(inColIndex: ?, inRowIndex: ?, textDir: ?)",
          "setCellWidth": "fn(inIndex: ?, inUnitWidth: ?)",
          "setHeaderMenu": "fn(menu: dijit.Menu)",
          "setItems": "fn(items: ?)",
          "setModel": "fn(treeModel: ?)",
          "setQuery": "fn(query: ?, queryOptions: ?)",
          "setScrollTop": "fn(inTop: ?)",
          "setSortIndex": "fn(inIndex: number, inAsc: bool)",
          "setSortInfo": "fn(inSortInfo: ?)",
          "setStore": "fn(store: ?, query: ?, queryOptions: ?)",
          "setStructure": "fn(inStructure: Object)",
          "setupHeaderMenu": "fn()",
          "showMessage": "fn(message: ?)",
          "sizeChange": "fn()",
          "sort": "fn()",
          "startup": "fn()",
          "styleRowNode": "fn(inRowIndex: ?, inRowNode: ?)",
          "styleRowState": "fn(inRow: ?)",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "textSizeChanged": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "update": "fn()",
          "updateRow": "fn(inRowIndex: number)",
          "updateRowCount": "fn(inRowCount: number)",
          "updateRows": "fn(startIndex: number, howMany: number)",
          "updateRowStyles": "fn(inRowIndex: ?)",
          "getCachedTemplate": "fn() -> ?",
          "onApplyCellEdit": "fn(inValue: String, inRowIndex: number, inFieldIndex: number)",
          "onApplyEdit": "fn(inRowIndex: number)",
          "onBlur": "fn()",
          "onCancelEdit": "fn(inRowIndex: number)",
          "onCanDeselect": "fn(inRowIndex: number) -> ?",
          "onCanSelect": "fn(inRowIndex: ?) -> ?",
          "onCellClick": "fn(e: Event)",
          "onCellContextMenu": "fn(e: Event)",
          "onCellDblClick": "fn(e: Event)",
          "onCellFocus": "fn(inCell: Object, inRowIndex: number)",
          "onCellMouseDown": "fn(e: Event)",
          "onCellMouseOut": "fn(e: Event)",
          "onCellMouseOver": "fn(e: Event)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onContentEvent": "fn(e: ?)",
          "onDblClick": "fn(event: ?)",
          "onDeselected": "fn(inRowIndex: number)",
          "onFetchError": "fn(err: ?, req: ?)",
          "onFocus": "fn()",
          "onHeaderCellClick": "fn(e: Event)",
          "onHeaderCellContextMenu": "fn(e: Event)",
          "onHeaderCellDblClick": "fn(e: Event)",
          "onHeaderCellMouseDown": "fn(e: Event)",
          "onHeaderCellMouseOut": "fn(e: Event)",
          "onHeaderCellMouseOver": "fn(e: Event)",
          "onHeaderClick": "fn(e: Event)",
          "onHeaderContextMenu": "fn(e: Event)",
          "onHeaderDblClick": "fn(e: Event)",
          "onHeaderEvent": "fn(e: ?)",
          "onHeaderMouseOut": "fn(e: Event)",
          "onHeaderMouseOver": "fn(e: Event)",
          "onHide": "fn()",
          "onKeyDown": "fn(e: ?)",
          "onKeyEvent": "fn(e: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseDownRow": "fn(e: Event)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOutRow": "fn(e: Event)",
          "onMouseOver": "fn(event: ?)",
          "onMouseOverRow": "fn(e: Event)",
          "onMouseUp": "fn(event: ?)",
          "onMoveColumn": "fn()",
          "onResizeColumn": "fn(cellIdx: number)",
          "onRowClick": "fn(e: Event)",
          "onRowContextMenu": "fn(e: Event)",
          "onRowDblClick": "fn(e: Event)",
          "onRowMouseDown": "fn(e: Event)",
          "onRowMouseOut": "fn(e: Event)",
          "onRowMouseOver": "fn(e: Event)",
          "onSelected": "fn(inRowIndex: number)",
          "onSelectionChanged": "fn()",
          "onShow": "fn()",
          "onStartEdit": "fn(inCell: Object, inRowIndex: number)",
          "onStyleRow": "fn(row: ?)"
        }
      },
      "LazyTreeGrid": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "aggregator": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret362",
          "attachScope": "Object",
          "attributeMap": "Object",
          "autoHeight": "bool",
          "autoRender": "bool",
          "autoWidth": "bool",
          "baseClass": "string",
          "cellOverClass": "string",
          "class": "string",
          "classTag": "string",
          "colSpans": "Object",
          "columnReordering": "bool",
          "containerNode": "HTMLElement",
          "defaultHeight": "string",
          "defaultOpen": "bool",
          "defaultState": "Object",
          "delayScroll": "bool",
          "dir": "string",
          "domNode": "HTMLElement",
          "editable": "bool",
          "elasticView": "number",
          "errorMessage": "string",
          "escapeHTMLInData": "bool",
          "expandoCell": "number",
          "fastScroll": "bool",
          "fetchText": "string",
          "focused": "bool",
          "formatterScope": "Object",
          "headerMenu": "Object",
          "height": "string",
          "id": "string",
          "initialWidth": "string",
          "invalidated": "Object",
          "items": "Object",
          "keepRows": "number",
          "keepSelection": "bool",
          "lang": "string",
          "loadingMessage": "string",
          "noDataMessage": "string",
          "observer": "string",
          "openAtLevels": "[?]",
          "ownerDocument": "Object",
          "placeholderLabel": "string",
          "query": "Object",
          "queryOptions": "Object",
          "rowCount": "number",
          "rowHeight": "number",
          "rowSelector": "bool",
          "rowsPerPage": "number",
          "scrollRedrawThreshold": "number",
          "searchContainerNode": "bool",
          "selectable": "bool",
          "selectionMode": "string",
          "singleClickEdit": "bool",
          "sortChildItems": "bool",
          "sortFields": "Object",
          "sortInfo": "number",
          "srcNodeRef": "HTMLElement",
          "store": "Object",
          "structure": "Object",
          "style": "string",
          "summary": "string",
          "templatePath": "string",
          "templateString": "string",
          "title": "string",
          "tooltip": "string",
          "treeModel": "Object",
          "updateDelay": "number",
          "updating": "bool",
          "addRow": "fn()",
          "attr": "fn(name: String, value: Object) -> ?",
          "beginUpdate": "fn()",
          "buildRendering": "fn()",
          "buildViews": "fn()",
          "canEdit": "fn(inCell: ?, inRowIndex: ?) -> ?",
          "canSort": "fn() -> bool",
          "collapse": "fn(itemId: String)",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "createLayout": "fn()",
          "createManagers": "fn()",
          "createScroller": "fn()",
          "createSelection": "fn()",
          "createView": "fn(inClass: ?, idx: ?) -> ?",
          "createViews": "fn()",
          "defaultUpdate": "fn()",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn()",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "dispatchContentEvent": "fn(e: ?)",
          "dispatchHeaderEvent": "fn(e: ?)",
          "dispatchKeyEvent": "fn(e: ?)",
          "doApplyCellEdit": "fn(inValue: ?, inRowIndex: ?, inAttrName: ?)",
          "doApplyEdit": "fn(inRowIndex: ?, inDataAttr: ?)",
          "doCancelEdit": "fn(inRowIndex: ?)",
          "doclick": "fn(e: ?)",
          "docontextmenu": "fn(e: ?)",
          "dodblclick": "fn(e: ?)",
          "doheaderclick": "fn(e: ?)",
          "doheadercontextmenu": "fn(e: ?)",
          "doheaderdblclick": "fn(e: ?)",
          "dokeydown": "fn(e: ?)",
          "doKeyEvent": "fn(e: ?)",
          "doStartEdit": "fn(inCell: ?, inRowIndex: ?)",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "endUpdate": "fn()",
          "expand": "fn(itemId: String)",
          "expandoFetch": "fn(rowIndex: ?, open: ?)",
          "filter": "fn(query: ?, reRender: ?)",
          "finishScrollJob": "fn()",
          "getCell": "fn(inIndex: number) -> ?",
          "getCellName": "fn(inCell: ?) -> ?",
          "getCellNodeTextDirection": "fn(inColIndex: ?, inRowIndex: ?) -> ?",
          "getChildren": "fn() -> [?]",
          "getColumnTogglingItems": "fn() -> ?",
          "getDefaultOpenState": "fn(cellDef: ?, item: ?) -> ?",
          "getDescendants": "fn() -> [?]",
          "getItem": "fn(idx: number) -> ?",
          "getItemIndex": "fn(item: ?) -> ?",
          "getParent": "fn() -> ?",
          "getRowNode": "fn(inRowIndex: ?) -> ?",
          "getSortAsc": "fn(inSortInfo: ?) -> ?",
          "getSortIndex": "fn(inSortInfo: ?) -> number",
          "getSortProps": "fn() -> ?",
          "getState": "fn() -> Object",
          "hasLayout": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "markupFactory": "fn(props: ?, node: ?, ctor: ?, cellFunc: ?)",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "postrender": "fn()",
          "postresize": "fn()",
          "prerender": "fn()",
          "refresh": "fn(keepState: bool)",
          "removeSelectedRows": "fn()",
          "render": "fn()",
          "resize": "fn(changeSize: ?, resultSize: ?)",
          "rowHeightChanged": "fn(inRowIndex: number)",
          "scrollTo": "fn(inTop: number)",
          "scrollToRow": "fn(inRowIndex: number)",
          "setAttribute": "fn(attr: String, value: ?)",
          "setCellNodeTextDirection": "fn(inColIndex: ?, inRowIndex: ?, textDir: ?)",
          "setCellWidth": "fn(inIndex: ?, inUnitWidth: ?)",
          "setHeaderMenu": "fn(menu: dijit.Menu)",
          "setItems": "fn(items: ?)",
          "setModel": "fn(treeModel: ?)",
          "setQuery": "fn(query: ?, queryOptions: ?)",
          "setScrollTop": "fn(inTop: ?)",
          "setSortIndex": "fn(inIndex: ?, inAsc: ?)",
          "setSortInfo": "fn(inSortInfo: ?)",
          "setStore": "fn(store: ?, query: ?, queryOptions: ?)",
          "setStructure": "fn(inStructure: Object)",
          "setupHeaderMenu": "fn()",
          "showMessage": "fn(message: ?)",
          "sizeChange": "fn()",
          "sort": "fn()",
          "startup": "fn()",
          "styleRowNode": "fn(rowIndex: ?, rowNode: ?)",
          "styleRowState": "fn(inRow: ?)",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "textSizeChanged": "fn()",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "update": "fn()",
          "updateRow": "fn(inRowIndex: number)",
          "updateRowCount": "fn(inRowCount: number)",
          "updateRows": "fn(startIndex: number, howMany: number)",
          "updateRowStyles": "fn(inRowIndex: ?)",
          "getCachedTemplate": "fn() -> ?",
          "onApplyCellEdit": "fn(inValue: String, inRowIndex: number, inFieldIndex: number)",
          "onApplyEdit": "fn(inRowIndex: number)",
          "onBlur": "fn()",
          "onCancelEdit": "fn(inRowIndex: number)",
          "onCanDeselect": "fn(inRowIndex: number) -> ?",
          "onCanSelect": "fn(inRowIndex: ?) -> ?",
          "onCellClick": "fn(e: Event)",
          "onCellContextMenu": "fn(e: Event)",
          "onCellDblClick": "fn(e: Event)",
          "onCellFocus": "fn(inCell: Object, inRowIndex: number)",
          "onCellMouseDown": "fn(e: Event)",
          "onCellMouseOut": "fn(e: Event)",
          "onCellMouseOver": "fn(e: Event)",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onContentEvent": "fn(e: ?)",
          "onDblClick": "fn(event: ?)",
          "onDeselected": "fn(inRowIndex: number)",
          "onFetchError": "fn(err: ?, req: ?)",
          "onFocus": "fn()",
          "onHeaderCellClick": "fn(e: Event)",
          "onHeaderCellContextMenu": "fn(e: Event)",
          "onHeaderCellDblClick": "fn(e: Event)",
          "onHeaderCellMouseDown": "fn(e: Event)",
          "onHeaderCellMouseOut": "fn(e: Event)",
          "onHeaderCellMouseOver": "fn(e: Event)",
          "onHeaderClick": "fn(e: Event)",
          "onHeaderContextMenu": "fn(e: Event)",
          "onHeaderDblClick": "fn(e: Event)",
          "onHeaderEvent": "fn(e: ?)",
          "onHeaderMouseOut": "fn(e: Event)",
          "onHeaderMouseOver": "fn(e: Event)",
          "onHide": "fn()",
          "onKeyDown": "fn(e: ?)",
          "onKeyEvent": "fn(e: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseDownRow": "fn(e: Event)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOutRow": "fn(e: Event)",
          "onMouseOver": "fn(event: ?)",
          "onMouseOverRow": "fn(e: Event)",
          "onMouseUp": "fn(event: ?)",
          "onMoveColumn": "fn()",
          "onResizeColumn": "fn(cellIdx: number)",
          "onRowClick": "fn(e: Event)",
          "onRowContextMenu": "fn(e: Event)",
          "onRowDblClick": "fn(e: Event)",
          "onRowMouseDown": "fn(e: Event)",
          "onRowMouseOut": "fn(e: Event)",
          "onRowMouseOver": "fn(e: Event)",
          "onSelected": "fn(inRowIndex: number)",
          "onSelectionChanged": "fn()",
          "onSetState": "fn()",
          "onShow": "fn()",
          "onStartEdit": "fn(inCell: Object, inRowIndex: number)",
          "onStyleRow": "fn(row: ?)"
        }
      },
      "_CheckBoxSelector": {},
      "_RadioSelector": {},
      "bidi": {
        "_BidiMixin": {}
      },
      "BidiSupport": {},
      "cells": {
        "_base": {
          "!type": "fn(inProps: ?)",
          "prototype": {
            "alwaysEditing": "bool",
            "classes": "string",
            "defaultValue": "string",
            "draggable": "bool",
            "editable": "bool",
            "formatter": "Object",
            "hidden": "bool",
            "noresize": "bool",
            "styles": "string",
            "value": "Object",
            "AlwaysEdit": "fn()",
            "apply": "fn(inRowIndex: number)",
            "applyEdit": "fn(inValue: ?, inRowIndex: ?)",
            "Bool": "fn()",
            "cancel": "fn(inRowIndex: number)",
            "cancelEdit": "fn(inRowIndex: ?)",
            "cancelFormatNode": "fn()",
            "canResize": "fn() -> ?",
            "Cell": "fn()",
            "dispatchEvent": "fn(m: ?, e: ?) -> ?",
            "focus": "fn(inRowIndex: number, inNode: ?)",
            "format": "fn(inRowIndex: number, inItem: ?) -> ?",
            "formatEditing": "fn(inDatum: ?, inRowIndex: number) -> ?",
            "formatNode": "fn(inNode: ?, inDatum: ?, inRowIndex: number)",
            "getEditNode": "fn(inRowIndex: ?) -> number",
            "getHeaderNode": "fn() -> ?",
            "getNode": "fn(inRowIndex: number) -> ?",
            "getValue": "fn(inRowIndex: number) -> ?",
            "isFlex": "fn() -> ?",
            "markupFactory": "fn(node: ?, cellDef: ?)",
            "needFormatNode": "fn(inDatum: ?, inRowIndex: ?)",
            "registerOnBlur": "fn(inNode: ?, inRowIndex: ?)",
            "restore": "fn(inRowIndex: number)",
            "RowIndex": "fn()",
            "save": "fn(inRowIndex: number)",
            "Select": "fn()",
            "setValue": "fn(inRowIndex: number, inValue: ?)"
          },
          "Cell": {
            "!type": "fn()",
            "prototype": {
              "alwaysEditing": "bool",
              "classes": "string",
              "defaultValue": "string",
              "draggable": "bool",
              "editable": "bool",
              "formatter": "Object",
              "hidden": "bool",
              "KEY_HANDLER": "string",
              "keyFilter": "RegExp",
              "LRE": "string",
              "noresize": "bool",
              "PDF": "string",
              "RLE": "string",
              "styles": "string",
              "value": "Object",
              "apply": "fn(inRowIndex: number)",
              "applyEdit": "fn(inValue: ?, inRowIndex: ?)",
              "cancel": "fn(inRowIndex: number)",
              "cancelEdit": "fn(inRowIndex: ?)",
              "cancelFormatNode": "fn()",
              "canResize": "fn() -> ?",
              "dispatchEvent": "fn(m: ?, e: ?) -> ?",
              "doKey": "fn(e: ?)",
              "focus": "fn(inRowIndex: number, inNode: ?)",
              "format": "fn(inRowIndex: number, inItem: ?) -> ?",
              "formatEditing": "fn(inDatum: ?, inRowIndex: ?) -> String",
              "formatNode": "fn(inNode: ?, inDatum: ?, inRowIndex: ?)",
              "getEditNode": "fn(inRowIndex: ?) -> number",
              "getHeaderNode": "fn() -> ?",
              "getNode": "fn(inRowIndex: number) -> ?",
              "getValue": "fn(inRowIndex: number) -> ?",
              "isFlex": "fn() -> ?",
              "markupFactory": "fn(node: ?, cellDef: ?)",
              "needFormatNode": "fn(inDatum: ?, inRowIndex: ?)",
              "registerOnBlur": "fn(inNode: ?, inRowIndex: ?)",
              "restore": "fn(inRowIndex: number)",
              "save": "fn(inRowIndex: number)",
              "setValue": "fn(inRowIndex: number, inValue: ?)"
            }
          },
          "AlwaysEdit": {
            "!type": "fn()",
            "prototype": {
              "alwaysEditing": "bool",
              "classes": "string",
              "defaultValue": "string",
              "draggable": "bool",
              "editable": "bool",
              "formatter": "Object",
              "hidden": "bool",
              "keyFilter": "RegExp",
              "noresize": "bool",
              "styles": "string",
              "value": "Object",
              "apply": "fn(inRowIndex: number)",
              "applyEdit": "fn(inValue: ?, inRowIndex: ?)",
              "applyStaticValue": "fn(inRowIndex: ?)",
              "cancel": "fn(inRowIndex: number)",
              "cancelEdit": "fn(inRowIndex: ?)",
              "cancelFormatNode": "fn()",
              "canResize": "fn() -> ?",
              "dispatchEvent": "fn(m: ?, e: ?) -> ?",
              "doKey": "fn(e: ?)",
              "focus": "fn(inRowIndex: number, inNode: ?)",
              "format": "fn(inRowIndex: number, inItem: ?) -> ?",
              "formatEditing": "fn(inDatum: ?, inRowIndex: ?) -> String",
              "formatNode": "fn(inNode: ?, inDatum: ?, inRowIndex: ?)",
              "getEditNode": "fn(inRowIndex: ?) -> number",
              "getHeaderNode": "fn() -> ?",
              "getNode": "fn(inRowIndex: number) -> ?",
              "getValue": "fn(inRowIndex: number) -> ?",
              "isFlex": "fn() -> ?",
              "markupFactory": "fn(node: ?, cell: ?)",
              "needFormatNode": "fn(inDatum: ?, inRowIndex: ?)",
              "registerOnBlur": "fn(inNode: ?, inRowIndex: ?)",
              "restore": "fn(inRowIndex: number)",
              "save": "fn(inRowIndex: number)",
              "setValue": "fn(inRowIndex: number, inValue: ?)"
            }
          },
          "Bool": {
            "!type": "fn()",
            "prototype": {
              "alwaysEditing": "bool",
              "classes": "string",
              "defaultValue": "string",
              "draggable": "bool",
              "editable": "bool",
              "formatter": "Object",
              "hidden": "bool",
              "keyFilter": "RegExp",
              "noresize": "bool",
              "styles": "string",
              "value": "Object",
              "apply": "fn(inRowIndex: number)",
              "applyEdit": "fn(inValue: ?, inRowIndex: ?)",
              "applyStaticValue": "fn(inRowIndex: ?)",
              "cancel": "fn(inRowIndex: number)",
              "cancelEdit": "fn(inRowIndex: ?)",
              "cancelFormatNode": "fn()",
              "canResize": "fn() -> ?",
              "dispatchEvent": "fn(m: ?, e: ?) -> ?",
              "doclick": "fn(e: ?)",
              "doKey": "fn(e: ?)",
              "focus": "fn(inRowIndex: number, inNode: ?)",
              "format": "fn(inRowIndex: number, inItem: ?) -> ?",
              "formatEditing": "fn(inDatum: ?, inRowIndex: ?) -> String",
              "formatNode": "fn(inNode: ?, inDatum: ?, inRowIndex: ?)",
              "getEditNode": "fn(inRowIndex: ?) -> number",
              "getHeaderNode": "fn() -> ?",
              "getNode": "fn(inRowIndex: number) -> ?",
              "getValue": "fn(inRowIndex: number) -> ?",
              "isFlex": "fn() -> ?",
              "markupFactory": "fn(node: ?, cell: ?)",
              "needFormatNode": "fn(inDatum: ?, inRowIndex: ?)",
              "registerOnBlur": "fn(inNode: ?, inRowIndex: ?)",
              "restore": "fn(inRowIndex: number)",
              "save": "fn(inRowIndex: number)",
              "setValue": "fn(inRowIndex: number, inValue: ?)"
            }
          },
          "RowIndex": {
            "!type": "fn()",
            "prototype": {
              "alwaysEditing": "bool",
              "classes": "string",
              "defaultValue": "string",
              "draggable": "bool",
              "editable": "bool",
              "formatter": "Object",
              "hidden": "bool",
              "keyFilter": "RegExp",
              "name": "string",
              "noresize": "bool",
              "styles": "string",
              "value": "Object",
              "apply": "fn(inRowIndex: number)",
              "applyEdit": "fn(inValue: ?, inRowIndex: ?)",
              "cancel": "fn(inRowIndex: number)",
              "cancelEdit": "fn(inRowIndex: ?)",
              "cancelFormatNode": "fn()",
              "canResize": "fn() -> ?",
              "dispatchEvent": "fn(m: ?, e: ?) -> ?",
              "doKey": "fn(e: ?)",
              "focus": "fn(inRowIndex: number, inNode: ?)",
              "format": "fn(inRowIndex: number, inItem: ?) -> ?",
              "formatEditing": "fn(inDatum: ?, inRowIndex: ?) -> String",
              "formatNode": "fn(inNode: ?, inDatum: ?, inRowIndex: ?)",
              "get": "fn(inRowIndex: ?) -> number",
              "getEditNode": "fn(inRowIndex: ?) -> number",
              "getHeaderNode": "fn() -> ?",
              "getNode": "fn(inRowIndex: number) -> ?",
              "getValue": "fn(inRowIndex: number) -> ?",
              "isFlex": "fn() -> ?",
              "markupFactory": "fn(node: ?, cellDef: ?)",
              "needFormatNode": "fn(inDatum: ?, inRowIndex: ?)",
              "postscript": "fn()",
              "registerOnBlur": "fn(inNode: ?, inRowIndex: ?)",
              "restore": "fn(inRowIndex: number)",
              "save": "fn(inRowIndex: number)",
              "setValue": "fn(inRowIndex: number, inValue: ?)"
            }
          },
          "Select": {
            "!type": "fn(inCell: ?)",
            "prototype": {
              "alwaysEditing": "bool",
              "classes": "string",
              "defaultValue": "string",
              "draggable": "bool",
              "editable": "bool",
              "formatter": "Object",
              "hidden": "bool",
              "keyFilter": "RegExp",
              "noresize": "bool",
              "options": "[?]",
              "returnIndex": "number",
              "styles": "string",
              "value": "Object",
              "values": "[?]",
              "apply": "fn(inRowIndex: number)",
              "applyEdit": "fn(inValue: ?, inRowIndex: ?)",
              "cancel": "fn(inRowIndex: number)",
              "cancelEdit": "fn(inRowIndex: ?)",
              "cancelFormatNode": "fn()",
              "canResize": "fn() -> ?",
              "dispatchEvent": "fn(m: ?, e: ?) -> ?",
              "doKey": "fn(e: ?)",
              "focus": "fn(inRowIndex: number, inNode: ?)",
              "format": "fn(inRowIndex: number, inItem: ?) -> ?",
              "formatEditing": "fn(inDatum: ?, inRowIndex: ?) -> ?",
              "formatNode": "fn(inNode: ?, inDatum: ?, inRowIndex: ?)",
              "getEditNode": "fn(inRowIndex: ?) -> number",
              "getHeaderNode": "fn() -> ?",
              "getNode": "fn(inRowIndex: number) -> ?",
              "getValue": "fn(inRowIndex: ?) -> ?",
              "isFlex": "fn() -> ?",
              "markupFactory": "fn(node: ?, cell: ?)",
              "needFormatNode": "fn(inDatum: ?, inRowIndex: ?)",
              "registerOnBlur": "fn(inNode: ?, inRowIndex: ?)",
              "restore": "fn(inRowIndex: number)",
              "save": "fn(inRowIndex: number)",
              "setValue": "fn(inRowIndex: number, inValue: ?)"
            }
          }
        },
        "dijit": {
          "CheckBox": {
            "!type": "fn(inCell: ?)",
            "prototype": {
              "alwaysEditing": "bool",
              "classes": "string",
              "defaultValue": "string",
              "draggable": "bool",
              "editable": "bool",
              "formatter": "Object",
              "hidden": "bool",
              "noresize": "bool",
              "styles": "string",
              "value": "Object",
              "apply": "fn(inRowIndex: number)",
              "applyEdit": "fn(inValue: ?, inRowIndex: ?)",
              "attachWidget": "fn(inNode: ?, inDatum: ?, inRowIndex: ?)",
              "cancel": "fn(inRowIndex: number)",
              "cancelEdit": "fn(inRowIndex: ?)",
              "cancelFormatNode": "fn()",
              "canResize": "fn() -> ?",
              "createWidget": "fn(inNode: ?, inDatum: ?, inRowIndex: ?) -> ?",
              "dispatchEvent": "fn(m: ?, e: ?) -> ?",
              "focus": "fn(inRowIndex: ?, inNode: ?)",
              "format": "fn(inRowIndex: number, inItem: ?) -> ?",
              "formatEditing": "fn(inDatum: ?, inRowIndex: ?) -> String",
              "formatNode": "fn(inNode: ?, inDatum: ?, inRowIndex: ?) -> ?",
              "getEditNode": "fn(inRowIndex: ?) -> number",
              "getHeaderNode": "fn() -> ?",
              "getNode": "fn(inRowIndex: number) -> ?",
              "getValue": "fn() -> ?",
              "getWidgetProps": "fn(inDatum: ?) -> Object",
              "isFlex": "fn() -> ?",
              "markupFactory": "fn(node: ?, cell: ?)",
              "needFormatNode": "fn(inDatum: ?, inRowIndex: ?)",
              "registerOnBlur": "fn(inNode: ?, inRowIndex: ?)",
              "restore": "fn(inRowIndex: number)",
              "save": "fn(inRowIndex: number)",
              "setValue": "fn(inRowIndex: ?, inValue: ?)",
              "sizeWidget": "fn(inNode: ?, inDatum: ?, inRowIndex: ?)",
              "widgetClass": "fn()"
            }
          },
          "ComboBox": {
            "!type": "fn(inCell: ?)",
            "prototype": {
              "alwaysEditing": "bool",
              "classes": "string",
              "defaultValue": "string",
              "draggable": "bool",
              "editable": "bool",
              "formatter": "Object",
              "getWidgetPropsCallOrig": "Object",
              "hidden": "bool",
              "noresize": "bool",
              "styles": "string",
              "value": "Object",
              "apply": "fn(inRowIndex: number)",
              "applyEdit": "fn(inValue: ?, inRowIndex: ?)",
              "attachWidget": "fn(inNode: ?, inDatum: ?, inRowIndex: ?)",
              "cancel": "fn(inRowIndex: number)",
              "cancelEdit": "fn(inRowIndex: ?)",
              "cancelFormatNode": "fn()",
              "canResize": "fn() -> ?",
              "createWidget": "fn(inNode: ?, inDatum: ?, inRowIndex: ?) -> ?",
              "dispatchEvent": "fn(m: ?, e: ?) -> ?",
              "focus": "fn(inRowIndex: ?, inNode: ?)",
              "format": "fn(inRowIndex: number, inItem: ?) -> ?",
              "formatEditing": "fn(inDatum: ?, inRowIndex: ?) -> String",
              "formatNode": "fn(inNode: ?, inDatum: ?, inRowIndex: ?) -> ?",
              "getEditNode": "fn(inRowIndex: ?) -> number",
              "getHeaderNode": "fn() -> ?",
              "getNode": "fn(inRowIndex: number) -> ?",
              "getValue": "fn() -> ?",
              "getWidgetProps": "fn(inDatum: ?) -> ?",
              "isFlex": "fn() -> ?",
              "markupFactory": "fn(node: ?, cell: ?)",
              "needFormatNode": "fn(inDatum: ?, inRowIndex: ?)",
              "registerOnBlur": "fn(inNode: ?, inRowIndex: ?)",
              "restore": "fn(inRowIndex: number)",
              "save": "fn(inRowIndex: number)",
              "setValue": "fn(inRowIndex: ?, inValue: ?)",
              "sizeWidget": "fn(inNode: ?, inDatum: ?, inRowIndex: ?)",
              "widgetClass": "fn()"
            }
          },
          "DateTextBox": {
            "!type": "fn(inCell: ?)",
            "prototype": {
              "alwaysEditing": "bool",
              "classes": "string",
              "defaultValue": "string",
              "draggable": "bool",
              "editable": "bool",
              "formatter": "Object",
              "hidden": "bool",
              "noresize": "bool",
              "styles": "string",
              "value": "Object",
              "apply": "fn(inRowIndex: number)",
              "applyEdit": "fn(inValue: ?, inRowIndex: ?)",
              "attachWidget": "fn(inNode: ?, inDatum: ?, inRowIndex: ?)",
              "cancel": "fn(inRowIndex: number)",
              "cancelEdit": "fn(inRowIndex: ?)",
              "cancelFormatNode": "fn()",
              "canResize": "fn() -> ?",
              "createWidget": "fn(inNode: ?, inDatum: ?, inRowIndex: ?) -> ?",
              "dispatchEvent": "fn(m: ?, e: ?) -> ?",
              "focus": "fn(inRowIndex: ?, inNode: ?)",
              "format": "fn(inRowIndex: number, inItem: ?) -> ?",
              "formatEditing": "fn(inDatum: ?, inRowIndex: ?) -> String",
              "formatNode": "fn(inNode: ?, inDatum: ?, inRowIndex: ?) -> ?",
              "getEditNode": "fn(inRowIndex: ?) -> number",
              "getHeaderNode": "fn() -> ?",
              "getNode": "fn(inRowIndex: number) -> ?",
              "getValue": "fn(inRowIndex: ?) -> ?",
              "getWidgetProps": "fn(inDatum: ?) -> ?",
              "isFlex": "fn() -> ?",
              "markupFactory": "fn(node: ?, cell: ?)",
              "needFormatNode": "fn(inDatum: ?, inRowIndex: ?)",
              "registerOnBlur": "fn(inNode: ?, inRowIndex: ?)",
              "restore": "fn(inRowIndex: number)",
              "save": "fn(inRowIndex: number)",
              "setValue": "fn(inRowIndex: ?, inValue: ?)",
              "sizeWidget": "fn(inNode: ?, inDatum: ?, inRowIndex: ?)",
              "widgetClass": "fn()"
            }
          },
          "Editor": {
            "!type": "fn(inCell: ?)",
            "prototype": {
              "alwaysEditing": "bool",
              "classes": "string",
              "defaultValue": "string",
              "draggable": "bool",
              "editable": "bool",
              "formatter": "Object",
              "hidden": "bool",
              "noresize": "bool",
              "styles": "string",
              "value": "Object",
              "apply": "fn(inRowIndex: number)",
              "applyEdit": "fn(inValue: ?, inRowIndex: ?)",
              "attachWidget": "fn(inNode: ?, inDatum: ?, inRowIndex: ?)",
              "cancel": "fn(inRowIndex: number)",
              "cancelEdit": "fn(inRowIndex: ?)",
              "cancelFormatNode": "fn()",
              "canResize": "fn() -> ?",
              "createWidget": "fn(inNode: ?, inDatum: ?, inRowIndex: ?) -> ?",
              "dispatchEvent": "fn(m: ?, e: ?) -> ?",
              "focus": "fn(inRowIndex: ?, inNode: ?)",
              "format": "fn(inRowIndex: number, inItem: ?) -> ?",
              "formatEditing": "fn(inDatum: ?, inRowIndex: ?) -> String",
              "formatNode": "fn(inNode: ?, inDatum: ?, inRowIndex: ?)",
              "getEditNode": "fn(inRowIndex: ?) -> number",
              "getHeaderNode": "fn() -> ?",
              "getNode": "fn(inRowIndex: number) -> ?",
              "getValue": "fn(inRowIndex: ?) -> ?",
              "getWidgetProps": "fn(inDatum: ?) -> Object",
              "isFlex": "fn() -> ?",
              "markupFactory": "fn(node: ?, cell: ?)",
              "needFormatNode": "fn(inDatum: ?, inRowIndex: ?)",
              "populateEditor": "fn()",
              "registerOnBlur": "fn(inNode: ?, inRowIndex: ?)",
              "restore": "fn(inRowIndex: number)",
              "save": "fn(inRowIndex: number)",
              "setValue": "fn(inRowIndex: ?, inValue: ?)",
              "sizeWidget": "fn(inNode: ?, inDatum: ?, inRowIndex: ?)",
              "widgetClass": "fn()"
            }
          },
          "_Widget": {
            "!type": "fn(inCell: ?)",
            "prototype": {
              "alwaysEditing": "bool",
              "classes": "string",
              "defaultValue": "string",
              "draggable": "bool",
              "editable": "bool",
              "formatter": "Object",
              "getWidgetPropsCallOrig": "Object",
              "hidden": "bool",
              "noresize": "bool",
              "styles": "string",
              "value": "Object",
              "apply": "fn(inRowIndex: number)",
              "applyEdit": "fn(inValue: ?, inRowIndex: ?)",
              "attachWidget": "fn(inNode: ?, inDatum: ?, inRowIndex: ?)",
              "cancel": "fn(inRowIndex: number)",
              "cancelEdit": "fn(inRowIndex: ?)",
              "cancelFormatNode": "fn()",
              "canResize": "fn() -> ?",
              "createWidget": "fn(inNode: ?, inDatum: ?, inRowIndex: ?) -> ?",
              "dispatchEvent": "fn(m: ?, e: ?) -> ?",
              "focus": "fn(inRowIndex: ?, inNode: ?)",
              "format": "fn(inRowIndex: number, inItem: ?) -> ?",
              "formatEditing": "fn(inDatum: ?, inRowIndex: ?) -> String",
              "formatNode": "fn(inNode: ?, inDatum: ?, inRowIndex: ?) -> ?",
              "getEditNode": "fn(inRowIndex: ?) -> number",
              "getHeaderNode": "fn() -> ?",
              "getNode": "fn(inRowIndex: number) -> ?",
              "getValue": "fn(inRowIndex: ?) -> ?",
              "getWidgetProps": "fn(inDatum: ?) -> ?",
              "isFlex": "fn() -> ?",
              "markupFactory": "fn(node: ?, cell: ?)",
              "needFormatNode": "fn(inDatum: ?, inRowIndex: ?)",
              "registerOnBlur": "fn(inNode: ?, inRowIndex: ?)",
              "restore": "fn(inRowIndex: number)",
              "save": "fn(inRowIndex: number)",
              "setValue": "fn(inRowIndex: ?, inValue: ?)",
              "sizeWidget": "fn(inNode: ?, inDatum: ?, inRowIndex: ?)",
              "widgetClass": "fn()"
            }
          }
        },
        "tree": {
          "formatAggregate": "fn(inItem: ?, level: ?, inRowIndexes: ?) -> ?",
          "formatAtLevel": "fn(inRowIndexes: ?, inItem: ?, level: ?, summaryRow: ?, toggleClass: ?, cellClasses: ?) -> String",
          "formatIndexes": "fn(inRowIndexes: ?, inItem: ?) -> ?",
          "getOpenState": "fn(itemId: ?) -> ?"
        }
      },
      "enhanced": {
        "_Plugin": {
          "!type": "fn(inGrid: dojox.grid.EnhancedGrid, option: ?)",
          "prototype": {
            "grid": "Object",
            "name": "string",
            "option": "Object",
            "privates": "Object",
            "connect": "fn(obj: ?, event: ?, method: ?) -> ?",
            "destroy": "fn()",
            "disconnect": "fn(handle: ?)",
            "init": "fn()",
            "subscribe": "fn(topic: ?, method: ?) -> ?",
            "unsubscribe": "fn(handle: ?)",
            "onPostInit": "fn()",
            "onPreInit": "fn()",
            "onSetStore": "fn(store: ?)",
            "onStartUp": "fn()"
          }
        },
        "_Events": {
          "!type": "fn(inGrid: ?)",
          "prototype": {
            "cellActiveClass": "string",
            "headerCellActiveClass": "string",
            "rowActiveClass": "string",
            "dokeyup": "fn(e: Event)",
            "domousedown": "fn(e: ?)",
            "domouseup": "fn(e: ?)",
            "onCellClick": "fn(e: ?)",
            "onCellDblClick": "fn(e: ?)",
            "onCellMouseDown": "fn(e: ?)",
            "onCellMouseUp": "fn(e: Event)",
            "onHeaderCellClick": "fn(e: ?)",
            "onHeaderCellMouseDown": "fn(e: ?)",
            "onHeaderCellMouseOut": "fn(e: ?)",
            "onHeaderCellMouseUp": "fn(e: ?)",
            "onKeyDown": "fn(e: ?)",
            "onMouseUp": "fn(e: Event)",
            "onMouseUpRow": "fn(e: ?)",
            "onRowClick": "fn(e: ?)",
            "onRowContextMenu": "fn(e: ?)",
            "onRowMouseUp": "fn(e: ?)",
            "onRowSelectorMouseDown": "fn(e: ?)",
            "onRowSelectorMouseUp": "fn(e: ?)",
            "onSelectedRegionContextMenu": "fn(e: Event)"
          }
        },
        "_PluginManager": {
          "!type": "fn(inGrid: ?)",
          "prototype": {
            "registry": "string",
            "destroy": "fn()",
            "forEach": "fn(func: ?, args: ?)",
            "getPlugin": "fn(name: String) -> ?",
            "getPluginClazz": "fn(clazz: Function) -> ?",
            "isFixedCell": "fn(cell: Object) -> ?",
            "loadPlugin": "fn(name: String) -> ?",
            "pluginExisted": "fn(name: String) -> ?",
            "postInit": "fn()",
            "preInit": "fn()",
            "registerPlugin": "fn(clazz: String, props: Object)",
            "startup": "fn()"
          }
        },
        "_FocusManager": {
          "!type": "fn(grid: ?)",
          "prototype": {
            "focusClass": "string",
            "focusView": "Object",
            "tabbingOut": "bool",
            "addArea": "fn(area: ?)",
            "blurHeader": "fn()",
            "colSizeAdjust": "fn(e: ?, colIdx: ?, delta: ?)",
            "contentMouseEvent": "fn(evt: ?)",
            "currentArea": "fn(areaName: String, toBlurOld: ?) -> ?",
            "destroy": "fn()",
            "doBlur": "fn(e: ?)",
            "doColHeaderBlur": "fn(e: ?)",
            "doColHeaderFocus": "fn(e: ?)",
            "doContextMenu": "fn(e: ?)",
            "doFocus": "fn(e: ?)",
            "doLastNodeBlur": "fn(e: ?)",
            "doLastNodeFocus": "fn(e: ?)",
            "findAndFocusGridCell": "fn()",
            "focusArea": "fn(areaId?: number, evt?: ?) -> bool",
            "focusGrid": "fn(inSkipFocusCell: ?)",
            "focusGridView": "fn()",
            "focusHeader": "fn(evt?: ?, step?: ?) -> bool",
            "getArea": "fn(areaName: ?) -> ?",
            "getHeaderIndex": "fn() -> ?",
            "headerMouseEvent": "fn(evt: ?)",
            "ignoreArea": "fn(name: ?)",
            "initFocusView": "fn()",
            "isFirstFocusCell": "fn() -> bool",
            "isFocusCell": "fn(inCell: Object, inRowIndex: number) -> ?",
            "isLastFocusCell": "fn() -> bool",
            "isNavHeader": "fn() -> ?",
            "isNoFocusCell": "fn() -> bool",
            "move": "fn(inRowDelta: number, inColDelta: number)",
            "next": "fn()",
            "nextKey": "fn(e: ?)",
            "placeArea": "fn(name: ?, pos: ?, otherAreaName: ?)",
            "previous": "fn()",
            "previousKey": "fn(e: ?)",
            "removeArea": "fn(areaName: ?)",
            "scrollIntoView": "fn() -> ?",
            "setFocusCell": "fn(inCell: Object, inRowIndex: number)",
            "setFocusIndex": "fn(inRowIndex: number, inCellIndex: number)",
            "styleRow": "fn(inRow: ?)",
            "tab": "fn(step: ?, evt: ?)",
            "tabOut": "fn(inFocusNode: ?)"
          }
        },
        "plugins": {
          "_SelectionPreserver": {
            "!type": "fn(selection: ?)",
            "prototype": {
              "destroy": "fn()",
              "reset": "fn()",
              "onSelectedById": "fn(id: ?, rowIndex: ?, value: ?)"
            }
          },
          "_RowMapLayer": {
            "!type": "fn(grid: ?)",
            "prototype": {
              "layerFuncName": "string",
              "tags": "[?]",
              "clearMapping": "fn()",
              "enabled": "fn(toEnable: bool) -> bool",
              "initialize": "fn(store: ?)",
              "invalidate": "fn()",
              "name": "fn() -> ?",
              "originFetch": "fn() -> ?",
              "setMapping": "fn(mapping: Object)",
              "uninitialize": "fn()"
            }
          },
          "AutoScroll": {
            "!type": "fn(grid: ?, args: ?)",
            "prototype": {
              "autoScrollInterval": "number",
              "autoScrollMargin": "number",
              "grid": "Object",
              "name": "string",
              "option": "Object",
              "privates": "Object",
              "connect": "fn(obj: ?, event: ?, method: ?) -> ?",
              "destroy": "fn()",
              "disconnect": "fn(handle: ?)",
              "init": "fn()",
              "subscribe": "fn(topic: ?, method: ?) -> ?",
              "unsubscribe": "fn(handle: ?)",
              "onPostInit": "fn()",
              "onPreInit": "fn()",
              "onSetStore": "fn(store: ?)",
              "onStartUp": "fn()"
            }
          },
          "Cookie": {
            "!type": "fn(grid: ?, args: ?)",
            "prototype": {
              "grid": "Object",
              "name": "string",
              "option": "Object",
              "privates": "Object",
              "addCookieHandler": "fn(args: Object)",
              "connect": "fn(obj: ?, event: ?, method: ?) -> ?",
              "destroy": "fn()",
              "disconnect": "fn(handle: ?)",
              "getCookieEnabled": "fn(cookieName: String) -> ?",
              "init": "fn()",
              "removeCookie": "fn()",
              "setCookieEnabled": "fn(cookieName: String, enabled: bool)",
              "subscribe": "fn(topic: ?, method: ?) -> ?",
              "unsubscribe": "fn(handle: ?)",
              "onPostInit": "fn()",
              "onPreInit": "fn()",
              "onSetStore": "fn(store: ?)",
              "onStartUp": "fn()"
            }
          },
          "CellMerge": {
            "!type": "fn(grid: ?, args: ?)",
            "prototype": {
              "grid": "Object",
              "name": "string",
              "option": "Object",
              "privates": "Object",
              "connect": "fn(obj: ?, event: ?, method: ?) -> ?",
              "destroy": "fn()",
              "disconnect": "fn(handle: ?)",
              "getMergedCells": "fn() -> ?",
              "getMergedCellsByRow": "fn(rowIndex: ?) -> ?",
              "init": "fn()",
              "mergeCells": "fn(rowTester: ?, startColumnIndex: number, endColumnIndex: number, majorColumnIndex: number) -> ?",
              "subscribe": "fn(topic: ?, method: ?) -> ?",
              "unmergeCells": "fn(mergeHandler: Object)",
              "unsubscribe": "fn(handle: ?)",
              "onPostInit": "fn()",
              "onPreInit": "fn()",
              "onSetStore": "fn(store: ?)",
              "onStartUp": "fn()"
            }
          },
          "Exporter": {
            "!type": "fn(grid: dojox.grid.EnhancedGrid, args: ?)",
            "prototype": {
              "grid": "Object",
              "name": "string",
              "option": "Object",
              "privates": "Object",
              "writerNames": "string",
              "connect": "fn(obj: ?, event: ?, method: ?) -> ?",
              "destroy": "fn()",
              "disconnect": "fn(handle: ?)",
              "exportGrid": "fn(type: String, args: Object, onExported: ?)",
              "exportSelected": "fn(type: String, writerArgs: Object, onExported: ?) -> ?",
              "init": "fn()",
              "registerWriter": "fn(fileType: String, writerClsName: String)",
              "setExportFormatter": "fn(formatter: ?)",
              "subscribe": "fn(topic: ?, method: ?) -> ?",
              "unsubscribe": "fn(handle: ?)",
              "onPostInit": "fn()",
              "onPreInit": "fn()",
              "onSetStore": "fn(store: ?)",
              "onStartUp": "fn()"
            }
          },
          "DnD": {
            "!type": "fn(grid: ?, args: ?)",
            "prototype": {
              "grid": "Object",
              "name": "string",
              "option": "Object",
              "privates": "Object",
              "connect": "fn(obj: ?, event: ?, method: ?) -> ?",
              "copyOnly": "fn(isCopyOnly: ?) -> bool",
              "destroy": "fn()",
              "disconnect": "fn(handle: ?)",
              "init": "fn()",
              "setupConfig": "fn(config: Object)",
              "subscribe": "fn(topic: ?, method: ?) -> ?",
              "unsubscribe": "fn(handle: ?)",
              "onDraggingOut": "fn(sourcePlugin: ?)",
              "onDraggingOver": "fn(sourcePlugin: ?)",
              "onDragIn": "fn(sourcePlugin: ?, isCopy: ?)",
              "onDragOut": "fn(isMove: ?)",
              "onPostInit": "fn()",
              "onPreInit": "fn()",
              "onSetStore": "fn(store: ?)",
              "onStartUp": "fn()"
            }
          },
          "Filter": {
            "!type": "fn(grid: ?, args: ?)",
            "prototype": {
              "grid": "Object",
              "name": "string",
              "option": "Object",
              "privates": "Object",
              "connect": "fn(obj: ?, event: ?, method: ?) -> ?",
              "destroy": "fn()",
              "disconnect": "fn(handle: ?)",
              "init": "fn()",
              "subscribe": "fn(topic: ?, method: ?) -> ?",
              "unsubscribe": "fn(handle: ?)",
              "onPostInit": "fn()",
              "onPreInit": "fn()",
              "onSetStore": "fn(store: ?)",
              "onStartUp": "fn()"
            }
          },
          "Dialog": {
            "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
            "prototype": {
              "active": "bool",
              "set": "fn(property: string, value: bool)",
              "get": "fn(property: string) -> bool",
              "watch": "fn(property: string, callback: ?) -> ret432",
              "attachScope": "Object",
              "attributeMap": "Object",
              "autofocus": "bool",
              "baseClass": "string",
              "class": "string",
              "closable": "bool",
              "containerNode": "HTMLElement",
              "content": "string",
              "cssStateNodes": "Object",
              "dir": "string",
              "doLayout": "bool",
              "domNode": "HTMLElement",
              "draggable": "bool",
              "duration": "number",
              "errorMessage": "string",
              "extractContent": "bool",
              "focused": "bool",
              "hovering": "bool",
              "href": "string",
              "id": "string",
              "ioArgs": "Object",
              "isLayoutContainer": "bool",
              "isLoaded": "bool",
              "lang": "string",
              "loadingMessage": "string",
              "maxRatio": "number",
              "onLoadDeferred": "Object",
              "open": "bool",
              "ownerDocument": "Object",
              "parseOnLoad": "bool",
              "parserScope": "string",
              "preload": "bool",
              "preventCache": "bool",
              "refNode": "Object",
              "refocus": "bool",
              "refreshOnShow": "bool",
              "searchContainerNode": "bool",
              "srcNodeRef": "HTMLElement",
              "state": "string",
              "stopParser": "bool",
              "style": "string",
              "templatePath": "string",
              "templateString": "string",
              "title": "string",
              "tooltip": "string",
              "addChild": "fn(widget: dijit._WidgetBase, insertIndex: number)",
              "attr": "fn(name: String, value: Object) -> ?",
              "buildRendering": "fn()",
              "cancel": "fn()",
              "connect": "fn(obj: Object, event: String, method: String) -> ?",
              "connectChildren": "fn(inStartup: bool)",
              "create": "fn(params: ?, srcNodeRef: ?)",
              "defer": "fn(fcn: Function, delay: number) -> Object",
              "destroy": "fn()",
              "destroyDescendants": "fn(preserveDom: bool)",
              "destroyRecursive": "fn(preserveDom: bool)",
              "destroyRendering": "fn(preserveDom?: bool)",
              "disconnect": "fn(handle: ?)",
              "disconnectChildren": "fn()",
              "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
              "execute": "fn(formContents: Object)",
              "focus": "fn()",
              "getChildren": "fn() -> [?]",
              "getDescendants": "fn() -> [?]",
              "getIndexOfChild": "fn(child: dijit._WidgetBase) -> ?",
              "getParent": "fn() -> ?",
              "getValues": "fn() -> ?",
              "hasChildren": "fn() -> bool",
              "hide": "fn() -> ?",
              "ioMethod": "fn(args: Object) -> ?",
              "isFocusable": "fn() -> ?",
              "isLeftToRight": "fn() -> ?",
              "isValid": {},
              "markupFactory": "fn(params: ?, node: ?, ctor: ?) -> ?",
              "on": "fn(type: String, func: Function) -> ?",
              "own": "fn() -> ?",
              "placeAt": "fn(reference: String, position: String) -> ?",
              "postCreate": "fn()",
              "postMixInProperties": "fn()",
              "refresh": "fn() -> ?",
              "removeChild": "fn(widget: dijit._WidgetBase)",
              "reset": "fn()",
              "resize": "fn(changeSize: ?, resultSize: ?)",
              "setAttribute": "fn(attr: String, value: ?)",
              "setContent": "fn(data: String)",
              "setHref": "fn(href: String) -> ?",
              "setValues": "fn(val: ?) -> ?",
              "show": "fn() -> ?",
              "startup": "fn()",
              "subscribe": "fn(t: String, method: Function) -> ?",
              "uninitialize": "fn() -> bool",
              "unsubscribe": "fn(handle: Object)",
              "validate": "fn() -> ?",
              "getCachedTemplate": "fn() -> ?",
              "onBlur": "fn()",
              "onCancel": "fn()",
              "onClick": "fn(event: ?)",
              "onClose": "fn() -> bool",
              "onContentError": "fn(error: Error)",
              "onDblClick": "fn(event: ?)",
              "onDownloadEnd": "fn()",
              "onDownloadError": "fn(error: Error) -> ?",
              "onDownloadStart": "fn() -> ?",
              "onExecute": "fn()",
              "onFocus": "fn()",
              "onHide": "fn()",
              "onKeyDown": "fn(event: ?)",
              "onKeyPress": "fn(event: ?)",
              "onKeyUp": "fn(event: ?)",
              "onLoad": "fn(data: ?)",
              "onMouseDown": "fn(event: ?)",
              "onMouseEnter": "fn(event: ?)",
              "onMouseLeave": "fn(event: ?)",
              "onMouseMove": "fn(event: ?)",
              "onMouseOut": "fn(event: ?)",
              "onMouseOver": "fn(event: ?)",
              "onMouseUp": "fn(event: ?)",
              "onShow": "fn()",
              "onUnload": "fn()",
              "onValidStateChange": "fn(isValid: bool)"
            }
          },
          "IndirectSelection": {
            "!type": "fn()",
            "prototype": {
              "grid": "Object",
              "name": "string",
              "option": "Object",
              "privates": "Object",
              "addRowSelectCell": "fn(option: ?)",
              "connect": "fn(obj: ?, event: ?, method: ?) -> ?",
              "destroy": "fn()",
              "disconnect": "fn(handle: ?)",
              "init": "fn()",
              "subscribe": "fn(topic: ?, method: ?) -> ?",
              "unsubscribe": "fn(handle: ?)",
              "onPostInit": "fn()",
              "onPreInit": "fn()",
              "onSetStore": "fn(store: ?)",
              "onStartUp": "fn()"
            }
          },
          "GridSource": {
            "!type": "fn(node: HTMLElement, params?: Object)",
            "prototype": {
              "accept": "[?]",
              "allowNested": "bool",
              "autoSync": "bool",
              "copyOnly": "bool",
              "current": "HTMLElement",
              "delay": "number",
              "generateText": "bool",
              "horizontal": "bool",
              "insertNodesForGrid": "bool",
              "isSource": "bool",
              "map": "Object",
              "selection": "Object",
              "selfAccept": "bool",
              "selfCopy": "bool",
              "singular": "bool",
              "skipForm": "bool",
              "withHandles": "bool",
              "checkAcceptance": "fn(source: ?, nodes: ?) -> ?",
              "clearItems": "fn()",
              "copyState": "fn(keyPressed: bool, self: bool) -> ?",
              "creator": "fn()",
              "deleteSelectedNodes": "fn() -> Function",
              "delItem": "fn(key: String)",
              "destroy": "fn()",
              "emit": "fn(type: ?, event: ?) -> ?",
              "forInItems": "fn(f: Function, o: Object) -> String",
              "forInSelectedItems": "fn(f: Function, o: Object)",
              "getAllNodes": "fn() -> ?",
              "getCellContent": "fn(grid: ?, leftTopCell: ?, rightBottomCell: ?)",
              "getColumnContent": "fn(grid: ?, colIndexes: ?)",
              "getItem": "fn(key: String) -> ?",
              "getRowContent": "fn(grid: ?, rowIndexes: ?)",
              "getSelectedNodes": "fn() -> ?",
              "insertNodes": "fn(data: Object, before: bool, anchor: HTMLElement) -> Function",
              "markupFactory": "fn(params: ?, node: ?) -> ?",
              "on": "fn(type: ?, listener: ?) -> ?",
              "selectAll": "fn() -> ?",
              "selectNone": "fn() -> ?",
              "setItem": "fn(key: String, data: ?)",
              "startup": "fn()",
              "sync": "fn() -> Function",
              "onDndCancel": "fn()",
              "onDndDrop": "fn(source: Object, nodes: [?], copy: bool, target: Object)",
              "onDndSourceOver": "fn(source: Object)",
              "onDndStart": "fn(source: Object, nodes: [?], copy: bool)",
              "onDraggingOut": "fn()",
              "onDraggingOver": "fn()",
              "onDrop": "fn(source: Object, nodes: [?], copy: bool)",
              "onDropExternal": "fn(source: ?, nodes: ?, copy: ?)",
              "onDropGridCells": "fn(grid: ?, leftTopCell: ?, rightBottomCell: ?)",
              "onDropGridColumns": "fn(grid: ?, colIndexes: ?)",
              "onDropGridRows": "fn(grid: ?, rowIndexes: ?)",
              "onDropInternal": "fn(nodes: [?], copy: bool)",
              "onMouseDown": "fn(e: Event)",
              "onMouseMove": "fn(e: Event)",
              "onMouseOut": "fn(e: Event)",
              "onMouseOver": "fn(e: Event)",
              "onMouseUp": "fn(e: Event)",
              "onOutEvent": "fn()",
              "onOverEvent": "fn()",
              "onSelectStart": "fn(e: Event)"
            }
          },
          "Menu": {
            "!type": "fn()",
            "prototype": {
              "grid": "Object",
              "name": "string",
              "option": "Object",
              "privates": "Object",
              "types": "Object",
              "connect": "fn(obj: ?, event: ?, method: ?) -> ?",
              "destroy": "fn()",
              "disconnect": "fn(handle: ?)",
              "init": "fn()",
              "showMenu": "fn(e: Event)",
              "subscribe": "fn(topic: ?, method: ?) -> ?",
              "unsubscribe": "fn(handle: ?)",
              "onPostInit": "fn()",
              "onPreInit": "fn()",
              "onSetStore": "fn(store: ?)",
              "onStartUp": "fn()"
            }
          },
          "Pagination": {
            "!type": "fn(inGrid: dojox.grid.EnhancedGrid, option: ?)",
            "prototype": {
              "defaultPage": "number",
              "defaultPageSize": "number",
              "description": "bool",
              "gotoButton": "bool",
              "grid": "Object",
              "maxPageStep": "number",
              "name": "string",
              "option": "Object",
              "pageSizes": "[?]",
              "pageStepper": "bool",
              "position": "Object",
              "privates": "Object",
              "sizeSwitch": "bool",
              "changePageSize": "fn(size: ?)",
              "connect": "fn(obj: ?, event: ?, method: ?) -> ?",
              "currentPage": "fn(page: number) -> ?",
              "currentPageSize": "fn(size: number) -> ?",
              "destroy": "fn()",
              "disconnect": "fn(handle: ?)",
              "firstPage": "fn()",
              "getTotalPageNum": "fn() -> ?",
              "getTotalRowCount": "fn() -> ?",
              "gotoFirstPage": "fn()",
              "gotoLastPage": "fn()",
              "gotoPage": "fn(page: ?)",
              "init": "fn()",
              "lastPage": "fn()",
              "nextPage": "fn()",
              "prevPage": "fn()",
              "removeSelectedRows": "fn()",
              "scrollToRow": "fn(inRowIndex: number) -> ?",
              "showGotoPageButton": "fn(flag: bool)",
              "subscribe": "fn(topic: ?, method: ?) -> ?",
              "unsubscribe": "fn(handle: ?)",
              "onPostInit": "fn()",
              "onPreInit": "fn()",
              "onSetStore": "fn(store: ?)",
              "onStartUp": "fn()"
            }
          },
          "NestedSorting": {
            "!type": "fn()",
            "prototype": {
              "grid": "Object",
              "name": "string",
              "option": "Object",
              "privates": "Object",
              "clearSort": "fn()",
              "connect": "fn(obj: ?, event: ?, method: ?) -> ?",
              "destroy": "fn()",
              "disconnect": "fn(handle: ?)",
              "getSortProps": "fn() -> ?",
              "init": "fn()",
              "initCookieHandler": "fn()",
              "isAsc": "fn(cellIndex: ?) -> bool",
              "isDesc": "fn(cellIndex: ?) -> bool",
              "removeSortData": "fn(cellIdx: ?)",
              "setSortData": "fn(cellIdx: ?, attr: ?, value: ?)",
              "subscribe": "fn(topic: ?, method: ?) -> ?",
              "unsubscribe": "fn(handle: ?)",
              "onPostInit": "fn()",
              "onPreInit": "fn()",
              "onSetStore": "fn(store: ?)",
              "onStartUp": "fn()"
            }
          },
          "Printer": {
            "!type": "fn(grid: ?)",
            "prototype": {
              "grid": "Object",
              "name": "string",
              "option": "Object",
              "privates": "Object",
              "connect": "fn(obj: ?, event: ?, method: ?) -> ?",
              "destroy": "fn()",
              "disconnect": "fn(handle: ?)",
              "exportSelectedToHTML": "fn(args: Object, onExported: ?)",
              "exportToHTML": "fn(args: Object, onExported: ?)",
              "init": "fn()",
              "normalizeRowHeight": "fn(doc: ?)",
              "printGrid": "fn(args: Object)",
              "printSelected": "fn(args: Object)",
              "subscribe": "fn(topic: ?, method: ?) -> ?",
              "unsubscribe": "fn(handle: ?)",
              "onPostInit": "fn()",
              "onPreInit": "fn()",
              "onSetStore": "fn(store: ?)",
              "onStartUp": "fn()"
            }
          },
          "Rearrange": {
            "!type": "fn(grid: ?, args: ?)",
            "prototype": {
              "grid": "Object",
              "name": "string",
              "option": "Object",
              "privates": "Object",
              "changeCells": "fn(sourceGrid: ?, cellsToMove: ?, target: ?)",
              "clearCells": "fn(cellsToClear: ?)",
              "connect": "fn(obj: ?, event: ?, method: ?) -> ?",
              "copyCells": "fn(cellsToMove: ?, target: ?)",
              "destroy": "fn()",
              "disconnect": "fn(handle: ?)",
              "init": "fn()",
              "insertRows": "fn(sourceGrid: ?, rowsToMove: ?, targetPos: ?)",
              "moveCells": "fn(cellsToMove: ?, target: ?)",
              "moveColumns": "fn(colsToMove: [number], targetPos: number)",
              "moveRows": "fn(rowsToMove: [number], targetPos: number)",
              "removeRows": "fn(rowsToRemove: ?)",
              "setArgs": "fn(args: ?)",
              "subscribe": "fn(topic: ?, method: ?) -> ?",
              "unsubscribe": "fn(handle: ?)",
              "onPostInit": "fn()",
              "onPreInit": "fn()",
              "onSetStore": "fn(store: ?)",
              "onStartUp": "fn()"
            }
          },
          "Search": {
            "!type": "fn(grid: ?, args: ?)",
            "prototype": {
              "grid": "Object",
              "name": "string",
              "option": "Object",
              "privates": "Object",
              "connect": "fn(obj: ?, event: ?, method: ?) -> ?",
              "destroy": "fn()",
              "disconnect": "fn(handle: ?)",
              "init": "fn()",
              "searchRow": "fn(searchArgs: Object, onSearched: ?)",
              "subscribe": "fn(topic: ?, method: ?) -> ?",
              "unsubscribe": "fn(handle: ?)",
              "onPostInit": "fn()",
              "onPreInit": "fn()",
              "onSetStore": "fn(store: ?)",
              "onStartUp": "fn()"
            }
          },
          "Selector": {
            "!type": "fn(grid: ?, args: ?)",
            "prototype": {
              "grid": "Object",
              "name": "string",
              "option": "Object",
              "privates": "Object",
              "clear": "fn(type: String)",
              "connect": "fn(obj: ?, event: ?, method: ?) -> ?",
              "deselect": "fn(type: ?, rowIndex: ?, colIndex: ?)",
              "destroy": "fn()",
              "disconnect": "fn(handle: ?)",
              "getLastSelectedRange": "fn(type: ?) -> ?",
              "getSelected": "fn(type: String, includeExceptions: bool) -> ?",
              "getSelectedCount": "fn(type: String, includeExceptions: bool) -> ?",
              "getSelectedType": "fn() -> ?",
              "init": "fn()",
              "isSelected": "fn(type: String, rowIndex: number, colIndex: number) -> ?",
              "isSelecting": "fn(type: String) -> ?",
              "select": "fn(type: String, rowIndex: number, colIndex: number)",
              "selectEnabled": "fn(toEnable: bool) -> ?",
              "selectRange": "fn(type: String, start: number, end: number, toSelect: ?)",
              "setupConfig": "fn(config: Object)",
              "subscribe": "fn(topic: ?, method: ?) -> ?",
              "toggleSelect": "fn(type: ?, rowIndex: ?, colIndex: ?)",
              "unsubscribe": "fn(handle: ?)",
              "onPostInit": "fn()",
              "onPreInit": "fn()",
              "onSetStore": "fn()",
              "onStartUp": "fn()"
            }
          },
          "exporter": {
            "_ExportWriter": {
              "!type": "fn(writerArgs?: Object)",
              "prototype": {
                "argObj": "Object",
                "afterContent": "fn() -> ?",
                "afterContentRow": "fn(argObj: Object) -> ?",
                "afterHeader": "fn() -> ?",
                "afterSubrow": "fn(argObj: Object) -> ?",
                "afterView": "fn(argObj: Object) -> ?",
                "beforeContent": "fn(items: [?]) -> ?",
                "beforeContentRow": "fn(argObj: Object) -> ?",
                "beforeHeader": "fn(grid: dojox.grid.EnhancedGrid) -> ?",
                "beforeSubrow": "fn(argObj: Object) -> ?",
                "beforeView": "fn(argObj: Object) -> ?",
                "handleCell": "fn(argObj: Object) -> ?"
              }
            },
            "CSVWriter": {
              "!type": "fn(writerArgs?: Object)",
              "prototype": {
                "argObj": "Object",
                "afterContent": "fn() -> ?",
                "afterContentRow": "fn(argObj: Object) -> ?",
                "afterHeader": "fn() -> ?",
                "afterSubrow": "fn(argObj: Object) -> ?",
                "afterView": "fn(argObj: Object) -> ?",
                "beforeContent": "fn(items: [?]) -> ?",
                "beforeContentRow": "fn(arg_obj: Object) -> bool",
                "beforeHeader": "fn(grid: dojox.grid.EnhancedGrid) -> ?",
                "beforeSubrow": "fn(argObj: Object) -> ?",
                "beforeView": "fn(argObj: Object) -> ?",
                "handleCell": "fn(arg_obj: Object)"
              }
            },
            "TableWriter": {
              "!type": "fn(writerArgs?: Object)",
              "prototype": {
                "argObj": "Object",
                "afterContent": "fn()",
                "afterContentRow": "fn(argObj: Object) -> ?",
                "afterHeader": "fn() -> ?",
                "afterSubrow": "fn(arg_obj: Object)",
                "afterView": "fn(arg_obj: Object)",
                "beforeContent": "fn(items: [?]) -> ?",
                "beforeContentRow": "fn(argObj: Object) -> ?",
                "beforeHeader": "fn(grid: dojox.grid.EnhancedGrid) -> ?",
                "beforeSubrow": "fn(arg_obj: Object) -> bool",
                "beforeView": "fn(arg_obj: Object) -> bool",
                "handleCell": "fn(arg_obj: Object)"
              }
            }
          },
          "filter": {
            "FilterBuilder": {
              "!type": "fn()",
              "prototype": {
                "defaultArgs": "Object",
                "supportedOps": "Object",
                "supportedTypes": "Object",
                "buildExpression": "fn(def: ?) -> ?"
              }
            },
            "FilterDefDialog": {
              "!type": "fn(args: ?)",
              "prototype": {
                "curColIdx": "number",
                "plugin": "Object",
                "addCriteriaBoxes": "fn(cnt: number)",
                "canFilter": "fn() -> bool",
                "clearFilter": "fn(noRefresh: ?)",
                "closeDialog": "fn()",
                "destroy": "fn()",
                "getColumnLabelByValue": "fn(v: ?) -> ?",
                "getColumnType": "fn(colIndex: number) -> ?",
                "getConditionLabelByValue": "fn(type: ?, c: ?) -> ?",
                "getCriteria": "fn(idx: number) -> ?",
                "getExprForColumn": "fn(value: ?, colIdx: ?, type: ?, condition: ?) -> Object",
                "getExprForCriteria": "fn(rule: ?) -> ?",
                "getFilter": "fn() -> Object",
                "removeCriteriaBoxes": "fn(cnt: number, isIdx: bool)",
                "setFilter": "fn(rules: ?, ruleRelation: ?)",
                "showDialog": "fn(colIndex: number)",
                "onCancel": "fn(e: ?)",
                "onClearFilter": "fn(e: ?)",
                "onFilter": "fn(e: ?)",
                "onMoveColumn": "fn(sourceViewIndex: ?, destViewIndex: ?, cellIndex: ?, targetIndex: ?, before: ?)",
                "onRendered": "fn(cbox: ?)"
              }
            },
            "FilterStatusTip": {
              "!type": "fn(args: ?)",
              "prototype": {
                "closeDialog": "fn()",
                "destroy": "fn()",
                "showDialog": "fn(pos_x: number, pos_y: number, columnIdx: ?)"
              }
            },
            "ClearFilterConfirm": {
              "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
              "prototype": {
                "attachScope": "Object",
                "set": "fn(property: string, value: Object)",
                "get": "fn(property: string) -> Object",
                "watch": "fn(property: string, callback: ?) -> ret479",
                "attributeMap": "Object",
                "baseClass": "string",
                "class": "string",
                "containerNode": "HTMLElement",
                "contextRequire": "Function",
                "dir": "string",
                "domNode": "HTMLElement",
                "focused": "bool",
                "id": "string",
                "lang": "string",
                "observer": "string",
                "ownerDocument": "Object",
                "plugin": "Object",
                "searchContainerNode": "bool",
                "srcNodeRef": "HTMLElement",
                "style": "string",
                "templatePath": "string",
                "templateString": "string",
                "title": "string",
                "tooltip": "string",
                "widgetsInTemplate": "bool",
                "attr": "fn(name: String, value: Object) -> ?",
                "buildRendering": "fn()",
                "connect": "fn(obj: Object, event: String, method: String) -> ?",
                "defer": "fn(fcn: Function, delay: number) -> Object",
                "destroy": "fn(preserveDom?: bool)",
                "destroyDescendants": "fn(preserveDom: bool)",
                "destroyRecursive": "fn(preserveDom: bool)",
                "destroyRendering": "fn(preserveDom?: bool)",
                "disconnect": "fn(handle: ?)",
                "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
                "getChildren": "fn() -> [?]",
                "getDescendants": "fn() -> [?]",
                "getParent": "fn() -> ?",
                "isFocusable": "fn() -> ?",
                "isLeftToRight": "fn() -> ?",
                "on": "fn(type: String, func: Function) -> ?",
                "own": "fn() -> ?",
                "placeAt": "fn(reference: String, position: String) -> ?",
                "postCreate": "fn()",
                "postMixInProperties": "fn()",
                "setAttribute": "fn(attr: String, value: ?)",
                "startup": "fn()",
                "subscribe": "fn(t: String, method: Function) -> ?",
                "uninitialize": "fn() -> bool",
                "unsubscribe": "fn(handle: Object)",
                "getCachedTemplate": "fn() -> ?",
                "onBlur": "fn()",
                "onClick": "fn(event: ?)",
                "onClose": "fn() -> bool",
                "onDblClick": "fn(event: ?)",
                "onFocus": "fn()",
                "onHide": "fn()",
                "onKeyDown": "fn(event: ?)",
                "onKeyPress": "fn(event: ?)",
                "onKeyUp": "fn(event: ?)",
                "onMouseDown": "fn(event: ?)",
                "onMouseEnter": "fn(event: ?)",
                "onMouseLeave": "fn(event: ?)",
                "onMouseMove": "fn(event: ?)",
                "onMouseOut": "fn(event: ?)",
                "onMouseOver": "fn(event: ?)",
                "onMouseUp": "fn(event: ?)",
                "onShow": "fn()"
              }
            },
            "FilterBar": {
              "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
              "prototype": {
                "attachScope": "Object",
                "set": "fn(property: string, value: Object)",
                "get": "fn(property: string) -> Object",
                "watch": "fn(property: string, callback: ?) -> ret502",
                "attributeMap": "Object",
                "baseClass": "string",
                "class": "string",
                "containerNode": "HTMLElement",
                "contextRequire": "Function",
                "dir": "string",
                "domNode": "HTMLElement",
                "focused": "bool",
                "id": "string",
                "lang": "string",
                "observer": "string",
                "ownerDocument": "Object",
                "plugin": "Object",
                "searchContainerNode": "bool",
                "srcNodeRef": "HTMLElement",
                "style": "string",
                "templatePath": "string",
                "templateString": "string",
                "title": "string",
                "tooltip": "string",
                "widgetsInTemplate": "bool",
                "attr": "fn(name: String, value: Object) -> ?",
                "buildRendering": "fn()",
                "connect": "fn(obj: Object, event: String, method: String) -> ?",
                "defer": "fn(fcn: Function, delay: number) -> Object",
                "destroy": "fn(preserveDom?: bool)",
                "destroyDescendants": "fn(preserveDom: bool)",
                "destroyRecursive": "fn(preserveDom: bool)",
                "destroyRendering": "fn(preserveDom?: bool)",
                "disconnect": "fn(handle: ?)",
                "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
                "getChildren": "fn() -> [?]",
                "getColumnIdx": "fn(coordX: number) -> number",
                "getDescendants": "fn() -> [?]",
                "getParent": "fn() -> ?",
                "isFilterBarShown": "fn() -> bool",
                "isFocusable": "fn() -> ?",
                "isLeftToRight": "fn() -> ?",
                "on": "fn(type: String, func: Function) -> ?",
                "own": "fn() -> ?",
                "placeAt": "fn(reference: String, position: String) -> ?",
                "postCreate": "fn()",
                "postMixInProperties": "fn()",
                "setAttribute": "fn(attr: String, value: ?)",
                "showFilterBar": "fn(toShow: ?, useAnim: ?, animArgs: ?)",
                "startup": "fn()",
                "subscribe": "fn(t: String, method: Function) -> ?",
                "toggleClearFilterBtn": "fn(toHide: ?)",
                "toggleFilterBar": "fn(useAnim: ?, animArgs: ?)",
                "uninitialize": "fn() -> bool",
                "unsubscribe": "fn(handle: Object)",
                "getCachedTemplate": "fn() -> ?",
                "onBlur": "fn()",
                "onClick": "fn(event: ?)",
                "onClose": "fn() -> bool",
                "onDblClick": "fn(event: ?)",
                "onFocus": "fn()",
                "onHide": "fn()",
                "onKeyDown": "fn(event: ?)",
                "onKeyPress": "fn(event: ?)",
                "onKeyUp": "fn(event: ?)",
                "onMouseDown": "fn(event: ?)",
                "onMouseEnter": "fn(event: ?)",
                "onMouseLeave": "fn(event: ?)",
                "onMouseMove": "fn(event: ?)",
                "onMouseOut": "fn(event: ?)",
                "onMouseOver": "fn(event: ?)",
                "onMouseUp": "fn(event: ?)",
                "onShow": "fn()"
              }
            },
            "_ConditionExpr": {
              "_DataExpr": {
                "!type": "fn(dataValue?: ?, isColumn?: bool, convertArgs?: Object)",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> Object",
                  "getName": "fn() -> ?",
                  "getValue": "fn() -> ?",
                  "toObject": "fn() -> String"
                }
              },
              "_BiOpExpr": {
                "!type": "fn()",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> ?",
                  "getName": "fn() -> ?",
                  "toObject": "fn() -> Object"
                }
              },
              "_OperatorExpr": {
                "!type": "fn()",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> ?",
                  "getName": "fn() -> ?",
                  "toObject": "fn() -> Object"
                }
              },
              "_ConditionExpr": {
                "!type": "fn()",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> ?",
                  "getName": "fn() -> ?",
                  "toObject": "fn() -> ?"
                }
              },
              "_UniOpExpr": {
                "!type": "fn()",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> ?",
                  "getName": "fn() -> ?",
                  "toObject": "fn() -> Object"
                }
              }
            },
            "_DataExprs": {
              "BooleanExpr": {
                "!type": "fn(dataValue?: ?, isColumn?: bool, convertArgs?: Object)",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> Object",
                  "getName": "fn() -> ?",
                  "getValue": "fn() -> ?",
                  "toObject": "fn() -> String"
                }
              },
              "DateExpr": {
                "!type": "fn(dataValue?: ?, isColumn?: bool, convertArgs?: Object)",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> Object",
                  "getName": "fn() -> ?",
                  "getValue": "fn() -> ?",
                  "toObject": "fn() -> ?"
                }
              },
              "NumberExpr": {
                "!type": "fn(dataValue?: ?, isColumn?: bool, convertArgs?: Object)",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> Object",
                  "getName": "fn() -> ?",
                  "getValue": "fn() -> ?",
                  "toObject": "fn() -> String"
                }
              },
              "StringExpr": {
                "!type": "fn(dataValue?: ?, isColumn?: bool, convertArgs?: Object)",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> Object",
                  "getName": "fn() -> ?",
                  "getValue": "fn() -> ?",
                  "toObject": "fn() -> String"
                }
              },
              "TimeExpr": {
                "!type": "fn(dataValue?: ?, isColumn?: bool, convertArgs?: Object)",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> Object",
                  "getName": "fn() -> ?",
                  "getValue": "fn() -> ?",
                  "toObject": "fn() -> ?"
                }
              },
              "_ConditionExpr": {
                "!type": "fn()",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> ?",
                  "getName": "fn() -> ?",
                  "toObject": "fn() -> ?"
                }
              },
              "_BiOpExpr": {
                "!type": "fn()",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> ?",
                  "getName": "fn() -> ?",
                  "toObject": "fn() -> Object"
                }
              },
              "_OperatorExpr": {
                "!type": "fn()",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> ?",
                  "getName": "fn() -> ?",
                  "toObject": "fn() -> Object"
                }
              },
              "_UniOpExpr": {
                "!type": "fn()",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> ?",
                  "getName": "fn() -> ?",
                  "toObject": "fn() -> Object"
                }
              },
              "_DataExpr": {
                "!type": "fn(dataValue?: ?, isColumn?: bool, convertArgs?: Object)",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> Object",
                  "getName": "fn() -> ?",
                  "getValue": "fn() -> ?",
                  "toObject": "fn() -> String"
                }
              }
            },
            "_FilterExpr": {
              "BooleanExpr": {
                "!type": "fn(dataValue?: ?, isColumn?: bool, convertArgs?: Object)",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> Object",
                  "getName": "fn() -> ?",
                  "getValue": "fn() -> ?",
                  "toObject": "fn() -> String"
                }
              },
              "Contains": {
                "!type": "fn()",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> ?",
                  "getName": "fn() -> ?",
                  "toObject": "fn() -> Object"
                }
              },
              "DateExpr": {
                "!type": "fn(dataValue?: ?, isColumn?: bool, convertArgs?: Object)",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> Object",
                  "getName": "fn() -> ?",
                  "getValue": "fn() -> ?",
                  "toObject": "fn() -> ?"
                }
              },
              "EndsWith": {
                "!type": "fn()",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> ?",
                  "getName": "fn() -> ?",
                  "toObject": "fn() -> Object"
                }
              },
              "EqualTo": {
                "!type": "fn()",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> ?",
                  "getName": "fn() -> ?",
                  "toObject": "fn() -> Object"
                }
              },
              "IsEmpty": {
                "!type": "fn()",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> ?",
                  "getName": "fn() -> ?",
                  "toObject": "fn() -> Object"
                }
              },
              "LargerThan": {
                "!type": "fn()",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> ?",
                  "getName": "fn() -> ?",
                  "toObject": "fn() -> Object"
                }
              },
              "LargerThanOrEqualTo": {
                "!type": "fn()",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> ?",
                  "getName": "fn() -> ?",
                  "toObject": "fn() -> Object"
                }
              },
              "LessThan": {
                "!type": "fn()",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> ?",
                  "getName": "fn() -> ?",
                  "toObject": "fn() -> Object"
                }
              },
              "LessThanOrEqualTo": {
                "!type": "fn()",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> ?",
                  "getName": "fn() -> ?",
                  "toObject": "fn() -> Object"
                }
              },
              "LogicALL": {
                "!type": "fn()",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> ?",
                  "getName": "fn() -> ?",
                  "toObject": "fn() -> Object"
                }
              },
              "LogicAND": {
                "!type": "fn()",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> ?",
                  "getName": "fn() -> ?",
                  "toObject": "fn() -> Object"
                }
              },
              "LogicANY": {
                "!type": "fn()",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> ?",
                  "getName": "fn() -> ?",
                  "toObject": "fn() -> Object"
                }
              },
              "LogicNOT": {
                "!type": "fn()",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> ?",
                  "getName": "fn() -> ?",
                  "toObject": "fn() -> Object"
                }
              },
              "LogicOR": {
                "!type": "fn()",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> ?",
                  "getName": "fn() -> ?",
                  "toObject": "fn() -> Object"
                }
              },
              "LogicXOR": {
                "!type": "fn()",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> ?",
                  "getName": "fn() -> ?",
                  "toObject": "fn() -> Object"
                }
              },
              "Matches": {
                "!type": "fn()",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> ?",
                  "getName": "fn() -> ?",
                  "toObject": "fn() -> Object"
                }
              },
              "NumberExpr": {
                "!type": "fn(dataValue?: ?, isColumn?: bool, convertArgs?: Object)",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> Object",
                  "getName": "fn() -> ?",
                  "getValue": "fn() -> ?",
                  "toObject": "fn() -> String"
                }
              },
              "StartsWith": {
                "!type": "fn()",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> ?",
                  "getName": "fn() -> ?",
                  "toObject": "fn() -> Object"
                }
              },
              "StringExpr": {
                "!type": "fn(dataValue?: ?, isColumn?: bool, convertArgs?: Object)",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> Object",
                  "getName": "fn() -> ?",
                  "getValue": "fn() -> ?",
                  "toObject": "fn() -> String"
                }
              },
              "TimeExpr": {
                "!type": "fn(dataValue?: ?, isColumn?: bool, convertArgs?: Object)",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> Object",
                  "getName": "fn() -> ?",
                  "getValue": "fn() -> ?",
                  "toObject": "fn() -> ?"
                }
              },
              "_BiOpExpr": {
                "!type": "fn()",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> ?",
                  "getName": "fn() -> ?",
                  "toObject": "fn() -> Object"
                }
              },
              "_DataExpr": {
                "!type": "fn(dataValue?: ?, isColumn?: bool, convertArgs?: Object)",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> Object",
                  "getName": "fn() -> ?",
                  "getValue": "fn() -> ?",
                  "toObject": "fn() -> String"
                }
              },
              "_OperatorExpr": {
                "!type": "fn()",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> ?",
                  "getName": "fn() -> ?",
                  "toObject": "fn() -> Object"
                }
              },
              "_ConditionExpr": {
                "!type": "fn()",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> ?",
                  "getName": "fn() -> ?",
                  "toObject": "fn() -> ?"
                }
              },
              "_UniOpExpr": {
                "!type": "fn()",
                "prototype": {
                  "applyRow": "fn(datarow: Object, getter: ?) -> ?",
                  "getName": "fn() -> ?",
                  "toObject": "fn() -> Object"
                }
              }
            },
            "FilterLayer": {
              "ClientSideFilterLayer": {
                "!type": "fn(args: ?)",
                "prototype": {
                  "layerFuncName": "string",
                  "tags": "[?]",
                  "enabled": "fn(toEnable: bool) -> bool",
                  "fetchAllOnFirstFilter": "fn(toFetchAll: bool) -> ?",
                  "filterDef": "fn(filter: dojox.grid.enhanced.plugins.filter._ConditionExpr) -> ?",
                  "initialize": "fn(store: ?)",
                  "name": "fn() -> ?",
                  "originFetch": "fn() -> ?",
                  "setGetter": "fn(getter: Function)",
                  "uninitialize": "fn(store: ?)",
                  "onFilterDefined": "fn(filter: ?)",
                  "onFiltered": "fn(filteredSize: number, totalSize: number)",
                  "onRowMappingChange": "fn(mapping: ?)"
                }
              },
              "ServerSideFilterLayer": {
                "!type": "fn(args: ?)",
                "prototype": {
                  "layerFuncName": "string",
                  "tags": "[?]",
                  "command": "fn(cmdName: String, cmdContent: ?) -> ?",
                  "enabled": "fn(toEnable: bool) -> ?",
                  "filterDef": "fn(filter: dojox.grid.enhanced.plugins.filter._ConditionExpr) -> ?",
                  "initialize": "fn(store: ?)",
                  "invalidate": "fn()",
                  "name": "fn() -> ?",
                  "originFetch": "fn() -> ?",
                  "uninitialize": "fn(store: ?)",
                  "useCommands": "fn(toUse: bool) -> bool",
                  "onCommandError": "fn(error: Error)",
                  "onCommandLoad": "fn(responce: String, userRequest: Object)",
                  "onFilterDefined": "fn(filter: ?)",
                  "onFiltered": "fn(filteredSize: number, totalSize: number)"
                }
              },
              "wrap": "fn(store: ?, funcName: ?, layer: dojox.grid.enhanced.plugins._StoreLayer._StoreLayer, layerFuncName: ?) -> ?",
              "_ServerSideLayer": {
                "!type": "fn(args: ?)",
                "prototype": {
                  "layerFuncName": "string",
                  "tags": "[?]",
                  "command": "fn(cmdName: String, cmdContent: ?) -> ?",
                  "enabled": "fn(toEnable: bool) -> ?",
                  "initialize": "fn(store: ?)",
                  "invalidate": "fn()",
                  "name": "fn() -> ?",
                  "originFetch": "fn() -> ?",
                  "uninitialize": "fn(store: ?)",
                  "useCommands": "fn(toUse: bool) -> bool",
                  "onCommandError": "fn(error: Error)",
                  "onCommandLoad": "fn(response: String, userRequest: dojo.data.api.Request)"
                }
              },
              "_StoreLayer": {
                "!type": "fn()",
                "prototype": {
                  "layerFuncName": "string",
                  "tags": "[?]",
                  "enabled": "fn(toEnable: bool) -> bool",
                  "initialize": "fn(store: ?)",
                  "invalidate": "fn()",
                  "name": "fn() -> ?",
                  "originFetch": "fn() -> ?",
                  "uninitialize": "fn(store: ?)"
                }
              }
            }
          },
          "_StoreLayer": {
            "wrap": "fn(store: ?, funcName: ?, layer: dojox.grid.enhanced.plugins._StoreLayer._StoreLayer, layerFuncName: ?) -> ?",
            "_StoreLayer": {
              "!type": "fn()",
              "prototype": {
                "layerFuncName": "string",
                "tags": "[?]",
                "enabled": "fn(toEnable: bool) -> bool",
                "initialize": "fn(store: ?)",
                "invalidate": "fn()",
                "name": "fn() -> ?",
                "originFetch": "fn() -> ?",
                "uninitialize": "fn(store: ?)"
              }
            },
            "_ServerSideLayer": {
              "!type": "fn(args: ?)",
              "prototype": {
                "layerFuncName": "string",
                "tags": "[?]",
                "command": "fn(cmdName: String, cmdContent: ?) -> ?",
                "enabled": "fn(toEnable: bool) -> ?",
                "initialize": "fn(store: ?)",
                "invalidate": "fn()",
                "name": "fn() -> ?",
                "originFetch": "fn() -> ?",
                "uninitialize": "fn(store: ?)",
                "useCommands": "fn(toUse: bool) -> bool",
                "onCommandError": "fn(error: Error)",
                "onCommandLoad": "fn(response: String, userRequest: dojo.data.api.Request)"
              }
            }
          }
        }
      },
      "_Builder": {},
      "util": {
        "gridViewTag": "string",
        "keyEvents": "[?]",
        "mouseEvents": "[?]",
        "na": "string",
        "rowIndexTag": "string",
        "arrayCompare": "fn(inA: ?, inB: ?)",
        "arrayInsert": "fn(inArray: ?, inIndex: ?, inValue: ?)",
        "arrayRemove": "fn(inArray: ?, inIndex: ?)",
        "arraySwap": "fn(inArray: ?, inI: ?, inJ: ?)",
        "fire": "fn(ob: ?, ev: ?, args: ?) -> ?",
        "funnelEvents": "fn(inNode: ?, inObject: ?, inMethod: ?, inEvents: ?)",
        "removeNode": "fn(inNode: ?) -> ?",
        "setStyleHeightPx": "fn(inElement: ?, inHeight: ?)"
      }
    }
  },
  "dojox/grid/_Builder": "exp",
  "dojox/grid/util": "exp",
  "dojox/grid/_EditManager": "exp",
  "dojox/grid/_RowManager": "exp",
  "dojox/grid/_Layout": "exp",
  "dojox/grid/_Events": "exp",
  "dojox/grid/_FocusManager": "exp",
  "dojox/grid/_SelectionPreserver": "exp",
  "dojox/grid/_Scroller": "exp",
  "dojox/grid/_ViewManager": "exp",
  "dojox/grid/_TreeView": "exp",
  "dojox/grid/_View": "exp",
  "dojox/grid/_Selector": "exp",
  "dojox/grid/_RowSelector": "exp",
  "dojox/grid/DataSelection": "exp",
  "dojox/grid/_Grid": "exp",
  "dojox/grid/DataGrid": "exp",
  "dojox/grid/LazyTreeGridStoreModel": "exp",
  "dojox/grid/TreeSelection": "exp",
  "dojox/grid/Selection": "exp",
  "dojox/grid/LazyTreeGrid": "exp",
  "dojox/grid/EnhancedGrid": "exp",
  "dojox/grid/TreeGrid": "exp",
  "dojox/grid/bidi/_BidiMixin": "exp",
  "dojox/grid/cells/dijit": "exp",
  "dojox/grid/cells/dijit._Widget": "exp",
  "dojox/grid/cells/dijit.CheckBox": "exp",
  "dojox/grid/cells/dijit.DateTextBox": "exp",
  "dojox/grid/cells/dijit.Editor": "exp",
  "dojox/grid/cells/dijit.ComboBox": "exp",
  "dojox/grid/cells/tree": "exp",
  "dojox/grid/cells/_base": "exp",
  "dojox/grid/cells/_base.AlwaysEdit": "exp",
  "dojox/grid/cells/_base.Bool": "exp",
  "dojox/grid/cells/_base.Cell": "exp",
  "dojox/grid/cells/_base.Select": "exp",
  "dojox/grid/cells/_base.RowIndex": "exp",
  "dojox/grid/enhanced/_Events": "exp",
  "dojox/grid/enhanced/_Plugin": "exp",
  "dojox/grid/enhanced/_PluginManager": "exp",
  "dojox/grid/enhanced/_FocusManager": "exp",
  "dojox/grid/enhanced/plugins/_StoreLayer": "exp",
  "dojox/grid/enhanced/plugins/_StoreLayer._ServerSideLayer": "exp",
  "dojox/grid/enhanced/plugins/_StoreLayer._StoreLayer": "exp",
  "dojox/grid/enhanced/plugins/_RowMapLayer": "exp",
  "dojox/grid/enhanced/plugins/_SelectionPreserver": "exp",
  "dojox/grid/enhanced/plugins/AutoScroll": "exp",
  "dojox/grid/enhanced/plugins/DnD": "exp",
  "dojox/grid/enhanced/plugins/CellMerge": "exp",
  "dojox/grid/enhanced/plugins/Exporter": "exp",
  "dojox/grid/enhanced/plugins/Cookie": "exp",
  "dojox/grid/enhanced/plugins/Filter": "exp",
  "dojox/grid/enhanced/plugins/Dialog": "exp",
  "dojox/grid/enhanced/plugins/IndirectSelection": "exp",
  "dojox/grid/enhanced/plugins/Menu": "exp",
  "dojox/grid/enhanced/plugins/Printer": "exp",
  "dojox/grid/enhanced/plugins/NestedSorting": "exp",
  "dojox/grid/enhanced/plugins/Rearrange": "exp",
  "dojox/grid/enhanced/plugins/Search": "exp",
  "dojox/grid/enhanced/plugins/Pagination": "exp",
  "dojox/grid/enhanced/plugins/GridSource": "exp",
  "dojox/grid/enhanced/plugins/Selector": "exp",
  "dojox/grid/enhanced/plugins/exporter/_ExportWriter": "exp",
  "dojox/grid/enhanced/plugins/exporter/CSVWriter": "exp",
  "dojox/grid/enhanced/plugins/exporter/TableWriter": "exp",
  "dojox/grid/enhanced/plugins/filter/_ConditionExpr": "exp",
  "dojox/grid/enhanced/plugins/filter/_ConditionExpr._BiOpExpr": "exp",
  "dojox/grid/enhanced/plugins/filter/_ConditionExpr._OperatorExpr": "exp",
  "dojox/grid/enhanced/plugins/filter/_ConditionExpr._UniOpExpr": "exp",
  "dojox/grid/enhanced/plugins/filter/_ConditionExpr._ConditionExpr": "exp",
  "dojox/grid/enhanced/plugins/filter/_ConditionExpr._DataExpr": "exp",
  "dojox/grid/enhanced/plugins/filter/_DataExprs": "exp",
  "dojox/grid/enhanced/plugins/filter/_DataExprs._BiOpExpr": "exp",
  "dojox/grid/enhanced/plugins/filter/_DataExprs._ConditionExpr": "exp",
  "dojox/grid/enhanced/plugins/filter/_DataExprs._OperatorExpr": "exp",
  "dojox/grid/enhanced/plugins/filter/_DataExprs._UniOpExpr": "exp",
  "dojox/grid/enhanced/plugins/filter/_DataExprs.NumberExpr": "exp",
  "dojox/grid/enhanced/plugins/filter/_DataExprs.DateExpr": "exp",
  "dojox/grid/enhanced/plugins/filter/_DataExprs._DataExpr": "exp",
  "dojox/grid/enhanced/plugins/filter/_DataExprs.StringExpr": "exp",
  "dojox/grid/enhanced/plugins/filter/_DataExprs.BooleanExpr": "exp",
  "dojox/grid/enhanced/plugins/filter/_DataExprs.TimeExpr": "exp",
  "dojox/grid/enhanced/plugins/filter/_FilterExpr": "exp",
  "dojox/grid/enhanced/plugins/filter/_FilterExpr._ConditionExpr": "exp",
  "dojox/grid/enhanced/plugins/filter/_FilterExpr._OperatorExpr": "exp",
  "dojox/grid/enhanced/plugins/filter/_FilterExpr._BiOpExpr": "exp",
  "dojox/grid/enhanced/plugins/filter/_FilterExpr.BooleanExpr": "exp",
  "dojox/grid/enhanced/plugins/filter/_FilterExpr._DataExpr": "exp",
  "dojox/grid/enhanced/plugins/filter/_FilterExpr._UniOpExpr": "exp",
  "dojox/grid/enhanced/plugins/filter/_FilterExpr.EndsWith": "exp",
  "dojox/grid/enhanced/plugins/filter/_FilterExpr.Contains": "exp",
  "dojox/grid/enhanced/plugins/filter/_FilterExpr.DateExpr": "exp",
  "dojox/grid/enhanced/plugins/filter/_FilterExpr.EqualTo": "exp",
  "dojox/grid/enhanced/plugins/filter/_FilterExpr.LargerThan": "exp",
  "dojox/grid/enhanced/plugins/filter/_FilterExpr.IsEmpty": "exp",
  "dojox/grid/enhanced/plugins/filter/_FilterExpr.LessThanOrEqualTo": "exp",
  "dojox/grid/enhanced/plugins/filter/_FilterExpr.LessThan": "exp",
  "dojox/grid/enhanced/plugins/filter/_FilterExpr.LargerThanOrEqualTo": "exp",
  "dojox/grid/enhanced/plugins/filter/_FilterExpr.LogicALL": "exp",
  "dojox/grid/enhanced/plugins/filter/_FilterExpr.LogicAND": "exp",
  "dojox/grid/enhanced/plugins/filter/_FilterExpr.LogicANY": "exp",
  "dojox/grid/enhanced/plugins/filter/_FilterExpr.Matches": "exp",
  "dojox/grid/enhanced/plugins/filter/_FilterExpr.LogicOR": "exp",
  "dojox/grid/enhanced/plugins/filter/_FilterExpr.LogicNOT": "exp",
  "dojox/grid/enhanced/plugins/filter/_FilterExpr.LogicXOR": "exp",
  "dojox/grid/enhanced/plugins/filter/_FilterExpr.StringExpr": "exp",
  "dojox/grid/enhanced/plugins/filter/_FilterExpr.NumberExpr": "exp",
  "dojox/grid/enhanced/plugins/filter/_FilterExpr.TimeExpr": "exp",
  "dojox/grid/enhanced/plugins/filter/_FilterExpr.StartsWith": "exp",
  "dojox/grid/enhanced/plugins/filter/FilterLayer": "exp",
  "dojox/grid/enhanced/plugins/filter/FilterLayer._ServerSideLayer": "exp",
  "dojox/grid/enhanced/plugins/filter/FilterLayer._StoreLayer": "exp",
  "dojox/grid/enhanced/plugins/filter/FilterLayer.ServerSideFilterLayer": "exp",
  "dojox/grid/enhanced/plugins/filter/FilterLayer.ClientSideFilterLayer": "exp",
  "dojox/grid/enhanced/plugins/filter/FilterBuilder": "exp",
  "dojox/grid/enhanced/plugins/filter/FilterStatusTip": "exp",
  "dojox/grid/enhanced/plugins/filter/FilterDefDialog": "exp",
  "dojox/grid/enhanced/plugins/filter/ClearFilterConfirm": "exp",
  "dojox/grid/enhanced/plugins/filter/FilterBar": "exp",
  "!name": "dojox.grid.d.ts",
  "!define": {
    "ret": {
      "unwatch": "fn()"
    },
    "ret1": {
      "unwatch": "fn()"
    },
    "ret2": {
      "unwatch": "fn()"
    },
    "ret3": {
      "unwatch": "fn()"
    },
    "ret4": {
      "unwatch": "fn()"
    },
    "ret5": {
      "unwatch": "fn()"
    },
    "ret6": {
      "unwatch": "fn()"
    },
    "ret7": {
      "unwatch": "fn()"
    },
    "ret8": {
      "unwatch": "fn()"
    },
    "ret9": {
      "unwatch": "fn()"
    },
    "ret10": {
      "unwatch": "fn()"
    },
    "ret11": {
      "unwatch": "fn()"
    },
    "ret12": {
      "unwatch": "fn()"
    },
    "ret13": {
      "unwatch": "fn()"
    },
    "ret14": {
      "unwatch": "fn()"
    },
    "ret15": {
      "unwatch": "fn()"
    },
    "ret16": {
      "unwatch": "fn()"
    },
    "ret17": {
      "unwatch": "fn()"
    },
    "ret18": {
      "unwatch": "fn()"
    },
    "ret19": {
      "unwatch": "fn()"
    },
    "ret20": {
      "unwatch": "fn()"
    },
    "ret21": {
      "unwatch": "fn()"
    },
    "ret22": {
      "unwatch": "fn()"
    },
    "ret23": {
      "unwatch": "fn()"
    },
    "ret24": {
      "unwatch": "fn()"
    },
    "ret25": {
      "unwatch": "fn()"
    },
    "ret26": {
      "unwatch": "fn()"
    },
    "ret27": {
      "unwatch": "fn()"
    },
    "ret28": {
      "unwatch": "fn()"
    },
    "ret29": {
      "unwatch": "fn()"
    },
    "ret30": {
      "unwatch": "fn()"
    },
    "ret31": {
      "unwatch": "fn()"
    },
    "ret32": {
      "unwatch": "fn()"
    },
    "ret33": {
      "unwatch": "fn()"
    },
    "ret34": {
      "unwatch": "fn()"
    },
    "ret35": {
      "unwatch": "fn()"
    },
    "ret36": {
      "unwatch": "fn()"
    },
    "ret37": {
      "unwatch": "fn()"
    },
    "ret38": {
      "unwatch": "fn()"
    },
    "ret39": {
      "unwatch": "fn()"
    },
    "ret40": {
      "unwatch": "fn()"
    },
    "ret41": {
      "unwatch": "fn()"
    },
    "ret42": {
      "unwatch": "fn()"
    },
    "ret43": {
      "unwatch": "fn()"
    },
    "ret44": {
      "unwatch": "fn()"
    },
    "ret45": {
      "unwatch": "fn()"
    },
    "ret46": {
      "unwatch": "fn()"
    },
    "ret47": {
      "unwatch": "fn()"
    },
    "ret48": {
      "unwatch": "fn()"
    },
    "ret49": {
      "unwatch": "fn()"
    },
    "ret50": {
      "unwatch": "fn()"
    },
    "ret51": {
      "unwatch": "fn()"
    },
    "ret52": {
      "unwatch": "fn()"
    },
    "ret53": {
      "unwatch": "fn()"
    },
    "ret54": {
      "unwatch": "fn()"
    },
    "ret55": {
      "unwatch": "fn()"
    },
    "ret56": {
      "unwatch": "fn()"
    },
    "ret57": {
      "unwatch": "fn()"
    },
    "ret58": {
      "unwatch": "fn()"
    },
    "ret59": {
      "unwatch": "fn()"
    },
    "ret60": {
      "unwatch": "fn()"
    },
    "ret61": {
      "unwatch": "fn()"
    },
    "ret62": {
      "unwatch": "fn()"
    },
    "ret63": {
      "unwatch": "fn()"
    },
    "ret64": {
      "unwatch": "fn()"
    },
    "ret65": {
      "unwatch": "fn()"
    },
    "ret66": {
      "unwatch": "fn()"
    },
    "ret67": {
      "unwatch": "fn()"
    },
    "ret68": {
      "unwatch": "fn()"
    },
    "ret69": {
      "unwatch": "fn()"
    },
    "ret70": {
      "unwatch": "fn()"
    },
    "ret71": {
      "unwatch": "fn()"
    },
    "ret72": {
      "unwatch": "fn()"
    },
    "ret73": {
      "unwatch": "fn()"
    },
    "ret74": {
      "unwatch": "fn()"
    },
    "ret75": {
      "unwatch": "fn()"
    },
    "ret76": {
      "unwatch": "fn()"
    },
    "ret77": {
      "unwatch": "fn()"
    },
    "ret78": {
      "unwatch": "fn()"
    },
    "ret79": {
      "unwatch": "fn()"
    },
    "ret80": {
      "unwatch": "fn()"
    },
    "ret81": {
      "unwatch": "fn()"
    },
    "ret82": {
      "unwatch": "fn()"
    },
    "ret83": {
      "unwatch": "fn()"
    },
    "ret84": {
      "unwatch": "fn()"
    },
    "ret85": {
      "unwatch": "fn()"
    },
    "ret86": {
      "unwatch": "fn()"
    },
    "ret87": {
      "unwatch": "fn()"
    },
    "ret88": {
      "unwatch": "fn()"
    },
    "ret89": {
      "unwatch": "fn()"
    },
    "ret90": {
      "unwatch": "fn()"
    },
    "ret91": {
      "unwatch": "fn()"
    },
    "ret92": {
      "unwatch": "fn()"
    },
    "ret93": {
      "unwatch": "fn()"
    },
    "ret94": {
      "unwatch": "fn()"
    },
    "ret95": {
      "unwatch": "fn()"
    },
    "ret96": {
      "unwatch": "fn()"
    },
    "ret97": {
      "unwatch": "fn()"
    },
    "ret98": {
      "unwatch": "fn()"
    },
    "ret99": {
      "unwatch": "fn()"
    },
    "ret100": {
      "unwatch": "fn()"
    },
    "ret101": {
      "unwatch": "fn()"
    },
    "ret102": {
      "unwatch": "fn()"
    },
    "ret103": {
      "unwatch": "fn()"
    },
    "ret104": {
      "unwatch": "fn()"
    },
    "ret105": {
      "unwatch": "fn()"
    },
    "ret106": {
      "unwatch": "fn()"
    },
    "ret107": {
      "unwatch": "fn()"
    },
    "ret108": {
      "unwatch": "fn()"
    },
    "ret109": {
      "unwatch": "fn()"
    },
    "ret110": {
      "unwatch": "fn()"
    },
    "ret111": {
      "unwatch": "fn()"
    },
    "ret112": {
      "unwatch": "fn()"
    },
    "ret113": {
      "unwatch": "fn()"
    },
    "ret114": {
      "unwatch": "fn()"
    },
    "ret115": {
      "unwatch": "fn()"
    },
    "ret116": {
      "unwatch": "fn()"
    },
    "ret117": {
      "unwatch": "fn()"
    },
    "ret118": {
      "unwatch": "fn()"
    },
    "ret119": {
      "unwatch": "fn()"
    },
    "ret120": {
      "unwatch": "fn()"
    },
    "ret121": {
      "unwatch": "fn()"
    },
    "ret122": {
      "unwatch": "fn()"
    },
    "ret123": {
      "unwatch": "fn()"
    },
    "ret124": {
      "unwatch": "fn()"
    },
    "ret125": {
      "unwatch": "fn()"
    },
    "ret126": {
      "unwatch": "fn()"
    },
    "ret127": {
      "unwatch": "fn()"
    },
    "ret128": {
      "unwatch": "fn()"
    },
    "ret129": {
      "unwatch": "fn()"
    },
    "ret130": {
      "unwatch": "fn()"
    },
    "ret131": {
      "unwatch": "fn()"
    },
    "ret132": {
      "unwatch": "fn()"
    },
    "ret133": {
      "unwatch": "fn()"
    },
    "ret134": {
      "unwatch": "fn()"
    },
    "ret135": {
      "unwatch": "fn()"
    },
    "ret136": {
      "unwatch": "fn()"
    },
    "ret137": {
      "unwatch": "fn()"
    },
    "ret138": {
      "unwatch": "fn()"
    },
    "ret139": {
      "unwatch": "fn()"
    },
    "ret140": {
      "unwatch": "fn()"
    },
    "ret141": {
      "unwatch": "fn()"
    },
    "ret142": {
      "unwatch": "fn()"
    },
    "ret143": {
      "unwatch": "fn()"
    },
    "ret144": {
      "unwatch": "fn()"
    },
    "ret145": {
      "unwatch": "fn()"
    },
    "ret146": {
      "unwatch": "fn()"
    },
    "ret147": {
      "unwatch": "fn()"
    },
    "ret148": {
      "unwatch": "fn()"
    },
    "ret149": {
      "unwatch": "fn()"
    },
    "ret150": {
      "unwatch": "fn()"
    },
    "ret151": {
      "unwatch": "fn()"
    },
    "ret152": {
      "unwatch": "fn()"
    },
    "ret153": {
      "unwatch": "fn()"
    },
    "ret154": {
      "unwatch": "fn()"
    },
    "ret155": {
      "unwatch": "fn()"
    },
    "ret156": {
      "unwatch": "fn()"
    },
    "ret157": {
      "unwatch": "fn()"
    },
    "ret158": {
      "unwatch": "fn()"
    },
    "ret159": {
      "unwatch": "fn()"
    },
    "ret160": {
      "unwatch": "fn()"
    },
    "ret161": {
      "unwatch": "fn()"
    },
    "ret162": {
      "unwatch": "fn()"
    },
    "ret163": {
      "unwatch": "fn()"
    },
    "ret164": {
      "unwatch": "fn()"
    },
    "ret165": {
      "unwatch": "fn()"
    },
    "ret166": {
      "unwatch": "fn()"
    },
    "ret167": {
      "unwatch": "fn()"
    },
    "ret168": {
      "unwatch": "fn()"
    },
    "ret169": {
      "unwatch": "fn()"
    },
    "ret170": {
      "unwatch": "fn()"
    },
    "ret171": {
      "unwatch": "fn()"
    },
    "ret172": {
      "unwatch": "fn()"
    },
    "ret173": {
      "unwatch": "fn()"
    },
    "ret174": {
      "unwatch": "fn()"
    },
    "ret175": {
      "unwatch": "fn()"
    },
    "ret176": {
      "unwatch": "fn()"
    },
    "ret177": {
      "unwatch": "fn()"
    },
    "ret178": {
      "unwatch": "fn()"
    },
    "ret179": {
      "unwatch": "fn()"
    },
    "ret180": {
      "unwatch": "fn()"
    },
    "ret181": {
      "unwatch": "fn()"
    },
    "ret182": {
      "unwatch": "fn()"
    },
    "ret183": {
      "unwatch": "fn()"
    },
    "ret184": {
      "unwatch": "fn()"
    },
    "ret185": {
      "unwatch": "fn()"
    },
    "ret186": {
      "unwatch": "fn()"
    },
    "ret187": {
      "unwatch": "fn()"
    },
    "ret188": {
      "unwatch": "fn()"
    },
    "ret189": {
      "unwatch": "fn()"
    },
    "ret190": {
      "unwatch": "fn()"
    },
    "ret191": {
      "unwatch": "fn()"
    },
    "ret192": {
      "unwatch": "fn()"
    },
    "ret193": {
      "unwatch": "fn()"
    },
    "ret194": {
      "unwatch": "fn()"
    },
    "ret195": {
      "unwatch": "fn()"
    },
    "ret196": {
      "unwatch": "fn()"
    },
    "ret197": {
      "unwatch": "fn()"
    },
    "ret198": {
      "unwatch": "fn()"
    },
    "ret199": {
      "unwatch": "fn()"
    },
    "ret200": {
      "unwatch": "fn()"
    },
    "ret201": {
      "unwatch": "fn()"
    },
    "ret202": {
      "unwatch": "fn()"
    },
    "ret203": {
      "unwatch": "fn()"
    },
    "ret204": {
      "unwatch": "fn()"
    },
    "ret205": {
      "unwatch": "fn()"
    },
    "ret206": {
      "unwatch": "fn()"
    },
    "ret207": {
      "unwatch": "fn()"
    },
    "ret208": {
      "unwatch": "fn()"
    },
    "ret209": {
      "unwatch": "fn()"
    },
    "ret210": {
      "unwatch": "fn()"
    },
    "ret211": {
      "unwatch": "fn()"
    },
    "ret212": {
      "unwatch": "fn()"
    },
    "ret213": {
      "unwatch": "fn()"
    },
    "ret214": {
      "unwatch": "fn()"
    },
    "ret215": {
      "unwatch": "fn()"
    },
    "ret216": {
      "unwatch": "fn()"
    },
    "ret217": {
      "unwatch": "fn()"
    },
    "ret218": {
      "unwatch": "fn()"
    },
    "ret219": {
      "unwatch": "fn()"
    },
    "ret220": {
      "unwatch": "fn()"
    },
    "ret221": {
      "unwatch": "fn()"
    },
    "ret222": {
      "unwatch": "fn()"
    },
    "ret223": {
      "unwatch": "fn()"
    },
    "ret224": {
      "unwatch": "fn()"
    },
    "ret225": {
      "unwatch": "fn()"
    },
    "ret226": {
      "unwatch": "fn()"
    },
    "ret227": {
      "unwatch": "fn()"
    },
    "ret228": {
      "unwatch": "fn()"
    },
    "ret229": {
      "unwatch": "fn()"
    },
    "ret230": {
      "unwatch": "fn()"
    },
    "ret231": {
      "unwatch": "fn()"
    },
    "ret232": {
      "unwatch": "fn()"
    },
    "ret233": {
      "unwatch": "fn()"
    },
    "ret234": {
      "unwatch": "fn()"
    },
    "ret235": {
      "unwatch": "fn()"
    },
    "ret236": {
      "unwatch": "fn()"
    },
    "ret237": {
      "unwatch": "fn()"
    },
    "ret238": {
      "unwatch": "fn()"
    },
    "ret239": {
      "unwatch": "fn()"
    },
    "ret240": {
      "unwatch": "fn()"
    },
    "ret241": {
      "unwatch": "fn()"
    },
    "ret242": {
      "unwatch": "fn()"
    },
    "ret243": {
      "unwatch": "fn()"
    },
    "ret244": {
      "unwatch": "fn()"
    },
    "ret245": {
      "unwatch": "fn()"
    },
    "ret246": {
      "unwatch": "fn()"
    },
    "ret247": {
      "unwatch": "fn()"
    },
    "ret248": {
      "unwatch": "fn()"
    },
    "ret249": {
      "unwatch": "fn()"
    },
    "ret250": {
      "unwatch": "fn()"
    },
    "ret251": {
      "unwatch": "fn()"
    },
    "ret252": {
      "unwatch": "fn()"
    },
    "ret253": {
      "unwatch": "fn()"
    },
    "ret254": {
      "unwatch": "fn()"
    },
    "ret255": {
      "unwatch": "fn()"
    },
    "ret256": {
      "unwatch": "fn()"
    },
    "ret257": {
      "unwatch": "fn()"
    },
    "ret258": {
      "unwatch": "fn()"
    },
    "ret259": {
      "unwatch": "fn()"
    },
    "ret260": {
      "unwatch": "fn()"
    },
    "ret261": {
      "unwatch": "fn()"
    },
    "ret262": {
      "unwatch": "fn()"
    },
    "ret263": {
      "unwatch": "fn()"
    },
    "ret264": {
      "unwatch": "fn()"
    },
    "ret265": {
      "unwatch": "fn()"
    },
    "ret266": {
      "unwatch": "fn()"
    },
    "ret267": {
      "unwatch": "fn()"
    },
    "ret268": {
      "unwatch": "fn()"
    },
    "ret269": {
      "unwatch": "fn()"
    },
    "ret270": {
      "unwatch": "fn()"
    },
    "ret271": {
      "unwatch": "fn()"
    },
    "ret272": {
      "unwatch": "fn()"
    },
    "ret273": {
      "unwatch": "fn()"
    },
    "ret274": {
      "unwatch": "fn()"
    },
    "ret275": {
      "unwatch": "fn()"
    },
    "ret276": {
      "unwatch": "fn()"
    },
    "ret277": {
      "unwatch": "fn()"
    },
    "ret278": {
      "unwatch": "fn()"
    },
    "ret279": {
      "unwatch": "fn()"
    },
    "ret280": {
      "unwatch": "fn()"
    },
    "ret281": {
      "unwatch": "fn()"
    },
    "ret282": {
      "unwatch": "fn()"
    },
    "ret283": {
      "unwatch": "fn()"
    },
    "ret284": {
      "unwatch": "fn()"
    },
    "ret285": {
      "unwatch": "fn()"
    },
    "ret286": {
      "unwatch": "fn()"
    },
    "ret287": {
      "unwatch": "fn()"
    },
    "ret288": {
      "unwatch": "fn()"
    },
    "ret289": {
      "unwatch": "fn()"
    },
    "ret290": {
      "unwatch": "fn()"
    },
    "ret291": {
      "unwatch": "fn()"
    },
    "ret292": {
      "unwatch": "fn()"
    },
    "ret293": {
      "unwatch": "fn()"
    },
    "ret294": {
      "unwatch": "fn()"
    },
    "ret295": {
      "unwatch": "fn()"
    },
    "ret296": {
      "unwatch": "fn()"
    },
    "ret297": {
      "unwatch": "fn()"
    },
    "ret298": {
      "unwatch": "fn()"
    },
    "ret299": {
      "unwatch": "fn()"
    },
    "ret300": {
      "unwatch": "fn()"
    },
    "ret301": {
      "unwatch": "fn()"
    },
    "ret302": {
      "unwatch": "fn()"
    },
    "ret303": {
      "unwatch": "fn()"
    },
    "ret304": {
      "unwatch": "fn()"
    },
    "ret305": {
      "unwatch": "fn()"
    },
    "ret306": {
      "unwatch": "fn()"
    },
    "ret307": {
      "unwatch": "fn()"
    },
    "ret308": {
      "unwatch": "fn()"
    },
    "ret309": {
      "unwatch": "fn()"
    },
    "ret310": {
      "unwatch": "fn()"
    },
    "ret311": {
      "unwatch": "fn()"
    },
    "ret312": {
      "unwatch": "fn()"
    },
    "ret313": {
      "unwatch": "fn()"
    },
    "ret314": {
      "unwatch": "fn()"
    },
    "ret315": {
      "unwatch": "fn()"
    },
    "ret316": {
      "unwatch": "fn()"
    },
    "ret317": {
      "unwatch": "fn()"
    },
    "ret318": {
      "unwatch": "fn()"
    },
    "ret319": {
      "unwatch": "fn()"
    },
    "ret320": {
      "unwatch": "fn()"
    },
    "ret321": {
      "unwatch": "fn()"
    },
    "ret322": {
      "unwatch": "fn()"
    },
    "ret323": {
      "unwatch": "fn()"
    },
    "ret324": {
      "unwatch": "fn()"
    },
    "ret325": {
      "unwatch": "fn()"
    },
    "ret326": {
      "unwatch": "fn()"
    },
    "ret327": {
      "unwatch": "fn()"
    },
    "ret328": {
      "unwatch": "fn()"
    },
    "ret329": {
      "unwatch": "fn()"
    },
    "ret330": {
      "unwatch": "fn()"
    },
    "ret331": {
      "unwatch": "fn()"
    },
    "ret332": {
      "unwatch": "fn()"
    },
    "ret333": {
      "unwatch": "fn()"
    },
    "ret334": {
      "unwatch": "fn()"
    },
    "ret335": {
      "unwatch": "fn()"
    },
    "ret336": {
      "unwatch": "fn()"
    },
    "ret337": {
      "unwatch": "fn()"
    },
    "ret338": {
      "unwatch": "fn()"
    },
    "ret339": {
      "unwatch": "fn()"
    },
    "ret340": {
      "unwatch": "fn()"
    },
    "ret341": {
      "unwatch": "fn()"
    },
    "ret342": {
      "unwatch": "fn()"
    },
    "ret343": {
      "unwatch": "fn()"
    },
    "ret344": {
      "unwatch": "fn()"
    },
    "ret345": {
      "unwatch": "fn()"
    },
    "ret346": {
      "unwatch": "fn()"
    },
    "ret347": {
      "unwatch": "fn()"
    },
    "ret348": {
      "unwatch": "fn()"
    },
    "ret349": {
      "unwatch": "fn()"
    },
    "ret350": {
      "unwatch": "fn()"
    },
    "ret351": {
      "unwatch": "fn()"
    },
    "ret352": {
      "unwatch": "fn()"
    },
    "ret353": {
      "unwatch": "fn()"
    },
    "ret354": {
      "unwatch": "fn()"
    },
    "ret355": {
      "unwatch": "fn()"
    },
    "ret356": {
      "unwatch": "fn()"
    },
    "ret357": {
      "unwatch": "fn()"
    },
    "ret358": {
      "unwatch": "fn()"
    },
    "ret359": {
      "unwatch": "fn()"
    },
    "ret360": {
      "unwatch": "fn()"
    },
    "ret361": {
      "unwatch": "fn()"
    },
    "ret362": {
      "unwatch": "fn()"
    },
    "ret363": {
      "unwatch": "fn()"
    },
    "ret364": {
      "unwatch": "fn()"
    },
    "ret365": {
      "unwatch": "fn()"
    },
    "ret366": {
      "unwatch": "fn()"
    },
    "ret367": {
      "unwatch": "fn()"
    },
    "ret368": {
      "unwatch": "fn()"
    },
    "ret369": {
      "unwatch": "fn()"
    },
    "ret370": {
      "unwatch": "fn()"
    },
    "ret371": {
      "unwatch": "fn()"
    },
    "ret372": {
      "unwatch": "fn()"
    },
    "ret373": {
      "unwatch": "fn()"
    },
    "ret374": {
      "unwatch": "fn()"
    },
    "ret375": {
      "unwatch": "fn()"
    },
    "ret376": {
      "unwatch": "fn()"
    },
    "ret377": {
      "unwatch": "fn()"
    },
    "ret378": {
      "unwatch": "fn()"
    },
    "ret379": {
      "unwatch": "fn()"
    },
    "ret380": {
      "unwatch": "fn()"
    },
    "ret381": {
      "unwatch": "fn()"
    },
    "ret382": {
      "unwatch": "fn()"
    },
    "ret383": {
      "unwatch": "fn()"
    },
    "ret384": {
      "unwatch": "fn()"
    },
    "ret385": {
      "unwatch": "fn()"
    },
    "ret386": {
      "unwatch": "fn()"
    },
    "ret387": {
      "unwatch": "fn()"
    },
    "ret388": {
      "unwatch": "fn()"
    },
    "ret389": {
      "unwatch": "fn()"
    },
    "ret390": {
      "unwatch": "fn()"
    },
    "ret391": {
      "unwatch": "fn()"
    },
    "ret392": {
      "unwatch": "fn()"
    },
    "ret393": {
      "unwatch": "fn()"
    },
    "ret394": {
      "unwatch": "fn()"
    },
    "ret395": {
      "unwatch": "fn()"
    },
    "ret396": {
      "unwatch": "fn()"
    },
    "ret397": {
      "unwatch": "fn()"
    },
    "ret398": {
      "unwatch": "fn()"
    },
    "ret399": {
      "unwatch": "fn()"
    },
    "ret400": {
      "unwatch": "fn()"
    },
    "ret401": {
      "unwatch": "fn()"
    },
    "ret402": {
      "unwatch": "fn()"
    },
    "ret403": {
      "unwatch": "fn()"
    },
    "ret404": {
      "unwatch": "fn()"
    },
    "ret405": {
      "unwatch": "fn()"
    },
    "ret406": {
      "unwatch": "fn()"
    },
    "ret407": {
      "unwatch": "fn()"
    },
    "ret408": {
      "unwatch": "fn()"
    },
    "ret409": {
      "unwatch": "fn()"
    },
    "ret410": {
      "unwatch": "fn()"
    },
    "ret411": {
      "unwatch": "fn()"
    },
    "ret412": {
      "unwatch": "fn()"
    },
    "ret413": {
      "unwatch": "fn()"
    },
    "ret414": {
      "unwatch": "fn()"
    },
    "ret415": {
      "unwatch": "fn()"
    },
    "ret416": {
      "unwatch": "fn()"
    },
    "ret417": {
      "unwatch": "fn()"
    },
    "ret418": {
      "unwatch": "fn()"
    },
    "ret419": {
      "unwatch": "fn()"
    },
    "ret420": {
      "unwatch": "fn()"
    },
    "ret421": {
      "unwatch": "fn()"
    },
    "ret422": {
      "unwatch": "fn()"
    },
    "ret423": {
      "unwatch": "fn()"
    },
    "ret424": {
      "unwatch": "fn()"
    },
    "ret425": {
      "unwatch": "fn()"
    },
    "ret426": {
      "unwatch": "fn()"
    },
    "ret427": {
      "unwatch": "fn()"
    },
    "ret428": {
      "unwatch": "fn()"
    },
    "ret429": {
      "unwatch": "fn()"
    },
    "ret430": {
      "unwatch": "fn()"
    },
    "ret431": {
      "unwatch": "fn()"
    },
    "ret432": {
      "unwatch": "fn()"
    },
    "ret433": {
      "unwatch": "fn()"
    },
    "ret434": {
      "unwatch": "fn()"
    },
    "ret435": {
      "unwatch": "fn()"
    },
    "ret436": {
      "unwatch": "fn()"
    },
    "ret437": {
      "unwatch": "fn()"
    },
    "ret438": {
      "unwatch": "fn()"
    },
    "ret439": {
      "unwatch": "fn()"
    },
    "ret440": {
      "unwatch": "fn()"
    },
    "ret441": {
      "unwatch": "fn()"
    },
    "ret442": {
      "unwatch": "fn()"
    },
    "ret443": {
      "unwatch": "fn()"
    },
    "ret444": {
      "unwatch": "fn()"
    },
    "ret445": {
      "unwatch": "fn()"
    },
    "ret446": {
      "unwatch": "fn()"
    },
    "ret447": {
      "unwatch": "fn()"
    },
    "ret448": {
      "unwatch": "fn()"
    },
    "ret449": {
      "unwatch": "fn()"
    },
    "ret450": {
      "unwatch": "fn()"
    },
    "ret451": {
      "unwatch": "fn()"
    },
    "ret452": {
      "unwatch": "fn()"
    },
    "ret453": {
      "unwatch": "fn()"
    },
    "ret454": {
      "unwatch": "fn()"
    },
    "ret455": {
      "unwatch": "fn()"
    },
    "ret456": {
      "unwatch": "fn()"
    },
    "ret457": {
      "unwatch": "fn()"
    },
    "ret458": {
      "unwatch": "fn()"
    },
    "ret459": {
      "unwatch": "fn()"
    },
    "ret460": {
      "unwatch": "fn()"
    },
    "ret461": {
      "unwatch": "fn()"
    },
    "ret462": {
      "unwatch": "fn()"
    },
    "ret463": {
      "unwatch": "fn()"
    },
    "ret464": {
      "unwatch": "fn()"
    },
    "ret465": {
      "unwatch": "fn()"
    },
    "ret466": {
      "unwatch": "fn()"
    },
    "ret467": {
      "unwatch": "fn()"
    },
    "ret468": {
      "unwatch": "fn()"
    },
    "ret469": {
      "unwatch": "fn()"
    },
    "ret470": {
      "unwatch": "fn()"
    },
    "ret471": {
      "unwatch": "fn()"
    },
    "ret472": {
      "unwatch": "fn()"
    },
    "ret473": {
      "unwatch": "fn()"
    },
    "ret474": {
      "unwatch": "fn()"
    },
    "ret475": {
      "unwatch": "fn()"
    },
    "ret476": {
      "unwatch": "fn()"
    },
    "ret477": {
      "unwatch": "fn()"
    },
    "ret478": {
      "unwatch": "fn()"
    },
    "ret479": {
      "unwatch": "fn()"
    },
    "ret480": {
      "unwatch": "fn()"
    },
    "ret481": {
      "unwatch": "fn()"
    },
    "ret482": {
      "unwatch": "fn()"
    },
    "ret483": {
      "unwatch": "fn()"
    },
    "ret484": {
      "unwatch": "fn()"
    },
    "ret485": {
      "unwatch": "fn()"
    },
    "ret486": {
      "unwatch": "fn()"
    },
    "ret487": {
      "unwatch": "fn()"
    },
    "ret488": {
      "unwatch": "fn()"
    },
    "ret489": {
      "unwatch": "fn()"
    },
    "ret490": {
      "unwatch": "fn()"
    },
    "ret491": {
      "unwatch": "fn()"
    },
    "ret492": {
      "unwatch": "fn()"
    },
    "ret493": {
      "unwatch": "fn()"
    },
    "ret494": {
      "unwatch": "fn()"
    },
    "ret495": {
      "unwatch": "fn()"
    },
    "ret496": {
      "unwatch": "fn()"
    },
    "ret497": {
      "unwatch": "fn()"
    },
    "ret498": {
      "unwatch": "fn()"
    },
    "ret499": {
      "unwatch": "fn()"
    },
    "ret500": {
      "unwatch": "fn()"
    },
    "ret501": {
      "unwatch": "fn()"
    },
    "ret502": {
      "unwatch": "fn()"
    },
    "ret503": {
      "unwatch": "fn()"
    },
    "ret504": {
      "unwatch": "fn()"
    },
    "ret505": {
      "unwatch": "fn()"
    },
    "ret506": {
      "unwatch": "fn()"
    },
    "ret507": {
      "unwatch": "fn()"
    },
    "ret508": {
      "unwatch": "fn()"
    },
    "ret509": {
      "unwatch": "fn()"
    },
    "ret510": {
      "unwatch": "fn()"
    },
    "ret511": {
      "unwatch": "fn()"
    },
    "ret512": {
      "unwatch": "fn()"
    },
    "ret513": {
      "unwatch": "fn()"
    },
    "ret514": {
      "unwatch": "fn()"
    },
    "ret515": {
      "unwatch": "fn()"
    },
    "ret516": {
      "unwatch": "fn()"
    },
    "ret517": {
      "unwatch": "fn()"
    },
    "ret518": {
      "unwatch": "fn()"
    },
    "ret519": {
      "unwatch": "fn()"
    },
    "ret520": {
      "unwatch": "fn()"
    },
    "ret521": {
      "unwatch": "fn()"
    },
    "ret522": {
      "unwatch": "fn()"
    },
    "ret523": {
      "unwatch": "fn()"
    },
    "ret524": {
      "unwatch": "fn()"
    }
  }
}
