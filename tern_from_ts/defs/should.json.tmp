{
  "Object": {
    "should": "ShouldAssertion"
  },
  "ShouldAssertion": {
    "a": "ShouldAssertion",
    "an": "ShouldAssertion",
    "and": "ShouldAssertion",
    "be": "ShouldAssertion",
    "have": "ShouldAssertion",
    "with": "ShouldAssertion",
    "of": "ShouldAssertion",
    "not": "ShouldAssertion",
    "arguments": "ShouldAssertion",
    "empty": "ShouldAssertion",
    "ok": "ShouldAssertion",
    "true": "ShouldAssertion",
    "false": "ShouldAssertion",
    "NaN": "ShouldAssertion",
    "Infinity": "ShouldAssertion",
    "Array": "ShouldAssertion",
    "Object": "ShouldAssertion",
    "String": "ShouldAssertion",
    "Boolean": "ShouldAssertion",
    "Number": "ShouldAssertion",
    "Error": "ShouldAssertion",
    "Function": "ShouldAssertion",
    "eql": "fn(expected: ?, description?: string) -> ShouldAssertion",
    "equal": "fn(expected: ?, description?: string) -> ShouldAssertion",
    "within": "fn(start: number, finish: number, description?: string) -> ShouldAssertion",
    "approximately": "fn(value: number, delta: number, description?: string) -> ShouldAssertion",
    "type": "fn(expected: ?, description?: string) -> ShouldAssertion",
    "instanceof": "fn(constructor: Function, description?: string) -> ShouldAssertion",
    "above": "fn(n: number, description?: string) -> ShouldAssertion",
    "below": "fn(n: number, description?: string) -> ShouldAssertion",
    "match": "fn(other: ?, description?: string) -> ShouldAssertion",
    "matchEach": "fn(other: ?, description?: string) -> ShouldAssertion",
    "matchAny": "fn(other: ?, description?: string) -> ShouldAssertion",
    "length": "fn(n: number, description?: string) -> ShouldAssertion",
    "property": "fn(name: string, description?: string) -> ShouldAssertion",
    "properties": "fn(names: [string]) -> ShouldAssertion",
    "ownProperty": "fn(name: string, description?: string) -> ShouldAssertion",
    "contain": "fn(obj: ?) -> ShouldAssertion",
    "containEql": "fn(obj: ?) -> ShouldAssertion",
    "containDeep": "fn(obj: ?) -> ShouldAssertion",
    "keys": "fn(allKeys: [string]) -> ShouldAssertion",
    "header": "fn(field: string, val?: string) -> ShouldAssertion",
    "status": "fn(code: number) -> ShouldAssertion",
    "json": "ShouldAssertion",
    "html": "ShouldAssertion",
    "startWith": "fn(expected: string, message?: ?) -> ShouldAssertion",
    "endWith": "fn(expected: string, message?: ?) -> ShouldAssertion",
    "throw": "fn(message?: ?) -> ShouldAssertion",
    "include": "fn(obj: ?, description?: string) -> ShouldAssertion",
    "includeEql": "fn(obj: [?], description?: string) -> ShouldAssertion",
    "exactly": "fn(expected: ?, description?: string) -> ShouldAssertion",
    "instanceOf": "fn(constructor: Function, description?: string) -> ShouldAssertion",
    "throwError": "fn(message?: ?) -> ShouldAssertion",
    "lengthOf": "fn(n: number, description?: string) -> ShouldAssertion",
    "key": "fn(key: string) -> ShouldAssertion",
    "haveOwnProperty": "fn(name: string, description?: string) -> ShouldAssertion",
    "greaterThan": "fn(n: number, description?: string) -> ShouldAssertion",
    "lessThan": "fn(n: number, description?: string) -> ShouldAssertion"
  },
  "ShouldInternal": {
    "exist": "fn(actual: ?, msg?: string)",
    "exists": "fn(actual: ?, msg?: string)",
    "not": "ShouldInternal"
  },
  "Internal": {
    "fail": "fn(actual: ?, expected: ?, message: string, operator: string)",
    "assert": "fn(value: ?, message: string)",
    "ok": "fn(value: ?, message?: string)",
    "equal": "fn(actual: ?, expected: ?, message?: string)",
    "notEqual": "fn(actual: ?, expected: ?, message?: string)",
    "deepEqual": "fn(actual: ?, expected: ?, message?: string)",
    "notDeepEqual": "fn(actual: ?, expected: ?, message?: string)",
    "strictEqual": "fn(actual: ?, expected: ?, message?: string)",
    "notStrictEqual": "fn(actual: ?, expected: ?, message?: string)",
    "throws": "fn(block: ?, error?: ?, message?: string)",
    "doesNotThrow": "fn(block: ?, message?: string)",
    "ifError": "fn(value: ?)",
    "inspect": "fn(value: ?, obj: ?) -> ?"
  },
  "should": "Internal",
  "Should": "Internal",
  "Window": {
    "Should": "Internal"
  },
  "!name": "should.d.ts"
}
