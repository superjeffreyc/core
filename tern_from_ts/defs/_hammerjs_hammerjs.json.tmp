{
  "Hammer": "HammerStatic",
  "hammerjs": "Hammer",
  "HammerStatic": {
    "defaults": "HammerDefaults",
    "VERSION": "number",
    "INPUT_START": "number",
    "INPUT_MOVE": "number",
    "INPUT_END": "number",
    "INPUT_CANCEL": "number",
    "STATE_POSSIBLE": "number",
    "STATE_BEGAN": "number",
    "STATE_CHANGED": "number",
    "STATE_ENDED": "number",
    "STATE_RECOGNIZED": "number",
    "STATE_CANCELLED": "number",
    "STATE_FAILED": "number",
    "DIRECTION_NONE": "number",
    "DIRECTION_LEFT": "number",
    "DIRECTION_RIGHT": "number",
    "DIRECTION_UP": "number",
    "DIRECTION_DOWN": "number",
    "DIRECTION_HORIZONTAL": "number",
    "DIRECTION_VERTICAL": "number",
    "DIRECTION_ALL": "number",
    "Manager": "HammerManager",
    "Input": "HammerInput",
    "TouchAction": "TouchAction",
    "TouchInput": "TouchInput",
    "MouseInput": "MouseInput",
    "PointerEventInput": "PointerEventInput",
    "TouchMouseInput": "TouchMouseInput",
    "SingleTouchInput": "SingleTouchInput",
    "Recognizer": "RecognizerStatic",
    "AttrRecognizer": "AttrRecognizerStatic",
    "Tap": "TapRecognizerStatic",
    "Pan": "PanRecognizerStatic",
    "Swipe": "SwipeRecognizerStatic",
    "Pinch": "PinchRecognizerStatic",
    "Rotate": "RotateRecognizerStatic",
    "Press": "PressRecognizerStatic",
    "on": "fn(target: EventTarget, types: string, handler: Function)",
    "off": "fn(target: EventTarget, types: string, handler: Function)",
    "each": "fn(obj: ?, iterator: Function, context: ?)",
    "merge": "fn(dest: ?, src: ?) -> ?",
    "extend": "fn(dest: ?, src: ?, merge: bool) -> ?",
    "inherit": "fn(child: Function, base: Function, properties: ?) -> ?",
    "bindFn": "fn(fn: Function, context: ?) -> Function",
    "prefixed": "fn(obj: ?, property: string) -> string"
  },
  "HammerDefaults": {
    "domEvents": "bool",
    "enable": "bool",
    "preset": "[?]",
    "touchAction": "string",
    "cssProps": "CssProps",
    "inputClass": "fn()",
    "inputTarget": "fn()"
  },
  "CssProps": {
    "contentZooming": "string",
    "tapHighlightColor": "string",
    "touchCallout": "string",
    "touchSelect": "string",
    "userDrag": "string",
    "userSelect": "string"
  },
  "HammerOptions": {},
  "HammerManager": {
    "add": "fn(recogniser: Recognizer) -> Recognizer",
    "destroy": "fn()",
    "emit": "fn(event: string, data: ?)",
    "get": "fn(recogniser: Recognizer) -> Recognizer",
    "off": "fn(events: string, handler: fn(event: HammerInput))",
    "on": "fn(events: string, handler: fn(event: HammerInput))",
    "recognize": "fn(inputData: ?)",
    "remove": "fn(recogniser: Recognizer) -> HammerManager",
    "set": "fn(options: HammerOptions) -> HammerManager",
    "stop": "fn(force: bool)"
  },
  "HammerInput": {
    "!type": "fn(manager: HammerManager, callback: Function)",
    "prototype": {
      "destroy": "fn()",
      "handler": "fn()",
      "init": "fn()",
      "type": "string",
      "deltaX": "number",
      "deltaY": "number",
      "deltaTime": "number",
      "distance": "number",
      "angle": "number",
      "velocityX": "number",
      "velocityY": "number",
      "velocity": "number",
      "direction": "number",
      "offsetDirection": "string",
      "scale": "number",
      "rotation": "number",
      "center": "HammerPoint",
      "srcEvent": "TouchEvent",
      "MouseEvent": "?",
      "PointerEvent": "?",
      "target": "HTMLElement",
      "pointerType": "string",
      "eventType": "string",
      "isFirst": "bool",
      "isFinal": "bool",
      "pointers": "[?]",
      "changedPointers": "[?]",
      "preventDefault": "Function"
    }
  },
  "MouseInput": {
    "!type": "fn(manager: HammerManager, callback: Function)",
    "prototype": {}
  },
  "PointerEventInput": {
    "!type": "fn(manager: HammerManager, callback: Function)",
    "prototype": {}
  },
  "SingleTouchInput": {
    "!type": "fn(manager: HammerManager, callback: Function)",
    "prototype": {}
  },
  "TouchInput": {
    "!type": "fn(manager: HammerManager, callback: Function)",
    "prototype": {}
  },
  "TouchMouseInput": {
    "!type": "fn(manager: HammerManager, callback: Function)",
    "prototype": {}
  },
  "RecognizerStatic": {},
  "Recognizer": {
    "defaults": "?",
    "canEmit": "fn() -> bool",
    "canRecognizeWith": "fn(otherRecognizer: Recognizer) -> bool",
    "dropRecognizeWith": "fn(otherRecognizer: Recognizer) -> Recognizer",
    "dropRequireFailure": "fn(otherRecognizer: Recognizer) -> Recognizer",
    "emit": "fn(input: HammerInput)",
    "getTouchAction": "fn() -> [?]",
    "hasRequireFailures": "fn() -> bool",
    "process": "fn(inputData: HammerInput) -> string",
    "recognize": "fn(inputData: HammerInput)",
    "recognizeWith": "fn(otherRecognizer: Recognizer) -> Recognizer",
    "requireFailure": "fn(otherRecognizer: Recognizer) -> Recognizer",
    "reset": "fn()",
    "set": "fn(options?: ?) -> Recognizer",
    "tryEmit": "fn(input: HammerInput)"
  },
  "AttrRecognizerStatic": {
    "attrTest": "fn(input: HammerInput) -> bool",
    "process": "fn(input: HammerInput) -> ?"
  },
  "AttrRecognizer": {},
  "PanRecognizerStatic": {},
  "PanRecognizer": {},
  "PinchRecognizerStatic": {},
  "PinchRecognizer": {},
  "PressRecognizerStatic": {},
  "PressRecognizer": {},
  "RotateRecognizerStatic": {},
  "RotateRecognizer": {},
  "SwipeRecognizerStatic": {},
  "SwipeRecognizer": {},
  "TapRecognizerStatic": {},
  "TapRecognizer": {},
  "TouchAction": {
    "!type": "fn(manager: HammerManager, value: string)",
    "prototype": {
      "compute": "fn() -> string",
      "preventDefaults": "fn(input: HammerInput)",
      "preventSrc": "fn(srcEvent: ?)",
      "set": "fn(value: string)",
      "update": "fn()"
    }
  },
  "HammerPoint": {
    "x": "number",
    "y": "number"
  },
  "!name": "hammerjs.d.ts"
}
