{
  "BoundingBox": {
    "x": "number",
    "y": "number",
    "x2": "number",
    "y2": "number",
    "width": "number",
    "height": "number"
  },
  "RaphaelAnimation": {
    "delay": "fn(delay: number) -> RaphaelAnimation",
    "repeat": "fn(repeat: number) -> RaphaelAnimation"
  },
  "RaphaelFont": {},
  "RaphaelElement": {
    "animate": "fn(params: ?, ms: number, easing?: string, callback?: Function) -> RaphaelElement",
    "animateWith": "fn(el: RaphaelElement, anim: RaphaelAnimation, params: ?, ms: number, easing?: string, callback?: Function) -> RaphaelElement",
    "attr": "fn(attrName: string, value: ?) -> RaphaelElement",
    "click": "fn(handler: Function) -> RaphaelElement",
    "clone": "fn() -> RaphaelElement",
    "data": "fn(key: string) -> ?",
    "dblclick": "fn(handler: Function) -> RaphaelElement",
    "drag": "fn(onmove: fn(dx: number, dy: number, x: number, y: number, event: DragEvent), onstart: fn(x: number, y: number, event: DragEvent), onend: fn(DragEvent: ?), mcontext?: ?, scontext?: ?, econtext?: ?) -> RaphaelElement",
    "getBBox": "fn(isWithoutTransform?: bool) -> BoundingBox",
    "glow": "fn(glow?: ?) -> RaphaelSet",
    "hide": "fn() -> RaphaelElement",
    "hover": "fn(f_in: Function, f_out: Function, icontext?: ?, ocontext?: ?) -> RaphaelElement",
    "id": "string",
    "insertAfter": "fn(el: RaphaelElement) -> RaphaelElement",
    "insertBefore": "fn(el: RaphaelElement) -> RaphaelElement",
    "isPointInside": "fn(x: number, y: number) -> bool",
    "isVisible": "fn() -> bool",
    "matrix": "RaphaelMatrix",
    "mousedown": "fn(handler: Function) -> RaphaelElement",
    "mousemove": "fn(handler: Function) -> RaphaelElement",
    "mouseout": "fn(handler: Function) -> RaphaelElement",
    "mouseover": "fn(handler: Function) -> RaphaelElement",
    "mouseup": "fn(handler: Function) -> RaphaelElement",
    "next": "RaphaelElement",
    "node": "SVGElement",
    "onDragOver": "fn(f: Function) -> RaphaelElement",
    "paper": "RaphaelPaper",
    "pause": "fn(anim?: RaphaelAnimation) -> RaphaelElement",
    "prev": "RaphaelElement",
    "raphael": "RaphaelStatic",
    "remove": "fn()",
    "removeData": "fn(key?: string) -> RaphaelElement",
    "resume": "fn(anim?: RaphaelAnimation) -> RaphaelElement",
    "setTime": "fn(anim: RaphaelAnimation)",
    "show": "fn() -> RaphaelElement",
    "status": "fn() -> [ret]",
    "stop": "fn(anim?: RaphaelAnimation) -> RaphaelElement",
    "toBack": "fn() -> RaphaelElement",
    "toFront": "fn() -> RaphaelElement",
    "touchcancel": "fn(handler: Function) -> RaphaelElement",
    "touchend": "fn(handler: Function) -> RaphaelElement",
    "touchmove": "fn(handler: Function) -> RaphaelElement",
    "touchstart": "fn(handler: Function) -> RaphaelElement",
    "transform": "fn() -> string",
    "unclick": "fn(handler: Function) -> RaphaelElement",
    "undblclick": "fn(handler: Function) -> RaphaelElement",
    "undrag": "fn() -> RaphaelElement",
    "unhover": "fn() -> RaphaelElement",
    "unmousedown": "fn(handler: Function) -> RaphaelElement",
    "unmousemove": "fn(handler: Function) -> RaphaelElement",
    "unmouseout": "fn(handler: Function) -> RaphaelElement",
    "unmouseover": "fn(handler: Function) -> RaphaelElement",
    "unmouseup": "fn(handler: Function) -> RaphaelElement",
    "untouchcancel": "fn(handler: Function) -> RaphaelElement",
    "untouchend": "fn(handler: Function) -> RaphaelElement",
    "untouchmove": "fn(handler: Function) -> RaphaelElement",
    "untouchstart": "fn(handler: Function) -> RaphaelElement"
  },
  "RaphaelPath": {
    "getPointAtLength": "fn(length: number) -> ret1",
    "getSubpath": "fn(from: number, to: number) -> string",
    "getTotalLength": "fn() -> number"
  },
  "RaphaelSet": {
    "clear": "fn()",
    "exclude": "fn(element: RaphaelElement) -> bool",
    "forEach": "fn(callback: Function, thisArg?: ?) -> RaphaelSet",
    "pop": "fn() -> RaphaelElement",
    "push": "fn(RaphaelElement: [?]) -> RaphaelSet",
    "splice": "fn(index: number, count: number) -> RaphaelSet",
    "length": "number",
    "animate": "fn(params: ?, ms: number, easing?: string, callback?: Function) -> RaphaelSet",
    "animateWith": "fn(el: RaphaelElement, anim: RaphaelAnimation, params: ?, ms: number, easing?: string, callback?: Function) -> RaphaelSet",
    "attr": "fn(attrName: string, value: ?) -> RaphaelSet",
    "click": "fn(handler: Function) -> RaphaelSet",
    "clone": "fn() -> RaphaelSet",
    "data": "fn(key: string) -> ?",
    "dblclick": "fn(handler: Function) -> RaphaelSet",
    "drag": "fn(onmove: fn(dx: number, dy: number, x: number, y: number, event: DragEvent), onstart: fn(x: number, y: number, event: DragEvent), onend: fn(DragEvent: ?), mcontext?: ?, scontext?: ?, econtext?: ?) -> RaphaelSet",
    "getBBox": "fn(isWithoutTransform?: bool) -> BoundingBox",
    "glow": "fn(glow?: ?) -> RaphaelSet",
    "hide": "fn() -> RaphaelSet",
    "hover": "fn(f_in: Function, f_out: Function, icontext?: ?, ocontext?: ?) -> RaphaelSet",
    "id": "string",
    "insertAfter": "fn(el: RaphaelElement) -> RaphaelSet",
    "insertBefore": "fn(el: RaphaelElement) -> RaphaelSet",
    "isPointInside": "fn(x: number, y: number) -> bool",
    "isVisible": "fn() -> bool",
    "matrix": "RaphaelMatrix",
    "mousedown": "fn(handler: Function) -> RaphaelSet",
    "mousemove": "fn(handler: Function) -> RaphaelSet",
    "mouseout": "fn(handler: Function) -> RaphaelSet",
    "mouseover": "fn(handler: Function) -> RaphaelSet",
    "mouseup": "fn(handler: Function) -> RaphaelSet",
    "next": "RaphaelSet",
    "onDragOver": "fn(f: Function) -> RaphaelSet",
    "paper": "RaphaelPaper",
    "pause": "fn(anim?: RaphaelAnimation) -> RaphaelSet",
    "prev": "RaphaelSet",
    "raphael": "RaphaelStatic",
    "remove": "fn()",
    "removeData": "fn(key?: string) -> RaphaelSet",
    "resume": "fn(anim?: RaphaelAnimation) -> RaphaelSet",
    "setTime": "fn(anim: RaphaelAnimation)",
    "show": "fn() -> RaphaelSet",
    "status": "fn() -> [ret2]",
    "stop": "fn(anim?: RaphaelAnimation) -> RaphaelSet",
    "toBack": "fn() -> RaphaelSet",
    "toFront": "fn() -> RaphaelSet",
    "touchcancel": "fn(handler: Function) -> RaphaelSet",
    "touchend": "fn(handler: Function) -> RaphaelSet",
    "touchmove": "fn(handler: Function) -> RaphaelSet",
    "touchstart": "fn(handler: Function) -> RaphaelSet",
    "transform": "fn() -> string",
    "unclick": "fn(handler: Function) -> RaphaelSet",
    "undblclick": "fn(handler: Function) -> RaphaelSet",
    "undrag": "fn() -> RaphaelSet",
    "unhover": "fn() -> RaphaelSet",
    "unmousedown": "fn(handler: Function) -> RaphaelSet",
    "unmousemove": "fn(handler: Function) -> RaphaelSet",
    "unmouseout": "fn(handler: Function) -> RaphaelSet",
    "unmouseover": "fn(handler: Function) -> RaphaelSet",
    "unmouseup": "fn(handler: Function) -> RaphaelSet",
    "untouchcancel": "fn(handler: Function) -> RaphaelSet",
    "untouchend": "fn(handler: Function) -> RaphaelSet",
    "untouchmove": "fn(handler: Function) -> RaphaelSet",
    "untouchstart": "fn(handler: Function) -> RaphaelSet"
  },
  "RaphaelMatrix": {
    "add": "fn(a: number, b: number, c: number, d: number, e: number, f: number, matrix: RaphaelMatrix) -> RaphaelMatrix",
    "clone": "fn() -> RaphaelMatrix",
    "invert": "fn() -> RaphaelMatrix",
    "rotate": "fn(a: number, x: number, y: number)",
    "scale": "fn(x: number, y?: number, cx?: number, cy?: number)",
    "split": "fn() -> ret3",
    "toTransformString": "fn() -> string",
    "translate": "fn(x: number, y: number)",
    "x": "fn(x: number, y: number) -> number",
    "y": "fn(x: number, y: number) -> number"
  },
  "RaphaelPaper": {
    "add": "fn(JSON: ?) -> RaphaelSet",
    "bottom": "RaphaelElement",
    "canvas": "SVGSVGElement",
    "circle": "fn(x: number, y: number, r: number) -> RaphaelElement",
    "clear": "fn()",
    "defs": "SVGDefsElement",
    "ellipse": "fn(x: number, y: number, rx: number, ry: number) -> RaphaelElement",
    "forEach": "fn(callback: fn(el: RaphaelElement), thisArg?: ?) -> RaphaelPaper",
    "getById": "fn(id: number) -> RaphaelElement",
    "getElementByPoint": "fn(x: number, y: number) -> RaphaelElement",
    "getElementsByPoint": "fn(x: number, y: number) -> RaphaelSet",
    "getFont": "fn(family: string, weight?: string, style?: string, stretch?: string) -> RaphaelFont",
    "height": "number",
    "image": "fn(src: string, x: number, y: number, width: number, height: number) -> RaphaelElement",
    "path": "fn(pathString?: string) -> RaphaelPath",
    "print": "fn(x: number, y: number, str: string, font: RaphaelFont, size?: number, origin?: string, letter_spacing?: number) -> RaphaelPath",
    "rect": "fn(x: number, y: number, width: number, height: number, r?: number) -> RaphaelElement",
    "remove": "fn()",
    "renderfix": "fn()",
    "safari": "fn()",
    "set": "fn(elements?: [RaphaelElement]) -> RaphaelSet",
    "setFinish": "fn() -> RaphaelSet",
    "setSize": "fn(width: number, height: number)",
    "setStart": "fn()",
    "setViewBox": "fn(x: number, y: number, w: number, h: number, fit: bool)",
    "text": "fn(x: number, y: number, text: string) -> RaphaelElement",
    "top": "RaphaelElement",
    "width": "number"
  },
  "RaphaelStatic": {
    "angle": "fn(x1: number, y1: number, x2: number, y2: number, x3?: number, y3?: number) -> number",
    "animation": "fn(params: ?, ms: number, easing?: string, callback?: Function) -> RaphaelAnimation",
    "bezierBBox": "fn(p1x: number, p1y: number, c1x: number, c1y: number, c2x: number, c2y: number, p2x: number, p2y: number) -> ret4",
    "color": "fn(clr: string) -> ret6",
    "createUUID": "fn() -> string",
    "deg": "fn(deg: number) -> number",
    "easing_formulas": "?",
    "el": "?",
    "findDotsAtSegment": "fn(p1x: number, p1y: number, c1x: number, c1y: number, c2x: number, c2y: number, p2x: number, p2y: number, t: number) -> ret7",
    "fn": "?",
    "format": "fn(token: string, parameters: [?]) -> string",
    "fullfill": "fn(token: string, json: JSON) -> string",
    "getColor": {
      "reset": "fn()"
    },
    "getPointAtLength": "fn(path: string, length: number) -> ret8",
    "getRGB": "fn(colour: string) -> ret9",
    "getSubpath": "fn(path: string, from: number, to: number) -> string",
    "getTotalLength": "fn(path: string) -> number",
    "hsb": "fn(h: number, s: number, b: number) -> string",
    "hsb2rgb": "fn(h: number, s: number, v: number) -> ret10",
    "hsl": "fn(h: number, s: number, l: number) -> string",
    "hsl2rgb": "fn(h: number, s: number, l: number) -> ret11",
    "is": "fn(o: ?, type: string) -> bool",
    "isBBoxIntersect": "fn(bbox1: string, bbox2: string) -> bool",
    "isPointInsideBBox": "fn(bbox: string, x: number, y: number) -> bool",
    "isPointInsidePath": "fn(path: string, x: number, y: number) -> bool",
    "matrix": "fn(a: number, b: number, c: number, d: number, e: number, f: number) -> RaphaelMatrix",
    "ninja": "fn()",
    "parsePathString": "fn(pathString: string) -> [string]",
    "parseTransformString": "fn(TString: string) -> [string]",
    "path2curve": "fn(pathString: string) -> [string]",
    "pathBBox": "fn(path: string) -> BoundingBox",
    "pathIntersection": "fn(path1: string, path2: string) -> [ret12]",
    "pathToRelative": "fn(pathString: string) -> [string]",
    "rad": "fn(deg: number) -> number",
    "registerFont": "fn(font: RaphaelFont) -> RaphaelFont",
    "rgb": "fn(r: number, g: number, b: number) -> string",
    "rgb2hsb": "fn(r: number, g: number, b: number) -> ret13",
    "rgb2hsl": "fn(r: number, g: number, b: number) -> ret14",
    "setWindow": "fn(newwin: Window)",
    "snapTo": "fn(values: number, value: number, tolerance?: number) -> number",
    "st": "?",
    "svg": "bool",
    "toMatrix": "fn(path: string, transform: string) -> RaphaelMatrix",
    "transformPath": "fn(path: string, transform: string) -> string",
    "type": "string",
    "vml": "bool"
  },
  "Raphael": "RaphaelStatic",
  "!name": "raphael.d.ts",
  "!define": {
    "ret": {
      "anim": "RaphaelAnimation",
      "status": "number"
    },
    "ret1": {
      "x": "number",
      "y": "number",
      "alpha": "number"
    },
    "ret2": {
      "anim": "RaphaelAnimation",
      "status": "number"
    },
    "ret3": {
      "dx": "number",
      "dy": "number",
      "scalex": "number",
      "scaley": "number",
      "shear": "number",
      "rotate": "number",
      "isSimple": "bool"
    },
    "ret4": {
      "min": {
        "x": "number",
        "y": "number"
      },
      "max": {
        "x": "number",
        "y": "number"
      }
    },
    "ret5": {
      "min": {
        "x": "number",
        "y": "number"
      },
      "max": {
        "x": "number",
        "y": "number"
      }
    },
    "ret6": {
      "r": "number",
      "g": "number",
      "b": "number",
      "hex": "string",
      "error": "bool",
      "h": "number",
      "s": "number",
      "v": "number",
      "l": "number"
    },
    "ret7": {
      "x": "number",
      "y": "number",
      "m": {
        "x": "number",
        "y": "number"
      },
      "n": {
        "x": "number",
        "y": "number"
      },
      "start": {
        "x": "number",
        "y": "number"
      },
      "end": {
        "x": "number",
        "y": "number"
      },
      "alpha": "number"
    },
    "ret8": {
      "x": "number",
      "y": "number",
      "alpha": "number"
    },
    "ret9": {
      "r": "number",
      "g": "number",
      "b": "number",
      "hex": "string",
      "error": "bool"
    },
    "ret10": {
      "r": "number",
      "g": "number",
      "b": "number",
      "hex": "string"
    },
    "ret11": {
      "r": "number",
      "g": "number",
      "b": "number",
      "hex": "string"
    },
    "ret12": {
      "x": "number",
      "y": "number",
      "t1": "number",
      "t2": "number",
      "segment1": "number",
      "segment2": "number",
      "bez1": "[?]",
      "bez2": "[?]"
    },
    "ret13": {
      "h": "number",
      "s": "number",
      "b": "number"
    },
    "ret14": {
      "h": "number",
      "s": "number",
      "l": "number"
    }
  }
}
