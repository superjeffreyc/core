{
  "GeolocationError": {
    "code": "number",
    "message": "string"
  },
  "Acceleration": {
    "x": "number",
    "y": "number",
    "z": "number",
    "timestamp": "number"
  },
  "AccelerometerOptions": {
    "frequency": "number"
  },
  "Accelerometer": {
    "getCurrentAcceleration": "fn(accelerometerSuccess: fn(acceleration: Acceleration), accelerometerError: fn())",
    "watchAcceleration": "fn(accelerometerSuccess: fn(acceleration: Acceleration), accelerometerError: fn(), accelerometerOptions?: AccelerometerOptions)",
    "clearWatch": "fn(watchID: number)"
  },
  "CameraPopoverOptions": {
    "x": "number",
    "y": "number",
    "width": "number",
    "height": "number",
    "arrowDir": "number"
  },
  "CameraOptions": {
    "quality": "number",
    "destinationType": "number",
    "sourceType": "number",
    "allowEdit": "bool",
    "encodingType": "number",
    "targetWidth": "number",
    "targetHeight": "number",
    "mediaType": "number",
    "correctOrientation": "bool",
    "saveToPhotoAlbum": "bool",
    "popoverOptions": "CameraPopoverOptions"
  },
  "CameraPictureSourceTypeObject": {
    "CAMERA": "number",
    "PHOTOLIBRARY": "number",
    "SAVEDPHOTOALBUM": "number"
  },
  "CameraDestinationTypeObject": {
    "FILE_URI": "number",
    "DATA_URL": "number"
  },
  "CameraEncodingTypeObject": {
    "JPEG": "number",
    "PNG": "number"
  },
  "CameraMediaTypeObject": {
    "PICTURE": "number",
    "VIDEO": "number",
    "ALLMEDIA": "number"
  },
  "CameraPopoverArrowDirectionObject": {
    "ARROW_UP": "number",
    "ARROW_DOWN": "number",
    "ARROW_LEFT": "number",
    "ARROW_RIGHT": "number",
    "ARROW_ANY": "number"
  },
  "Camera": {
    "sourceType": "?",
    "PictureSourceType": "CameraPictureSourceTypeObject",
    "DestinationType": "CameraDestinationTypeObject",
    "EncodingType": "CameraEncodingTypeObject",
    "MediaType": "CameraMediaTypeObject",
    "PopoverArrowDirection": "CameraPopoverArrowDirectionObject",
    "getPicture": "fn(cameraSuccess: fn(imageData: string), cameraError: fn(message: string), cameraOptions?: CameraOptions)",
    "cleanup": "fn(cameraSuccess: fn(imageData: string), cameraError: fn(message: string))"
  },
  "CaptureAudioOptions": {
    "limit": "number",
    "duration": "number",
    "mode": "number"
  },
  "CaptureImageOptions": {
    "limit": "number",
    "mode": "number"
  },
  "MediaFile": {
    "name": "string",
    "fullPath": "string",
    "type": "string",
    "lastModifiedDate": "Date",
    "size": "number",
    "getFormatData": "fn(successCallback: Function, errorCallback?: Function)"
  },
  "CaptureError": {
    "code": "number",
    "message": "string"
  },
  "Capture": {
    "captureAudio": "fn(captureSuccess: fn(mediaFiles: [MediaFile]), captureError: fn(error: CaptureError), options?: CaptureAudioOptions)",
    "captureImage": "fn(captureSuccess: fn(mediaFiles: [MediaFile]), captureError: fn(error: CaptureError), options?: CaptureImageOptions)",
    "captureVideo": "fn(captureSuccess: fn(mediaFiles: [MediaFile]), captureError: fn(error: CaptureError), options?: CaptureImageOptions)"
  },
  "Connection": {
    "UNKNOWN": "number",
    "ETHERNET": "number",
    "WIFI": "number",
    "CELL_2G": "number",
    "CELL_3G": "number",
    "CELL_4G": "number",
    "NONE": "number",
    "!type": "Connection",
    "type": "number"
  },
  "CompassOptions": {
    "frequency": "number",
    "filter": "number"
  },
  "CompassHeading": {
    "magneticHeading": "number",
    "trueHeading": "number",
    "headingAccuracy": "number",
    "timestamp": "number"
  },
  "CompassError": {
    "code": "number",
    "COMPASS_INTERNAL_ERR": "number",
    "COMPASS_NOT_SUPPORTED": "number"
  },
  "Compass": {
    "getCurrentHeading": "fn(compassSuccess: fn(heading: CompassHeading), compassError: fn(error: CompassError), compassOptions?: CompassOptions)",
    "watchHeading": "fn(compassSuccess: fn(heading: CompassHeading), compassError: fn(error: CompassError), compassOptions?: CompassOptions)",
    "clearWatch": "fn(watchID: number)"
  },
  "ContactAddress": {
    "pref": "bool",
    "type": "string",
    "formatted": "string",
    "streetAddress": "string",
    "locality": "string",
    "region": "string",
    "postalCode": "string",
    "country": "string"
  },
  "ContactField": {
    "type": "string",
    "value": "string",
    "pref": "bool"
  },
  "Contact": {
    "id": "string",
    "displayName": "string",
    "name": "ContactName",
    "nickname": "string",
    "phoneNumbers": "[ContactField]",
    "emails": "[ContactField]",
    "addresses": "[ContactAddress]",
    "ims": "[ContactField]",
    "organizations": "[ContactOrganization]",
    "birthday": "Date",
    "note": "string",
    "photos": "[ContactField]",
    "categories": "[ContactField]",
    "urls": "[ContactField]",
    "save": "fn(onSuccess?: fn(contacts: Contacts), onError?: fn(contactError: ContactError))",
    "remove": "fn(onSuccess?: fn(contacts: Contacts), onError?: fn(contactError: ContactError))",
    "clone": "fn() -> Contact"
  },
  "ContactFindOptions": {
    "filter": "string",
    "multiple": "bool"
  },
  "ContactName": {
    "formatted": "string",
    "familyName": "string",
    "givenName": "string",
    "middleName": "string",
    "honorificPrefix": "string",
    "honorificSuffix": "string"
  },
  "ContactOrganization": {
    "pref": "bool",
    "type": "string",
    "name": "string",
    "department": "string",
    "title": "string"
  },
  "ContactError": {
    "code": "number",
    "UNKNOWN_ERROR": "number",
    "INVALID_ARGUMENT_ERROR": "number",
    "TIMEOUT_ERROR": "number",
    "PENDING_OPERATION_ERROR": "number",
    "IO_ERROR": "number",
    "NOT_SUPPORTED_ERROR": "number",
    "PERMISSION_DENIED_ERROR": "number"
  },
  "Contacts": {
    "create": "fn(properties?: ?) -> Contact",
    "find": "fn(contactFields: [string], contactSuccess: fn(contacts: [Contact]), contactError: fn(error: ContactError), contactFindOptions?: ContactFindOptions)"
  },
  "Device": {
    "available": "bool",
    "name": "string",
    "cordova": "string",
    "platform": "string",
    "uuid": "string",
    "version": "string",
    "model": "string",
    "capture": "Capture"
  },
  "FileWriter": {
    "readyState": "?",
    "fileName": "string",
    "length": "number",
    "position": "number",
    "error": "FileError",
    "onwritestart": "Function",
    "onprogress": "Function",
    "onwrite": "Function",
    "onabort": "Function",
    "onerror": "Function",
    "onwriteend": "Function",
    "abort": "fn()",
    "seek": "fn(arg: number)",
    "truncate": "fn(arg: number)",
    "write": "fn(arg: ?)"
  },
  "FileSystem": {
    "name": "string",
    "root": "DirectoryEntry"
  },
  "DirectoryEntry": {
    "createReader": "fn() -> DirectoryReader",
    "getDirectory": "fn(path: string, options: Flags, successCallback: fn(result: DirectoryEntry), errorCallback: fn(error: FileError))",
    "getFile": "fn(path: string, options: Flags, successCallback: fn(result: FileEntry), errorCallback: fn(error: FileError))",
    "removeRecursively": "fn(successCallback: fn(), errorCallback: fn(error: FileError))"
  },
  "FileSystemEntry": {
    "isFile": "bool",
    "isDirectory": "bool",
    "name": "string",
    "fullPath": "string",
    "filesystem": "FileSystem",
    "getMetadata": "fn(onSuccess?: fn(arg: Metadata), onError?: fn(arg: FileError))",
    "setMetadata": "fn(onSuccess?: fn(arg: Metadata), onError?: fn(arg: FileError), options?: ?)",
    "toURL": "fn() -> string",
    "remove": "fn(onSuccess?: fn(), onError?: fn(arg: FileError))",
    "getParent": "fn(onSuccess?: fn(arg: DirectoryEntry), onError?: fn(arg: FileError))"
  },
  "FileEntry": {
    "moveTo": "fn(parentEntry: DirectoryEntry, file: string, onSuccess: fn(arg: DirectoryEntry), onError: fn(arg: FileError))",
    "copyTo": "fn(parentEntry: DirectoryEntry, file: string, onSuccess: fn(arg: DirectoryEntry), onError: fn(arg: FileError))",
    "createWriter": "fn(onSuccess?: fn(arg: FileWriter), onError?: fn(arg: FileError))",
    "file": "fn(onSuccess?: fn(arg: File), onError?: fn(arg: FileError))"
  },
  "DirectoryReader": {
    "readEntries": "fn(successCallback: fn(entries: FileSystemEntry), errorCallback: fn(error: FileError))"
  },
  "FileTransfer": {
    "onprogress": "Function",
    "upload": "fn(filePath: string, server: string, successCallback: fn(result: FileUploadResult), errorCallback: fn(error: FileError), options?: ?)",
    "download": "fn(source: string, target: string, successCallback: fn(fileEntry: FileEntry), errorCallback: fn(error: FileError), options?: ?)",
    "abort": "fn()"
  },
  "FileUploadOptions": {
    "fileKey": "string",
    "fileName": "string",
    "mimeType": "string",
    "params": "?",
    "chunkedMode": "bool",
    "headers": "?"
  },
  "FileUploadResult": {
    "bytesSent": "number",
    "responseCode": "number",
    "response": "string"
  },
  "Flags": {
    "create": "bool",
    "exclusive": "bool"
  },
  "LocalFileSystem": {
    "PERSISTENT": "number",
    "TEMPORARY": "number",
    "!type": "LocalFileSystem"
  },
  "Metadata": {
    "modificationTime": "Date"
  },
  "FileError": {
    "code": "number",
    "NOT_FOUND_ERR": "number",
    "SECURITY_ERR": "number",
    "ABORT_ERR": "number",
    "NOT_READABLE_ERR": "number",
    "ENCODING_ERR": "number",
    "NO_MODIFICATION_ALLOWED_ERR": "number",
    "INVALID_STATE_ERR": "number",
    "SYNTAX_ERR": "number",
    "INVALID_MODIFICATION_ERR": "number",
    "QUOTA_EXCEEDED_ERR": "number",
    "TYPE_MISMATCH_ERR": "number",
    "PATH_EXISTS_ERR": "number"
  },
  "FileTransferError": {
    "code": "number",
    "source": "string",
    "target": "string",
    "http_status": "number",
    "FILE_NOT_FOUND_ERR": "number",
    "INVALID_URL_ERR": "number",
    "CONNECTION_ERR": "number",
    "ABORT_ERR": "number"
  },
  "GeolocationOptions": {
    "enableHighAccuracy": "bool",
    "timeout": "number",
    "maximumAge": "number"
  },
  "GlobalizationError": {
    "code": "number",
    "message": "string",
    "UNKNOWN_ERROR": "number",
    "FORMATTING_ERROR": "number",
    "PARSING_ERROR": "number",
    "PATTERN_ERROR": "number"
  },
  "GlobalizationDate": {
    "year": "number",
    "month": "number",
    "day": "number",
    "hour": "number",
    "minute": "number",
    "second": "number",
    "millisecond": "number"
  },
  "GlobalizationDateOptions": {
    "formatLength": "string",
    "selector": "string"
  },
  "GlobalizationDatePattern": {
    "pattern": "string",
    "timezone": "string",
    "utc_offset": "number",
    "dst_offset": "number"
  },
  "GlobalizationDateNameOptions": {
    "type": "string",
    "item": "string"
  },
  "GlobalizationNumberOptions": {
    "type": "string"
  },
  "GlobalizationNumberPattern": {
    "pattern": "string",
    "symbol": "string",
    "fraction": "number",
    "rounding": "number",
    "positive": "string",
    "negative": "string",
    "decimal": "string",
    "grouping": "string"
  },
  "GlobalizationCurrencyPattern": {
    "pattern": "string",
    "code": "string",
    "fraction": "number",
    "rounding": "number",
    "decimal": "string",
    "grouping": "string"
  },
  "Globalization": {
    "getPreferredLanguage": "fn(successCallback: fn(properties: ?), errorCallback: fn(error: GlobalizationError))",
    "getLocaleName": "fn(successCallback: fn(properties: ?), errorCallback: fn(error: GlobalizationError))",
    "dateToString": "fn(date: Date, successCallback: fn(properties: ?), errorCallback: fn(error: GlobalizationError), options?: GlobalizationDateOptions)",
    "stringToDate": "fn(dateString: string, successCallback: fn(properties: GlobalizationDate), errorCallback: fn(error: GlobalizationError), options?: GlobalizationDateOptions)",
    "getDatePattern": "fn(successCallback: fn(properties: GlobalizationDatePattern), errorCallback: fn(error: GlobalizationError), options?: GlobalizationDateOptions)",
    "getDateNames": "fn(successCallback: fn(properties: ?), errorCallback: fn(error: GlobalizationError), options?: GlobalizationDateNameOptions)",
    "isDayLightSavingsTime": "fn(date: Date, successCallback: fn(properties: ?), errorCallback: fn(error: GlobalizationError))",
    "getFirstDayOfWeek": "fn(successCallback: fn(properties: ?), errorCallback: fn(error: GlobalizationError))",
    "numberToString": "fn(number: number, successCallback: fn(properties: ?), errorCallback: fn(error: GlobalizationError), options?: GlobalizationNumberOptions)",
    "stringToNumber": "fn(string: string, successCallback: fn(properties: ?), errorCallback: fn(error: GlobalizationError), options?: GlobalizationNumberOptions)",
    "getNumberPattern": "fn(successCallback: fn(parameters: GlobalizationNumberPattern), errorCallback: fn(error: GlobalizationError), options?: GlobalizationNumberOptions)",
    "getCurrencyPattern": "fn(currencyCode: string, successCallback: fn(parameters: GlobalizationCurrencyPattern), errorCallback: fn(error: GlobalizationError))"
  },
  "Media": {
    "getCurrentPosition": "fn(mediaSuccess: Function, mediaError?: fn(mediaError: MediaError))",
    "getDuration": "fn() -> ?",
    "play": "fn()",
    "pause": "fn()",
    "release": "fn()",
    "seekTo": "fn(milliseconds: number)",
    "startRecord": "fn()",
    "stopRecord": "fn()",
    "stop": "fn()"
  },
  "Notification": {
    "alert": "fn(message: string, alertCallback: Function, title?: string, buttonName?: string)",
    "confirm": "fn(message: string, confirmCallback: Function, title?: string, buttonLabels?: string)",
    "beep": "fn(times: number)",
    "vibrate": "fn(milliseconds: number)"
  },
  "Splashscreen": {
    "show": "fn()",
    "hide": "fn()"
  },
  "Database": {
    "transaction": "fn(populateDB?: fn(tx: SQLTransaction), errorCB?: fn(err: ?), successCB?: fn())",
    "changeVersion": "fn(var1: string, var2: string)"
  },
  "SQLResultSetRowList": {
    "length": "number",
    "item": "fn(index: number) -> ?"
  },
  "SQLError": {
    "code": "number",
    "message": "string"
  },
  "SQLResultSet": {
    "insertId": "number",
    "rowsAffected": "number",
    "rows": "SQLResultSetRowList"
  },
  "SQLTransaction": {
    "executeSql": "fn(sql: string) -> SQLResultSet"
  },
  "StatusBar": {
    "isVisible": "bool",
    "overlaysWebView": "fn(doOverlay: bool)",
    "styleDefault": "fn()",
    "styleLightContent": "fn()",
    "styleBlackTranslucent": "fn()",
    "styleBlackOpaque": "fn()",
    "backgroundColorByName": "fn(colorname: string)",
    "backgroundColorByHexString": "fn(hexString: string)",
    "hide": "fn()",
    "show": "fn()",
    "!type": "StatusBar"
  },
  "Keyboard": {
    "automaticScrollToTopOnHiding": "bool",
    "isVisible": "bool",
    "onshow": "Function",
    "onhide": "Function",
    "onshowing": "Function",
    "onhiding": "Function",
    "disableScrollingInShrinkView": "fn(disable: bool)",
    "hideFormAccessoryBar": "fn(hide: bool)",
    "shrinkView": "fn(shrink: bool)",
    "!type": "Keyboard"
  },
  "Navigator": {
    "accelerometer": "Accelerometer",
    "camera": "Camera",
    "capture": "Capture",
    "compass": "Compass",
    "connection": "Connection",
    "contacts": "Contacts",
    "device": "Device",
    "globalization": "Globalization",
    "notification": "Notification",
    "splashscreen": "Splashscreen"
  },
  "Window": {
    "requestFileSystem": "?",
    "openDatabase": "fn(database_name: string, database_version: string, database_displayname: string, database_size: number) -> Database"
  },
  "device": "Device",
  "phoneGapNavigator": "Navigator",
  "!name": "phonegap.d.ts"
}
