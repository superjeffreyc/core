{
  "BigInt": {
    "BigInt": {},
    "IRandom": {},
    "setRandom": "fn(random: IRandom)",
    "add": "fn(x: BigInt, y: BigInt) -> BigInt",
    "addInt": "fn(x: BigInt, n: number) -> BigInt",
    "bigInt2str": "fn(x: BigInt, base: number) -> string",
    "bitSize": "fn(x: BigInt) -> number",
    "dup": "fn(x: BigInt) -> BigInt",
    "equals": "fn(x: BigInt, y: BigInt) -> bool",
    "equalsInt": "fn(x: BigInt, y: number) -> bool",
    "expand": "fn(value: BigInt, n: number) -> BigInt",
    "findPrimes": "fn(n: number) -> [number]",
    "GCD": "fn(x: BigInt, y: BigInt) -> BigInt",
    "greater": "fn(x: BigInt, y: BigInt) -> bool",
    "greaterShift": "fn(x: BigInt, y: BigInt, shift: number) -> bool",
    "int2bigInt": "fn(t: number, n?: number, m?: number) -> BigInt",
    "inverseMod": "fn(x: BigInt, n: BigInt) -> BigInt",
    "inverseModInt": "fn(x: number, n: number) -> BigInt",
    "isZero": "fn(x: BigInt) -> bool",
    "millerRabin": "fn(x: BigInt, b: BigInt) -> bool",
    "millerRabinInt": "fn(x: number, b: number) -> bool",
    "mod": "fn(x: BigInt, n: BigInt) -> BigInt",
    "modInt": "fn(x: BigInt, n: number) -> number",
    "mult": "fn(x: BigInt, y: BigInt) -> BigInt",
    "multMod": "fn(x: BigInt, y: BigInt, n: BigInt) -> BigInt",
    "negative": "fn(x: BigInt) -> bool",
    "powMod": "fn(x: BigInt, y: BigInt, n: BigInt) -> BigInt",
    "randBigInt": "fn(n: number, s: number) -> BigInt",
    "randTruePrime": "fn(k: number) -> BigInt",
    "randProbPrime": "fn(k: number) -> BigInt",
    "str2bigInt": "fn(s: string, b: number, n?: number, m?: number) -> BigInt",
    "sub": "fn(x: BigInt, y: BigInt) -> BigInt",
    "trim": "fn(x: BigInt, k: number) -> BigInt",
    "addInt_": "fn(x: BigInt, n: number)",
    "add_": "fn(x: BigInt, y: BigInt)",
    "copy_": "fn(x: BigInt, y: BigInt)",
    "copyInt_": "fn(x: BigInt, n: number)",
    "GCD_": "fn(x: BigInt, y: BigInt)",
    "inverseMod_": "fn(x: BigInt, n: BigInt) -> bool",
    "mod_": "fn(x: BigInt, n: BigInt)",
    "mult_": "fn(x: BigInt, y: BigInt)",
    "multMod_": "fn(x: BigInt, y: BigInt, n: BigInt)",
    "powMod_": "fn(x: BigInt, y: BigInt, n: BigInt)",
    "randBigInt_": "fn(b: BigInt, n: number, s: number)",
    "randTruePrime_": "fn(ans: BigInt, k: number)",
    "sub_": "fn(x: BigInt, y: BigInt)",
    "addShift_": "fn(x: BigInt, y: BigInt, ys: number)",
    "carry_": "fn(x: BigInt)",
    "divide_": "fn(x: BigInt, y: BigInt, q: BigInt, r: BigInt)",
    "divInt_": "fn(x: BigInt, n: number) -> number",
    "eGCD_": "fn(x: BigInt, y: BigInt, d: BigInt, a: BigInt, b: BigInt)",
    "halve_": "fn(x: BigInt)",
    "leftShift_": "fn(x: BigInt, n: number)",
    "linComb_": "fn(x: BigInt, y: BigInt, a: number, b: number)",
    "linCombShift_": "fn(x: BigInt, y: BigInt, b: number, ys: number)",
    "mont_": "fn(x: BigInt, y: BigInt, n: BigInt, np: number)",
    "multInt_": "fn(x: BigInt, n: number)",
    "rightShift_": "fn(x: BigInt, n: number)",
    "squareMod_": "fn(x: BigInt, n: BigInt)",
    "subShift_": "fn(x: BigInt, y: BigInt, ys: number)"
  },
  "!name": "bigint.d.ts"
}
