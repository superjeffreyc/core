{
  "dojox": {
    "charting": {
      "Chart": {
        "!type": "fn(node: HTMLElement, kwArgs?: Object)",
        "prototype": {
          "addAxis": "fn(name: String, kwArgs: Object) -> ?",
          "addPlot": "fn(name: String, kwArgs: Object) -> ?",
          "addSeries": "fn(name: String, data: [?], kwArgs: Object) -> ?",
          "calculateGeometry": "fn() -> ?",
          "connectToPlot": "fn(name: String, object: Object, method: Function) -> ?",
          "delayedRender": "fn() -> ?",
          "destroy": "fn()",
          "fireEvent": "fn(seriesName: String, eventName: String, index: number) -> ?",
          "formatTruncatedLabel": "fn(element: ?, label: ?, labelType: ?)",
          "fullGeometry": "fn() -> ?",
          "fullRender": "fn() -> ?",
          "getAxis": "fn(name: String) -> ?",
          "getCoords": "fn() -> ?",
          "getGeometry": "fn() -> ?",
          "getPlot": "fn(name: String) -> ?",
          "getPlotOrder": "fn() -> ?",
          "getSeries": "fn(name: String) -> ?",
          "getSeriesOrder": "fn(plotName: String) -> ?",
          "movePlotToBack": "fn(name: String) -> ?",
          "movePlotToFront": "fn(name: String) -> ?",
          "moveSeriesToBack": "fn(name: String) -> ?",
          "moveSeriesToFront": "fn(name: String) -> ?",
          "removeAxis": "fn(name: String) -> ?",
          "removePlot": "fn(name: String) -> ?",
          "removeSeries": "fn(name: String) -> ?",
          "render": "fn() -> ?",
          "resize": "fn(width: number, height: number) -> ?",
          "setAxisWindow": "fn(name: String, scale: number, offset: number, zoom: bool) -> ?",
          "setDir": "fn(dir: ?) -> Function",
          "setPlotOrder": "fn(newOrder: [?]) -> ?",
          "setSeriesOrder": "fn(newOrder: [?]) -> ?",
          "setTheme": "fn(theme: dojox.charting.SimpleTheme) -> ?",
          "setWindow": "fn(sx: number, sy: number, dx: number, dy: number, zoom: bool) -> ?",
          "updateSeries": "fn(name: String, data: [?], offsets: bool) -> ?",
          "zoomIn": "fn(name: String, range: [?], delayed: ?)"
        }
      },
      "Chart2D": {
        "!type": "fn(node: HTMLElement, kwArgs?: Object)",
        "prototype": {
          "addAxis": "fn(name: String, kwArgs: Object) -> ?",
          "addPlot": "fn(name: String, kwArgs: Object) -> ?",
          "addSeries": "fn(name: String, data: [?], kwArgs: Object) -> ?",
          "calculateGeometry": "fn() -> ?",
          "connectToPlot": "fn(name: String, object: Object, method: Function) -> ?",
          "delayedRender": "fn() -> ?",
          "destroy": "fn()",
          "fireEvent": "fn(seriesName: String, eventName: String, index: number) -> ?",
          "formatTruncatedLabel": "fn(element: ?, label: ?, labelType: ?)",
          "fullGeometry": "fn() -> ?",
          "fullRender": "fn() -> ?",
          "getAxis": "fn(name: String) -> ?",
          "getCoords": "fn() -> ?",
          "getGeometry": "fn() -> ?",
          "getPlot": "fn(name: String) -> ?",
          "getPlotOrder": "fn() -> ?",
          "getSeries": "fn(name: String) -> ?",
          "getSeriesOrder": "fn(plotName: String) -> ?",
          "movePlotToBack": "fn(name: String) -> ?",
          "movePlotToFront": "fn(name: String) -> ?",
          "moveSeriesToBack": "fn(name: String) -> ?",
          "moveSeriesToFront": "fn(name: String) -> ?",
          "removeAxis": "fn(name: String) -> ?",
          "removePlot": "fn(name: String) -> ?",
          "removeSeries": "fn(name: String) -> ?",
          "render": "fn() -> ?",
          "resize": "fn(width: number, height: number) -> ?",
          "setAxisWindow": "fn(name: String, scale: number, offset: number, zoom: bool) -> ?",
          "setDir": "fn(dir: ?) -> Function",
          "setPlotOrder": "fn(newOrder: [?]) -> ?",
          "setSeriesOrder": "fn(newOrder: [?]) -> ?",
          "setTheme": "fn(theme: dojox.charting.SimpleTheme) -> ?",
          "setWindow": "fn(sx: number, sy: number, dx: number, dy: number, zoom: bool) -> ?",
          "updateSeries": "fn(name: String, data: [?], offsets: bool) -> ?",
          "zoomIn": "fn(name: String, range: [?], delayed: ?)"
        }
      },
      "Chart3D": {
        "!type": "fn(node: ?, lights: ?, camera: ?, theme: ?)",
        "prototype": {
          "addPlot": "fn(plot: ?) -> ?",
          "addWall": "fn(wall: ?) -> ?",
          "generate": "fn() -> ?",
          "invalidate": "fn() -> Function",
          "removePlot": "fn(plot: ?) -> ?",
          "removeWall": "fn(wall: ?) -> ?",
          "render": "fn() -> Function",
          "setDir": "fn(dir: String) -> Function"
        }
      },
      "DataChart": {
        "!type": "fn(node: HTMLElement, kwArgs: Object)",
        "prototype": {
          "chartTheme": "Object",
          "comparative": "bool",
          "displayRange": "number",
          "fieldName": "string",
          "label": "string",
          "minHeight": "number",
          "minWidth": "number",
          "query": "string",
          "queryOptions": "string",
          "scroll": "bool",
          "showing": "bool",
          "stretchToFit": "bool",
          "addAxis": "fn(name: String, kwArgs: Object) -> ?",
          "addPlot": "fn(name: String, kwArgs: Object) -> ?",
          "addSeries": "fn(name: String, data: [?], kwArgs: Object) -> ?",
          "calculateGeometry": "fn() -> ?",
          "connectToPlot": "fn(name: String, object: Object, method: Function) -> ?",
          "convertLabels": "fn(axis: ?) -> ?",
          "delayedRender": "fn() -> ?",
          "destroy": "fn()",
          "fetch": "fn()",
          "fireEvent": "fn(seriesName: String, eventName: String, index: number) -> ?",
          "formatTruncatedLabel": "fn(element: ?, label: ?, labelType: ?)",
          "fullGeometry": "fn() -> ?",
          "fullRender": "fn() -> ?",
          "getAxis": "fn(name: String) -> ?",
          "getCoords": "fn() -> ?",
          "getGeometry": "fn() -> ?",
          "getPlot": "fn(name: String) -> ?",
          "getPlotOrder": "fn() -> ?",
          "getProperty": "fn(item: Object, prop: ?) -> ?",
          "getSeries": "fn(name: String) -> ?",
          "getSeriesOrder": "fn(plotName: String) -> ?",
          "hide": "fn()",
          "movePlotToBack": "fn(name: String) -> ?",
          "movePlotToFront": "fn(name: String) -> ?",
          "moveSeriesToBack": "fn(name: String) -> ?",
          "moveSeriesToFront": "fn(name: String) -> ?",
          "removeAxis": "fn(name: String) -> ?",
          "removePlot": "fn(name: String) -> ?",
          "removeSeries": "fn(name: String) -> ?",
          "render": "fn() -> ?",
          "resize": "fn(width: number, height: number) -> ?",
          "resizeChart": "fn(dim: Object)",
          "seriesLabels": "fn(val: number) -> ?",
          "setAxisWindow": "fn(name: String, scale: number, offset: number, zoom: bool) -> ?",
          "setDir": "fn(dir: ?) -> Function",
          "setPlotOrder": "fn(newOrder: [?]) -> ?",
          "setSeriesOrder": "fn(newOrder: [?]) -> ?",
          "setStore": "fn(store: Object, query: String, fieldName: String, queryOptions: Object)",
          "setTheme": "fn(theme: dojox.charting.SimpleTheme) -> ?",
          "setWindow": "fn(sx: number, sy: number, dx: number, dy: number, zoom: bool) -> ?",
          "show": "fn()",
          "updateSeries": "fn(name: String, data: [?], offsets: bool) -> ?",
          "zoomIn": "fn(name: String, range: [?], delayed: ?)",
          "onData": "fn(items: [?])",
          "onDataReceived": "fn(items: [?])",
          "onError": "fn(err: Error)",
          "onSet": "fn(item: Object)"
        }
      },
      "DataSeries": {
        "!type": "fn(store: Object, kwArgs: Object, value: Function)",
        "prototype": {
          "destroy": "fn()",
          "fetch": "fn()",
          "setSeriesObject": "fn(series: dojox.charting.Series)",
          "onFetchError": "fn(errorData: ?, request: ?)"
        }
      },
      "Element": {
        "!type": "fn(chart: dojox.charting.Chart)",
        "prototype": {
          "chart": "Object",
          "dirty": "bool",
          "group": "Object",
          "htmlElement": "[?]",
          "htmlElements": "Object",
          "cleanGroup": "fn(creator: dojox.gfx.shape.Surface) -> ?",
          "destroy": "fn()",
          "destroyHtmlElements": "fn()",
          "getGroup": "fn() -> ?",
          "getTextWidth": "fn(s: ?, font: ?) -> number",
          "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
          "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
          "purgeGroup": "fn() -> ?"
        }
      },
      "Series": {
        "!type": "fn(chart: dojox.charting.Chart, data: [?], kwArgs?: Object)",
        "prototype": {
          "chart": "Object",
          "dirty": "bool",
          "group": "Object",
          "htmlElement": "[?]",
          "htmlElements": "Object",
          "cleanGroup": "fn(creator: dojox.gfx.shape.Surface) -> ?",
          "clear": "fn()",
          "destroy": "fn()",
          "destroyHtmlElements": "fn()",
          "getGroup": "fn() -> ?",
          "getTextWidth": "fn(s: ?, font: ?) -> number",
          "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
          "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
          "purgeGroup": "fn() -> ?",
          "update": "fn(data: [?])"
        }
      },
      "SimpleTheme": {
        "!type": "fn(kwArgs: ?)",
        "prototype": {
          "defaultColors": "[?]",
          "defaultMarkers": "Object",
          "defaultTheme": "Object",
          "shapeSpaces": "Object",
          "addMarker": "fn(name: String, segment: String)",
          "addMixin": "fn(theme: dojox.charting.SimpleTheme, elementType: String, mixin: Object, doPost: bool) -> ?",
          "clear": "fn()",
          "clone": "fn() -> ?",
          "getTick": "fn(name: String, mixin: Object) -> ?",
          "inspectObjects": "fn(f: ?)",
          "next": "fn(elementType: String, mixin: Object, doPost: bool) -> ?",
          "post": "fn(theme: dojox.charting.SimpleTheme, elementType: String) -> ?",
          "reverseFills": "fn()",
          "setMarkers": "fn(obj: Object)",
          "skip": "fn()"
        },
        "defaultMarkers": {
          "CIRCLE": "string",
          "CROSS": "string",
          "DIAMOND": "string",
          "SQUARE": "string",
          "TRIANGLE": "string",
          "TRIANGLE_INVERTED": "string",
          "X": "string"
        },
        "defaultTheme": {
          "axis": "Object",
          "chart": "Object",
          "indicator": "Object",
          "marker": "Object",
          "plotarea": "Object",
          "series": "Object"
        }
      },
      "StoreSeries": {
        "!type": "fn(store: Object, kwArgs: Object, value: Function)",
        "prototype": {
          "destroy": "fn()",
          "fetch": "fn()",
          "setSeriesObject": "fn(series: dojox.charting.Series)"
        }
      },
      "Theme": {
        "!type": "fn(kwArgs: ?)",
        "prototype": {
          "defaultColors": "[?]",
          "defaultMarkers": "Object",
          "defaultTheme": "Object",
          "shapeSpaces": "Object",
          "addMarker": "fn(name: String, segment: String)",
          "addMixin": "fn(theme: dojox.charting.SimpleTheme, elementType: String, mixin: Object, doPost: bool) -> ?",
          "clear": "fn()",
          "clone": "fn() -> ?",
          "defineColors": "fn(kwArgs: Object) -> ?",
          "generateGradient": "fn(fillPattern: ?, colorFrom: ?, colorTo: ?) -> ?",
          "generateHslColor": "fn(color: ?, luminance: ?) -> ?",
          "generateHslGradient": "fn(color: ?, fillPattern: ?, lumFrom: ?, lumTo: ?) -> ?",
          "getTick": "fn(name: String, mixin: Object) -> ?",
          "inspectObjects": "fn(f: ?)",
          "next": "fn(elementType: String, mixin: Object, doPost: bool) -> ?",
          "post": "fn(theme: dojox.charting.SimpleTheme, elementType: String) -> ?",
          "reverseFills": "fn()",
          "setMarkers": "fn(obj: Object)",
          "skip": "fn()"
        },
        "defaultMarkers": {
          "CIRCLE": "string",
          "CROSS": "string",
          "DIAMOND": "string",
          "SQUARE": "string",
          "TRIANGLE": "string",
          "TRIANGLE_INVERTED": "string",
          "X": "string"
        },
        "defaultTheme": {
          "axis": "Object",
          "chart": "Object",
          "indicator": "Object",
          "marker": "Object",
          "plotarea": "Object",
          "series": "Object"
        }
      },
      "action2d": {
        "_IndicatorElement": {
          "!type": "fn(chart: ?, kwArgs: ?)",
          "prototype": {
            "baseParams": "Object",
            "chart": "Object",
            "defaultParams": "Object",
            "dirty": "bool",
            "group": "Object",
            "htmlElement": "[?]",
            "htmlElements": "Object",
            "optionalParams": "Object",
            "addSeries": "fn(run: ?)",
            "assignAxes": "fn(axes: [?])",
            "calculateAxes": "fn(dim: Object) -> ?",
            "cleanGroup": "fn(creator: dojox.gfx.Surface) -> ?",
            "clear": "fn()",
            "connect": "fn(object: Object, method: String) -> ?",
            "createLabel": "fn(group: ?, value: ?, bbox: ?, theme: ?)",
            "destroy": "fn()",
            "destroyHtmlElements": "fn()",
            "events": "fn() -> ?",
            "fireEvent": "fn(seriesName: String, eventName: String, index: number, eventObject: Object)",
            "getGroup": "fn() -> ?",
            "getRequiredColors": "fn() -> ?",
            "getSeriesStats": "fn() -> ?",
            "getTextWidth": "fn(s: ?, font: ?) -> number",
            "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
            "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
            "initializeScalers": "fn(dim: Object, stats: Object) -> ?",
            "isDataDirty": "fn() -> ?",
            "isDirty": "fn() -> ?",
            "performZoom": "fn(dim: Object, offsets: Object) -> ?",
            "plotEvent": "fn(o: Object)",
            "purgeGroup": "fn()",
            "raiseEvent": "fn(o: Object)",
            "render": "fn()",
            "renderLabel": "fn(group: ?, x: ?, y: ?, label: ?, theme: ?, block: ?, align: ?) -> ?",
            "resetEvents": "fn()",
            "setAxis": "fn(axis: dojox.charting.axis2d.Base) -> ?",
            "stopTrack": "fn()",
            "toData": "fn(coord: Object) -> ?",
            "toPage": "fn(coord: Object) -> ?"
          }
        },
        "Base": {
          "!type": "fn(chart: dojox.charting.Chart, plot?: String)",
          "prototype": {
            "connect": "fn()",
            "destroy": "fn()",
            "disconnect": "fn()",
            "emit": "fn(type: ?, event: ?) -> ?",
            "on": "fn(type: ?, listener: ?) -> ?"
          }
        },
        "ChartAction": {
          "!type": "fn(chart: dojox.charting.Chart, plot?: String)",
          "prototype": {
            "connect": "fn()",
            "destroy": "fn()",
            "disconnect": "fn()",
            "emit": "fn(type: ?, event: ?) -> ?",
            "on": "fn(type: ?, listener: ?) -> ?"
          }
        },
        "Highlight": {
          "!type": "fn(chart: dojox.charting.Chart, plot?: String, kwArgs?: Object)",
          "prototype": {
            "defaultParams": "Object",
            "optionalParams": "Object",
            "overOutEvents": "Object",
            "connect": "fn()",
            "destroy": "fn()",
            "disconnect": "fn()",
            "emit": "fn(type: ?, event: ?) -> ?",
            "on": "fn(type: ?, listener: ?) -> ?",
            "process": "fn(o: dojox.gfx.shape.Shape)",
            "reset": "fn()"
          }
        },
        "Magnify": {
          "!type": "fn(chart: dojox.charting.Chart, plot?: String, kwArgs?: Object)",
          "prototype": {
            "defaultParams": "Object",
            "optionalParams": "Object",
            "overOutEvents": "Object",
            "connect": "fn()",
            "destroy": "fn()",
            "disconnect": "fn()",
            "emit": "fn(type: ?, event: ?) -> ?",
            "on": "fn(type: ?, listener: ?) -> ?",
            "process": "fn(o: dojox.gfx.shape.Shape)",
            "reset": "fn()"
          }
        },
        "MouseIndicator": {
          "!type": "fn(chart: dojox.charting.Chart, plot: ?, kwArgs?: Object)",
          "prototype": {
            "defaultParams": "Object",
            "optionalParams": "Object",
            "connect": "fn()",
            "destroy": "fn()",
            "disconnect": "fn()",
            "emit": "fn(type: ?, event: ?) -> ?",
            "on": "fn(type: ?, listener: ?) -> ?",
            "onChange": "fn(event: ?)",
            "onMouseDown": "fn(event: ?)",
            "onMouseMove": "fn(event: ?)",
            "onMouseUp": "fn(event: ?)"
          }
        },
        "MouseZoomAndPan": {
          "!type": "fn(chart: dojox.charting.Chart, plot: ?, kwArgs?: Object)",
          "prototype": {
            "defaultParams": "Object",
            "optionalParams": "Object",
            "connect": "fn()",
            "destroy": "fn()",
            "disconnect": "fn()",
            "emit": "fn(type: ?, event: ?) -> ?",
            "on": "fn(type: ?, listener: ?) -> ?",
            "onDoubleClick": "fn(event: ?)",
            "onKeyPress": "fn(event: ?)",
            "onMouseDown": "fn(event: ?)",
            "onMouseMove": "fn(event: ?)",
            "onMouseUp": "fn(event: ?)",
            "onMouseWheel": "fn(event: ?)"
          }
        },
        "MoveSlice": {
          "!type": "fn(chart: dojox.charting.Chart, plot?: String, kwArgs?: Object)",
          "prototype": {
            "defaultParams": "Object",
            "optionalParams": "Object",
            "overOutEvents": "Object",
            "connect": "fn()",
            "destroy": "fn()",
            "disconnect": "fn()",
            "emit": "fn(type: ?, event: ?) -> ?",
            "on": "fn(type: ?, listener: ?) -> ?",
            "process": "fn(o: dojox.gfx.shape.Shape)",
            "reset": "fn()"
          }
        },
        "PlotAction": {
          "!type": "fn(chart: dojox.charting.Chart, plot?: String, kwargs?: Object)",
          "prototype": {
            "overOutEvents": "Object",
            "connect": "fn()",
            "destroy": "fn()",
            "disconnect": "fn()",
            "emit": "fn(type: ?, event: ?) -> ?",
            "on": "fn(type: ?, listener: ?) -> ?",
            "reset": "fn()"
          }
        },
        "Shake": {
          "!type": "fn(chart: dojox.charting.Chart, plot?: String, kwArgs?: Object)",
          "prototype": {
            "defaultParams": "Object",
            "optionalParams": "Object",
            "overOutEvents": "Object",
            "connect": "fn()",
            "destroy": "fn()",
            "disconnect": "fn()",
            "emit": "fn(type: ?, event: ?) -> ?",
            "on": "fn(type: ?, listener: ?) -> ?",
            "process": "fn(o: dojox.gfx.shape.Shape)",
            "reset": "fn()"
          }
        },
        "Tooltip": {
          "!type": "fn(chart: dojox.charting.Chart, plot?: String, kwArgs?: Object)",
          "prototype": {
            "defaultParams": "Object",
            "optionalParams": "Object",
            "overOutEvents": "Object",
            "connect": "fn()",
            "destroy": "fn()",
            "disconnect": "fn()",
            "emit": "fn(type: ?, event: ?) -> ?",
            "on": "fn(type: ?, listener: ?) -> ?",
            "process": "fn(o: dojox.gfx.shape.Shape)",
            "reset": "fn()",
            "onClick": "fn()"
          }
        },
        "TouchIndicator": {
          "!type": "fn(chart: dojox.charting.Chart, plot: ?, kwArgs?: Object)",
          "prototype": {
            "defaultParams": "Object",
            "optionalParams": "Object",
            "connect": "fn()",
            "destroy": "fn()",
            "disconnect": "fn()",
            "emit": "fn(type: ?, event: ?) -> ?",
            "on": "fn(type: ?, listener: ?) -> ?",
            "onChange": "fn(event: ?)",
            "onTouchEnd": "fn(event: ?)",
            "onTouchMove": "fn(event: ?)",
            "onTouchStart": "fn(event: ?)"
          }
        },
        "TouchZoomAndPan": {
          "!type": "fn(chart: dojox.charting.Chart, plot: ?, kwArgs?: Object)",
          "prototype": {
            "defaultParams": "Object",
            "optionalParams": "Object",
            "connect": "fn()",
            "destroy": "fn()",
            "disconnect": "fn()",
            "emit": "fn(type: ?, event: ?) -> ?",
            "on": "fn(type: ?, listener: ?) -> ?",
            "onDoubleTap": "fn(event: ?)",
            "onTouchEnd": "fn(event: ?)",
            "onTouchMove": "fn(event: ?)",
            "onTouchStart": "fn(event: ?)"
          }
        }
      },
      "axis2d": {
        "Base": {
          "!type": "fn(chart: dojox.charting.Chart, kwArgs?: Object)",
          "prototype": {
            "chart": "Object",
            "dirty": "bool",
            "group": "Object",
            "htmlElement": "[?]",
            "htmlElements": "Object",
            "calculate": "fn(min: ?, max: ?, span: ?) -> ?",
            "cleanGroup": "fn(creator: dojox.gfx.shape.Surface) -> ?",
            "clear": "fn() -> ?",
            "destroy": "fn()",
            "destroyHtmlElements": "fn()",
            "getGroup": "fn() -> ?",
            "getOffsets": "fn() -> ?",
            "getScaler": "fn() -> ?",
            "getTextWidth": "fn(s: ?, font: ?) -> number",
            "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
            "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
            "getTicks": "fn() -> ?",
            "initialized": "fn() -> ?",
            "purgeGroup": "fn() -> ?",
            "render": "fn(dim: ?, offsets: ?) -> ?"
          }
        },
        "Default": {
          "!type": "fn(chart: dojox.charting.Chart, kwArgs?: Object)",
          "prototype": {
            "chart": "Object",
            "defaultParams": "Object",
            "dirty": "bool",
            "group": "Object",
            "htmlElement": "[?]",
            "htmlElements": "Object",
            "offset": "number",
            "opt": "Object",
            "optionalParams": "Object",
            "scale": "number",
            "scaler": "Object",
            "ticks": "Object",
            "calculate": "fn(min: ?, max: ?, span: ?) -> Function",
            "cleanGroup": "fn(creator: ?)",
            "clear": "fn() -> ?",
            "createLine": "fn(creator: ?, params: ?) -> ?",
            "createText": "fn(labelType: ?, creator: ?, x: ?, y: ?, align: ?, textContent: ?, font: ?, fontColor: ?, labelWidth: ?) -> ?",
            "dependOnData": "fn() -> bool",
            "destroy": "fn()",
            "destroyHtmlElements": "fn()",
            "getGroup": "fn() -> ?",
            "getOffsets": "fn() -> ?",
            "getScaler": "fn() -> ?",
            "getTextWidth": "fn(s: ?, font: ?) -> number",
            "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
            "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
            "getTicks": "fn() -> ?",
            "getWindowOffset": "fn() -> number",
            "getWindowScale": "fn() -> number",
            "initialized": "fn() -> ?",
            "labelTooltip": "fn(elem: ?, chart: ?, label: ?, truncatedLabel: ?, font: ?, elemType: ?)",
            "purgeGroup": "fn() -> ?",
            "render": "fn(dim: Object, offsets: Object) -> ?",
            "setWindow": "fn(scale: number, offset: number) -> ?"
          }
        },
        "Invisible": {
          "!type": "fn(chart: dojox.charting.Chart, kwArgs?: Object)",
          "prototype": {
            "chart": "Object",
            "defaultParams": "Object",
            "dirty": "bool",
            "group": "Object",
            "htmlElement": "[?]",
            "htmlElements": "Object",
            "optionalParams": "Object",
            "calculate": "fn(min: number, max: number, span: number) -> ?",
            "cleanGroup": "fn(creator: dojox.gfx.shape.Surface) -> ?",
            "clear": "fn() -> ?",
            "dependOnData": "fn() -> bool",
            "destroy": "fn()",
            "destroyHtmlElements": "fn()",
            "getGroup": "fn() -> ?",
            "getOffsets": "fn() -> ?",
            "getScaler": "fn() -> ?",
            "getTextWidth": "fn(s: ?, font: ?) -> number",
            "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
            "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
            "getTicks": "fn() -> ?",
            "getWindowOffset": "fn() -> number",
            "getWindowScale": "fn() -> number",
            "initialized": "fn() -> ?",
            "purgeGroup": "fn() -> ?",
            "render": "fn(dim: ?, offsets: ?) -> ?",
            "setWindow": "fn(scale: number, offset: number) -> ?"
          }
        },
        "common": {
          "createText": {
            "gfx": "fn(chart: dojox.charting.Chart, creator: Object, x: number, y: number, align: String, text: String, font: String, fontColor: String) -> dojox.gfx.Text",
            "html": "fn(chart: dojox.charting.Chart, creator: Object, x: number, y: number, align: String, text: String, font: String, fontColor: String, labelWidth: number) -> HTMLElement"
          }
        }
      },
      "bidi": {
        "Chart": {
          "!type": "fn()",
          "prototype": {
            "dir": "string",
            "isMirrored": "bool",
            "textDir": "string",
            "applyMirroring": "fn(plot: ?, dim: ?, offsets: ?) -> Function",
            "formatTruncatedLabel": "fn(element: ?, label: ?, labelType: ?)",
            "getTextDir": "fn(text: ?) -> ?",
            "isRightToLeft": "fn() -> bool",
            "render": "fn() -> Function",
            "setDir": "fn(dir: ?) -> Function",
            "setTextDir": "fn(newTextDir: ?, obj: ?) -> Function"
          }
        },
        "Chart3D": {
          "!type": "fn()",
          "prototype": {
            "direction": "string",
            "isMirrored": "bool",
            "applyMirroring": "fn(plot: ?, dim: ?, offsets: ?) -> Function",
            "generate": "fn() -> Function",
            "isRightToLeft": "fn() -> bool",
            "postscript": "fn(node: HTMLElement, lights: ?, camera: Object, theme: Object, direction: String)",
            "setDir": "fn(dir: ?) -> Function"
          }
        },
        "action2d": {
          "Tooltip": {
            "!type": "fn()",
            "prototype": {}
          },
          "ZoomAndPan": {
            "!type": "fn()",
            "prototype": {}
          }
        },
        "axis2d": {
          "Default": {
            "!type": "fn()",
            "prototype": {
              "labelTooltip": "fn(elem: ?, chart: ?, label: ?, truncatedLabel: ?, font: ?, elemType: ?)"
            }
          }
        },
        "widget": {
          "Chart": {
            "!type": "fn()",
            "prototype": {
              "postMixInProperties": "fn()"
            }
          },
          "Legend": {
            "!type": "fn()",
            "prototype": {}
          }
        },
        "_bidiutils": {
          "reverseMatrix": "fn(plot: ?, dim: ?, offsets: ?, rtl: ?)"
        }
      },
      "BidiSupport": {},
      "BidiSupport3D": {},
      "plot2d": {
        "_PlotEvents": {
          "!type": "fn()",
          "prototype": {
            "connect": "fn(object: Object, method: String) -> ?",
            "destroy": "fn()",
            "events": "fn() -> ?",
            "fireEvent": "fn(seriesName: String, eventName: String, index: number, eventObject: Object)",
            "plotEvent": "fn(o: Object)",
            "raiseEvent": "fn(o: Object)",
            "resetEvents": "fn()"
          }
        },
        "Areas": {
          "!type": "fn()",
          "prototype": {
            "baseParams": "Object",
            "chart": "Object",
            "defaultParams": "Object",
            "dirty": "bool",
            "group": "Object",
            "htmlElement": "[?]",
            "htmlElements": "Object",
            "optionalParams": "Object",
            "addSeries": "fn(run: dojox.charting.Series) -> ?",
            "assignAxes": "fn(axes: [?])",
            "buildSegments": "fn(i: ?, indexed: ?) -> [?]",
            "calculateAxes": "fn(dim: Object) -> ?",
            "cleanGroup": "fn(creator: ?, noClip: ?)",
            "clear": "fn() -> ?",
            "connect": "fn(object: Object, method: String) -> ?",
            "createLabel": "fn(group: ?, value: ?, bbox: ?, theme: ?)",
            "createPath": "fn(run: ?, creator: ?, params: ?) -> ?",
            "destroy": "fn()",
            "destroyHtmlElements": "fn()",
            "events": "fn() -> ?",
            "fireEvent": "fn(seriesName: String, eventName: String, index: number, eventObject: Object)",
            "getGroup": "fn() -> ?",
            "getRequiredColors": "fn() -> ?",
            "getSeriesStats": "fn() -> ?",
            "getTextWidth": "fn(s: ?, font: ?) -> number",
            "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
            "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
            "initializeScalers": "fn(dim: Object, stats: Object) -> ?",
            "isDataDirty": "fn() -> ?",
            "isDirty": "fn() -> ?",
            "performZoom": "fn(dim: Object, offsets: Object) -> ?",
            "plotEvent": "fn(o: Object)",
            "purgeGroup": "fn()",
            "raiseEvent": "fn(o: Object)",
            "render": "fn(dim: Object, offsets: Object) -> ?",
            "renderLabel": "fn(group: ?, x: ?, y: ?, label: ?, theme: ?, block: ?, align: ?) -> ?",
            "resetEvents": "fn()",
            "setAxis": "fn(axis: dojox.charting.axis2d.Base) -> ?",
            "toData": "fn(coord: Object) -> ?",
            "toPage": "fn(coord: Object) -> ?"
          }
        },
        "Bars": {
          "!type": "fn(chart: dojox.charting.Chart, kwArgs?: Object)",
          "prototype": {
            "baseParams": "Object",
            "chart": "Object",
            "defaultParams": "Object",
            "dirty": "bool",
            "group": "Object",
            "htmlElement": "[?]",
            "htmlElements": "Object",
            "optionalParams": "Object",
            "addSeries": "fn(run: dojox.charting.Series) -> ?",
            "assignAxes": "fn(axes: [?])",
            "calculateAxes": "fn(dim: Object) -> ?",
            "cleanGroup": "fn(creator: ?, noClip: ?)",
            "clear": "fn() -> ?",
            "connect": "fn(object: Object, method: String) -> ?",
            "createLabel": "fn(group: ?, value: ?, bbox: ?, theme: ?)",
            "createRect": "fn(run: ?, creator: ?, params: ?) -> ?",
            "destroy": "fn()",
            "destroyHtmlElements": "fn()",
            "events": "fn() -> ?",
            "fireEvent": "fn(seriesName: String, eventName: String, index: number, eventObject: Object)",
            "getBarProperties": "fn() -> Object",
            "getGroup": "fn() -> ?",
            "getRequiredColors": "fn() -> ?",
            "getSeriesStats": "fn() -> ?",
            "getTextWidth": "fn(s: ?, font: ?) -> number",
            "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
            "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
            "getValue": "fn(value: ?, j: ?, seriesIndex: ?, indexed: ?) -> Object",
            "initializeScalers": "fn(dim: Object, stats: Object) -> ?",
            "isDataDirty": "fn() -> ?",
            "isDirty": "fn() -> ?",
            "performZoom": "fn(dim: Object, offsets: Object) -> ?",
            "plotEvent": "fn(o: Object)",
            "purgeGroup": "fn()",
            "raiseEvent": "fn(o: Object)",
            "render": "fn(dim: Object, offsets: Object) -> ?",
            "renderLabel": "fn(group: ?, x: ?, y: ?, label: ?, theme: ?, block: ?, align: ?) -> ?",
            "resetEvents": "fn()",
            "setAxis": "fn(axis: dojox.charting.axis2d.Base) -> ?",
            "toData": "fn(coord: Object) -> ?",
            "toPage": "fn(coord: Object) -> ?"
          }
        },
        "Base": {
          "!type": "fn(chart: dojox.charting.Chart, kwArgs?: Object)",
          "prototype": {
            "chart": "Object",
            "dirty": "bool",
            "group": "Object",
            "htmlElement": "[?]",
            "htmlElements": "Object",
            "addSeries": "fn(run: dojox.charting.Series) -> ?",
            "assignAxes": "fn(axes: [?])",
            "calculateAxes": "fn(dim: Object) -> ?",
            "cleanGroup": "fn(creator: dojox.gfx.shape.Surface) -> ?",
            "clear": "fn() -> ?",
            "destroy": "fn()",
            "destroyHtmlElements": "fn()",
            "getGroup": "fn() -> ?",
            "getRequiredColors": "fn() -> ?",
            "getSeriesStats": "fn() -> ?",
            "getTextWidth": "fn(s: ?, font: ?) -> number",
            "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
            "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
            "initializeScalers": "fn() -> Function",
            "isDataDirty": "fn() -> ?",
            "purgeGroup": "fn() -> ?",
            "render": "fn(dim: Object, offsets: Object) -> ?",
            "renderLabel": "fn(group: ?, x: ?, y: ?, label: ?, theme: ?, block: ?, align: ?) -> ?",
            "setAxis": "fn(axis: dojox.charting.axis2d.Base) -> ?"
          }
        },
        "Bubble": {
          "!type": "fn(chart: dojox.charting.Chart, kwArgs?: Object)",
          "prototype": {
            "baseParams": "Object",
            "chart": "Object",
            "defaultParams": "Object",
            "dirty": "bool",
            "group": "Object",
            "htmlElement": "[?]",
            "htmlElements": "Object",
            "optionalParams": "Object",
            "addSeries": "fn(run: dojox.charting.Series) -> ?",
            "assignAxes": "fn(axes: [?])",
            "calculateAxes": "fn(dim: Object) -> ?",
            "cleanGroup": "fn(creator: ?, noClip: ?)",
            "clear": "fn() -> ?",
            "connect": "fn(object: Object, method: String) -> ?",
            "createLabel": "fn(group: ?, value: ?, bbox: ?, theme: ?)",
            "destroy": "fn()",
            "destroyHtmlElements": "fn()",
            "events": "fn() -> ?",
            "fireEvent": "fn(seriesName: String, eventName: String, index: number, eventObject: Object)",
            "getGroup": "fn() -> ?",
            "getRequiredColors": "fn() -> ?",
            "getSeriesStats": "fn() -> ?",
            "getTextWidth": "fn(s: ?, font: ?) -> number",
            "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
            "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
            "initializeScalers": "fn(dim: Object, stats: Object) -> ?",
            "isDataDirty": "fn() -> ?",
            "isDirty": "fn() -> ?",
            "performZoom": "fn(dim: Object, offsets: Object) -> ?",
            "plotEvent": "fn(o: Object)",
            "purgeGroup": "fn()",
            "raiseEvent": "fn(o: Object)",
            "render": "fn(dim: Object, offsets: Object) -> ?",
            "renderLabel": "fn(group: ?, x: ?, y: ?, label: ?, theme: ?, block: ?, align: ?) -> ?",
            "resetEvents": "fn()",
            "setAxis": "fn(axis: dojox.charting.axis2d.Base) -> ?",
            "toData": "fn(coord: Object) -> ?",
            "toPage": "fn(coord: Object) -> ?"
          }
        },
        "Candlesticks": {
          "!type": "fn(chart: dojox.charting.Chart, kwArgs?: Object)",
          "prototype": {
            "baseParams": "Object",
            "chart": "Object",
            "defaultParams": "Object",
            "dirty": "bool",
            "group": "Object",
            "htmlElement": "[?]",
            "htmlElements": "Object",
            "optionalParams": "Object",
            "addSeries": "fn(run: dojox.charting.Series) -> ?",
            "assignAxes": "fn(axes: [?])",
            "calculateAxes": "fn(dim: Object) -> ?",
            "cleanGroup": "fn(creator: ?, noClip: ?)",
            "clear": "fn() -> ?",
            "collectStats": "fn(series: dojox.charting.Series) -> ?",
            "connect": "fn(object: Object, method: String) -> ?",
            "createLabel": "fn(group: ?, value: ?, bbox: ?, theme: ?)",
            "destroy": "fn()",
            "destroyHtmlElements": "fn()",
            "events": "fn() -> ?",
            "fireEvent": "fn(seriesName: String, eventName: String, index: number, eventObject: Object)",
            "getGroup": "fn() -> ?",
            "getRequiredColors": "fn() -> ?",
            "getSeriesStats": "fn() -> ?",
            "getTextWidth": "fn(s: ?, font: ?) -> number",
            "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
            "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
            "initializeScalers": "fn(dim: Object, stats: Object) -> ?",
            "isDataDirty": "fn() -> ?",
            "isDirty": "fn() -> ?",
            "performZoom": "fn(dim: Object, offsets: Object) -> ?",
            "plotEvent": "fn(o: Object)",
            "purgeGroup": "fn()",
            "raiseEvent": "fn(o: Object)",
            "render": "fn(dim: Object, offsets: Object) -> ?",
            "renderLabel": "fn(group: ?, x: ?, y: ?, label: ?, theme: ?, block: ?, align: ?) -> ?",
            "resetEvents": "fn()",
            "setAxis": "fn(axis: dojox.charting.axis2d.Base) -> ?",
            "toData": "fn(coord: Object) -> ?",
            "tooltipFunc": "fn(o: ?) -> String",
            "toPage": "fn(coord: Object) -> ?"
          }
        },
        "CartesianBase": {
          "!type": "fn(chart: dojox.charting.Chart, kwArgs?: Object)",
          "prototype": {
            "baseParams": "Object",
            "chart": "Object",
            "dirty": "bool",
            "group": "Object",
            "htmlElement": "[?]",
            "htmlElements": "Object",
            "addSeries": "fn(run: dojox.charting.Series) -> ?",
            "assignAxes": "fn(axes: [?])",
            "calculateAxes": "fn(dim: Object) -> ?",
            "cleanGroup": "fn(creator: ?, noClip?: ?)",
            "clear": "fn() -> ?",
            "createLabel": "fn(group: ?, value: ?, bbox: ?, theme: ?)",
            "destroy": "fn()",
            "destroyHtmlElements": "fn()",
            "getGroup": "fn() -> ?",
            "getRequiredColors": "fn() -> ?",
            "getSeriesStats": "fn() -> ?",
            "getTextWidth": "fn(s: ?, font: ?) -> number",
            "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
            "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
            "initializeScalers": "fn(dim?: Object, stats?: Object) -> ?",
            "isDataDirty": "fn() -> ?",
            "isDirty": "fn() -> ?",
            "performZoom": "fn(dim: Object, offsets: Object) -> ?",
            "purgeGroup": "fn()",
            "render": "fn(dim: Object, offsets: Object) -> ?",
            "renderLabel": "fn(group: ?, x: ?, y: ?, label: ?, theme: ?, block: ?, align: ?) -> ?",
            "setAxis": "fn(axis: dojox.charting.axis2d.Base) -> ?",
            "toData": "fn(coord: Object) -> ?",
            "toPage": "fn(coord: Object) -> ?"
          }
        },
        "ClusteredBars": {
          "!type": "fn(chart: dojox.charting.Chart, kwArgs?: Object)",
          "prototype": {
            "baseParams": "Object",
            "chart": "Object",
            "defaultParams": "Object",
            "dirty": "bool",
            "group": "Object",
            "htmlElement": "[?]",
            "htmlElements": "Object",
            "optionalParams": "Object",
            "addSeries": "fn(run: dojox.charting.Series) -> ?",
            "assignAxes": "fn(axes: [?])",
            "calculateAxes": "fn(dim: Object) -> ?",
            "cleanGroup": "fn(creator: ?, noClip: ?)",
            "clear": "fn() -> ?",
            "connect": "fn(object: Object, method: String) -> ?",
            "createLabel": "fn(group: ?, value: ?, bbox: ?, theme: ?)",
            "createRect": "fn(run: ?, creator: ?, params: ?) -> ?",
            "destroy": "fn()",
            "destroyHtmlElements": "fn()",
            "events": "fn() -> ?",
            "fireEvent": "fn(seriesName: String, eventName: String, index: number, eventObject: Object)",
            "getBarProperties": "fn() -> Object",
            "getGroup": "fn() -> ?",
            "getRequiredColors": "fn() -> ?",
            "getSeriesStats": "fn() -> ?",
            "getTextWidth": "fn(s: ?, font: ?) -> number",
            "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
            "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
            "getValue": "fn(value: ?, j: ?, seriesIndex: ?, indexed: ?) -> Object",
            "initializeScalers": "fn(dim: Object, stats: Object) -> ?",
            "isDataDirty": "fn() -> ?",
            "isDirty": "fn() -> ?",
            "performZoom": "fn(dim: Object, offsets: Object) -> ?",
            "plotEvent": "fn(o: Object)",
            "purgeGroup": "fn()",
            "raiseEvent": "fn(o: Object)",
            "render": "fn(dim: Object, offsets: Object) -> ?",
            "renderLabel": "fn(group: ?, x: ?, y: ?, label: ?, theme: ?, block: ?, align: ?) -> ?",
            "resetEvents": "fn()",
            "setAxis": "fn(axis: dojox.charting.axis2d.Base) -> ?",
            "toData": "fn(coord: Object) -> ?",
            "toPage": "fn(coord: Object) -> ?"
          }
        },
        "ClusteredColumns": {
          "!type": "fn(chart: dojox.charting.Chart, kwArgs?: Object)",
          "prototype": {
            "baseParams": "Object",
            "chart": "Object",
            "defaultParams": "Object",
            "dirty": "bool",
            "group": "Object",
            "htmlElement": "[?]",
            "htmlElements": "Object",
            "optionalParams": "Object",
            "addSeries": "fn(run: dojox.charting.Series) -> ?",
            "assignAxes": "fn(axes: [?])",
            "calculateAxes": "fn(dim: Object) -> ?",
            "cleanGroup": "fn(creator: ?, noClip: ?)",
            "clear": "fn() -> ?",
            "connect": "fn(object: Object, method: String) -> ?",
            "createLabel": "fn(group: ?, value: ?, bbox: ?, theme: ?)",
            "createRect": "fn(run: ?, creator: ?, params: ?) -> ?",
            "destroy": "fn()",
            "destroyHtmlElements": "fn()",
            "events": "fn() -> ?",
            "fireEvent": "fn(seriesName: String, eventName: String, index: number, eventObject: Object)",
            "getBarProperties": "fn() -> Object",
            "getGroup": "fn() -> ?",
            "getRequiredColors": "fn() -> ?",
            "getSeriesStats": "fn() -> ?",
            "getTextWidth": "fn(s: ?, font: ?) -> number",
            "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
            "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
            "getValue": "fn(value: ?, j: ?, seriesIndex: ?, indexed: ?) -> Object",
            "initializeScalers": "fn(dim: Object, stats: Object) -> ?",
            "isDataDirty": "fn() -> ?",
            "isDirty": "fn() -> ?",
            "performZoom": "fn(dim: Object, offsets: Object) -> ?",
            "plotEvent": "fn(o: Object)",
            "purgeGroup": "fn()",
            "raiseEvent": "fn(o: Object)",
            "render": "fn(dim: Object, offsets: Object) -> ?",
            "renderLabel": "fn(group: ?, x: ?, y: ?, label: ?, theme: ?, block: ?, align: ?) -> ?",
            "resetEvents": "fn()",
            "setAxis": "fn(axis: dojox.charting.axis2d.Base) -> ?",
            "toData": "fn(coord: Object) -> ?",
            "toPage": "fn(coord: Object) -> ?"
          }
        },
        "Columns": {
          "!type": "fn(chart: dojox.charting.Chart, kwArgs?: Object)",
          "prototype": {
            "baseParams": "Object",
            "chart": "Object",
            "defaultParams": "Object",
            "dirty": "bool",
            "group": "Object",
            "htmlElement": "[?]",
            "htmlElements": "Object",
            "optionalParams": "Object",
            "addSeries": "fn(run: dojox.charting.Series) -> ?",
            "assignAxes": "fn(axes: [?])",
            "calculateAxes": "fn(dim: Object) -> ?",
            "cleanGroup": "fn(creator: ?, noClip: ?)",
            "clear": "fn() -> ?",
            "connect": "fn(object: Object, method: String) -> ?",
            "createLabel": "fn(group: ?, value: ?, bbox: ?, theme: ?)",
            "createRect": "fn(run: ?, creator: ?, params: ?) -> ?",
            "destroy": "fn()",
            "destroyHtmlElements": "fn()",
            "events": "fn() -> ?",
            "fireEvent": "fn(seriesName: String, eventName: String, index: number, eventObject: Object)",
            "getBarProperties": "fn() -> Object",
            "getGroup": "fn() -> ?",
            "getRequiredColors": "fn() -> ?",
            "getSeriesStats": "fn() -> ?",
            "getTextWidth": "fn(s: ?, font: ?) -> number",
            "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
            "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
            "getValue": "fn(value: ?, j: ?, seriesIndex: ?, indexed: ?) -> Object",
            "initializeScalers": "fn(dim: Object, stats: Object) -> ?",
            "isDataDirty": "fn() -> ?",
            "isDirty": "fn() -> ?",
            "performZoom": "fn(dim: Object, offsets: Object) -> ?",
            "plotEvent": "fn(o: Object)",
            "purgeGroup": "fn()",
            "raiseEvent": "fn(o: Object)",
            "render": "fn(dim: Object, offsets: Object) -> ?",
            "renderLabel": "fn(group: ?, x: ?, y: ?, label: ?, theme: ?, block: ?, align: ?) -> ?",
            "resetEvents": "fn()",
            "setAxis": "fn(axis: dojox.charting.axis2d.Base) -> ?",
            "toData": "fn(coord: Object) -> ?",
            "toPage": "fn(coord: Object) -> ?"
          }
        },
        "Default": {
          "!type": "fn(chart: dojox.charting.Chart, kwArgs?: Object)",
          "prototype": {
            "baseParams": "Object",
            "chart": "Object",
            "defaultParams": "Object",
            "dirty": "bool",
            "group": "Object",
            "htmlElement": "[?]",
            "htmlElements": "Object",
            "optionalParams": "Object",
            "addSeries": "fn(run: dojox.charting.Series) -> ?",
            "assignAxes": "fn(axes: [?])",
            "buildSegments": "fn(i: ?, indexed: ?) -> [?]",
            "calculateAxes": "fn(dim: Object) -> ?",
            "cleanGroup": "fn(creator: ?, noClip: ?)",
            "clear": "fn() -> ?",
            "connect": "fn(object: Object, method: String) -> ?",
            "createLabel": "fn(group: ?, value: ?, bbox: ?, theme: ?)",
            "createPath": "fn(run: ?, creator: ?, params: ?) -> ?",
            "destroy": "fn()",
            "destroyHtmlElements": "fn()",
            "events": "fn() -> ?",
            "fireEvent": "fn(seriesName: String, eventName: String, index: number, eventObject: Object)",
            "getGroup": "fn() -> ?",
            "getRequiredColors": "fn() -> ?",
            "getSeriesStats": "fn() -> ?",
            "getTextWidth": "fn(s: ?, font: ?) -> number",
            "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
            "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
            "initializeScalers": "fn(dim: Object, stats: Object) -> ?",
            "isDataDirty": "fn() -> ?",
            "isDirty": "fn() -> ?",
            "performZoom": "fn(dim: Object, offsets: Object) -> ?",
            "plotEvent": "fn(o: Object)",
            "purgeGroup": "fn()",
            "raiseEvent": "fn(o: Object)",
            "render": "fn(dim: Object, offsets: Object) -> ?",
            "renderLabel": "fn(group: ?, x: ?, y: ?, label: ?, theme: ?, block: ?, align: ?) -> ?",
            "resetEvents": "fn()",
            "setAxis": "fn(axis: dojox.charting.axis2d.Base) -> ?",
            "toData": "fn(coord: Object) -> ?",
            "toPage": "fn(coord: Object) -> ?"
          }
        },
        "Grid": {
          "!type": "fn(chart: dojox.charting.Chart, kwArgs?: Object)",
          "prototype": {
            "baseParams": "Object",
            "chart": "Object",
            "defaultParams": "Object",
            "dirty": "bool",
            "group": "Object",
            "htmlElement": "[?]",
            "htmlElements": "Object",
            "optionalParams": "Object",
            "addSeries": "fn(run: ?) -> ?",
            "assignAxes": "fn(axes: [?])",
            "calculateAxes": "fn(dim: Object) -> ?",
            "cleanGroup": "fn()",
            "clear": "fn() -> ?",
            "createLabel": "fn(group: ?, value: ?, bbox: ?, theme: ?)",
            "createLine": "fn(creator: ?, params: ?) -> ?",
            "createRect": "fn(creator: ?, params: ?) -> ?",
            "destroy": "fn()",
            "destroyHtmlElements": "fn()",
            "getGroup": "fn() -> ?",
            "getRequiredColors": "fn() -> ?",
            "getSeriesStats": "fn() -> ?",
            "getTextWidth": "fn(s: ?, font: ?) -> number",
            "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
            "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
            "initializeScalers": "fn(dim: Object, stats: Object) -> ?",
            "isDataDirty": "fn() -> ?",
            "isDirty": "fn() -> ?",
            "performZoom": "fn(dim: Object, offsets: Object) -> ?",
            "purgeGroup": "fn()",
            "render": "fn(dim: Object, offsets: Object) -> ?",
            "renderLabel": "fn(group: ?, x: ?, y: ?, label: ?, theme: ?, block: ?, align: ?) -> ?",
            "setAxis": "fn(axis: dojox.charting.axis2d.Base) -> ?",
            "toData": "fn(coord: Object) -> ?",
            "toPage": "fn(coord: Object) -> ?"
          }
        },
        "Indicator": {
          "!type": "fn(chart: dojox.charting.Chart, kwArgs?: Object)",
          "prototype": {
            "baseParams": "Object",
            "chart": "Object",
            "defaultParams": "Object",
            "dirty": "bool",
            "group": "Object",
            "htmlElement": "[?]",
            "htmlElements": "Object",
            "optionalParams": "Object",
            "addSeries": "fn(run: ?)",
            "assignAxes": "fn(axes: [?])",
            "calculateAxes": "fn(dim: Object) -> ?",
            "cleanGroup": "fn(creator: ?, noClip: ?)",
            "clear": "fn()",
            "connect": "fn(object: Object, method: String) -> ?",
            "createLabel": "fn(group: ?, value: ?, bbox: ?, theme: ?)",
            "destroy": "fn()",
            "destroyHtmlElements": "fn()",
            "events": "fn() -> ?",
            "fireEvent": "fn(seriesName: String, eventName: String, index: number, eventObject: Object)",
            "getGroup": "fn() -> ?",
            "getRequiredColors": "fn() -> ?",
            "getSeriesStats": "fn() -> ?",
            "getTextWidth": "fn(s: ?, font: ?) -> number",
            "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
            "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
            "initializeScalers": "fn(dim: Object, stats: Object) -> ?",
            "isDataDirty": "fn() -> ?",
            "isDirty": "fn() -> ?",
            "performZoom": "fn(dim: Object, offsets: Object) -> ?",
            "plotEvent": "fn(o: Object)",
            "purgeGroup": "fn()",
            "raiseEvent": "fn(o: Object)",
            "render": "fn(dim: ?, offsets: ?) -> ?",
            "renderLabel": "fn(group: ?, x: ?, y: ?, label: ?, theme: ?, block: ?, align: ?) -> ?",
            "resetEvents": "fn()",
            "setAxis": "fn(axis: dojox.charting.axis2d.Base) -> ?",
            "toData": "fn(coord: Object) -> ?",
            "toPage": "fn(coord: Object) -> ?"
          }
        },
        "Lines": {
          "!type": "fn()",
          "prototype": {
            "baseParams": "Object",
            "chart": "Object",
            "defaultParams": "Object",
            "dirty": "bool",
            "group": "Object",
            "htmlElement": "[?]",
            "htmlElements": "Object",
            "optionalParams": "Object",
            "addSeries": "fn(run: dojox.charting.Series) -> ?",
            "assignAxes": "fn(axes: [?])",
            "buildSegments": "fn(i: ?, indexed: ?) -> [?]",
            "calculateAxes": "fn(dim: Object) -> ?",
            "cleanGroup": "fn(creator: ?, noClip: ?)",
            "clear": "fn() -> ?",
            "connect": "fn(object: Object, method: String) -> ?",
            "createLabel": "fn(group: ?, value: ?, bbox: ?, theme: ?)",
            "createPath": "fn(run: ?, creator: ?, params: ?) -> ?",
            "destroy": "fn()",
            "destroyHtmlElements": "fn()",
            "events": "fn() -> ?",
            "fireEvent": "fn(seriesName: String, eventName: String, index: number, eventObject: Object)",
            "getGroup": "fn() -> ?",
            "getRequiredColors": "fn() -> ?",
            "getSeriesStats": "fn() -> ?",
            "getTextWidth": "fn(s: ?, font: ?) -> number",
            "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
            "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
            "initializeScalers": "fn(dim: Object, stats: Object) -> ?",
            "isDataDirty": "fn() -> ?",
            "isDirty": "fn() -> ?",
            "performZoom": "fn(dim: Object, offsets: Object) -> ?",
            "plotEvent": "fn(o: Object)",
            "purgeGroup": "fn()",
            "raiseEvent": "fn(o: Object)",
            "render": "fn(dim: Object, offsets: Object) -> ?",
            "renderLabel": "fn(group: ?, x: ?, y: ?, label: ?, theme: ?, block: ?, align: ?) -> ?",
            "resetEvents": "fn()",
            "setAxis": "fn(axis: dojox.charting.axis2d.Base) -> ?",
            "toData": "fn(coord: Object) -> ?",
            "toPage": "fn(coord: Object) -> ?"
          }
        },
        "Markers": {
          "!type": "fn()",
          "prototype": {
            "baseParams": "Object",
            "chart": "Object",
            "defaultParams": "Object",
            "dirty": "bool",
            "group": "Object",
            "htmlElement": "[?]",
            "htmlElements": "Object",
            "optionalParams": "Object",
            "addSeries": "fn(run: dojox.charting.Series) -> ?",
            "assignAxes": "fn(axes: [?])",
            "buildSegments": "fn(i: ?, indexed: ?) -> [?]",
            "calculateAxes": "fn(dim: Object) -> ?",
            "cleanGroup": "fn(creator: ?, noClip: ?)",
            "clear": "fn() -> ?",
            "connect": "fn(object: Object, method: String) -> ?",
            "createLabel": "fn(group: ?, value: ?, bbox: ?, theme: ?)",
            "createPath": "fn(run: ?, creator: ?, params: ?) -> ?",
            "destroy": "fn()",
            "destroyHtmlElements": "fn()",
            "events": "fn() -> ?",
            "fireEvent": "fn(seriesName: String, eventName: String, index: number, eventObject: Object)",
            "getGroup": "fn() -> ?",
            "getRequiredColors": "fn() -> ?",
            "getSeriesStats": "fn() -> ?",
            "getTextWidth": "fn(s: ?, font: ?) -> number",
            "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
            "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
            "initializeScalers": "fn(dim: Object, stats: Object) -> ?",
            "isDataDirty": "fn() -> ?",
            "isDirty": "fn() -> ?",
            "performZoom": "fn(dim: Object, offsets: Object) -> ?",
            "plotEvent": "fn(o: Object)",
            "purgeGroup": "fn()",
            "raiseEvent": "fn(o: Object)",
            "render": "fn(dim: Object, offsets: Object) -> ?",
            "renderLabel": "fn(group: ?, x: ?, y: ?, label: ?, theme: ?, block: ?, align: ?) -> ?",
            "resetEvents": "fn()",
            "setAxis": "fn(axis: dojox.charting.axis2d.Base) -> ?",
            "toData": "fn(coord: Object) -> ?",
            "toPage": "fn(coord: Object) -> ?"
          }
        },
        "MarkersOnly": {
          "!type": "fn()",
          "prototype": {
            "baseParams": "Object",
            "chart": "Object",
            "defaultParams": "Object",
            "dirty": "bool",
            "group": "Object",
            "htmlElement": "[?]",
            "htmlElements": "Object",
            "optionalParams": "Object",
            "addSeries": "fn(run: dojox.charting.Series) -> ?",
            "assignAxes": "fn(axes: [?])",
            "buildSegments": "fn(i: ?, indexed: ?) -> [?]",
            "calculateAxes": "fn(dim: Object) -> ?",
            "cleanGroup": "fn(creator: ?, noClip: ?)",
            "clear": "fn() -> ?",
            "connect": "fn(object: Object, method: String) -> ?",
            "createLabel": "fn(group: ?, value: ?, bbox: ?, theme: ?)",
            "createPath": "fn(run: ?, creator: ?, params: ?) -> ?",
            "destroy": "fn()",
            "destroyHtmlElements": "fn()",
            "events": "fn() -> ?",
            "fireEvent": "fn(seriesName: String, eventName: String, index: number, eventObject: Object)",
            "getGroup": "fn() -> ?",
            "getRequiredColors": "fn() -> ?",
            "getSeriesStats": "fn() -> ?",
            "getTextWidth": "fn(s: ?, font: ?) -> number",
            "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
            "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
            "initializeScalers": "fn(dim: Object, stats: Object) -> ?",
            "isDataDirty": "fn() -> ?",
            "isDirty": "fn() -> ?",
            "performZoom": "fn(dim: Object, offsets: Object) -> ?",
            "plotEvent": "fn(o: Object)",
            "purgeGroup": "fn()",
            "raiseEvent": "fn(o: Object)",
            "render": "fn(dim: Object, offsets: Object) -> ?",
            "renderLabel": "fn(group: ?, x: ?, y: ?, label: ?, theme: ?, block: ?, align: ?) -> ?",
            "resetEvents": "fn()",
            "setAxis": "fn(axis: dojox.charting.axis2d.Base) -> ?",
            "toData": "fn(coord: Object) -> ?",
            "toPage": "fn(coord: Object) -> ?"
          }
        },
        "OHLC": {
          "!type": "fn(chart: dojox.charting.Chart, kwArgs?: Object)",
          "prototype": {
            "baseParams": "Object",
            "chart": "Object",
            "defaultParams": "Object",
            "dirty": "bool",
            "group": "Object",
            "htmlElement": "[?]",
            "htmlElements": "Object",
            "optionalParams": "Object",
            "addSeries": "fn(run: dojox.charting.Series) -> ?",
            "assignAxes": "fn(axes: [?])",
            "calculateAxes": "fn(dim: Object) -> ?",
            "cleanGroup": "fn(creator: ?, noClip: ?)",
            "clear": "fn() -> ?",
            "collectStats": "fn(series: [dojox.charting.Series]) -> ?",
            "connect": "fn(object: Object, method: String) -> ?",
            "createLabel": "fn(group: ?, value: ?, bbox: ?, theme: ?)",
            "destroy": "fn()",
            "destroyHtmlElements": "fn()",
            "events": "fn() -> ?",
            "fireEvent": "fn(seriesName: String, eventName: String, index: number, eventObject: Object)",
            "getGroup": "fn() -> ?",
            "getRequiredColors": "fn() -> ?",
            "getSeriesStats": "fn() -> ?",
            "getTextWidth": "fn(s: ?, font: ?) -> number",
            "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
            "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
            "initializeScalers": "fn(dim: Object, stats: Object) -> ?",
            "isDataDirty": "fn() -> ?",
            "isDirty": "fn() -> ?",
            "performZoom": "fn(dim: Object, offsets: Object) -> ?",
            "plotEvent": "fn(o: Object)",
            "purgeGroup": "fn()",
            "raiseEvent": "fn(o: Object)",
            "render": "fn(dim: Object, offsets: Object) -> ?",
            "renderLabel": "fn(group: ?, x: ?, y: ?, label: ?, theme: ?, block: ?, align: ?) -> ?",
            "resetEvents": "fn()",
            "setAxis": "fn(axis: dojox.charting.axis2d.Base) -> ?",
            "toData": "fn(coord: Object) -> ?",
            "toPage": "fn(coord: Object) -> ?"
          }
        },
        "Pie": {
          "!type": "fn(chart: ?, kwArgs: ?)",
          "prototype": {
            "chart": "Object",
            "defaultParams": "Object",
            "dirty": "bool",
            "group": "Object",
            "htmlElement": "[?]",
            "htmlElements": "Object",
            "optionalParams": "Object",
            "addSeries": "fn(run: ?) -> ?",
            "assignAxes": "fn(axes: [?])",
            "calculateAxes": "fn(dim: Object) -> ?",
            "cleanGroup": "fn(creator: dojox.gfx.shape.Surface) -> ?",
            "clear": "fn() -> ?",
            "connect": "fn(object: Object, method: String) -> ?",
            "destroy": "fn()",
            "destroyHtmlElements": "fn()",
            "events": "fn() -> ?",
            "fireEvent": "fn(seriesName: String, eventName: String, index: number, eventObject: Object)",
            "getGroup": "fn() -> ?",
            "getRequiredColors": "fn() -> number",
            "getSeriesStats": "fn() -> ?",
            "getTextWidth": "fn(s: ?, font: ?) -> number",
            "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
            "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
            "initializeScalers": "fn() -> Function",
            "isDataDirty": "fn() -> ?",
            "plotEvent": "fn(o: Object)",
            "purgeGroup": "fn() -> ?",
            "raiseEvent": "fn(o: Object)",
            "render": "fn(dim: Object, offsets: Object) -> ?",
            "renderLabel": "fn(group: ?, x: ?, y: ?, label: ?, theme: ?, block: ?, align: ?) -> ?",
            "resetEvents": "fn()",
            "setAxis": "fn(axis: ?) -> ?"
          }
        },
        "Scatter": {
          "!type": "fn(chart: dojox.charting.Chart, kwArgs?: Object)",
          "prototype": {
            "baseParams": "Object",
            "chart": "Object",
            "defaultParams": "Object",
            "dirty": "bool",
            "group": "Object",
            "htmlElement": "[?]",
            "htmlElements": "Object",
            "optionalParams": "Object",
            "addSeries": "fn(run: dojox.charting.Series) -> ?",
            "assignAxes": "fn(axes: [?])",
            "calculateAxes": "fn(dim: Object) -> ?",
            "cleanGroup": "fn(creator: ?, noClip: ?)",
            "clear": "fn() -> ?",
            "connect": "fn(object: Object, method: String) -> ?",
            "createLabel": "fn(group: ?, value: ?, bbox: ?, theme: ?)",
            "destroy": "fn()",
            "destroyHtmlElements": "fn()",
            "events": "fn() -> ?",
            "fireEvent": "fn(seriesName: String, eventName: String, index: number, eventObject: Object)",
            "getGroup": "fn() -> ?",
            "getRequiredColors": "fn() -> ?",
            "getSeriesStats": "fn() -> ?",
            "getTextWidth": "fn(s: ?, font: ?) -> number",
            "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
            "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
            "initializeScalers": "fn(dim: Object, stats: Object) -> ?",
            "isDataDirty": "fn() -> ?",
            "isDirty": "fn() -> ?",
            "performZoom": "fn(dim: Object, offsets: Object) -> ?",
            "plotEvent": "fn(o: Object)",
            "purgeGroup": "fn()",
            "raiseEvent": "fn(o: Object)",
            "render": "fn(dim: Object, offsets: Object) -> ?",
            "renderLabel": "fn(group: ?, x: ?, y: ?, label: ?, theme: ?, block: ?, align: ?) -> ?",
            "resetEvents": "fn()",
            "setAxis": "fn(axis: dojox.charting.axis2d.Base) -> ?",
            "toData": "fn(coord: Object) -> ?",
            "toPage": "fn(coord: Object) -> ?"
          }
        },
        "Spider": {
          "!type": "fn(chart: dojox.charting.Chart, kwArgs?: Object)",
          "prototype": {
            "chart": "Object",
            "defaultParams": "Object",
            "dirty": "bool",
            "group": "Object",
            "htmlElement": "[?]",
            "htmlElements": "Object",
            "optionalParams": "Object",
            "addSeries": "fn(run: dojox.charting.Series) -> ?",
            "assignAxes": "fn(axes: [?])",
            "calculateAxes": "fn(dim: Object) -> ?",
            "cleanGroup": "fn(creator: dojox.gfx.shape.Surface) -> ?",
            "clear": "fn() -> ?",
            "connect": "fn(object: Object, method: String) -> ?",
            "destroy": "fn()",
            "destroyHtmlElements": "fn()",
            "events": "fn() -> ?",
            "fireEvent": "fn(seriesName: String, eventName: String, index: number, eventObject: Object)",
            "getGroup": "fn() -> ?",
            "getRequiredColors": "fn() -> ?",
            "getSeriesStats": "fn() -> ?",
            "getTextWidth": "fn(s: ?, font: ?) -> number",
            "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
            "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
            "initializeScalers": "fn() -> Function",
            "isDataDirty": "fn() -> ?",
            "plotEvent": "fn(o: Object)",
            "purgeGroup": "fn() -> ?",
            "raiseEvent": "fn(o: Object)",
            "render": "fn(dim: Object, offsets: Object) -> ?",
            "renderLabel": "fn(group: ?, x: ?, y: ?, label: ?, theme: ?, block: ?, align: ?) -> ?",
            "resetEvents": "fn()",
            "setAxis": "fn(axis: ?) -> ?",
            "tooltipFunc": "fn(o: ?) -> ?"
          }
        },
        "Stacked": {
          "!type": "fn(chart: dojox.charting.Chart, kwArgs?: Object)",
          "prototype": {
            "baseParams": "Object",
            "chart": "Object",
            "defaultParams": "Object",
            "dirty": "bool",
            "group": "Object",
            "htmlElement": "[?]",
            "htmlElements": "Object",
            "optionalParams": "Object",
            "addSeries": "fn(run: dojox.charting.Series) -> ?",
            "assignAxes": "fn(axes: [?])",
            "buildSegments": "fn(i: ?, indexed: ?) -> [?]",
            "calculateAxes": "fn(dim: Object) -> ?",
            "cleanGroup": "fn(creator: ?, noClip: ?)",
            "clear": "fn() -> ?",
            "connect": "fn(object: Object, method: String) -> ?",
            "createLabel": "fn(group: ?, value: ?, bbox: ?, theme: ?)",
            "createPath": "fn(run: ?, creator: ?, params: ?) -> ?",
            "destroy": "fn()",
            "destroyHtmlElements": "fn()",
            "events": "fn() -> ?",
            "fireEvent": "fn(seriesName: String, eventName: String, index: number, eventObject: Object)",
            "getGroup": "fn() -> ?",
            "getRequiredColors": "fn() -> ?",
            "getSeriesStats": "fn() -> ?",
            "getTextWidth": "fn(s: ?, font: ?) -> number",
            "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
            "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
            "initializeScalers": "fn(dim: Object, stats: Object) -> ?",
            "isDataDirty": "fn() -> ?",
            "isDirty": "fn() -> ?",
            "performZoom": "fn(dim: Object, offsets: Object) -> ?",
            "plotEvent": "fn(o: Object)",
            "purgeGroup": "fn()",
            "raiseEvent": "fn(o: Object)",
            "render": "fn(dim: Object, offsets: Object) -> ?",
            "renderLabel": "fn(group: ?, x: ?, y: ?, label: ?, theme: ?, block: ?, align: ?) -> ?",
            "resetEvents": "fn()",
            "setAxis": "fn(axis: dojox.charting.axis2d.Base) -> ?",
            "toData": "fn(coord: Object) -> ?",
            "toPage": "fn(coord: Object) -> ?"
          }
        },
        "StackedAreas": {
          "!type": "fn()",
          "prototype": {
            "baseParams": "Object",
            "chart": "Object",
            "defaultParams": "Object",
            "dirty": "bool",
            "group": "Object",
            "htmlElement": "[?]",
            "htmlElements": "Object",
            "optionalParams": "Object",
            "addSeries": "fn(run: dojox.charting.Series) -> ?",
            "assignAxes": "fn(axes: [?])",
            "buildSegments": "fn(i: ?, indexed: ?) -> [?]",
            "calculateAxes": "fn(dim: Object) -> ?",
            "cleanGroup": "fn(creator: ?, noClip: ?)",
            "clear": "fn() -> ?",
            "connect": "fn(object: Object, method: String) -> ?",
            "createLabel": "fn(group: ?, value: ?, bbox: ?, theme: ?)",
            "createPath": "fn(run: ?, creator: ?, params: ?) -> ?",
            "destroy": "fn()",
            "destroyHtmlElements": "fn()",
            "events": "fn() -> ?",
            "fireEvent": "fn(seriesName: String, eventName: String, index: number, eventObject: Object)",
            "getGroup": "fn() -> ?",
            "getRequiredColors": "fn() -> ?",
            "getSeriesStats": "fn() -> ?",
            "getTextWidth": "fn(s: ?, font: ?) -> number",
            "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
            "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
            "initializeScalers": "fn(dim: Object, stats: Object) -> ?",
            "isDataDirty": "fn() -> ?",
            "isDirty": "fn() -> ?",
            "performZoom": "fn(dim: Object, offsets: Object) -> ?",
            "plotEvent": "fn(o: Object)",
            "purgeGroup": "fn()",
            "raiseEvent": "fn(o: Object)",
            "render": "fn(dim: Object, offsets: Object) -> ?",
            "renderLabel": "fn(group: ?, x: ?, y: ?, label: ?, theme: ?, block: ?, align: ?) -> ?",
            "resetEvents": "fn()",
            "setAxis": "fn(axis: dojox.charting.axis2d.Base) -> ?",
            "toData": "fn(coord: Object) -> ?",
            "toPage": "fn(coord: Object) -> ?"
          }
        },
        "StackedBars": {
          "!type": "fn(chart: dojox.charting.Chart, kwArgs?: Object)",
          "prototype": {
            "baseParams": "Object",
            "chart": "Object",
            "defaultParams": "Object",
            "dirty": "bool",
            "group": "Object",
            "htmlElement": "[?]",
            "htmlElements": "Object",
            "optionalParams": "Object",
            "addSeries": "fn(run: dojox.charting.Series) -> ?",
            "assignAxes": "fn(axes: [?])",
            "calculateAxes": "fn(dim: Object) -> ?",
            "cleanGroup": "fn(creator: ?, noClip: ?)",
            "clear": "fn() -> ?",
            "connect": "fn(object: Object, method: String) -> ?",
            "createLabel": "fn(group: ?, value: ?, bbox: ?, theme: ?)",
            "createRect": "fn(run: ?, creator: ?, params: ?) -> ?",
            "destroy": "fn()",
            "destroyHtmlElements": "fn()",
            "events": "fn() -> ?",
            "fireEvent": "fn(seriesName: String, eventName: String, index: number, eventObject: Object)",
            "getBarProperties": "fn() -> Object",
            "getGroup": "fn() -> ?",
            "getRequiredColors": "fn() -> ?",
            "getSeriesStats": "fn() -> ?",
            "getTextWidth": "fn(s: ?, font: ?) -> number",
            "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
            "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
            "getValue": "fn(value: ?, index: ?, seriesIndex: ?, indexed: ?) -> Object",
            "initializeScalers": "fn(dim: Object, stats: Object) -> ?",
            "isDataDirty": "fn() -> ?",
            "isDirty": "fn() -> ?",
            "performZoom": "fn(dim: Object, offsets: Object) -> ?",
            "plotEvent": "fn(o: Object)",
            "purgeGroup": "fn()",
            "raiseEvent": "fn(o: Object)",
            "render": "fn(dim: Object, offsets: Object) -> ?",
            "renderLabel": "fn(group: ?, x: ?, y: ?, label: ?, theme: ?, block: ?, align: ?) -> ?",
            "resetEvents": "fn()",
            "setAxis": "fn(axis: dojox.charting.axis2d.Base) -> ?",
            "toData": "fn(coord: Object) -> ?",
            "toPage": "fn(coord: Object) -> ?"
          }
        },
        "StackedColumns": {
          "!type": "fn(chart: dojox.charting.Chart, kwArgs?: Object)",
          "prototype": {
            "baseParams": "Object",
            "chart": "Object",
            "defaultParams": "Object",
            "dirty": "bool",
            "group": "Object",
            "htmlElement": "[?]",
            "htmlElements": "Object",
            "optionalParams": "Object",
            "addSeries": "fn(run: dojox.charting.Series) -> ?",
            "assignAxes": "fn(axes: [?])",
            "calculateAxes": "fn(dim: Object) -> ?",
            "cleanGroup": "fn(creator: ?, noClip: ?)",
            "clear": "fn() -> ?",
            "connect": "fn(object: Object, method: String) -> ?",
            "createLabel": "fn(group: ?, value: ?, bbox: ?, theme: ?)",
            "createRect": "fn(run: ?, creator: ?, params: ?) -> ?",
            "destroy": "fn()",
            "destroyHtmlElements": "fn()",
            "events": "fn() -> ?",
            "fireEvent": "fn(seriesName: String, eventName: String, index: number, eventObject: Object)",
            "getBarProperties": "fn() -> Object",
            "getGroup": "fn() -> ?",
            "getRequiredColors": "fn() -> ?",
            "getSeriesStats": "fn() -> ?",
            "getTextWidth": "fn(s: ?, font: ?) -> number",
            "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
            "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
            "getValue": "fn(value: ?, index: ?, seriesIndex: ?, indexed: ?) -> Object",
            "initializeScalers": "fn(dim: Object, stats: Object) -> ?",
            "isDataDirty": "fn() -> ?",
            "isDirty": "fn() -> ?",
            "performZoom": "fn(dim: Object, offsets: Object) -> ?",
            "plotEvent": "fn(o: Object)",
            "purgeGroup": "fn()",
            "raiseEvent": "fn(o: Object)",
            "render": "fn(dim: Object, offsets: Object) -> ?",
            "renderLabel": "fn(group: ?, x: ?, y: ?, label: ?, theme: ?, block: ?, align: ?) -> ?",
            "resetEvents": "fn()",
            "setAxis": "fn(axis: dojox.charting.axis2d.Base) -> ?",
            "toData": "fn(coord: Object) -> ?",
            "toPage": "fn(coord: Object) -> ?"
          }
        },
        "StackedLines": {
          "!type": "fn()",
          "prototype": {
            "baseParams": "Object",
            "chart": "Object",
            "defaultParams": "Object",
            "dirty": "bool",
            "group": "Object",
            "htmlElement": "[?]",
            "htmlElements": "Object",
            "optionalParams": "Object",
            "addSeries": "fn(run: dojox.charting.Series) -> ?",
            "assignAxes": "fn(axes: [?])",
            "buildSegments": "fn(i: ?, indexed: ?) -> [?]",
            "calculateAxes": "fn(dim: Object) -> ?",
            "cleanGroup": "fn(creator: ?, noClip: ?)",
            "clear": "fn() -> ?",
            "connect": "fn(object: Object, method: String) -> ?",
            "createLabel": "fn(group: ?, value: ?, bbox: ?, theme: ?)",
            "createPath": "fn(run: ?, creator: ?, params: ?) -> ?",
            "destroy": "fn()",
            "destroyHtmlElements": "fn()",
            "events": "fn() -> ?",
            "fireEvent": "fn(seriesName: String, eventName: String, index: number, eventObject: Object)",
            "getGroup": "fn() -> ?",
            "getRequiredColors": "fn() -> ?",
            "getSeriesStats": "fn() -> ?",
            "getTextWidth": "fn(s: ?, font: ?) -> number",
            "getTextWithLimitCharCount": "fn(s: String, font: String, wcLimit: number, truncated: bool) -> ?",
            "getTextWithLimitLength": "fn(s: String, font: String, limitWidth: number, truncated: bool) -> ?",
            "initializeScalers": "fn(dim: Object, stats: Object) -> ?",
            "isDataDirty": "fn() -> ?",
            "isDirty": "fn() -> ?",
            "performZoom": "fn(dim: Object, offsets: Object) -> ?",
            "plotEvent": "fn(o: Object)",
            "purgeGroup": "fn()",
            "raiseEvent": "fn(o: Object)",
            "render": "fn(dim: Object, offsets: Object) -> ?",
            "renderLabel": "fn(group: ?, x: ?, y: ?, label: ?, theme: ?, block: ?, align: ?) -> ?",
            "resetEvents": "fn()",
            "setAxis": "fn(axis: dojox.charting.axis2d.Base) -> ?",
            "toData": "fn(coord: Object) -> ?",
            "toPage": "fn(coord: Object) -> ?"
          }
        },
        "common": {
          "defaultStats": {
            "hmax": "Object",
            "hmin": "Object",
            "vmax": "Object",
            "vmin": "Object"
          },
          "augmentColor": "fn(target: ?, color: ?) -> ?",
          "augmentFill": "fn(fill: ?, color: ?) -> ?",
          "augmentStroke": "fn(stroke: ?, color: ?) -> ?",
          "calculateBarSize": "fn(availableSize: number, opt: Object, clusterSize: number) -> Object",
          "collectSimpleStats": "fn(series: ?) -> ?",
          "collectStackedStats": "fn(series: ?) -> ?",
          "curve": "fn(a: [number], tension: number) -> ?",
          "doIfLoaded": "fn(moduleName: ?, ifloaded: ?, ifnotloaded: ?) -> ?",
          "getLabel": "fn(number: number, fixed: bool, precision: number) -> ?",
          "makeStroke": "fn(stroke: ?) -> ?"
        },
        "commonStacked": {
          "collectStats": "fn(series: ?) -> ?",
          "getIndexValue": "fn(series: ?, i: ?, index: ?) -> [?]",
          "getValue": "fn(series: ?, i: ?, x: ?) -> [?]"
        }
      },
      "plot3d": {
        "Bars": {
          "!type": "fn(width: ?, height: ?, kwArgs: ?)",
          "prototype": {
            "generate": "fn(chart: ?, creator: ?) -> Function",
            "getDepth": "fn() -> ?",
            "setData": "fn(data: ?) -> Function"
          }
        },
        "Base": {
          "!type": "fn(width: ?, height: ?, kwArgs: ?)",
          "prototype": {
            "generate": "fn(chart: ?, creator: ?)",
            "getDepth": "fn() -> ?",
            "setData": "fn(data: ?) -> Function"
          }
        },
        "Cylinders": {
          "!type": "fn(width: ?, height: ?, kwArgs: ?)",
          "prototype": {
            "generate": "fn(chart: ?, creator: ?) -> Function",
            "getDepth": "fn() -> ?",
            "setData": "fn(data: ?) -> Function"
          }
        }
      },
      "scaler": {
        "common": {
          "doIfLoaded": "fn(moduleName: ?, ifloaded: ?, ifnotloaded: ?) -> ?",
          "getNumericLabel": "fn(number: number, precision: number, kwArgs: Object) -> ?"
        },
        "linear": {
          "buildScaler": "fn(min: number, max: number, span: number, kwArgs: Object, delta: number, minorDelta: number) -> ?",
          "buildTicks": "fn(scaler: Object, kwArgs: Object) -> ?",
          "getTransformerFromModel": "fn(scaler: Object) -> Function",
          "getTransformerFromPlot": "fn(scaler: Object) -> Function"
        },
        "primitive": {
          "buildScaler": "fn(min: number, max: number, span: number, kwArgs: Object) -> Object",
          "buildTicks": "fn(scaler: Object, kwArgs: Object) -> Object",
          "getTransformerFromModel": "fn(scaler: Object) -> Function",
          "getTransformerFromPlot": "fn(scaler: Object) -> Function"
        }
      },
      "themes": {
        "PlotKit": {
          "blue": {},
          "cyan": {},
          "green": {},
          "orange": {},
          "purple": {},
          "red": {},
          "base": {
            "Adobebricks": "Object",
            "Algae": "Object",
            "Bahamation": "Object",
            "base": "Object",
            "blue": "Object",
            "BlueDusk": "Object",
            "Charged": "Object",
            "Chris": "Object",
            "Claro": "Object",
            "CubanShirts": "Object",
            "cyan": "Object",
            "Desert": "Object",
            "Distinctive": "Object",
            "Dollar": "Object",
            "Electric": "Object",
            "Grasshopper": "Object",
            "Grasslands": "Object",
            "green": "Object",
            "GreySkies": "Object",
            "Harmony": "Object",
            "IndigoNation": "Object",
            "Ireland": "Object",
            "Julie": "Object",
            "MiamiNice": "Object",
            "Midwest": "Object",
            "Minty": "Object",
            "orange": "Object",
            "PrimaryColors": "Object",
            "purple": "Object",
            "PurpleRain": "Object",
            "red": "Object",
            "Renkoo": "Object",
            "RoyalPurples": "Object",
            "SageToLime": "Object",
            "Shrooms": "Object",
            "Tom": "Object",
            "Tufte": "Object",
            "WatersEdge": "Object",
            "Wetland": "Object",
            "generateFills": "fn(colors: [?], fillPattern: Object, lumFrom: number, lumTo: number)",
            "generateGradientByIntensity": "fn(color: dojo._base.Color, intensityMap: [?])",
            "generateMiniTheme": "fn(colors: [?], fillPattern: Object, lumFrom: number, lumTo: number, lumStroke: number)",
            "updateFills": "fn(themes: [?], fillPattern: Object, lumFrom: number, lumTo: number)"
          }
        },
        "ThreeD": {},
        "common": {
          "Adobebricks": "Object",
          "Algae": "Object",
          "Bahamation": "Object",
          "base": "Object",
          "blue": "Object",
          "BlueDusk": "Object",
          "Charged": "Object",
          "Chris": "Object",
          "Claro": "Object",
          "CubanShirts": "Object",
          "cyan": "Object",
          "Desert": "Object",
          "Distinctive": "Object",
          "Dollar": "Object",
          "Electric": "Object",
          "Grasshopper": "Object",
          "Grasslands": "Object",
          "green": "Object",
          "GreySkies": "Object",
          "Harmony": "Object",
          "IndigoNation": "Object",
          "Ireland": "Object",
          "Julie": "Object",
          "MiamiNice": "Object",
          "Midwest": "Object",
          "Minty": "Object",
          "orange": "Object",
          "PrimaryColors": "Object",
          "purple": "Object",
          "PurpleRain": "Object",
          "red": "Object",
          "Renkoo": "Object",
          "RoyalPurples": "Object",
          "SageToLime": "Object",
          "Shrooms": "Object",
          "Tom": "Object",
          "Tufte": "Object",
          "WatersEdge": "Object",
          "Wetland": "Object",
          "generateFills": "fn(colors: [?], fillPattern: Object, lumFrom: number, lumTo: number)",
          "generateGradientByIntensity": "fn(color: dojo._base.Color, intensityMap: [?])",
          "generateMiniTheme": "fn(colors: [?], fillPattern: Object, lumFrom: number, lumTo: number, lumStroke: number)",
          "updateFills": "fn(themes: [?], fillPattern: Object, lumFrom: number, lumTo: number)"
        },
        "gradientGenerator": {
          "Adobebricks": "Object",
          "Algae": "Object",
          "Bahamation": "Object",
          "base": "Object",
          "blue": "Object",
          "BlueDusk": "Object",
          "Charged": "Object",
          "Chris": "Object",
          "Claro": "Object",
          "CubanShirts": "Object",
          "cyan": "Object",
          "Desert": "Object",
          "Distinctive": "Object",
          "Dollar": "Object",
          "Electric": "Object",
          "Grasshopper": "Object",
          "Grasslands": "Object",
          "green": "Object",
          "GreySkies": "Object",
          "Harmony": "Object",
          "IndigoNation": "Object",
          "Ireland": "Object",
          "Julie": "Object",
          "MiamiNice": "Object",
          "Midwest": "Object",
          "Minty": "Object",
          "orange": "Object",
          "PrimaryColors": "Object",
          "purple": "Object",
          "PurpleRain": "Object",
          "red": "Object",
          "Renkoo": "Object",
          "RoyalPurples": "Object",
          "SageToLime": "Object",
          "Shrooms": "Object",
          "Tom": "Object",
          "Tufte": "Object",
          "WatersEdge": "Object",
          "Wetland": "Object",
          "generateFills": "fn(colors: [?], fillPattern: Object, lumFrom: number, lumTo: number)",
          "generateGradientByIntensity": "fn(color: dojo._base.Color, intensityMap: [?])",
          "generateMiniTheme": "fn(colors: [?], fillPattern: Object, lumFrom: number, lumTo: number, lumStroke: number)",
          "updateFills": "fn(themes: [?], fillPattern: Object, lumFrom: number, lumTo: number)"
        }
      },
      "widget": {
        "Chart": {
          "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
          "prototype": {
            "attributeMap": "Object",
            "set": "fn(property: string, value: Object)",
            "get": "fn(property: string) -> Object",
            "watch": "fn(property: string, callback: ?) -> ret",
            "baseClass": "string",
            "class": "string",
            "containerNode": "HTMLElement",
            "dir": "string",
            "domNode": "HTMLElement",
            "focused": "bool",
            "id": "string",
            "lang": "string",
            "margins": "Object",
            "ownerDocument": "Object",
            "srcNodeRef": "HTMLElement",
            "style": "string",
            "theme": "Object",
            "title": "string",
            "tooltip": "string",
            "buildRendering": "fn()",
            "connect": "fn(obj: Object, event: String, method: String) -> ?",
            "defer": "fn(fcn: Function, delay: number) -> Object",
            "destroy": "fn()",
            "destroyDescendants": "fn(preserveDom: bool)",
            "destroyRecursive": "fn(preserveDom: bool)",
            "destroyRendering": "fn(preserveDom?: bool)",
            "disconnect": "fn(handle: ?)",
            "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
            "fill": "fn() -> ?",
            "getChildren": "fn() -> [?]",
            "getParent": "fn() -> ?",
            "isFocusable": "fn() -> ?",
            "isLeftToRight": "fn() -> ?",
            "on": "fn(type: String, func: Function) -> ?",
            "own": "fn() -> ?",
            "placeAt": "fn(reference: String, position: String) -> ?",
            "postCreate": "fn()",
            "postMixInProperties": "fn()",
            "resize": "fn(box: ?)",
            "startup": "fn()",
            "stroke": "fn() -> ?",
            "subscribe": "fn(t: String, method: Function) -> ?",
            "uninitialize": "fn() -> bool",
            "unsubscribe": "fn(handle: Object)",
            "onBlur": "fn()",
            "onFocus": "fn()"
          }
        },
        "Chart2D": {
          "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
          "prototype": {
            "attributeMap": "Object",
            "set": "fn(property: string, value: Object)",
            "get": "fn(property: string) -> Object",
            "watch": "fn(property: string, callback: ?) -> ret17",
            "baseClass": "string",
            "class": "string",
            "containerNode": "HTMLElement",
            "dir": "string",
            "domNode": "HTMLElement",
            "focused": "bool",
            "id": "string",
            "lang": "string",
            "margins": "Object",
            "ownerDocument": "Object",
            "srcNodeRef": "HTMLElement",
            "style": "string",
            "theme": "Object",
            "title": "string",
            "tooltip": "string",
            "buildRendering": "fn()",
            "connect": "fn(obj: Object, event: String, method: String) -> ?",
            "defer": "fn(fcn: Function, delay: number) -> Object",
            "destroy": "fn()",
            "destroyDescendants": "fn(preserveDom: bool)",
            "destroyRecursive": "fn(preserveDom: bool)",
            "destroyRendering": "fn(preserveDom?: bool)",
            "disconnect": "fn(handle: ?)",
            "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
            "fill": "fn() -> ?",
            "getChildren": "fn() -> [?]",
            "getParent": "fn() -> ?",
            "isFocusable": "fn() -> ?",
            "isLeftToRight": "fn() -> ?",
            "on": "fn(type: String, func: Function) -> ?",
            "own": "fn() -> ?",
            "placeAt": "fn(reference: String, position: String) -> ?",
            "postCreate": "fn()",
            "postMixInProperties": "fn()",
            "resize": "fn(box: ?)",
            "startup": "fn()",
            "stroke": "fn() -> ?",
            "subscribe": "fn(t: String, method: Function) -> ?",
            "uninitialize": "fn() -> bool",
            "unsubscribe": "fn(handle: Object)",
            "onBlur": "fn()",
            "onFocus": "fn()"
          }
        },
        "Legend": {
          "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
          "prototype": {
            "attributeMap": "Object",
            "set": "fn(property: string, value: Object)",
            "get": "fn(property: string) -> Object",
            "watch": "fn(property: string, callback: ?) -> ret34",
            "baseClass": "string",
            "chartRef": "string",
            "class": "string",
            "containerNode": "HTMLElement",
            "dir": "string",
            "domNode": "HTMLElement",
            "focused": "bool",
            "horizontal": "bool",
            "id": "string",
            "lang": "string",
            "legendBody": "Object",
            "ownerDocument": "Object",
            "srcNodeRef": "HTMLElement",
            "style": "string",
            "swatchSize": "number",
            "title": "string",
            "tooltip": "string",
            "buildRendering": "fn()",
            "connect": "fn(obj: Object, event: String, method: String) -> ?",
            "defer": "fn(fcn: Function, delay: number) -> Object",
            "destroy": "fn()",
            "destroyDescendants": "fn(preserveDom: bool)",
            "destroyRecursive": "fn(preserveDom: bool)",
            "destroyRendering": "fn(preserveDom?: bool)",
            "disconnect": "fn(handle: ?)",
            "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
            "getChildren": "fn() -> [?]",
            "getParent": "fn() -> ?",
            "isFocusable": "fn() -> ?",
            "isLeftToRight": "fn() -> ?",
            "on": "fn(type: String, func: Function) -> ?",
            "own": "fn() -> ?",
            "placeAt": "fn(reference: String, position: String) -> ?",
            "postCreate": "fn()",
            "postMixInProperties": "fn()",
            "refresh": "fn()",
            "startup": "fn()",
            "subscribe": "fn(t: String, method: Function) -> ?",
            "uninitialize": "fn() -> bool",
            "unsubscribe": "fn(handle: Object)",
            "onBlur": "fn()",
            "onFocus": "fn()"
          }
        },
        "SelectableLegend": {
          "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
          "prototype": {
            "attributeMap": "Object",
            "set": "fn(property: string, value: Object)",
            "get": "fn(property: string) -> Object",
            "watch": "fn(property: string, callback: ?) -> ret53",
            "baseClass": "string",
            "chartRef": "string",
            "class": "string",
            "containerNode": "HTMLElement",
            "dir": "string",
            "domNode": "HTMLElement",
            "focused": "bool",
            "horizontal": "bool",
            "id": "string",
            "lang": "string",
            "legendBody": "Object",
            "outline": "bool",
            "ownerDocument": "Object",
            "srcNodeRef": "HTMLElement",
            "style": "string",
            "swatchSize": "number",
            "title": "string",
            "tooltip": "string",
            "transitionFill": "Object",
            "transitionStroke": "Object",
            "buildRendering": "fn()",
            "connect": "fn(obj: Object, event: String, method: String) -> ?",
            "defer": "fn(fcn: Function, delay: number) -> Object",
            "destroy": "fn()",
            "destroyDescendants": "fn(preserveDom: bool)",
            "destroyRecursive": "fn(preserveDom: bool)",
            "destroyRendering": "fn(preserveDom?: bool)",
            "disconnect": "fn(handle: ?)",
            "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
            "getChildren": "fn() -> [?]",
            "getParent": "fn() -> ?",
            "isFocusable": "fn() -> ?",
            "isLeftToRight": "fn() -> ?",
            "on": "fn(type: String, func: Function) -> ?",
            "own": "fn() -> ?",
            "placeAt": "fn(reference: String, position: String) -> ?",
            "postCreate": "fn()",
            "postMixInProperties": "fn()",
            "refresh": "fn()",
            "startup": "fn()",
            "subscribe": "fn(t: String, method: Function) -> ?",
            "uninitialize": "fn() -> bool",
            "unsubscribe": "fn(handle: Object)",
            "onBlur": "fn()",
            "onFocus": "fn()"
          }
        },
        "BidiSupport": {},
        "Sparkline": {}
      }
    }
  },
  "dojox/charting/Chart3D": "exp",
  "dojox/charting/Chart2D": "exp",
  "dojox/charting/DataSeries": "exp",
  "dojox/charting/Chart": "exp",
  "dojox/charting/DataChart": "exp",
  "dojox/charting/Element": "exp",
  "dojox/charting/Series": "exp",
  "dojox/charting/StoreSeries": "exp",
  "dojox/charting/SimpleTheme": "exp",
  "dojox/charting/SimpleTheme.defaultMarkers": "exp",
  "dojox/charting/SimpleTheme.defaultTheme": "exp",
  "dojox/charting/Theme": "exp",
  "dojox/charting/Theme.defaultMarkers": "exp",
  "dojox/charting/Theme.defaultTheme": "exp",
  "dojox/charting/action2d/Base": "exp",
  "dojox/charting/action2d/ChartAction": "exp",
  "dojox/charting/action2d/_IndicatorElement": "exp",
  "dojox/charting/action2d/Highlight": "exp",
  "dojox/charting/action2d/Magnify": "exp",
  "dojox/charting/action2d/MouseZoomAndPan": "exp",
  "dojox/charting/action2d/MouseIndicator": "exp",
  "dojox/charting/action2d/MoveSlice": "exp",
  "dojox/charting/action2d/PlotAction": "exp",
  "dojox/charting/action2d/Tooltip": "exp",
  "dojox/charting/action2d/Shake": "exp",
  "dojox/charting/action2d/TouchZoomAndPan": "exp",
  "dojox/charting/action2d/TouchIndicator": "exp",
  "dojox/charting/axis2d/common": "exp",
  "dojox/charting/axis2d/common.createText": "exp",
  "dojox/charting/axis2d/Base": "exp",
  "dojox/charting/axis2d/Invisible": "exp",
  "dojox/charting/axis2d/Default": "exp",
  "dojox/charting/bidi/_bidiutils": "exp",
  "dojox/charting/bidi/Chart": "exp",
  "dojox/charting/bidi/Chart3D": "exp",
  "dojox/charting/bidi/action2d/Tooltip": "exp",
  "dojox/charting/bidi/action2d/ZoomAndPan": "exp",
  "dojox/charting/bidi/axis2d/Default": "exp",
  "dojox/charting/bidi/widget/Chart": "exp",
  "dojox/charting/bidi/widget/Legend": "exp",
  "dojox/charting/plot2d/common": "exp",
  "dojox/charting/plot2d/common.defaultStats": "exp",
  "dojox/charting/plot2d/commonStacked": "exp",
  "dojox/charting/plot2d/_PlotEvents": "exp",
  "dojox/charting/plot2d/Areas": "exp",
  "dojox/charting/plot2d/Bars": "exp",
  "dojox/charting/plot2d/Base": "exp",
  "dojox/charting/plot2d/Bubble": "exp",
  "dojox/charting/plot2d/CartesianBase": "exp",
  "dojox/charting/plot2d/Candlesticks": "exp",
  "dojox/charting/plot2d/ClusteredBars": "exp",
  "dojox/charting/plot2d/ClusteredColumns": "exp",
  "dojox/charting/plot2d/Columns": "exp",
  "dojox/charting/plot2d/Grid": "exp",
  "dojox/charting/plot2d/Default": "exp",
  "dojox/charting/plot2d/Indicator": "exp",
  "dojox/charting/plot2d/Lines": "exp",
  "dojox/charting/plot2d/Markers": "exp",
  "dojox/charting/plot2d/Pie": "exp",
  "dojox/charting/plot2d/MarkersOnly": "exp",
  "dojox/charting/plot2d/OHLC": "exp",
  "dojox/charting/plot2d/Scatter": "exp",
  "dojox/charting/plot2d/Stacked": "exp",
  "dojox/charting/plot2d/Spider": "exp",
  "dojox/charting/plot2d/StackedAreas": "exp",
  "dojox/charting/plot2d/StackedBars": "exp",
  "dojox/charting/plot2d/StackedColumns": "exp",
  "dojox/charting/plot2d/StackedLines": "exp",
  "dojox/charting/plot3d/Bars": "exp",
  "dojox/charting/plot3d/Base": "exp",
  "dojox/charting/plot3d/Cylinders": "exp",
  "dojox/charting/scaler/common": "exp",
  "dojox/charting/scaler/primitive": "exp",
  "dojox/charting/scaler/linear": "exp",
  "dojox/charting/themes/common": "exp",
  "dojox/charting/themes/gradientGenerator": "exp",
  "dojox/charting/themes/PlotKit/base": "exp",
  "dojox/charting/widget/Chart2D": "exp",
  "dojox/charting/widget/Chart": "exp",
  "dojox/charting/widget/Legend": "exp",
  "dojox/charting/widget/SelectableLegend": "exp",
  "!name": "dojox.charting.d.ts",
  "!define": {
    "ret": {
      "unwatch": "fn()"
    },
    "ret1": {
      "unwatch": "fn()"
    },
    "ret2": {
      "unwatch": "fn()"
    },
    "ret3": {
      "unwatch": "fn()"
    },
    "ret4": {
      "unwatch": "fn()"
    },
    "ret5": {
      "unwatch": "fn()"
    },
    "ret6": {
      "unwatch": "fn()"
    },
    "ret7": {
      "unwatch": "fn()"
    },
    "ret8": {
      "unwatch": "fn()"
    },
    "ret9": {
      "unwatch": "fn()"
    },
    "ret10": {
      "unwatch": "fn()"
    },
    "ret11": {
      "unwatch": "fn()"
    },
    "ret12": {
      "unwatch": "fn()"
    },
    "ret13": {
      "unwatch": "fn()"
    },
    "ret14": {
      "unwatch": "fn()"
    },
    "ret15": {
      "unwatch": "fn()"
    },
    "ret16": {
      "unwatch": "fn()"
    },
    "ret17": {
      "unwatch": "fn()"
    },
    "ret18": {
      "unwatch": "fn()"
    },
    "ret19": {
      "unwatch": "fn()"
    },
    "ret20": {
      "unwatch": "fn()"
    },
    "ret21": {
      "unwatch": "fn()"
    },
    "ret22": {
      "unwatch": "fn()"
    },
    "ret23": {
      "unwatch": "fn()"
    },
    "ret24": {
      "unwatch": "fn()"
    },
    "ret25": {
      "unwatch": "fn()"
    },
    "ret26": {
      "unwatch": "fn()"
    },
    "ret27": {
      "unwatch": "fn()"
    },
    "ret28": {
      "unwatch": "fn()"
    },
    "ret29": {
      "unwatch": "fn()"
    },
    "ret30": {
      "unwatch": "fn()"
    },
    "ret31": {
      "unwatch": "fn()"
    },
    "ret32": {
      "unwatch": "fn()"
    },
    "ret33": {
      "unwatch": "fn()"
    },
    "ret34": {
      "unwatch": "fn()"
    },
    "ret35": {
      "unwatch": "fn()"
    },
    "ret36": {
      "unwatch": "fn()"
    },
    "ret37": {
      "unwatch": "fn()"
    },
    "ret38": {
      "unwatch": "fn()"
    },
    "ret39": {
      "unwatch": "fn()"
    },
    "ret40": {
      "unwatch": "fn()"
    },
    "ret41": {
      "unwatch": "fn()"
    },
    "ret42": {
      "unwatch": "fn()"
    },
    "ret43": {
      "unwatch": "fn()"
    },
    "ret44": {
      "unwatch": "fn()"
    },
    "ret45": {
      "unwatch": "fn()"
    },
    "ret46": {
      "unwatch": "fn()"
    },
    "ret47": {
      "unwatch": "fn()"
    },
    "ret48": {
      "unwatch": "fn()"
    },
    "ret49": {
      "unwatch": "fn()"
    },
    "ret50": {
      "unwatch": "fn()"
    },
    "ret51": {
      "unwatch": "fn()"
    },
    "ret52": {
      "unwatch": "fn()"
    },
    "ret53": {
      "unwatch": "fn()"
    },
    "ret54": {
      "unwatch": "fn()"
    },
    "ret55": {
      "unwatch": "fn()"
    },
    "ret56": {
      "unwatch": "fn()"
    },
    "ret57": {
      "unwatch": "fn()"
    },
    "ret58": {
      "unwatch": "fn()"
    },
    "ret59": {
      "unwatch": "fn()"
    },
    "ret60": {
      "unwatch": "fn()"
    },
    "ret61": {
      "unwatch": "fn()"
    },
    "ret62": {
      "unwatch": "fn()"
    },
    "ret63": {
      "unwatch": "fn()"
    },
    "ret64": {
      "unwatch": "fn()"
    },
    "ret65": {
      "unwatch": "fn()"
    },
    "ret66": {
      "unwatch": "fn()"
    },
    "ret67": {
      "unwatch": "fn()"
    },
    "ret68": {
      "unwatch": "fn()"
    },
    "ret69": {
      "unwatch": "fn()"
    },
    "ret70": {
      "unwatch": "fn()"
    },
    "ret71": {
      "unwatch": "fn()"
    },
    "ret72": {
      "unwatch": "fn()"
    },
    "ret73": {
      "unwatch": "fn()"
    },
    "ret74": {
      "unwatch": "fn()"
    }
  }
}
