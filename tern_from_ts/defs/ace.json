{
  "AceAjax": {
    "Delta": {
      "action": "string",
      "range": "Range",
      "text": "string",
      "lines": "[string]"
    },
    "EditorCommand": {
      "name": "string",
      "bindKey": "?",
      "exec": "Function",
      "readOnly": "bool"
    },
    "CommandManager": {
      "byName": "?",
      "commands": "?",
      "platform": "string",
      "addCommands": "fn(commands: [EditorCommand])",
      "addCommand": "fn(command: EditorCommand)",
      "exec": "fn(name: string, editor: Editor, args: ?)"
    },
    "Annotation": {
      "row": "number",
      "column": "number",
      "text": "string",
      "type": "string"
    },
    "TokenInfo": {
      "value": "string"
    },
    "Position": {
      "row": "number",
      "column": "number"
    },
    "KeyBinding": {
      "setDefaultHandler": "fn(kb: ?)",
      "setKeyboardHandler": "fn(kb: ?)",
      "addKeyboardHandler": "fn(kb: ?, pos: ?)",
      "removeKeyboardHandler": "fn(kb: ?) -> bool",
      "getKeyboardHandler": "fn() -> ?",
      "onCommandKey": "fn(e: ?, hashId: ?, keyCode: ?)",
      "onTextInput": "fn(text: ?)"
    },
    "TextMode": {
      "getTokenizer": "fn() -> ?",
      "toggleCommentLines": "fn(state: ?, doc: ?, startRow: ?, endRow: ?)",
      "getNextLineIndent": "fn(state: ?, line: ?, tab: ?) -> string",
      "checkOutdent": "fn(state: ?, line: ?, input: ?) -> bool",
      "autoOutdent": "fn(state: ?, doc: ?, row: ?)",
      "createWorker": "fn(session: ?) -> ?",
      "createModeDelegates": "fn(mapping: ?)",
      "transformAction": "fn(state: ?, action: ?, editor: ?, session: ?, param: ?) -> ?"
    },
    "Ace": {
      "require": "fn(moduleName: string) -> ?",
      "edit": "fn(el: string) -> Editor",
      "createEditSession": "fn(text: Document, mode: TextMode) -> IEditSession"
    },
    "Anchor": {
      "on": "fn(event: string, fn: fn(e: ?))",
      "getPosition": "fn() -> Position",
      "getDocument": "fn() -> Document",
      "onChange": "fn(e: ?)",
      "setPosition": "fn(row: number, column: number, noClip: bool)",
      "detach": "fn()"
    },
    "BackgroundTokenizer": {
      "states": "[?]",
      "setTokenizer": "fn(tokenizer: Tokenizer)",
      "setDocument": "fn(doc: Document)",
      "fireUpdateEvent": "fn(firstRow: number, lastRow: number)",
      "start": "fn(startRow: number)",
      "stop": "fn()",
      "getTokens": "fn(row: number) -> [TokenInfo]",
      "getState": "fn(row: number) -> string"
    },
    "Document": {
      "on": "fn(event: string, fn: fn(e: ?))",
      "setValue": "fn(text: string)",
      "getValue": "fn() -> string",
      "createAnchor": "fn(row: number, column: number)",
      "getNewLineCharacter": "fn() -> string",
      "setNewLineMode": "fn(newLineMode: string)",
      "getNewLineMode": "fn() -> string",
      "isNewLine": "fn(text: string) -> bool",
      "getLine": "fn(row: number) -> string",
      "getLines": "fn(firstRow: number, lastRow: number) -> [string]",
      "getAllLines": "fn() -> [string]",
      "getLength": "fn() -> number",
      "getTextRange": "fn(range: Range) -> string",
      "insert": "fn(position: Position, text: string) -> ?",
      "insertLines": "fn(row: number, lines: [string]) -> ?",
      "insertNewLine": "fn(position: Position) -> ?",
      "insertInLine": "fn(position: ?, text: string) -> ?",
      "remove": "fn(range: Range) -> ?",
      "removeInLine": "fn(row: number, startColumn: number, endColumn: number) -> ?",
      "removeLines": "fn(firstRow: number, lastRow: number) -> [string]",
      "removeNewLine": "fn(row: number)",
      "replace": "fn(range: Range, text: string) -> ?",
      "applyDeltas": "fn(deltas: [Delta])",
      "revertDeltas": "fn(deltas: [Delta])",
      "indexToPosition": "fn(index: number, startRow: number) -> Position",
      "positionToIndex": "fn(pos: Position, startRow: number) -> number"
    },
    "IEditSession": {
      "selection": "Selection",
      "bgTokenizer": "BackgroundTokenizer",
      "doc": "Document",
      "on": "fn(event: string, fn: fn(e: ?))",
      "findMatchingBracket": "fn(position: Position)",
      "addFold": "fn(text: string, range: Range)",
      "getFoldAt": "fn(row: number, column: number) -> ?",
      "removeFold": "fn(arg: ?)",
      "expandFold": "fn(arg: ?)",
      "unfold": "fn(arg1: ?, arg2: bool)",
      "screenToDocumentColumn": "fn(row: number, column: number)",
      "getFoldDisplayLine": "fn(foldLine: ?, docRow: number, docColumn: number) -> ?",
      "getFoldsInRange": "fn(range: Range) -> ?",
      "highlight": "fn(text: string)",
      "setDocument": "fn(doc: Document)",
      "getDocument": "fn() -> Document",
      "$resetRowCache": "fn(row: number)",
      "setValue": "fn(text: string)",
      "setMode": "fn(mode: string)",
      "getValue": "fn() -> string",
      "getSelection": "fn() -> Selection",
      "getState": "fn(row: number) -> string",
      "getTokens": "fn(row: number) -> [TokenInfo]",
      "getTokenAt": "fn(row: number, column: number) -> TokenInfo",
      "setUndoManager": "fn(undoManager: UndoManager)",
      "getUndoManager": "fn() -> UndoManager",
      "getTabString": "fn() -> string",
      "setUseSoftTabs": "fn(useSoftTabs: bool)",
      "getUseSoftTabs": "fn() -> bool",
      "setTabSize": "fn(tabSize: number)",
      "getTabSize": "fn() -> number",
      "isTabStop": "fn(position: ?) -> bool",
      "setOverwrite": "fn(overwrite: bool)",
      "getOverwrite": "fn() -> bool",
      "toggleOverwrite": "fn()",
      "addGutterDecoration": "fn(row: number, className: string)",
      "removeGutterDecoration": "fn(row: number, className: string)",
      "getBreakpoints": "fn() -> [number]",
      "setBreakpoints": "fn(rows: [?])",
      "clearBreakpoints": "fn()",
      "setBreakpoint": "fn(row: number, className: string)",
      "clearBreakpoint": "fn(row: number)",
      "addMarker": "fn(range: Range, clazz: string, type: Function, inFront: bool)",
      "addDynamicMarker": "fn(marker: ?, inFront: bool)",
      "removeMarker": "fn(markerId: number)",
      "getMarkers": "fn(inFront: bool) -> [?]",
      "setAnnotations": "fn(annotations: [Annotation])",
      "getAnnotations": "fn() -> ?",
      "clearAnnotations": "fn()",
      "$detectNewLine": "fn(text: string)",
      "getWordRange": "fn(row: number, column: number) -> Range",
      "getAWordRange": "fn(row: number, column: number) -> ?",
      "setNewLineMode": "fn(newLineMode: string)",
      "getNewLineMode": "fn() -> string",
      "setUseWorker": "fn(useWorker: bool)",
      "getUseWorker": "fn() -> bool",
      "onReloadTokenizer": "fn()",
      "$mode": "fn(mode: TextMode)",
      "getMode": "fn() -> TextMode",
      "setScrollTop": "fn(scrollTop: number)",
      "getScrollTop": "fn() -> number",
      "setScrollLeft": "fn()",
      "getScrollLeft": "fn() -> number",
      "getScreenWidth": "fn() -> number",
      "getLine": "fn(row: number) -> string",
      "getLines": "fn(firstRow: number, lastRow: number) -> [string]",
      "getLength": "fn() -> number",
      "getTextRange": "fn(range: Range) -> string",
      "insert": "fn(position: Position, text: string) -> ?",
      "remove": "fn(range: Range) -> ?",
      "undoChanges": "fn(deltas: [?], dontSelect: bool) -> Range",
      "redoChanges": "fn(deltas: [?], dontSelect: bool) -> Range",
      "setUndoSelect": "fn(enable: bool)",
      "replace": "fn(range: Range, text: string) -> ?",
      "moveText": "fn(fromRange: Range, toPosition: ?) -> Range",
      "indentRows": "fn(startRow: number, endRow: number, indentString: string)",
      "outdentRows": "fn(range: Range)",
      "moveLinesUp": "fn(firstRow: number, lastRow: number) -> number",
      "moveLinesDown": "fn(firstRow: number, lastRow: number) -> number",
      "duplicateLines": "fn(firstRow: number, lastRow: number) -> number",
      "setUseWrapMode": "fn(useWrapMode: bool)",
      "getUseWrapMode": "fn() -> bool",
      "setWrapLimitRange": "fn(min: number, max: number)",
      "adjustWrapLimit": "fn(desiredLimit: number) -> bool",
      "getWrapLimit": "fn() -> number",
      "getWrapLimitRange": "fn() -> ?",
      "$getDisplayTokens": "fn(str: string, offset: number)",
      "$getStringScreenWidth": "fn(str: string, maxScreenColumn: number, screenColumn: number) -> [number]",
      "getRowLength": "fn(row: number) -> number",
      "getScreenLastRowColumn": "fn(screenRow: number) -> number",
      "getDocumentLastRowColumn": "fn(docRow: number, docColumn: number) -> number",
      "getDocumentLastRowColumnPosition": "fn(docRow: number, docColumn: number) -> number",
      "getRowSplitData": "fn() -> string",
      "getScreenTabSize": "fn(screenColumn: number) -> number",
      "screenToDocumentPosition": "fn(screenRow: number, screenColumn: number) -> ?",
      "documentToScreenPosition": "fn(docRow: number, docColumn: number) -> ?",
      "documentToScreenColumn": "fn(row: number, docColumn: number) -> number",
      "documentToScreenRow": "fn(docRow: number, docColumn: number)",
      "getScreenLength": "fn() -> number"
    },
    "EditSession": {},
    "Editor": {
      "addEventListener": "fn(ev: string, callback: fn(ev: EditorChangeEvent))",
      "inMultiSelectMode": "bool",
      "selectMoreLines": "fn(n: number)",
      "onTextInput": "fn(text: string)",
      "onCommandKey": "fn(e: ?, hashId: ?, keyCode: ?)",
      "commands": "CommandManager",
      "session": "IEditSession",
      "selection": "Selection",
      "renderer": "VirtualRenderer",
      "keyBinding": "KeyBinding",
      "container": "HTMLElement",
      "onSelectionChange": "fn(e: ?)",
      "onChangeMode": "fn(e?: ?)",
      "execCommand": "fn(command: string, args?: ?)",
      "setOption": "fn(optionName: ?, optionValue: ?)",
      "setOptions": "fn(keyValueTuples: ?)",
      "getOption": "fn(name: ?) -> ?",
      "getOptions": "fn() -> ?",
      "$blockScrolling": "number",
      "setKeyboardHandler": "fn(keyboardHandler: string)",
      "getKeyboardHandler": "fn() -> string",
      "setSession": "fn(session: IEditSession)",
      "getSession": "fn() -> IEditSession",
      "setValue": "fn(val: string, cursorPos?: number) -> string",
      "getValue": "fn() -> string",
      "getSelection": "fn() -> Selection",
      "resize": "fn(force?: bool)",
      "setTheme": "fn(theme: string)",
      "getTheme": "fn() -> string",
      "setStyle": "fn(style: string)",
      "unsetStyle": "fn()",
      "setFontSize": "fn(size: string)",
      "focus": "fn()",
      "isFocused": "fn()",
      "blur": "fn()",
      "onFocus": "fn()",
      "onBlur": "fn()",
      "onDocumentChange": "fn(e: ?)",
      "onCursorChange": "fn()",
      "getCopyText": "fn() -> string",
      "onCopy": "fn()",
      "onCut": "fn()",
      "onPaste": "fn(text: string)",
      "insert": "fn(text: string)",
      "setOverwrite": "fn(overwrite: bool)",
      "getOverwrite": "fn() -> bool",
      "toggleOverwrite": "fn()",
      "setScrollSpeed": "fn(speed: number)",
      "getScrollSpeed": "fn() -> number",
      "setDragDelay": "fn(dragDelay: number)",
      "getDragDelay": "fn() -> number",
      "setSelectionStyle": "fn(style: string)",
      "getSelectionStyle": "fn() -> string",
      "setHighlightActiveLine": "fn(shouldHighlight: bool)",
      "getHighlightActiveLine": "fn()",
      "setHighlightSelectedWord": "fn(shouldHighlight: bool)",
      "getHighlightSelectedWord": "fn() -> bool",
      "setShowInvisibles": "fn(showInvisibles: bool)",
      "getShowInvisibles": "fn() -> bool",
      "setShowPrintMargin": "fn(showPrintMargin: bool)",
      "getShowPrintMargin": "fn() -> bool",
      "setPrintMarginColumn": "fn(showPrintMargin: number)",
      "getPrintMarginColumn": "fn() -> number",
      "setReadOnly": "fn(readOnly: bool)",
      "getReadOnly": "fn() -> bool",
      "setBehavioursEnabled": "fn(enabled: bool)",
      "getBehavioursEnabled": "fn() -> bool",
      "setWrapBehavioursEnabled": "fn(enabled: bool)",
      "getWrapBehavioursEnabled": "fn()",
      "setShowFoldWidgets": "fn(show: bool)",
      "getShowFoldWidgets": "fn()",
      "remove": "fn(dir: string)",
      "removeWordRight": "fn()",
      "removeWordLeft": "fn()",
      "removeToLineStart": "fn()",
      "removeToLineEnd": "fn()",
      "splitLine": "fn()",
      "transposeLetters": "fn()",
      "toLowerCase": "fn()",
      "toUpperCase": "fn()",
      "indent": "fn()",
      "blockIndent": "fn()",
      "blockOutdent": "fn(arg?: string)",
      "toggleCommentLines": "fn()",
      "getNumberAt": "fn() -> number",
      "modifyNumber": "fn(amount: number)",
      "removeLines": "fn()",
      "moveLinesDown": "fn() -> number",
      "moveLinesUp": "fn() -> number",
      "moveText": "fn(fromRange: Range, toPosition: ?) -> Range",
      "copyLinesUp": "fn() -> number",
      "copyLinesDown": "fn() -> number",
      "getFirstVisibleRow": "fn() -> number",
      "getLastVisibleRow": "fn() -> number",
      "isRowVisible": "fn(row: number) -> bool",
      "isRowFullyVisible": "fn(row: number) -> bool",
      "selectPageDown": "fn()",
      "selectPageUp": "fn()",
      "gotoPageDown": "fn()",
      "gotoPageUp": "fn()",
      "scrollPageDown": "fn()",
      "scrollPageUp": "fn()",
      "scrollToRow": "fn()",
      "scrollToLine": "fn(line: number, center: bool, animate: bool, callback: Function)",
      "centerSelection": "fn()",
      "getCursorPosition": "fn() -> Position",
      "getCursorPositionScreen": "fn() -> number",
      "getSelectionRange": "fn() -> Range",
      "selectAll": "fn()",
      "clearSelection": "fn()",
      "moveCursorTo": "fn(row: number, column?: number, animate?: bool)",
      "moveCursorToPosition": "fn(position: Position)",
      "jumpToMatching": "fn()",
      "gotoLine": "fn(lineNumber: number, column?: number, animate?: bool)",
      "navigateTo": "fn(row: number, column: number)",
      "navigateUp": "fn(times?: number)",
      "navigateDown": "fn(times?: number)",
      "navigateLeft": "fn(times?: number)",
      "navigateRight": "fn(times: number)",
      "navigateLineStart": "fn()",
      "navigateLineEnd": "fn()",
      "navigateFileEnd": "fn()",
      "navigateFileStart": "fn()",
      "navigateWordRight": "fn()",
      "navigateWordLeft": "fn()",
      "replace": "fn(replacement: string, options?: ?)",
      "replaceAll": "fn(replacement: string, options?: ?)",
      "getLastSearchOptions": "fn() -> ?",
      "find": "fn(needle: string, options?: ?, animate?: bool)",
      "findNext": "fn(options?: ?, animate?: bool)",
      "findPrevious": "fn(options?: ?, animate?: bool)",
      "undo": "fn()",
      "redo": "fn()",
      "destroy": "fn()"
    },
    "EditorChangeEvent": {
      "start": "Position",
      "end": "Position",
      "action": "string",
      "lines": "[?]"
    },
    "PlaceHolder": {
      "on": "fn(event: string, fn: fn(e: ?))",
      "setup": "fn()",
      "showOtherMarkers": "fn()",
      "hideOtherMarkers": "fn()",
      "onUpdate": "fn()",
      "onCursorChange": "fn()",
      "detach": "fn()",
      "cancel": "fn()"
    },
    "IRangeList": {
      "ranges": "[Range]",
      "pointIndex": "fn(pos: Position, startIndex?: number)",
      "addList": "fn(ranges: [Range])",
      "add": "fn(ranges: Range)",
      "merge": "fn() -> [Range]",
      "substractPoint": "fn(pos: Position)"
    },
    "RangeList": {},
    "Range": {
      "startRow": "number",
      "startColumn": "number",
      "endRow": "number",
      "endColumn": "number",
      "start": "Position",
      "end": "Position",
      "isEmpty": "fn() -> bool",
      "isEqual": "fn(range: Range)",
      "contains": "fn(row: number, column: number) -> bool",
      "compareRange": "fn(range: Range) -> number",
      "comparePoint": "fn(p: Range) -> number",
      "containsRange": "fn(range: Range) -> bool",
      "intersects": "fn(range: Range) -> bool",
      "isEnd": "fn(row: number, column: number) -> bool",
      "isStart": "fn(row: number, column: number) -> bool",
      "setStart": "fn(row: number, column: number)",
      "setEnd": "fn(row: number, column: number)",
      "inside": "fn(row: number, column: number) -> bool",
      "insideStart": "fn(row: number, column: number) -> bool",
      "insideEnd": "fn(row: number, column: number) -> bool",
      "compare": "fn(row: number, column: number) -> number",
      "compareStart": "fn(row: number, column: number) -> number",
      "compareEnd": "fn(row: number, column: number) -> number",
      "compareInside": "fn(row: number, column: number) -> number",
      "clipRows": "fn(firstRow: number, lastRow: number) -> Range",
      "extend": "fn(row: number, column: number) -> Range",
      "isMultiLine": "fn() -> bool",
      "clone": "fn() -> Range",
      "collapseRows": "fn() -> Range",
      "toScreenRange": "fn(session: IEditSession) -> Range",
      "fromPoints": "fn(pos1: Position, pos2: Position) -> Range"
    },
    "RenderLoop": {},
    "ScrollBar": {
      "onScroll": "fn(e: ?)",
      "getWidth": "fn() -> number",
      "setHeight": "fn(height: number)",
      "setInnerHeight": "fn(height: number)",
      "setScrollTop": "fn(scrollTop: number)"
    },
    "Search": {
      "set": "fn(options: ?) -> Search",
      "getOptions": "fn() -> ?",
      "setOptions": "fn(An: ?)",
      "find": "fn(session: IEditSession) -> Range",
      "findAll": "fn(session: IEditSession) -> [Range]",
      "replace": "fn(input: string, replacement: string) -> string"
    },
    "Selection": {
      "addEventListener": "fn(ev: string, callback: Function)",
      "moveCursorWordLeft": "fn()",
      "moveCursorWordRight": "fn()",
      "fromOrientedRange": "fn(range: Range)",
      "setSelectionRange": "fn(match: ?)",
      "getAllRanges": "fn() -> [Range]",
      "on": "fn(event: string, fn: fn(e: ?))",
      "addRange": "fn(range: Range)",
      "isEmpty": "fn() -> bool",
      "isMultiLine": "fn() -> bool",
      "getCursor": "fn() -> Position",
      "setSelectionAnchor": "fn(row: number, column: number)",
      "getSelectionAnchor": "fn() -> ?",
      "getSelectionLead": "fn() -> ?",
      "shiftSelection": "fn(columns: number)",
      "isBackwards": "fn() -> bool",
      "getRange": "fn() -> Range",
      "clearSelection": "fn()",
      "selectAll": "fn()",
      "setRange": "fn(range: Range, reverse: bool)",
      "selectTo": "fn(row: number, column: number)",
      "selectToPosition": "fn(pos: ?)",
      "selectUp": "fn()",
      "selectDown": "fn()",
      "selectRight": "fn()",
      "selectLeft": "fn()",
      "selectLineStart": "fn()",
      "selectLineEnd": "fn()",
      "selectFileEnd": "fn()",
      "selectFileStart": "fn()",
      "selectWordRight": "fn()",
      "selectWordLeft": "fn()",
      "getWordRange": "fn()",
      "selectWord": "fn()",
      "selectAWord": "fn()",
      "selectLine": "fn()",
      "moveCursorUp": "fn()",
      "moveCursorDown": "fn()",
      "moveCursorLeft": "fn()",
      "moveCursorRight": "fn()",
      "moveCursorLineStart": "fn()",
      "moveCursorLineEnd": "fn()",
      "moveCursorFileEnd": "fn()",
      "moveCursorFileStart": "fn()",
      "moveCursorLongWordRight": "fn()",
      "moveCursorLongWordLeft": "fn()",
      "moveCursorBy": "fn(rows: number, chars: number)",
      "moveCursorToPosition": "fn(position: ?)",
      "moveCursorTo": "fn(row: number, column: number, keepDesiredColumn?: bool)",
      "moveCursorToScreen": "fn(row: number, column: number, keepDesiredColumn: bool)"
    },
    "Split": {
      "getSplits": "fn() -> number",
      "getEditor": "fn(idx: number)",
      "getCurrentEditor": "fn() -> Editor",
      "focus": "fn()",
      "blur": "fn()",
      "setTheme": "fn(theme: string)",
      "setKeyboardHandler": "fn(keybinding: string)",
      "forEach": "fn(callback: Function, scope: string)",
      "setFontSize": "fn(size: number)",
      "setSession": "fn(session: IEditSession, idx: number)",
      "getOrientation": "fn() -> number",
      "setOrientation": "fn(orientation: number)",
      "resize": "fn()"
    },
    "TokenIterator": {
      "stepBackward": "fn() -> [string]",
      "stepForward": "fn() -> string",
      "getCurrentToken": "fn() -> TokenInfo",
      "getCurrentTokenRow": "fn() -> number",
      "getCurrentTokenColumn": "fn() -> number"
    },
    "Tokenizer": {
      "getLineTokens": "fn() -> ?"
    },
    "UndoManager": {
      "execute": "fn(options: ?)",
      "undo": "fn(dontSelect?: bool) -> Range",
      "redo": "fn(dontSelect: bool)",
      "reset": "fn()",
      "hasUndo": "fn() -> bool",
      "hasRedo": "fn() -> bool",
      "isClean": "fn() -> bool",
      "markClean": "fn()"
    },
    "VirtualRenderer": {
      "scroller": "?",
      "characterWidth": "number",
      "lineHeight": "number",
      "screenToTextCoordinates": "fn(left: number, top: number)",
      "setSession": "fn(session: IEditSession)",
      "updateLines": "fn(firstRow: number, lastRow: number)",
      "updateText": "fn()",
      "updateFull": "fn(force: bool)",
      "updateFontSize": "fn()",
      "onResize": "fn(force: bool, gutterWidth: number, width: number, height: number)",
      "adjustWrapLimit": "fn()",
      "setAnimatedScroll": "fn(shouldAnimate: bool)",
      "getAnimatedScroll": "fn() -> bool",
      "setShowInvisibles": "fn(showInvisibles: bool)",
      "getShowInvisibles": "fn() -> bool",
      "setShowPrintMargin": "fn(showPrintMargin: bool)",
      "getShowPrintMargin": "fn() -> bool",
      "setPrintMarginColumn": "fn(showPrintMargin: bool)",
      "getPrintMarginColumn": "fn() -> bool",
      "getShowGutter": "fn() -> bool",
      "setShowGutter": "fn(show: bool)",
      "getContainerElement": "fn() -> HTMLElement",
      "getMouseEventTarget": "fn() -> HTMLElement",
      "getTextAreaContainer": "fn() -> HTMLElement",
      "getFirstVisibleRow": "fn() -> number",
      "getFirstFullyVisibleRow": "fn() -> number",
      "getLastFullyVisibleRow": "fn() -> number",
      "getLastVisibleRow": "fn() -> number",
      "setPadding": "fn(padding: number)",
      "getHScrollBarAlwaysVisible": "fn() -> bool",
      "setHScrollBarAlwaysVisible": "fn(alwaysVisible: bool)",
      "updateFrontMarkers": "fn()",
      "updateBackMarkers": "fn()",
      "addGutterDecoration": "fn()",
      "removeGutterDecoration": "fn()",
      "updateBreakpoints": "fn()",
      "setAnnotations": "fn(annotations: [?])",
      "updateCursor": "fn()",
      "hideCursor": "fn()",
      "showCursor": "fn()",
      "scrollCursorIntoView": "fn()",
      "getScrollTop": "fn() -> number",
      "getScrollLeft": "fn() -> number",
      "getScrollTopRow": "fn() -> number",
      "getScrollBottomRow": "fn() -> number",
      "scrollToRow": "fn(row: number)",
      "scrollToLine": "fn(line: number, center: bool, animate: bool, callback: Function)",
      "scrollToY": "fn(scrollTop: number) -> number",
      "scrollToX": "fn(scrollLeft: number) -> number",
      "scrollBy": "fn(deltaX: number, deltaY: number)",
      "isScrollableBy": "fn(deltaX: number, deltaY: number) -> bool",
      "textToScreenCoordinates": "fn(row: number, column: number) -> ?",
      "visualizeFocus": "fn()",
      "visualizeBlur": "fn()",
      "showComposition": "fn(position: number)",
      "setCompositionText": "fn(text: string)",
      "hideComposition": "fn()",
      "setTheme": "fn(theme: string)",
      "getTheme": "fn() -> string",
      "setStyle": "fn(style: string)",
      "unsetStyle": "fn(style: string)",
      "destroy": "fn()"
    }
  },
  "ace": "AceAjax.Ace",
  "!name": "ace"
}
