{
  "Sinon": {
    "SinonSpyCallApi": {
      "thisValue": "?",
      "args": "[?]",
      "exception": "?",
      "returnValue": "?",
      "calledOn": "fn(obj: ?) -> bool",
      "calledWith": "fn(args: [?]) -> bool",
      "calledWithExactly": "fn(args: [?]) -> bool",
      "calledWithMatch": "fn(args: [?]) -> bool",
      "notCalledWith": "fn(args: [?]) -> bool",
      "notCalledWithMatch": "fn(args: [?]) -> bool",
      "returned": "fn(value: ?) -> bool",
      "threw": "fn() -> bool",
      "callArg": "fn(pos: number)",
      "callArgOn": "fn(pos: number, obj: ?, args: [?])",
      "callArgWith": "fn(pos: number, args: [?])",
      "callArgOnWith": "fn(pos: number, obj: ?, args: [?])",
      "yield": "fn(args: [?])",
      "yieldOn": "fn(obj: ?, args: [?])",
      "yieldTo": "fn(property: string, args: [?])",
      "yieldToOn": "fn(property: string, obj: ?, args: [?])"
    },
    "SinonSpyCall": {
      "calledBefore": "fn(call: SinonSpyCall) -> bool",
      "calledAfter": "fn(call: SinonSpyCall) -> bool",
      "calledWithNew": "fn(call: SinonSpyCall) -> bool"
    },
    "SinonSpy": {
      "callCount": "number",
      "called": "bool",
      "notCalled": "bool",
      "calledOnce": "bool",
      "calledTwice": "bool",
      "calledThrice": "bool",
      "firstCall": "SinonSpyCall",
      "secondCall": "SinonSpyCall",
      "thirdCall": "SinonSpyCall",
      "lastCall": "SinonSpyCall",
      "thisValues": "[?]",
      "args": "[[?]]",
      "exceptions": "[?]",
      "returnValues": "[?]",
      "calledBefore": "fn(anotherSpy: SinonSpy) -> bool",
      "calledAfter": "fn(anotherSpy: SinonSpy) -> bool",
      "calledWithNew": "fn(spy: SinonSpy) -> bool",
      "withArgs": "fn(args: [?]) -> SinonSpy",
      "alwaysCalledOn": "fn(obj: ?) -> bool",
      "alwaysCalledWith": "fn(args: [?]) -> bool",
      "alwaysCalledWithExactly": "fn(args: [?]) -> bool",
      "alwaysCalledWithMatch": "fn(args: [?]) -> bool",
      "neverCalledWith": "fn(args: [?]) -> bool",
      "neverCalledWithMatch": "fn(args: [?]) -> bool",
      "alwaysThrew": "fn() -> bool",
      "alwaysReturned": "fn() -> bool",
      "invokeCallback": "fn(args: [?])",
      "getCall": "fn(n: number) -> SinonSpyCall",
      "reset": "fn()",
      "printf": "fn(format: string, args: [?]) -> string",
      "restore": "fn()"
    },
    "SinonSpyStatic": {},
    "SinonStatic": {
      "spy": "SinonSpyStatic",
      "stub": "SinonStubStatic",
      "expectation": "SinonExpectationStatic",
      "mock": "SinonMockStatic",
      "useFakeTimers": "SinonFakeTimersStatic",
      "clock": "SinonFakeTimers",
      "useFakeXMLHttpRequest": "SinonFakeXMLHttpRequestStatic",
      "FakeXMLHttpRequest": "SinonFakeXMLHttpRequest",
      "fakeServer": "SinonFakeServerStatic",
      "fakeServerWithClock": "SinonFakeServerStatic",
      "assert": "SinonAssert",
      "match": "SinonMatch",
      "sandbox": "SinonSandboxStatic",
      "config": "SinonTestConfig",
      "test": "fn(fn: fn(args: [?])) -> SinonTestWrapper",
      "testCase": "fn(tests: ?) -> ?",
      "createStubInstance": "fn(constructor: ?) -> SinonStub",
      "format": "fn(obj: ?) -> string",
      "log": "fn(message: string)",
      "restore": "fn(object: ?)"
    },
    "SinonStub": {
      "resetBehavior": "fn()",
      "returns": "fn(obj: ?) -> SinonStub",
      "returnsArg": "fn(index: number) -> SinonStub",
      "returnsThis": "fn() -> SinonStub",
      "throws": "fn(type?: string) -> SinonStub",
      "callsArg": "fn(index: number) -> SinonStub",
      "callsArgOn": "fn(index: number, context: ?) -> SinonStub",
      "callsArgWith": "fn(index: number, args: [?]) -> SinonStub",
      "callsArgOnWith": "fn(index: number, context: ?, args: [?]) -> SinonStub",
      "callsArgAsync": "fn(index: number) -> SinonStub",
      "callsArgOnAsync": "fn(index: number, context: ?) -> SinonStub",
      "callsArgWithAsync": "fn(index: number, args: [?]) -> SinonStub",
      "callsArgOnWithAsync": "fn(index: number, context: ?, args: [?]) -> SinonStub",
      "onCall": "fn(n: number) -> SinonStub",
      "onFirstCall": "fn() -> SinonStub",
      "onSecondCall": "fn() -> SinonStub",
      "onThirdCall": "fn() -> SinonStub",
      "yields": "fn(args: [?]) -> SinonStub",
      "yieldsOn": "fn(context: ?, args: [?]) -> SinonStub",
      "yieldsTo": "fn(property: string, args: [?]) -> SinonStub",
      "yieldsToOn": "fn(property: string, context: ?, args: [?]) -> SinonStub",
      "yieldsAsync": "fn(args: [?]) -> SinonStub",
      "yieldsOnAsync": "fn(context: ?, args: [?]) -> SinonStub",
      "yieldsToAsync": "fn(property: string, args: [?]) -> SinonStub",
      "yieldsToOnAsync": "fn(property: string, context: ?, args: [?]) -> SinonStub",
      "withArgs": "fn(args: [?]) -> SinonStub"
    },
    "SinonStubStatic": {},
    "SinonExpectation": {
      "atLeast": "fn(n: number) -> SinonExpectation",
      "atMost": "fn(n: number) -> SinonExpectation",
      "never": "fn() -> SinonExpectation",
      "once": "fn() -> SinonExpectation",
      "twice": "fn() -> SinonExpectation",
      "thrice": "fn() -> SinonExpectation",
      "exactly": "fn(n: number) -> SinonExpectation",
      "withArgs": "fn(args: [?]) -> SinonExpectation",
      "withExactArgs": "fn(args: [?]) -> SinonExpectation",
      "on": "fn(obj: ?) -> SinonExpectation",
      "verify": "fn() -> SinonExpectation",
      "restore": "fn()"
    },
    "SinonExpectationStatic": {
      "create": "fn(methodName?: string) -> SinonExpectation"
    },
    "SinonMock": {
      "expects": "fn(method: string) -> SinonExpectation",
      "restore": "fn()",
      "verify": "fn()"
    },
    "SinonMockStatic": {},
    "SinonFakeTimers": {
      "now": "number",
      "create": "fn(now: number) -> SinonFakeTimers",
      "setTimeout": "fn(callback: fn(args: [?]), timeout: number, args: [?]) -> number",
      "clearTimeout": "fn(id: number)",
      "setInterval": "fn(callback: fn(args: [?]), timeout: number, args: [?]) -> number",
      "clearInterval": "fn(id: number)",
      "tick": "fn(ms: number) -> number",
      "reset": "fn()",
      "Date": "fn() -> Date",
      "restore": "fn()",
      "setSystemTime": "fn(now: number)"
    },
    "SinonFakeTimersStatic": {},
    "SinonFakeUploadProgress": {
      "eventListeners": {
        "progress": "[?]",
        "load": "[?]",
        "abort": "[?]",
        "error": "[?]"
      },
      "addEventListener": "fn(event: string, listener: fn(e: Event))",
      "removeEventListener": "fn(event: string, listener: fn(e: Event))",
      "dispatchEvent": "fn(event: Event)"
    },
    "SinonFakeXMLHttpRequest": {
      "onCreate": "fn(xhr: SinonFakeXMLHttpRequest)",
      "url": "string",
      "method": "string",
      "requestHeaders": "?",
      "requestBody": "string",
      "status": "number",
      "statusText": "string",
      "async": "bool",
      "username": "string",
      "password": "string",
      "withCredentials": "bool",
      "upload": "SinonFakeUploadProgress",
      "responseXML": "Document",
      "getResponseHeader": "fn(header: string) -> string",
      "getAllResponseHeaders": "fn() -> ?",
      "restore": "fn()",
      "useFilters": "bool",
      "addFilter": "fn(filter: fn(method: string, url: string, async: bool, username: string, password: string))",
      "setResponseHeaders": "fn(headers: ?)",
      "setResponseBody": "fn(body: string)",
      "respond": "fn(status: number, headers: ?, body: string)",
      "autoRespond": "fn(ms: number)"
    },
    "SinonFakeXMLHttpRequestStatic": {},
    "SinonFakeServer": {
      "autoRespond": "bool",
      "autoRespondAfter": "number",
      "fakeHTTPMethods": "bool",
      "getHTTPMethod": "fn(request: SinonFakeXMLHttpRequest)",
      "requests": "[SinonFakeXMLHttpRequest]",
      "respondImmediately": "bool",
      "respondWith": "fn(body: string)",
      "respond": "fn()",
      "restore": "fn()"
    },
    "SinonFakeServerStatic": {
      "create": "fn() -> SinonFakeServer"
    },
    "SinonExposeOptions": {
      "prefix": "string",
      "includeFail": "bool"
    },
    "SinonAssert": {
      "failException": "string",
      "fail": "fn(message?: string)",
      "pass": "fn(assertion: ?)",
      "notCalled": "fn(spy: SinonSpy)",
      "called": "fn(spy: SinonSpy)",
      "calledOnce": "fn(spy: SinonSpy)",
      "calledTwice": "fn(spy: SinonSpy)",
      "calledThrice": "fn(spy: SinonSpy)",
      "callCount": "fn(spy: SinonSpy, count: number)",
      "callOrder": "fn(spies: [SinonSpy])",
      "calledOn": "fn(spy: SinonSpy, obj: ?)",
      "alwaysCalledOn": "fn(spy: SinonSpy, obj: ?)",
      "calledWith": "fn(spy: SinonSpy, args: [?])",
      "alwaysCalledWith": "fn(spy: SinonSpy, args: [?])",
      "neverCalledWith": "fn(spy: SinonSpy, args: [?])",
      "calledWithExactly": "fn(spy: SinonSpy, args: [?])",
      "alwaysCalledWithExactly": "fn(spy: SinonSpy, args: [?])",
      "calledWithMatch": "fn(spy: SinonSpy, args: [?])",
      "alwaysCalledWithMatch": "fn(spy: SinonSpy, args: [?])",
      "neverCalledWithMatch": "fn(spy: SinonSpy, args: [?])",
      "threw": "fn(spy: SinonSpy)",
      "alwaysThrew": "fn(spy: SinonSpy)",
      "expose": "fn(obj: ?, options?: SinonExposeOptions)"
    },
    "SinonMatcher": {
      "and": "fn(expr: SinonMatcher) -> SinonMatcher",
      "or": "fn(expr: SinonMatcher) -> SinonMatcher"
    },
    "SinonMatch": {
      "any": "SinonMatcher",
      "defined": "SinonMatcher",
      "truthy": "SinonMatcher",
      "falsy": "SinonMatcher",
      "bool": "SinonMatcher",
      "number": "SinonMatcher",
      "string": "SinonMatcher",
      "object": "SinonMatcher",
      "func": "SinonMatcher",
      "array": "SinonMatcher",
      "regexp": "SinonMatcher",
      "date": "SinonMatcher",
      "same": "fn(obj: ?) -> SinonMatcher",
      "typeOf": "fn(type: string) -> SinonMatcher",
      "instanceOf": "fn(type: ?) -> SinonMatcher",
      "has": "fn(property: string, expect?: ?) -> SinonMatcher",
      "hasOwn": "fn(property: string, expect?: ?) -> SinonMatcher"
    },
    "SinonSandboxConfig": {
      "injectInto": "?",
      "properties": "[string]",
      "useFakeTimers": "?",
      "useFakeServer": "?"
    },
    "SinonSandbox": {
      "clock": "SinonFakeTimers",
      "requests": "SinonFakeXMLHttpRequest",
      "server": "SinonFakeServer",
      "spy": "SinonSpyStatic",
      "stub": "SinonStubStatic",
      "mock": "SinonMockStatic",
      "useFakeTimers": "SinonFakeTimersStatic",
      "useFakeXMLHttpRequest": "SinonFakeXMLHttpRequestStatic",
      "useFakeServer": "fn() -> SinonFakeServer",
      "restore": "fn()"
    },
    "SinonSandboxStatic": {
      "create": "fn() -> SinonSandbox"
    },
    "SinonTestConfig": {
      "injectIntoThis": "bool",
      "injectInto": "?",
      "properties": "[string]",
      "useFakeTimers": "bool",
      "useFakeServer": "bool"
    },
    "SinonTestWrapper": {}
  },
  "sinon": "Sinon.SinonStatic",
  "!name": "sinon.d.ts"
}
