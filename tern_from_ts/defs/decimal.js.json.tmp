{
  "Decimal": "decimal.IDecimalStatic",
  "'decimal.js'": "Decimal",
  "decimal": {
    "RoundingMode": "number",
    "IFormatConfig": {
      "decimalSeparator": "string",
      "groupSeparator": "string",
      "groupSize": "number",
      "secondaryGroupSize": "number",
      "fractionGroupSeparator": "string",
      "fractionGroupSize": "number"
    },
    "IDecimalConfig": {
      "precision": "number",
      "rounding": "RoundingMode",
      "toExpNeg": "number",
      "toExpPos": "number",
      "minE": "number",
      "maxE": "number",
      "errors": "bool",
      "number": "?",
      "crypto": "bool",
      "modulo": "RoundingMode",
      "format": "IFormatConfig"
    },
    "IDecimalStatic": {
      "config": "fn(object: IDecimalConfig) -> IDecimalStatic",
      "exp": "fn(n: number, string: ?, Decimal: ?) -> Decimal",
      "ln": "fn(n: number, string: ?, Decimal: ?) -> Decimal",
      "log": "fn(n: number, string: ?, Decimal: ?, base?: number) -> Decimal",
      "max": "fn(args: [?]) -> Decimal",
      "min": "fn(args: [?]) -> Decimal",
      "noConflict": "fn() -> IDecimalStatic",
      "pow": "fn(base: number, string: ?, Decimal: ?, exponent: number, string: ?, Decimal: ?) -> Decimal",
      "random": "fn(dp?: number) -> Decimal",
      "sqrt": "fn(arg: number, string: ?, Decimal: ?) -> Decimal",
      "ONE": "number",
      "ROUND_UP": "number",
      "ROUND_DOWN": "number",
      "ROUND_CEIL": "number",
      "ROUND_FLOOR": "number",
      "ROUND_HALF_UP": "number",
      "ROUND_HALF_DOWN": "number",
      "ROUND_HALF_EVEN": "number",
      "ROUND_HALF_CEIL": "number",
      "ROUND_HALF_FLOOR": "number",
      "EUCLID": "number"
    },
    "Decimal": {
      "absoluteValue": "fn() -> Decimal",
      "abs": "fn() -> Decimal",
      "ceil": "fn() -> Decimal",
      "comparedTo": "fn(n: number, string: ?, Decimal: ?, base?: number) -> number",
      "cmp": "fn(n: number, string: ?, Decimal: ?, base?: number) -> number",
      "decimalPlaces": "fn() -> number",
      "dp": "fn() -> number",
      "dividedBy": "fn(n: number, string: ?, Decimal: ?, base?: number) -> Decimal",
      "div": "fn(n: number, string: ?, Decimal: ?, base?: number) -> Decimal",
      "dividedToIntegerBy": "fn(n: number, string: ?, Decimal: ?, base?: number) -> Decimal",
      "divToInt": "fn(n: number, string: ?, Decimal: ?, base?: number) -> Decimal",
      "equals": "fn(n: number, string: ?, Decimal: ?, base?: number) -> bool",
      "eq": "fn(n: number, string: ?, Decimal: ?, base?: number) -> bool",
      "exponential": "fn() -> Decimal",
      "exp": "fn() -> Decimal",
      "floor": "fn() -> Decimal",
      "greaterThan": "fn(n: number, string: ?, Decimal: ?, base?: number) -> bool",
      "gt": "fn(n: number, string: ?, Decimal: ?, base?: number) -> bool",
      "greaterThanOrEqualTo": "fn(n: number, string: ?, Decimal: ?, base?: number) -> bool",
      "gte": "fn(n: number, string: ?, Decimal: ?, base?: number) -> bool",
      "isFinite": "fn() -> bool",
      "isInteger": "fn() -> bool",
      "isInt": "fn() -> bool",
      "isNaN": "fn() -> bool",
      "isNegative": "fn() -> bool",
      "isNeg": "fn() -> bool",
      "isZero": "fn() -> bool",
      "lessThan": "fn(n: number, string: ?, Decimal: ?, base?: number) -> bool",
      "lt": "fn(n: number, string: ?, Decimal: ?, base?: number) -> bool",
      "lessThanOrEqualTo": "fn(n: number, string: ?, Decimal: ?, base?: number) -> bool",
      "lte": "fn(n: number, string: ?, Decimal: ?, base?: number) -> bool",
      "logarithm": "fn(n?: number, string: ?, Decimal: ?, base?: number) -> Decimal",
      "log": "fn(n?: number, string: ?, Decimal: ?, base?: number) -> Decimal",
      "minus": "fn(n: number, string: ?, Decimal: ?, base?: number) -> Decimal",
      "modulo": "fn(n: number, string: ?, Decimal: ?, base?: number) -> Decimal",
      "mod": "fn(n: number, string: ?, Decimal: ?, base?: number) -> Decimal",
      "naturalLogarithm": "fn() -> Decimal",
      "ln": "fn() -> Decimal",
      "negated": "fn() -> Decimal",
      "neg": "fn() -> Decimal",
      "plus": "fn(n: number, string: ?, Decimal: ?, base?: number) -> Decimal",
      "precision": "fn(include_leading_zeros?: bool, number: ?) -> number",
      "sd": "fn(include_leading_zeros?: bool, number: ?) -> number",
      "round": "fn() -> Decimal",
      "squareRoot": "fn() -> Decimal",
      "sqrt": "fn() -> Decimal",
      "times": "fn(n: number, string: ?, Decimal: ?, base?: number) -> Decimal",
      "toDecimalPlaces": "fn(dp?: number, rm?: RoundingMode) -> Decimal",
      "toDP": "fn(dp?: number, rm?: RoundingMode) -> Decimal",
      "toExponential": "fn(dp?: number, rm?: RoundingMode) -> string",
      "toFixed": "fn(dp?: number, rm?: RoundingMode) -> string",
      "toFormat": "fn(dp?: number, rm?: RoundingMode) -> string",
      "toFraction": "fn(max_denominator?: number, string: ?, Decimal: ?) -> [string]",
      "toJSON": "fn() -> string",
      "toNearest": "fn(n: number, string: ?, Decimal: ?, rm?: RoundingMode) -> Decimal",
      "toNumber": "fn() -> number",
      "toPower": "fn(n: number, string: ?, Decimal: ?, base?: number) -> Decimal",
      "pow": "fn(n: number, string: ?, Decimal: ?, base?: number) -> Decimal",
      "toPrecision": "fn(sd?: number, rm?: RoundingMode) -> string",
      "toSignificantDigits": "fn(sd?: number, rm?: RoundingMode) -> Decimal",
      "toSD": "fn(sd?: number, rm?: RoundingMode) -> Decimal",
      "truncated": "fn() -> Decimal",
      "trunc": "fn() -> Decimal",
      "c": "[number]",
      "e": "number",
      "s": "number"
    }
  },
  "!name": "decimal.js.d.ts"
}
