{
  "jsbn": {
    "RandomGenerator": {
      "nextBytes": "fn(bytes: [number])"
    },
    "BigInteger": {
      "!type": "fn(a: number, c: RandomGenerator)",
      "ZERO": "BigInteger",
      "ONE": "BigInteger",
      "prototype": {
        "s": "number",
        "t": "number",
        "data": "[number]",
        "DB": "number",
        "DM": "number",
        "DV": "number",
        "FV": "number",
        "F1": "number",
        "F2": "number",
        "am": "fn(i: number, x: number, w: BigInteger, j: number, c: number, n: number) -> number",
        "copyTo": "fn(r: BigInteger)",
        "fromInt": "fn(x: number)",
        "fromString": "fn(x: string, b: number)",
        "clamp": "fn()",
        "negate": "fn() -> BigInteger",
        "abs": "fn() -> BigInteger",
        "compareTo": "fn(a: BigInteger) -> number",
        "bitLength": "fn() -> number",
        "dlShiftTo": "fn(n: number, r: BigInteger)",
        "drShiftTo": "fn(n: number, r: BigInteger)",
        "lShiftTo": "fn(n: number, r: BigInteger)",
        "rShiftTo": "fn(n: number, r: BigInteger)",
        "subTo": "fn(a: BigInteger, r: BigInteger)",
        "multiplyTo": "fn(a: BigInteger, r: BigInteger)",
        "squareTo": "fn(r: BigInteger)",
        "divRemTo": "fn(m: BigInteger, q: BigInteger, r: BigInteger)",
        "mod": "fn(a: BigInteger) -> BigInteger",
        "invDigit": "fn() -> number",
        "isEven": "fn() -> bool",
        "exp": "fn(e: number, z: Reduction) -> BigInteger",
        "modPowInt": "fn(e: number, m: BigInteger) -> BigInteger",
        "clone": "fn() -> BigInteger",
        "intValue": "fn() -> number",
        "byteValue": "fn() -> number",
        "shortValue": "fn() -> number",
        "chunkSize": "fn(r: number) -> number",
        "signum": "fn() -> number",
        "toRadix": "fn(b: number) -> string",
        "fromRadix": "fn(s: string, b: number)",
        "fromNumber": "fn(a: number, b?: number, c?: number)",
        "toByteArray": "fn() -> [number]",
        "equals": "fn(a: BigInteger) -> bool",
        "min": "fn(a: BigInteger) -> BigInteger",
        "max": "fn(a: BigInteger) -> BigInteger",
        "bitwiseTo": "fn(a: BigInteger, op: fn(x: number, y: number), r: BigInteger)",
        "and": "fn(a: BigInteger) -> BigInteger",
        "or": "fn(a: BigInteger) -> BigInteger",
        "xor": "fn(a: BigInteger) -> BigInteger",
        "andNot": "fn(a: BigInteger) -> BigInteger",
        "not": "fn() -> BigInteger",
        "shiftLeft": "fn(n: number) -> BigInteger",
        "shiftRight": "fn(n: number) -> BigInteger",
        "getLowestSetBit": "fn() -> number",
        "bitCount": "fn() -> number",
        "testBit": "fn(n: number) -> bool",
        "changeBit": "fn(n: number, op: fn(x: number, y: number)) -> BigInteger",
        "setBit": "fn(n: number) -> BigInteger",
        "clearBit": "fn(n: number) -> BigInteger",
        "flipBit": "fn(n: number) -> BigInteger",
        "addTo": "fn(a: BigInteger, r: BigInteger)",
        "add": "fn(a: BigInteger) -> BigInteger",
        "subtract": "fn(a: BigInteger) -> BigInteger",
        "multiply": "fn(a: BigInteger) -> BigInteger",
        "square": "fn() -> BigInteger",
        "divide": "fn(a: BigInteger) -> BigInteger",
        "remainder": "fn(a: BigInteger) -> BigInteger",
        "divideAndRemainder": "fn(a: BigInteger) -> [BigInteger]",
        "dMultiply": "fn(n: number)",
        "dAddOffset": "fn(n: number, w: number)",
        "pow": "fn(e: number) -> BigInteger",
        "multiplyLowerTo": "fn(a: BigInteger, n: number, r: BigInteger)",
        "multiplyUpperTo": "fn(a: BigInteger, n: number, r: BigInteger)",
        "modPow": "fn(e: BigInteger, m: BigInteger) -> BigInteger",
        "gcd": "fn(a: BigInteger) -> BigInteger",
        "modInt": "fn(n: number) -> number",
        "modInverse": "fn(m: BigInteger) -> BigInteger",
        "isProbablePrime": "fn(t: number) -> bool",
        "millerRabin": "fn(t: number) -> bool"
      }
    },
    "Reduction": {
      "convert": "fn(x: BigInteger) -> BigInteger",
      "revert": "fn(x: BigInteger) -> BigInteger",
      "reduce": "fn(x: BigInteger)",
      "mulTo": "fn(x: BigInteger, y: BigInteger, r: BigInteger)",
      "sqrTo": "fn(x: BigInteger, r: BigInteger)"
    }
  },
  "!name": "jsbn"
}
