{
  "ByteBuffer": {
    "!type": "fn(capacity?: number, littleEndian?: bool, noAssert?: bool)",
    "BIG_ENDIAN": "bool",
    "DEFAULT_CAPACITY": "number",
    "DEFAULT_NOASSERT": "bool",
    "LITTLE_ENDIAN": "bool",
    "MAX_VARINT32_BYTES": "number",
    "MAX_VARINT64_BYTES": "number",
    "METRICS_BYTES": "number",
    "METRICS_CHARS": "number",
    "VERSION": "string",
    "allocate": "fn(capacity?: number, littleEndian?: number, noAssert?: bool) -> ByteBuffer",
    "atob": "fn(b64: string) -> string",
    "btoa": "fn(str: string) -> string",
    "calculateUTF8Byte": "fn(str: string) -> number",
    "calculateUTF8Char": "fn(str: string) -> number",
    "calculateVariant32": "fn(value: number) -> number",
    "calculateVariant64": "fn(value: number, Long: ?) -> number",
    "concat": "fn(buffers: ?, ArrayBuffer: ?, Uint8Array: ?, string: ?, encoding?: string, boolean: ?, litteEndian?: bool, noAssert?: bool) -> ByteBuffer",
    "fromBase64": "fn(str: string, littleEndian?: bool, noAssert?: bool) -> ByteBuffer",
    "fromBinary": "fn(str: string, littleEndian?: bool, noAssert?: bool) -> ByteBuffer",
    "fromDebug": "fn(str: string, littleEndian?: bool, noAssert?: bool) -> ByteBuffer",
    "fromHex": "fn(str: string, littleEndian?: bool, noAssert?: bool) -> ByteBuffer",
    "fromUTF8": "fn(str: string, littleEndian?: bool, noAssert?: bool) -> ByteBuffer",
    "isByteBuffer": "fn(bb: ?) -> bool",
    "wrap": "fn(buffer: ByteBuffer, ArrayBuffer: ?, Uint8Array: ?, string: ?, enc?: string, boolean: ?, littleEndian?: bool, noAssert?: bool) -> ByteBuffer",
    "zigZagDecode32": "fn(n: number) -> number",
    "zigZagDecode64": "fn(n: number, Long: ?) -> Long",
    "zigZagEncode32": "fn(n: number) -> number",
    "zigZagEncode64": "fn(n: number, Long: ?) -> Long",
    "prototype": {
      "buffer": "ArrayBuffer",
      "limit": "number",
      "littleEndian": "bool",
      "markedOffset": "number",
      "noAssert": "bool",
      "offset": "number",
      "view": "DataView",
      "BE": "fn(bigEndian?: bool) -> ByteBuffer",
      "LE": "fn(bigEndian?: bool) -> ByteBuffer",
      "append": "fn(source: ByteBuffer, ArrayBuffer: ?, Uint8Array: ?, string: ?, encoding?: string, number: ?, offset?: number) -> ByteBuffer",
      "appendTo": "fn(target: ByteBuffer, offset?: number) -> ByteBuffer",
      "assert": "fn(assert: bool) -> ByteBuffer",
      "capacity": "fn() -> number",
      "clear": "fn() -> ByteBuffer",
      "clone": "fn(copy?: bool) -> ByteBuffer",
      "compact": "fn(begin?: number, end?: number) -> ByteBuffer",
      "copy": "fn(begin?: number, end?: number) -> ByteBuffer",
      "copyTo": "fn(target: ByteBuffer, targetOffset?: number, sourceOffset?: number, sourceLimit?: number) -> ByteBuffer",
      "ensureCapacity": "fn(capacity: number) -> ByteBuffer",
      "fill": "fn(value: number, string: ?, begin?: number, end?: number) -> ByteBuffer",
      "flip": "fn() -> ByteBuffer",
      "mark": "fn(offset?: number) -> ByteBuffer",
      "order": "fn(littleEndian: bool) -> ByteBuffer",
      "prepend": "fn(source: ByteBuffer, string: ?, ArrayBuffer: ?, encoding?: string, number: ?, offset?: number) -> ByteBuffer",
      "prependTo": "fn(target: ByteBuffer, offset?: number) -> ByteBuffer",
      "printDebug": "fn(out?: fn(text: string))",
      "readByte": "fn(offset?: number) -> number",
      "readCString": "fn(offset?: number) -> string",
      "readDouble": "fn(offset?: number) -> number",
      "readFloat": "fn(offset?: number) -> number",
      "readFloat32": "fn(offset?: number) -> number",
      "readFloat64": "fn(offset?: number) -> number",
      "readIString": "fn(offset?: number) -> string",
      "readInt": "fn(offset?: number) -> number",
      "readInt16": "fn(offset?: number) -> number",
      "readInt32": "fn(offset?: number) -> number",
      "readInt64": "fn(offset?: number) -> Long",
      "readInt8": "fn(offset?: number) -> number",
      "readLong": "fn(offset?: number) -> Long",
      "readShort": "fn(offset?: number) -> number",
      "readString": "fn(length: number, metrics?: number, offset?: number) -> string",
      "readUTF8String": "fn(chars: number, offset?: number) -> string",
      "readUint16": "fn(offset?: number) -> number",
      "readUint32": "fn(offset?: number) -> number",
      "readUint64": "fn(offset?: number) -> Long",
      "readUint8": "fn(offset?: number) -> number",
      "readVString": "fn(offset?: number) -> string",
      "readVarint32": "fn(offset?: number) -> number",
      "readVarint32ZiZag": "fn(offset?: number) -> number",
      "readVarint64": "fn(offset?: number) -> Long",
      "readVarint64ZigZag": "fn(offset?: number) -> Long",
      "remaining": "fn() -> number",
      "reset": "fn() -> ByteBuffer",
      "resize": "fn(capacity: number) -> ByteBuffer",
      "reverse": "fn(begin?: number, end?: number) -> ByteBuffer",
      "skip": "fn(length: number) -> ByteBuffer",
      "slice": "fn(begin?: number, end?: number) -> ByteBuffer",
      "toArrayBuffer": "fn(forceCopy?: bool) -> ArrayBuffer",
      "toBase64": "fn(begin?: number, end?: number) -> string",
      "toBinary": "fn(begin?: number, end?: number) -> string",
      "toBuffer": "fn(forceCopy?: bool) -> ArrayBuffer",
      "toDebug": "fn(columns?: bool) -> string",
      "Array": "fn()",
      "toHex": "fn(begin?: number, end?: number) -> string",
      "toUTF8": "fn() -> string",
      "writeByte": "fn(value: number, offset?: number) -> ByteBuffer",
      "writeCString": "fn(str: string, offset?: number) -> ByteBuffer",
      "writeDouble": "fn(value: number, offset?: number) -> ByteBuffer",
      "writeFloat": "fn(value: number, offset?: number) -> ByteBuffer",
      "writeFloat32": "fn(value: number, offset?: number) -> ByteBuffer",
      "writeFloat64": "fn(value: number, offset?: number) -> ByteBuffer",
      "writeIString": "fn(str: string, offset?: number) -> ByteBuffer",
      "writeInt": "fn(value: number, offset?: number) -> ByteBuffer",
      "writeInt16": "fn(value: number, offset?: number) -> ByteBuffer",
      "writeInt32": "fn(value: number, offset?: number) -> ByteBuffer",
      "writeInt64": "fn(value: number, Long: ?, offset?: number) -> ByteBuffer",
      "writeInt8": "fn(value: number, offset?: number) -> ByteBuffer",
      "writeShort": "fn(value: number, offset?: number) -> ByteBuffer",
      "WriteString": "fn(str: string, offset?: number) -> ByteBuffer",
      "number": "?",
      "writeUTF8String": "fn(str: string, offset?: number) -> ByteBuffer",
      "writeUint16": "fn(value: number, offset?: number) -> ByteBuffer",
      "writeUint32": "fn(value: number, offset?: number) -> ByteBuffer",
      "writeUint64": "fn(value: number, Long: ?, offset?: number) -> ByteBuffer",
      "writeUint8": "fn(value: number, offset?: number) -> ByteBuffer",
      "writeVString": "fn(str: string, offset?: number) -> ByteBuffer",
      "writeVarint32": "fn(value: number, offset?: number) -> ByteBuffer",
      "writeVarint32ZigZag": "fn(value: number, offset?: number) -> ByteBuffer",
      "writeVarint64": "fn(value: number, Long: ?, offset?: number) -> ByteBuffer",
      "writeVarint64ZigZag": "fn(value: number, Long: ?, offset?: number) -> ByteBuffer"
    }
  },
  "'bytebuffer'": "ByteBuffer",
  "!name": "bytebuffer"
}
