{
  "_": {
    "ThrottleSettings": {
      "leading": "bool",
      "trailing": "bool"
    },
    "TemplateSettings": {
      "evaluate": "RegExp",
      "interpolate": "RegExp",
      "escape": "RegExp"
    },
    "Collection": {},
    "List": {
      "length": "number"
    },
    "Dictionary": {},
    "ListIterator": {},
    "ObjectIterator": {},
    "MemoIterator": {},
    "MemoObjectIterator": {}
  },
  "UnderscoreStatic": {
    "each": "fn(list: ?, iterator: ?, context?: ?) -> ?",
    "forEach": "fn(list: ?, iterator: ?, context?: ?) -> ?",
    "map": "fn(list: ?, iterator: ?, context?: ?) -> [TResult]",
    "collect": "fn(list: ?, iterator: ?, context?: ?) -> [TResult]",
    "reduce": "fn(list: ?, iterator: ?, memo?: TResult, context?: ?) -> TResult",
    "inject": "fn(list: ?, iterator: ?, memo?: TResult, context?: ?) -> TResult",
    "foldl": "fn(list: ?, iterator: ?, memo?: TResult, context?: ?) -> TResult",
    "reduceRight": "fn(list: ?, iterator: ?, memo?: TResult, context?: ?) -> TResult",
    "foldr": "fn(list: ?, iterator: ?, memo?: TResult, context?: ?) -> TResult",
    "find": "fn(list: ?, iterator: ?, context?: ?) -> T",
    "detect": "fn(list: ?, iterator: ?, context?: ?) -> T",
    "findIndex": "fn(list: ?, iterator: ?, context?: ?) -> number",
    "filter": "fn(list: ?, iterator: ?, context?: ?) -> [T]",
    "select": "fn(list: ?, iterator: ?, context?: ?) -> [T]",
    "where": "fn(list: ?, properties: U) -> [T]",
    "findWhere": "fn(list: ?, properties: U) -> T",
    "reject": "fn(list: ?, iterator: ?, context?: ?) -> [T]",
    "every": "fn(list: ?, iterator?: ?, context?: ?) -> bool",
    "all": "fn(list: ?, iterator?: ?, context?: ?) -> bool",
    "some": "fn(list: ?, iterator?: ?, context?: ?) -> bool",
    "any": "fn(list: ?, iterator?: ?, context?: ?) -> bool",
    "contains": "fn(list: ?, value: T) -> bool",
    "include": "fn(list: ?, value: T) -> bool",
    "invoke": "fn(list: ?, methodName: string, arguments: [?]) -> ?",
    "pluck": "fn(list: ?, propertyName: string) -> [?]",
    "max": "fn(list: ?) -> number",
    "min": "fn(list: ?) -> number",
    "sortBy": "fn(list: ?, iterator?: ?, context?: ?) -> [T]",
    "groupBy": "fn(list: ?, iterator?: ?, context?: ?) -> ?",
    "indexBy": "fn(list: ?, iterator: ?, context?: ?) -> ?",
    "countBy": "fn(list: ?, iterator?: ?, context?: ?) -> ?",
    "shuffle": "fn(list: ?) -> [T]",
    "sample": "fn(list: ?, n: number) -> [T]",
    "toArray": "fn(list: ?) -> [T]",
    "size": "fn(list: ?) -> number",
    "partition": "fn(array: ?, iterator: ?, context?: ?) -> [[T]]",
    "first": "fn(array: ?) -> T",
    "head": "fn(array: ?) -> T",
    "take": "fn(array: ?) -> T",
    "initial": "fn(array: ?, n?: number) -> [T]",
    "last": "fn(array: ?) -> T",
    "rest": "fn(array: ?, n?: number) -> [T]",
    "tail": "fn(array: ?, n?: number) -> [T]",
    "drop": "fn(array: ?, n?: number) -> [T]",
    "compact": "fn(array: ?) -> [T]",
    "flatten": "fn(array: ?, shallow?: bool) -> [?]",
    "without": "fn(array: ?, values: [T]) -> [T]",
    "union": "fn(arrays: [?]) -> [T]",
    "intersection": "fn(arrays: [?]) -> [T]",
    "difference": "fn(array: ?, others: [?]) -> [T]",
    "uniq": "fn(array: ?, isSorted?: bool, iterator?: ?, context?: ?) -> [T]",
    "unique": "fn(array: ?, iterator?: ?, context?: ?) -> [T]",
    "zip": "fn(arrays: [[?]]) -> [[?]]",
    "object": "fn(keys: ?, values: ?) -> TResult",
    "indexOf": "fn(array: ?, value: T, isSorted?: bool) -> number",
    "lastIndexOf": "fn(array: ?, value: T, from?: number) -> number",
    "sortedIndex": "fn(list: ?, value: T, iterator?: fn(x: T), context?: ?) -> number",
    "range": "fn(start: number, stop: number, step?: number) -> [number]",
    "bind": "fn(func: Function, context: ?, arguments: [?]) -> fn()",
    "bindAll": "fn(object: ?, methodNames: [string]) -> ?",
    "partial": "fn(fn: Function, arguments: [?]) -> Function",
    "memoize": "fn(fn: Function, hashFn?: fn(args: [?])) -> Function",
    "delay": "fn(func: Function, wait: number, arguments: [?]) -> ?",
    "defer": "fn(fn: Function, arguments: [?])",
    "throttle": "fn(func: T, wait: number, options?: _.ThrottleSettings) -> T",
    "debounce": "fn(fn: T, wait: number, immediate?: bool) -> T",
    "once": "fn(fn: T) -> T",
    "after": "fn(count: number, fn: Function) -> Function",
    "before": "fn(count: number, fn: Function) -> Function",
    "wrap": "fn(fn: Function, wrapper: fn(fn: Function, args: [?])) -> Function",
    "negate": "fn(predicate: Function) -> bool",
    "compose": "fn(functions: [Function]) -> Function",
    "keys": "fn(object: ?) -> [string]",
    "values": "fn(object: ?) -> [?]",
    "mapObject": "fn(object: ?, iteratee: fn(val: T, key: string, object: ?), context?: ?) -> ?",
    "pairs": "fn(object: ?) -> [[?]]",
    "invert": "fn(object: ?) -> ?",
    "functions": "fn(object: ?) -> [string]",
    "methods": "fn(object: ?) -> [string]",
    "extend": "fn(destination: ?, sources: [?]) -> ?",
    "extendOwn": "fn(destination: ?, source: [?]) -> ?",
    "assign": "fn(destination: ?, source: [?]) -> ?",
    "pick": "fn(object: ?, keys: [?]) -> ?",
    "omit": "fn(object: ?, keys: [string]) -> ?",
    "defaults": "fn(object: ?, defaults: [?]) -> ?",
    "clone": "fn(object: T) -> T",
    "tap": "fn(object: T, intercepter: Function) -> T",
    "has": "fn(object: ?, key: string) -> bool",
    "matches": "fn(attrs: T) -> ?",
    "property": "fn(key: string) -> fn(object: Object)",
    "isEqual": "fn(object: ?, other: ?) -> bool",
    "isEmpty": "fn(object: ?) -> bool",
    "isElement": "fn(object: ?) -> bool",
    "isArray": "fn(object: ?) -> bool",
    "isObject": "fn(object: ?) -> bool",
    "isArguments": "fn(object: ?) -> bool",
    "isFunction": "fn(object: ?) -> bool",
    "isString": "fn(object: ?) -> bool",
    "isNumber": "fn(object: ?) -> bool",
    "isFinite": "fn(object: ?) -> bool",
    "isBoolean": "fn(object: ?) -> bool",
    "isDate": "fn(object: ?) -> bool",
    "isRegExp": "fn(object: ?) -> bool",
    "isNaN": "fn(object: ?) -> bool",
    "isNull": "fn(object: ?) -> bool",
    "isUndefined": "fn(value: ?) -> bool",
    "noConflict": "fn() -> ?",
    "identity": "fn(value: T) -> T",
    "constant": "fn(value: T) -> fn()",
    "noop": "fn()",
    "times": "fn(n: number, iterator: fn(n: number), context?: ?) -> [TResult]",
    "random": "fn(max: number) -> number",
    "mixin": "fn(object: ?)",
    "iteratee": "fn(value: string) -> Function",
    "uniqueId": "fn(prefix: string) -> string",
    "escape": "fn(str: string) -> string",
    "unescape": "fn(str: string) -> string",
    "result": "fn(object: ?, property: string) -> ?",
    "template": "fn(templateString: string, settings?: _.TemplateSettings) -> fn(data: [?])",
    "templateSettings": "_.TemplateSettings",
    "now": "fn() -> number",
    "chain": "fn(obj: [T]) -> ?"
  },
  "Underscore": {
    "each": "fn(iterator: ?, context?: ?) -> [T]",
    "forEach": "fn(iterator: ?, context?: ?) -> [T]",
    "map": "fn(iterator: ?, context?: ?) -> [TResult]",
    "collect": "fn(iterator: ?, context?: ?) -> [TResult]",
    "reduce": "fn(iterator: ?, memo?: TResult, context?: ?) -> TResult",
    "inject": "fn(iterator: ?, memo?: TResult, context?: ?) -> TResult",
    "foldl": "fn(iterator: ?, memo?: TResult, context?: ?) -> TResult",
    "reduceRight": "fn(iterator: ?, memo?: TResult, context?: ?) -> TResult",
    "foldr": "fn(iterator: ?, memo?: TResult, context?: ?) -> TResult",
    "find": "fn(iterator: ?, _: ?, ObjectIterator: ?, boolean: ?, context?: ?) -> T",
    "detect": "fn(iterator: ?, _: ?, ObjectIterator: ?, boolean: ?, context?: ?) -> T",
    "filter": "fn(iterator: ?, context?: ?) -> [T]",
    "select": "fn(iterator: ?, context?: ?) -> [T]",
    "where": "fn(properties: U) -> [T]",
    "findWhere": "fn(properties: U) -> T",
    "reject": "fn(iterator: ?, context?: ?) -> [T]",
    "all": "fn(iterator?: ?, context?: ?) -> bool",
    "every": "fn(iterator?: ?, context?: ?) -> bool",
    "any": "fn(iterator?: ?, context?: ?) -> bool",
    "some": "fn(iterator?: ?, context?: ?) -> bool",
    "contains": "fn(value: T) -> bool",
    "include": "fn(value: T) -> bool",
    "invoke": "fn(methodName: string, arguments: [?]) -> ?",
    "pluck": "fn(propertyName: string) -> [?]",
    "max": "fn() -> number",
    "min": "fn() -> number",
    "sortBy": "fn(iterator?: ?, context?: ?) -> [T]",
    "groupBy": "fn(iterator?: ?, context?: ?) -> ?",
    "indexBy": "fn(iterator: ?, context?: ?) -> ?",
    "countBy": "fn(iterator?: ?, context?: ?) -> ?",
    "shuffle": "fn() -> [T]",
    "sample": "fn(n: number) -> [T]",
    "toArray": "fn() -> [T]",
    "size": "fn() -> number",
    "first": "fn() -> T",
    "head": "fn() -> T",
    "take": "fn() -> T",
    "initial": "fn(n?: number) -> [T]",
    "last": "fn() -> T",
    "rest": "fn(n?: number) -> [T]",
    "tail": "fn(n?: number) -> [T]",
    "drop": "fn(n?: number) -> [T]",
    "compact": "fn() -> [T]",
    "flatten": "fn(shallow?: bool) -> [?]",
    "without": "fn(values: [T]) -> [T]",
    "partition": "fn(iterator: ?, context?: ?) -> [[T]]",
    "union": "fn(arrays: [?]) -> [T]",
    "intersection": "fn(arrays: [?]) -> [T]",
    "difference": "fn(others: [?]) -> [T]",
    "uniq": "fn(isSorted?: bool, iterator?: ?) -> [T]",
    "unique": "fn(isSorted?: bool, iterator?: ?) -> [T]",
    "zip": "fn(arrays: [[?]]) -> [[?]]",
    "object": "fn(keyValuePairs: [[?]]) -> ?",
    "indexOf": "fn(value: T, isSorted?: bool) -> number",
    "lastIndexOf": "fn(value: T, from?: number) -> number",
    "sortedIndex": "fn(value: T, iterator?: fn(x: T), context?: ?) -> number",
    "range": "fn(stop: number, step?: number) -> [number]",
    "bind": "fn(object: ?, arguments: [?]) -> Function",
    "bindAll": "fn(methodNames: [string]) -> ?",
    "partial": "fn(arguments: [?]) -> Function",
    "memoize": "fn(hashFn?: fn(n: ?)) -> Function",
    "defer": "fn(arguments: [?])",
    "delay": "fn(wait: number, arguments: [?]) -> ?",
    "throttle": "fn(wait: number, options?: _.ThrottleSettings) -> Function",
    "debounce": "fn(wait: number, immediate?: bool) -> Function",
    "once": "fn() -> Function",
    "after": "fn(fn: Function) -> Function",
    "before": "fn(fn: Function) -> Function",
    "wrap": "fn(wrapper: Function) -> fn()",
    "negate": "fn() -> bool",
    "compose": "fn(functions: [Function]) -> Function",
    "keys": "fn() -> [string]",
    "values": "fn() -> [T]",
    "pairs": "fn() -> [[?]]",
    "invert": "fn() -> ?",
    "functions": "fn() -> [string]",
    "methods": "fn() -> [string]",
    "extend": "fn(sources: [?]) -> ?",
    "pick": "fn(keys: [?]) -> ?",
    "omit": "fn(keys: [string]) -> ?",
    "defaults": "fn(defaults: [?]) -> ?",
    "clone": "fn() -> T",
    "tap": "fn(interceptor: fn(as: [?])) -> ?",
    "has": "fn(key: string) -> bool",
    "matches": "fn() -> ?",
    "property": "fn() -> fn(object: Object)",
    "isEqual": "fn(other: ?) -> bool",
    "isEmpty": "fn() -> bool",
    "isElement": "fn() -> bool",
    "isArray": "fn() -> bool",
    "isObject": "fn() -> bool",
    "isArguments": "fn() -> bool",
    "isFunction": "fn() -> bool",
    "isString": "fn() -> bool",
    "isNumber": "fn() -> bool",
    "isFinite": "fn() -> bool",
    "isBoolean": "fn() -> bool",
    "isDate": "fn() -> bool",
    "isRegExp": "fn() -> bool",
    "isNaN": "fn() -> bool",
    "isNull": "fn() -> bool",
    "isUndefined": "fn() -> bool",
    "identity": "fn() -> ?",
    "constant": "fn() -> fn()",
    "noop": "fn()",
    "times": "fn(iterator: fn(n: number), context?: ?) -> [TResult]",
    "random": "fn() -> number",
    "mixin": "fn()",
    "iteratee": "fn(context?: ?, argCount?: number) -> Function",
    "uniqueId": "fn() -> string",
    "escape": "fn() -> string",
    "unescape": "fn() -> string",
    "result": "fn(property: string) -> ?",
    "template": "fn(settings?: _.TemplateSettings) -> fn(data: [?])",
    "chain": "fn() -> ?",
    "value": "fn() -> TResult"
  },
  "_Chain": {
    "each": "fn(iterator: ?, context?: ?) -> ?",
    "forEach": "fn(iterator: ?, context?: ?) -> ?",
    "map": "fn(iterator: ?, context?: ?) -> ?",
    "collect": "fn(iterator: ?, context?: ?) -> ?",
    "reduce": "fn(iterator: ?, memo?: TResult, context?: ?) -> ?",
    "inject": "fn(iterator: ?, memo?: TResult, context?: ?) -> ?",
    "foldl": "fn(iterator: ?, memo?: TResult, context?: ?) -> ?",
    "reduceRight": "fn(iterator: ?, memo?: TResult, context?: ?) -> ?",
    "foldr": "fn(iterator: ?, memo?: TResult, context?: ?) -> ?",
    "find": "fn(iterator: ?, _: ?, ObjectIterator: ?, boolean: ?, context?: ?) -> ?",
    "detect": "fn(iterator: ?, _: ?, ObjectIterator: ?, boolean: ?, context?: ?) -> ?",
    "filter": "fn(iterator: ?, context?: ?) -> ?",
    "select": "fn(iterator: ?, context?: ?) -> ?",
    "where": "fn(properties: U) -> ?",
    "findWhere": "fn(properties: U) -> ?",
    "reject": "fn(iterator: ?, context?: ?) -> ?",
    "all": "fn(iterator?: ?, context?: ?) -> ?",
    "every": "fn(iterator?: ?, context?: ?) -> ?",
    "any": "fn(iterator?: ?, context?: ?) -> ?",
    "some": "fn(iterator?: ?, context?: ?) -> ?",
    "contains": "fn(value: T) -> ?",
    "include": "fn(value: T) -> ?",
    "invoke": "fn(methodName: string, arguments: [?]) -> ?",
    "pluck": "fn(propertyName: string) -> ?",
    "max": "fn() -> ?",
    "min": "fn() -> ?",
    "sortBy": "fn(iterator?: ?, context?: ?) -> ?",
    "groupBy": "fn(iterator?: ?, context?: ?) -> ?",
    "indexBy": "fn(iterator: ?, context?: ?) -> ?",
    "countBy": "fn(iterator?: ?, context?: ?) -> ?",
    "shuffle": "fn() -> ?",
    "sample": "fn(n: number) -> ?",
    "toArray": "fn() -> ?",
    "size": "fn() -> ?",
    "first": "fn() -> ?",
    "head": "fn() -> ?",
    "take": "fn() -> ?",
    "initial": "fn(n?: number) -> ?",
    "last": "fn() -> ?",
    "rest": "fn(n?: number) -> ?",
    "tail": "fn(n?: number) -> ?",
    "drop": "fn(n?: number) -> ?",
    "compact": "fn() -> ?",
    "flatten": "fn(shallow?: bool) -> ?",
    "without": "fn(values: [T]) -> ?",
    "partition": "fn(iterator: ?, context?: ?) -> ?",
    "union": "fn(arrays: [?]) -> ?",
    "intersection": "fn(arrays: [?]) -> ?",
    "difference": "fn(others: [?]) -> ?",
    "uniq": "fn(isSorted?: bool, iterator?: ?) -> ?",
    "unique": "fn(isSorted?: bool, iterator?: ?) -> ?",
    "zip": "fn(arrays: [[?]]) -> ?",
    "object": "fn(keyValuePairs: [[?]]) -> ?",
    "indexOf": "fn(value: T, isSorted?: bool) -> ?",
    "lastIndexOf": "fn(value: T, from?: number) -> ?",
    "sortedIndex": "fn(value: T, iterator?: fn(x: T), context?: ?) -> ?",
    "range": "fn(stop: number, step?: number) -> ?",
    "bind": "fn(object: ?, arguments: [?]) -> ?",
    "bindAll": "fn(methodNames: [string]) -> ?",
    "partial": "fn(arguments: [?]) -> ?",
    "memoize": "fn(hashFn?: fn(n: ?)) -> ?",
    "defer": "fn(arguments: [?]) -> ?",
    "delay": "fn(wait: number, arguments: [?]) -> ?",
    "throttle": "fn(wait: number, options?: _.ThrottleSettings) -> ?",
    "debounce": "fn(wait: number, immediate?: bool) -> ?",
    "once": "fn() -> ?",
    "after": "fn(func: Function) -> ?",
    "before": "fn(fn: Function) -> ?",
    "wrap": "fn(wrapper: Function) -> fn()",
    "negate": "fn() -> ?",
    "compose": "fn(functions: [Function]) -> ?",
    "keys": "fn() -> ?",
    "values": "fn() -> ?",
    "pairs": "fn() -> ?",
    "invert": "fn() -> ?",
    "functions": "fn() -> ?",
    "methods": "fn() -> ?",
    "extend": "fn(sources: [?]) -> ?",
    "pick": "fn(keys: [?]) -> ?",
    "omit": "fn(keys: [string]) -> ?",
    "defaults": "fn(defaults: [?]) -> ?",
    "clone": "fn() -> ?",
    "tap": "fn(interceptor: fn(as: [?])) -> ?",
    "has": "fn(key: string) -> ?",
    "matches": "fn() -> ?",
    "property": "fn() -> ?",
    "isEqual": "fn(other: ?) -> ?",
    "isEmpty": "fn() -> ?",
    "isElement": "fn() -> ?",
    "isArray": "fn() -> ?",
    "isObject": "fn() -> ?",
    "isArguments": "fn() -> ?",
    "isFunction": "fn() -> ?",
    "isString": "fn() -> ?",
    "isNumber": "fn() -> ?",
    "isFinite": "fn() -> ?",
    "isBoolean": "fn() -> ?",
    "isDate": "fn() -> ?",
    "isRegExp": "fn() -> ?",
    "isNaN": "fn() -> ?",
    "isNull": "fn() -> ?",
    "isUndefined": "fn() -> ?",
    "identity": "fn() -> ?",
    "constant": "fn() -> ?",
    "noop": "fn() -> ?",
    "times": "fn(iterator: fn(n: number), context?: ?) -> ?",
    "random": "fn() -> ?",
    "mixin": "fn() -> ?",
    "iteratee": "fn(context?: ?, argCount?: number) -> ?",
    "uniqueId": "fn() -> ?",
    "escape": "fn() -> ?",
    "unescape": "fn() -> ?",
    "result": "fn(property: string) -> ?",
    "template": "fn(settings?: _.TemplateSettings) -> fn(data: [?])",
    "concat": "fn(arr: ?) -> ?",
    "join": "fn(separator?: ?) -> ?",
    "pop": "fn() -> ?",
    "push": "fn(item: ?) -> ?",
    "reverse": "fn() -> ?",
    "shift": "fn() -> ?",
    "slice": "fn(start: number, end?: number) -> ?",
    "sort": "fn(compareFn: fn(a: T, b: T)) -> ?",
    "splice": "fn(index: number, quantity: number, items: ?) -> ?",
    "unshift": "fn(items: ?) -> ?",
    "chain": "fn() -> ?",
    "value": "fn() -> [T]"
  },
  "_ChainSingle": {
    "value": "fn() -> T"
  },
  "_ChainOfArrays": {
    "flatten": "fn() -> ?"
  },
  "underscore": "_",
  "!name": "underscore"
}
