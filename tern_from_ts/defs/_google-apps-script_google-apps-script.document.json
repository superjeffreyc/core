{
  "GoogleAppsScript": {
    "Document": {
      "Attribute": "number",
      "Body": {
        "appendHorizontalRule": "fn() -> HorizontalRule",
        "appendImage": "fn(image: Base.BlobSource) -> InlineImage",
        "appendListItem": "fn(listItem: ListItem) -> ListItem",
        "appendPageBreak": "fn() -> PageBreak",
        "appendParagraph": "fn(paragraph: Paragraph) -> Paragraph",
        "appendTable": "fn() -> Table",
        "clear": "fn() -> Body",
        "copy": "fn() -> Body",
        "editAsText": "fn() -> Text",
        "findElement": "fn(elementType: ElementType) -> RangeElement",
        "findText": "fn(searchPattern: string) -> RangeElement",
        "getAttributes": "fn() -> Object",
        "getChild": "fn(childIndex: Integer) -> Element",
        "getChildIndex": "fn(child: Element) -> Integer",
        "getImages": "fn() -> [InlineImage]",
        "getListItems": "fn() -> [ListItem]",
        "getMarginBottom": "fn() -> Number",
        "getMarginLeft": "fn() -> Number",
        "getMarginRight": "fn() -> Number",
        "getMarginTop": "fn() -> Number",
        "getNumChildren": "fn() -> Integer",
        "getPageHeight": "fn() -> Number",
        "getPageWidth": "fn() -> Number",
        "getParagraphs": "fn() -> [Paragraph]",
        "getParent": "fn() -> ContainerElement",
        "getTables": "fn() -> [Table]",
        "getText": "fn() -> string",
        "getTextAlignment": "fn() -> TextAlignment",
        "getType": "fn() -> ElementType",
        "insertHorizontalRule": "fn(childIndex: Integer) -> HorizontalRule",
        "insertImage": "fn(childIndex: Integer, image: Base.BlobSource) -> InlineImage",
        "insertListItem": "fn(childIndex: Integer, listItem: ListItem) -> ListItem",
        "insertPageBreak": "fn(childIndex: Integer) -> PageBreak",
        "insertParagraph": "fn(childIndex: Integer, paragraph: Paragraph) -> Paragraph",
        "insertTable": "fn(childIndex: Integer) -> Table",
        "removeChild": "fn(child: Element) -> Body",
        "replaceText": "fn(searchPattern: string, replacement: string) -> Element",
        "setAttributes": "fn(attributes: Object) -> Body",
        "setMarginBottom": "fn(marginBottom: Number) -> Body",
        "setMarginLeft": "fn(marginLeft: Number) -> Body",
        "setMarginRight": "fn(marginRight: Number) -> Body",
        "setMarginTop": "fn(marginTop: Number) -> Body",
        "setPageHeight": "fn(pageHeight: Number) -> Body",
        "setPageWidth": "fn(pageWidth: Number) -> Body",
        "setText": "fn(text: string) -> Body",
        "setTextAlignment": "fn(textAlignment: TextAlignment) -> Body",
        "getFootnotes": "fn() -> [Footnote]",
        "getLinkUrl": "fn() -> string",
        "getNextSibling": "fn() -> Element",
        "getPreviousSibling": "fn() -> Element",
        "isAtDocumentEnd": "fn() -> bool",
        "setLinkUrl": "fn(url: string) -> Body"
      },
      "Bookmark": {
        "getId": "fn() -> string",
        "getPosition": "fn() -> Position",
        "remove": "fn()"
      },
      "ContainerElement": {
        "asBody": "fn() -> Body",
        "asEquation": "fn() -> Equation",
        "asFooterSection": "fn() -> FooterSection",
        "asFootnoteSection": "fn() -> FootnoteSection",
        "asHeaderSection": "fn() -> HeaderSection",
        "asListItem": "fn() -> ListItem",
        "asParagraph": "fn() -> Paragraph",
        "asTable": "fn() -> Table",
        "asTableCell": "fn() -> TableCell",
        "asTableOfContents": "fn() -> TableOfContents",
        "asTableRow": "fn() -> TableRow",
        "clear": "fn() -> ContainerElement",
        "copy": "fn() -> ContainerElement",
        "editAsText": "fn() -> Text",
        "findElement": "fn(elementType: ElementType) -> RangeElement",
        "findText": "fn(searchPattern: string) -> RangeElement",
        "getAttributes": "fn() -> Object",
        "getChild": "fn(childIndex: Integer) -> Element",
        "getChildIndex": "fn(child: Element) -> Integer",
        "getLinkUrl": "fn() -> string",
        "getNextSibling": "fn() -> Element",
        "getNumChildren": "fn() -> Integer",
        "getParent": "fn() -> ContainerElement",
        "getPreviousSibling": "fn() -> Element",
        "getText": "fn() -> string",
        "getTextAlignment": "fn() -> TextAlignment",
        "getType": "fn() -> ElementType",
        "isAtDocumentEnd": "fn() -> bool",
        "merge": "fn() -> ContainerElement",
        "removeFromParent": "fn() -> ContainerElement",
        "replaceText": "fn(searchPattern: string, replacement: string) -> Element",
        "setAttributes": "fn(attributes: Object) -> ContainerElement",
        "setLinkUrl": "fn(url: string) -> ContainerElement",
        "setTextAlignment": "fn(textAlignment: TextAlignment) -> ContainerElement"
      },
      "Document": {
        "addBookmark": "fn(position: Position) -> Bookmark",
        "addEditor": "fn(emailAddress: string) -> Document",
        "addEditors": "fn(emailAddresses: [String]) -> Document",
        "addFooter": "fn() -> FooterSection",
        "addHeader": "fn() -> HeaderSection",
        "addNamedRange": "fn(name: string, range: Range) -> NamedRange",
        "addViewer": "fn(emailAddress: string) -> Document",
        "addViewers": "fn(emailAddresses: [String]) -> Document",
        "getAs": "fn(contentType: string) -> Base.Blob",
        "getBlob": "fn() -> Base.Blob",
        "getBody": "fn() -> Body",
        "getBookmark": "fn(id: string) -> Bookmark",
        "getBookmarks": "fn() -> [Bookmark]",
        "getCursor": "fn() -> Position",
        "getEditors": "fn() -> [Base.User]",
        "getFooter": "fn() -> FooterSection",
        "getFootnotes": "fn() -> [Footnote]",
        "getHeader": "fn() -> HeaderSection",
        "getId": "fn() -> string",
        "getName": "fn() -> string",
        "getNamedRangeById": "fn(id: string) -> NamedRange",
        "getNamedRanges": "fn() -> [NamedRange]",
        "getSelection": "fn() -> Range",
        "getUrl": "fn() -> string",
        "getViewers": "fn() -> [Base.User]",
        "newPosition": "fn(element: Element, offset: Integer) -> Position",
        "newRange": "fn() -> RangeBuilder",
        "removeEditor": "fn(emailAddress: string) -> Document",
        "removeViewer": "fn(emailAddress: string) -> Document",
        "saveAndClose": "fn()",
        "setCursor": "fn(position: Position) -> Document",
        "setName": "fn(name: string) -> Document",
        "setSelection": "fn(range: Range) -> Document"
      },
      "DocumentApp": {
        "Attribute": "Attribute",
        "ElementType": "ElementType",
        "FontFamily": "FontFamily",
        "GlyphType": "GlyphType",
        "HorizontalAlignment": "HorizontalAlignment",
        "ParagraphHeading": "ParagraphHeading",
        "TextAlignment": "TextAlignment",
        "VerticalAlignment": "VerticalAlignment",
        "create": "fn(name: string) -> Document",
        "getActiveDocument": "fn() -> Document",
        "getUi": "fn() -> Base.Ui",
        "openById": "fn(id: string) -> Document",
        "openByUrl": "fn(url: string) -> Document"
      },
      "Element": {
        "asBody": "fn() -> Body",
        "asEquation": "fn() -> Equation",
        "asEquationFunction": "fn() -> EquationFunction",
        "asEquationFunctionArgumentSeparator": "fn() -> EquationFunctionArgumentSeparator",
        "asEquationSymbol": "fn() -> EquationSymbol",
        "asFooterSection": "fn() -> FooterSection",
        "asFootnote": "fn() -> Footnote",
        "asFootnoteSection": "fn() -> FootnoteSection",
        "asHeaderSection": "fn() -> HeaderSection",
        "asHorizontalRule": "fn() -> HorizontalRule",
        "asInlineDrawing": "fn() -> InlineDrawing",
        "asInlineImage": "fn() -> InlineImage",
        "asListItem": "fn() -> ListItem",
        "asPageBreak": "fn() -> PageBreak",
        "asParagraph": "fn() -> Paragraph",
        "asTable": "fn() -> Table",
        "asTableCell": "fn() -> TableCell",
        "asTableOfContents": "fn() -> TableOfContents",
        "asTableRow": "fn() -> TableRow",
        "asText": "fn() -> Text",
        "copy": "fn() -> Element",
        "getAttributes": "fn() -> Object",
        "getNextSibling": "fn() -> Element",
        "getParent": "fn() -> ContainerElement",
        "getPreviousSibling": "fn() -> Element",
        "getType": "fn() -> ElementType",
        "isAtDocumentEnd": "fn() -> bool",
        "merge": "fn() -> Element",
        "removeFromParent": "fn() -> Element",
        "setAttributes": "fn(attributes: Object) -> Element"
      },
      "ElementType": "number",
      "Equation": {
        "clear": "fn() -> Equation",
        "copy": "fn() -> Equation",
        "editAsText": "fn() -> Text",
        "findElement": "fn(elementType: ElementType) -> RangeElement",
        "findText": "fn(searchPattern: string) -> RangeElement",
        "getAttributes": "fn() -> Object",
        "getChild": "fn(childIndex: Integer) -> Element",
        "getChildIndex": "fn(child: Element) -> Integer",
        "getLinkUrl": "fn() -> string",
        "getNextSibling": "fn() -> Element",
        "getNumChildren": "fn() -> Integer",
        "getParent": "fn() -> ContainerElement",
        "getPreviousSibling": "fn() -> Element",
        "getText": "fn() -> string",
        "getTextAlignment": "fn() -> TextAlignment",
        "getType": "fn() -> ElementType",
        "isAtDocumentEnd": "fn() -> bool",
        "merge": "fn() -> Equation",
        "removeFromParent": "fn() -> Equation",
        "replaceText": "fn(searchPattern: string, replacement: string) -> Element",
        "setAttributes": "fn(attributes: Object) -> Equation",
        "setLinkUrl": "fn(url: string) -> Equation",
        "setTextAlignment": "fn(textAlignment: TextAlignment) -> Equation"
      },
      "EquationFunction": {
        "clear": "fn() -> EquationFunction",
        "copy": "fn() -> EquationFunction",
        "editAsText": "fn() -> Text",
        "findElement": "fn(elementType: ElementType) -> RangeElement",
        "findText": "fn(searchPattern: string) -> RangeElement",
        "getAttributes": "fn() -> Object",
        "getChild": "fn(childIndex: Integer) -> Element",
        "getChildIndex": "fn(child: Element) -> Integer",
        "getCode": "fn() -> string",
        "getLinkUrl": "fn() -> string",
        "getNextSibling": "fn() -> Element",
        "getNumChildren": "fn() -> Integer",
        "getParent": "fn() -> ContainerElement",
        "getPreviousSibling": "fn() -> Element",
        "getText": "fn() -> string",
        "getTextAlignment": "fn() -> TextAlignment",
        "getType": "fn() -> ElementType",
        "isAtDocumentEnd": "fn() -> bool",
        "merge": "fn() -> EquationFunction",
        "removeFromParent": "fn() -> EquationFunction",
        "replaceText": "fn(searchPattern: string, replacement: string) -> Element",
        "setAttributes": "fn(attributes: Object) -> EquationFunction",
        "setLinkUrl": "fn(url: string) -> EquationFunction",
        "setTextAlignment": "fn(textAlignment: TextAlignment) -> EquationFunction"
      },
      "EquationFunctionArgumentSeparator": {
        "copy": "fn() -> EquationFunctionArgumentSeparator",
        "getAttributes": "fn() -> Object",
        "getNextSibling": "fn() -> Element",
        "getParent": "fn() -> ContainerElement",
        "getPreviousSibling": "fn() -> Element",
        "getType": "fn() -> ElementType",
        "isAtDocumentEnd": "fn() -> bool",
        "merge": "fn() -> EquationFunctionArgumentSeparator",
        "removeFromParent": "fn() -> EquationFunctionArgumentSeparator",
        "setAttributes": "fn(attributes: Object) -> EquationFunctionArgumentSeparator"
      },
      "EquationSymbol": {
        "copy": "fn() -> EquationSymbol",
        "getAttributes": "fn() -> Object",
        "getCode": "fn() -> string",
        "getNextSibling": "fn() -> Element",
        "getParent": "fn() -> ContainerElement",
        "getPreviousSibling": "fn() -> Element",
        "getType": "fn() -> ElementType",
        "isAtDocumentEnd": "fn() -> bool",
        "merge": "fn() -> EquationSymbol",
        "removeFromParent": "fn() -> EquationSymbol",
        "setAttributes": "fn(attributes: Object) -> EquationSymbol"
      },
      "FontFamily": "number",
      "FooterSection": {
        "appendHorizontalRule": "fn() -> HorizontalRule",
        "appendImage": "fn(image: Base.BlobSource) -> InlineImage",
        "appendListItem": "fn(listItem: ListItem) -> ListItem",
        "appendParagraph": "fn(paragraph: Paragraph) -> Paragraph",
        "appendTable": "fn() -> Table",
        "clear": "fn() -> FooterSection",
        "copy": "fn() -> FooterSection",
        "editAsText": "fn() -> Text",
        "findElement": "fn(elementType: ElementType) -> RangeElement",
        "findText": "fn(searchPattern: string) -> RangeElement",
        "getAttributes": "fn() -> Object",
        "getChild": "fn(childIndex: Integer) -> Element",
        "getChildIndex": "fn(child: Element) -> Integer",
        "getImages": "fn() -> [InlineImage]",
        "getListItems": "fn() -> [ListItem]",
        "getNumChildren": "fn() -> Integer",
        "getParagraphs": "fn() -> [Paragraph]",
        "getParent": "fn() -> ContainerElement",
        "getTables": "fn() -> [Table]",
        "getText": "fn() -> string",
        "getTextAlignment": "fn() -> TextAlignment",
        "getType": "fn() -> ElementType",
        "insertHorizontalRule": "fn(childIndex: Integer) -> HorizontalRule",
        "insertImage": "fn(childIndex: Integer, image: Base.BlobSource) -> InlineImage",
        "insertListItem": "fn(childIndex: Integer, listItem: ListItem) -> ListItem",
        "insertParagraph": "fn(childIndex: Integer, paragraph: Paragraph) -> Paragraph",
        "insertTable": "fn(childIndex: Integer) -> Table",
        "removeChild": "fn(child: Element) -> FooterSection",
        "removeFromParent": "fn() -> FooterSection",
        "replaceText": "fn(searchPattern: string, replacement: string) -> Element",
        "setAttributes": "fn(attributes: Object) -> FooterSection",
        "setText": "fn(text: string) -> FooterSection",
        "setTextAlignment": "fn(textAlignment: TextAlignment) -> FooterSection",
        "getFootnotes": "fn() -> [Footnote]",
        "getLinkUrl": "fn() -> string",
        "getNextSibling": "fn() -> Element",
        "getPreviousSibling": "fn() -> Element",
        "isAtDocumentEnd": "fn() -> bool",
        "setLinkUrl": "fn(url: string) -> FooterSection"
      },
      "Footnote": {
        "copy": "fn() -> Footnote",
        "getAttributes": "fn() -> Object",
        "getFootnoteContents": "fn() -> FootnoteSection",
        "getNextSibling": "fn() -> Element",
        "getParent": "fn() -> ContainerElement",
        "getPreviousSibling": "fn() -> Element",
        "getType": "fn() -> ElementType",
        "isAtDocumentEnd": "fn() -> bool",
        "removeFromParent": "fn() -> Footnote",
        "setAttributes": "fn(attributes: Object) -> Footnote"
      },
      "FootnoteSection": {
        "appendParagraph": "fn(paragraph: Paragraph) -> Paragraph",
        "clear": "fn() -> FootnoteSection",
        "copy": "fn() -> FootnoteSection",
        "editAsText": "fn() -> Text",
        "findElement": "fn(elementType: ElementType) -> RangeElement",
        "findText": "fn(searchPattern: string) -> RangeElement",
        "getAttributes": "fn() -> Object",
        "getChild": "fn(childIndex: Integer) -> Element",
        "getChildIndex": "fn(child: Element) -> Integer",
        "getNextSibling": "fn() -> Element",
        "getNumChildren": "fn() -> Integer",
        "getParagraphs": "fn() -> [Paragraph]",
        "getParent": "fn() -> ContainerElement",
        "getPreviousSibling": "fn() -> Element",
        "getText": "fn() -> string",
        "getTextAlignment": "fn() -> TextAlignment",
        "getType": "fn() -> ElementType",
        "insertParagraph": "fn(childIndex: Integer, paragraph: Paragraph) -> Paragraph",
        "removeChild": "fn(child: Element) -> FootnoteSection",
        "removeFromParent": "fn() -> FootnoteSection",
        "replaceText": "fn(searchPattern: string, replacement: string) -> Element",
        "setAttributes": "fn(attributes: Object) -> FootnoteSection",
        "setText": "fn(text: string) -> FootnoteSection",
        "setTextAlignment": "fn(textAlignment: TextAlignment) -> FootnoteSection",
        "getFootnotes": "fn() -> [Footnote]",
        "getLinkUrl": "fn() -> string",
        "isAtDocumentEnd": "fn() -> bool",
        "setLinkUrl": "fn(url: string) -> FootnoteSection"
      },
      "GlyphType": "number",
      "HeaderSection": {
        "appendHorizontalRule": "fn() -> HorizontalRule",
        "appendImage": "fn(image: Base.BlobSource) -> InlineImage",
        "appendListItem": "fn(listItem: ListItem) -> ListItem",
        "appendParagraph": "fn(paragraph: Paragraph) -> Paragraph",
        "appendTable": "fn() -> Table",
        "clear": "fn() -> HeaderSection",
        "copy": "fn() -> HeaderSection",
        "editAsText": "fn() -> Text",
        "findElement": "fn(elementType: ElementType) -> RangeElement",
        "findText": "fn(searchPattern: string) -> RangeElement",
        "getAttributes": "fn() -> Object",
        "getChild": "fn(childIndex: Integer) -> Element",
        "getChildIndex": "fn(child: Element) -> Integer",
        "getImages": "fn() -> [InlineImage]",
        "getListItems": "fn() -> [ListItem]",
        "getNumChildren": "fn() -> Integer",
        "getParagraphs": "fn() -> [Paragraph]",
        "getParent": "fn() -> ContainerElement",
        "getTables": "fn() -> [Table]",
        "getText": "fn() -> string",
        "getTextAlignment": "fn() -> TextAlignment",
        "getType": "fn() -> ElementType",
        "insertHorizontalRule": "fn(childIndex: Integer) -> HorizontalRule",
        "insertImage": "fn(childIndex: Integer, image: Base.BlobSource) -> InlineImage",
        "insertListItem": "fn(childIndex: Integer, listItem: ListItem) -> ListItem",
        "insertParagraph": "fn(childIndex: Integer, paragraph: Paragraph) -> Paragraph",
        "insertTable": "fn(childIndex: Integer) -> Table",
        "removeChild": "fn(child: Element) -> HeaderSection",
        "removeFromParent": "fn() -> HeaderSection",
        "replaceText": "fn(searchPattern: string, replacement: string) -> Element",
        "setAttributes": "fn(attributes: Object) -> HeaderSection",
        "setText": "fn(text: string) -> HeaderSection",
        "setTextAlignment": "fn(textAlignment: TextAlignment) -> HeaderSection",
        "getFootnotes": "fn() -> [Footnote]",
        "getLinkUrl": "fn() -> string",
        "getNextSibling": "fn() -> Element",
        "getPreviousSibling": "fn() -> Element",
        "isAtDocumentEnd": "fn() -> bool",
        "setLinkUrl": "fn(url: string) -> HeaderSection"
      },
      "HorizontalAlignment": "number",
      "HorizontalRule": {
        "copy": "fn() -> HorizontalRule",
        "getAttributes": "fn() -> Object",
        "getNextSibling": "fn() -> Element",
        "getParent": "fn() -> ContainerElement",
        "getPreviousSibling": "fn() -> Element",
        "getType": "fn() -> ElementType",
        "isAtDocumentEnd": "fn() -> bool",
        "removeFromParent": "fn() -> HorizontalRule",
        "setAttributes": "fn(attributes: Object) -> HorizontalRule"
      },
      "InlineDrawing": {
        "copy": "fn() -> InlineDrawing",
        "getAttributes": "fn() -> Object",
        "getNextSibling": "fn() -> Element",
        "getParent": "fn() -> ContainerElement",
        "getPreviousSibling": "fn() -> Element",
        "getType": "fn() -> ElementType",
        "isAtDocumentEnd": "fn() -> bool",
        "merge": "fn() -> InlineDrawing",
        "removeFromParent": "fn() -> InlineDrawing",
        "setAttributes": "fn(attributes: Object) -> InlineDrawing"
      },
      "InlineImage": {
        "copy": "fn() -> InlineImage",
        "getAs": "fn(contentType: string) -> Base.Blob",
        "getAttributes": "fn() -> Object",
        "getBlob": "fn() -> Base.Blob",
        "getHeight": "fn() -> Integer",
        "getLinkUrl": "fn() -> string",
        "getNextSibling": "fn() -> Element",
        "getParent": "fn() -> ContainerElement",
        "getPreviousSibling": "fn() -> Element",
        "getType": "fn() -> ElementType",
        "getWidth": "fn() -> Integer",
        "isAtDocumentEnd": "fn() -> bool",
        "merge": "fn() -> InlineImage",
        "removeFromParent": "fn() -> InlineImage",
        "setAttributes": "fn(attributes: Object) -> InlineImage",
        "setHeight": "fn(height: Integer) -> InlineImage",
        "setLinkUrl": "fn(url: string) -> InlineImage",
        "setWidth": "fn(width: Integer) -> InlineImage"
      },
      "ListItem": {
        "appendHorizontalRule": "fn() -> HorizontalRule",
        "appendInlineImage": "fn(image: Base.BlobSource) -> InlineImage",
        "appendPageBreak": "fn() -> PageBreak",
        "appendText": "fn(text: string) -> Text",
        "clear": "fn() -> ListItem",
        "copy": "fn() -> ListItem",
        "editAsText": "fn() -> Text",
        "findElement": "fn(elementType: ElementType) -> RangeElement",
        "findText": "fn(searchPattern: string) -> RangeElement",
        "getAlignment": "fn() -> HorizontalAlignment",
        "getAttributes": "fn() -> Object",
        "getChild": "fn(childIndex: Integer) -> Element",
        "getChildIndex": "fn(child: Element) -> Integer",
        "getGlyphType": "fn() -> GlyphType",
        "getHeading": "fn() -> ParagraphHeading",
        "getIndentEnd": "fn() -> Number",
        "getIndentFirstLine": "fn() -> Number",
        "getIndentStart": "fn() -> Number",
        "getLineSpacing": "fn() -> Number",
        "getLinkUrl": "fn() -> string",
        "getListId": "fn() -> string",
        "getNestingLevel": "fn() -> Integer",
        "getNextSibling": "fn() -> Element",
        "getNumChildren": "fn() -> Integer",
        "getParent": "fn() -> ContainerElement",
        "getPreviousSibling": "fn() -> Element",
        "getSpacingAfter": "fn() -> Number",
        "getSpacingBefore": "fn() -> Number",
        "getText": "fn() -> string",
        "getTextAlignment": "fn() -> TextAlignment",
        "getType": "fn() -> ElementType",
        "insertHorizontalRule": "fn(childIndex: Integer) -> HorizontalRule",
        "insertInlineImage": "fn(childIndex: Integer, image: Base.BlobSource) -> InlineImage",
        "insertPageBreak": "fn(childIndex: Integer) -> PageBreak",
        "insertText": "fn(childIndex: Integer, text: string) -> Text",
        "isAtDocumentEnd": "fn() -> bool",
        "isLeftToRight": "fn() -> bool",
        "merge": "fn() -> ListItem",
        "removeChild": "fn(child: Element) -> ListItem",
        "removeFromParent": "fn() -> ListItem",
        "replaceText": "fn(searchPattern: string, replacement: string) -> Element",
        "setAlignment": "fn(alignment: HorizontalAlignment) -> ListItem",
        "setAttributes": "fn(attributes: Object) -> ListItem",
        "setGlyphType": "fn(glyphType: GlyphType) -> ListItem",
        "setHeading": "fn(heading: ParagraphHeading) -> ListItem",
        "setIndentEnd": "fn(indentEnd: Number) -> ListItem",
        "setIndentFirstLine": "fn(indentFirstLine: Number) -> ListItem",
        "setIndentStart": "fn(indentStart: Number) -> ListItem",
        "setLeftToRight": "fn(leftToRight: bool) -> ListItem",
        "setLineSpacing": "fn(multiplier: Number) -> ListItem",
        "setLinkUrl": "fn(url: string) -> ListItem",
        "setListId": "fn(listItem: ListItem) -> ListItem",
        "setNestingLevel": "fn(nestingLevel: Integer) -> ListItem",
        "setSpacingAfter": "fn(spacingAfter: Number) -> ListItem",
        "setSpacingBefore": "fn(spacingBefore: Number) -> ListItem",
        "setText": "fn(text: string)",
        "setTextAlignment": "fn(textAlignment: TextAlignment) -> ListItem"
      },
      "NamedRange": {
        "getId": "fn() -> string",
        "getName": "fn() -> string",
        "getRange": "fn() -> Range",
        "remove": "fn()"
      },
      "PageBreak": {
        "copy": "fn() -> PageBreak",
        "getAttributes": "fn() -> Object",
        "getNextSibling": "fn() -> Element",
        "getParent": "fn() -> ContainerElement",
        "getPreviousSibling": "fn() -> Element",
        "getType": "fn() -> ElementType",
        "isAtDocumentEnd": "fn() -> bool",
        "removeFromParent": "fn() -> PageBreak",
        "setAttributes": "fn(attributes: Object) -> PageBreak"
      },
      "Paragraph": {
        "appendHorizontalRule": "fn() -> HorizontalRule",
        "appendInlineImage": "fn(image: Base.BlobSource) -> InlineImage",
        "appendPageBreak": "fn() -> PageBreak",
        "appendText": "fn(text: string) -> Text",
        "clear": "fn() -> Paragraph",
        "copy": "fn() -> Paragraph",
        "editAsText": "fn() -> Text",
        "findElement": "fn(elementType: ElementType) -> RangeElement",
        "findText": "fn(searchPattern: string) -> RangeElement",
        "getAlignment": "fn() -> HorizontalAlignment",
        "getAttributes": "fn() -> Object",
        "getChild": "fn(childIndex: Integer) -> Element",
        "getChildIndex": "fn(child: Element) -> Integer",
        "getHeading": "fn() -> ParagraphHeading",
        "getIndentEnd": "fn() -> Number",
        "getIndentFirstLine": "fn() -> Number",
        "getIndentStart": "fn() -> Number",
        "getLineSpacing": "fn() -> Number",
        "getLinkUrl": "fn() -> string",
        "getNextSibling": "fn() -> Element",
        "getNumChildren": "fn() -> Integer",
        "getParent": "fn() -> ContainerElement",
        "getPreviousSibling": "fn() -> Element",
        "getSpacingAfter": "fn() -> Number",
        "getSpacingBefore": "fn() -> Number",
        "getText": "fn() -> string",
        "getTextAlignment": "fn() -> TextAlignment",
        "getType": "fn() -> ElementType",
        "insertHorizontalRule": "fn(childIndex: Integer) -> HorizontalRule",
        "insertInlineImage": "fn(childIndex: Integer, image: Base.BlobSource) -> InlineImage",
        "insertPageBreak": "fn(childIndex: Integer) -> PageBreak",
        "insertText": "fn(childIndex: Integer, text: string) -> Text",
        "isAtDocumentEnd": "fn() -> bool",
        "isLeftToRight": "fn() -> bool",
        "merge": "fn() -> Paragraph",
        "removeChild": "fn(child: Element) -> Paragraph",
        "removeFromParent": "fn() -> Paragraph",
        "replaceText": "fn(searchPattern: string, replacement: string) -> Element",
        "setAlignment": "fn(alignment: HorizontalAlignment) -> Paragraph",
        "setAttributes": "fn(attributes: Object) -> Paragraph",
        "setHeading": "fn(heading: ParagraphHeading) -> Paragraph",
        "setIndentEnd": "fn(indentEnd: Number) -> Paragraph",
        "setIndentFirstLine": "fn(indentFirstLine: Number) -> Paragraph",
        "setIndentStart": "fn(indentStart: Number) -> Paragraph",
        "setLeftToRight": "fn(leftToRight: bool) -> Paragraph",
        "setLineSpacing": "fn(multiplier: Number) -> Paragraph",
        "setLinkUrl": "fn(url: string) -> Paragraph",
        "setSpacingAfter": "fn(spacingAfter: Number) -> Paragraph",
        "setSpacingBefore": "fn(spacingBefore: Number) -> Paragraph",
        "setText": "fn(text: string)",
        "setTextAlignment": "fn(textAlignment: TextAlignment) -> Paragraph"
      },
      "ParagraphHeading": "number",
      "Position": {
        "getElement": "fn() -> Element",
        "getOffset": "fn() -> Integer",
        "getSurroundingText": "fn() -> Text",
        "getSurroundingTextOffset": "fn() -> Integer",
        "insertBookmark": "fn() -> Bookmark",
        "insertInlineImage": "fn(image: Base.BlobSource) -> InlineImage",
        "insertText": "fn(text: string) -> Text"
      },
      "Range": {
        "getRangeElements": "fn() -> [RangeElement]",
        "getSelectedElements": "fn() -> [RangeElement]"
      },
      "RangeBuilder": {
        "addElement": "fn(element: Element) -> RangeBuilder",
        "addElementsBetween": "fn(startElement: Element, endElementInclusive: Element) -> RangeBuilder",
        "addRange": "fn(range: Range) -> RangeBuilder",
        "build": "fn() -> Range",
        "getRangeElements": "fn() -> [RangeElement]",
        "getSelectedElements": "fn() -> [RangeElement]"
      },
      "RangeElement": {
        "getElement": "fn() -> Element",
        "getEndOffsetInclusive": "fn() -> Integer",
        "getStartOffset": "fn() -> Integer",
        "isPartial": "fn() -> bool"
      },
      "Table": {
        "appendTableRow": "fn() -> TableRow",
        "clear": "fn() -> Table",
        "copy": "fn() -> Table",
        "editAsText": "fn() -> Text",
        "findElement": "fn(elementType: ElementType) -> RangeElement",
        "findText": "fn(searchPattern: string) -> RangeElement",
        "getAttributes": "fn() -> Object",
        "getBorderColor": "fn() -> string",
        "getBorderWidth": "fn() -> Number",
        "getCell": "fn(rowIndex: Integer, cellIndex: Integer) -> TableCell",
        "getChild": "fn(childIndex: Integer) -> Element",
        "getChildIndex": "fn(child: Element) -> Integer",
        "getColumnWidth": "fn(columnIndex: Integer) -> Number",
        "getLinkUrl": "fn() -> string",
        "getNextSibling": "fn() -> Element",
        "getNumChildren": "fn() -> Integer",
        "getNumRows": "fn() -> Integer",
        "getParent": "fn() -> ContainerElement",
        "getPreviousSibling": "fn() -> Element",
        "getRow": "fn(rowIndex: Integer) -> TableRow",
        "getText": "fn() -> string",
        "getTextAlignment": "fn() -> TextAlignment",
        "getType": "fn() -> ElementType",
        "insertTableRow": "fn(childIndex: Integer) -> TableRow",
        "isAtDocumentEnd": "fn() -> bool",
        "removeChild": "fn(child: Element) -> Table",
        "removeFromParent": "fn() -> Table",
        "removeRow": "fn(rowIndex: Integer) -> TableRow",
        "replaceText": "fn(searchPattern: string, replacement: string) -> Element",
        "setAttributes": "fn(attributes: Object) -> Table",
        "setBorderColor": "fn(color: string) -> Table",
        "setBorderWidth": "fn(width: Number) -> Table",
        "setColumnWidth": "fn(columnIndex: Integer, width: Number) -> Table",
        "setLinkUrl": "fn(url: string) -> Table",
        "setTextAlignment": "fn(textAlignment: TextAlignment) -> Table"
      },
      "TableCell": {
        "appendHorizontalRule": "fn() -> HorizontalRule",
        "appendImage": "fn(image: Base.BlobSource) -> InlineImage",
        "appendListItem": "fn(listItem: ListItem) -> ListItem",
        "appendParagraph": "fn(paragraph: Paragraph) -> Paragraph",
        "appendTable": "fn() -> Table",
        "clear": "fn() -> TableCell",
        "copy": "fn() -> TableCell",
        "editAsText": "fn() -> Text",
        "findElement": "fn(elementType: ElementType) -> RangeElement",
        "findText": "fn(searchPattern: string) -> RangeElement",
        "getAttributes": "fn() -> Object",
        "getBackgroundColor": "fn() -> string",
        "getChild": "fn(childIndex: Integer) -> Element",
        "getChildIndex": "fn(child: Element) -> Integer",
        "getLinkUrl": "fn() -> string",
        "getNextSibling": "fn() -> Element",
        "getNumChildren": "fn() -> Integer",
        "getPaddingBottom": "fn() -> Number",
        "getPaddingLeft": "fn() -> Number",
        "getPaddingRight": "fn() -> Number",
        "getPaddingTop": "fn() -> Number",
        "getParent": "fn() -> ContainerElement",
        "getParentRow": "fn() -> TableRow",
        "getParentTable": "fn() -> Table",
        "getPreviousSibling": "fn() -> Element",
        "getText": "fn() -> string",
        "getTextAlignment": "fn() -> TextAlignment",
        "getType": "fn() -> ElementType",
        "getVerticalAlignment": "fn() -> VerticalAlignment",
        "getWidth": "fn() -> Number",
        "insertHorizontalRule": "fn(childIndex: Integer) -> HorizontalRule",
        "insertImage": "fn(childIndex: Integer, image: Base.BlobSource) -> InlineImage",
        "insertListItem": "fn(childIndex: Integer, listItem: ListItem) -> ListItem",
        "insertParagraph": "fn(childIndex: Integer, paragraph: Paragraph) -> Paragraph",
        "insertTable": "fn(childIndex: Integer) -> Table",
        "isAtDocumentEnd": "fn() -> bool",
        "merge": "fn() -> TableCell",
        "removeChild": "fn(child: Element) -> TableCell",
        "removeFromParent": "fn() -> TableCell",
        "replaceText": "fn(searchPattern: string, replacement: string) -> Element",
        "setAttributes": "fn(attributes: Object) -> TableCell",
        "setBackgroundColor": "fn(color: string) -> TableCell",
        "setLinkUrl": "fn(url: string) -> TableCell",
        "setPaddingBottom": "fn(paddingBottom: Number) -> TableCell",
        "setPaddingLeft": "fn(paddingLeft: Number) -> TableCell",
        "setPaddingRight": "fn(paddingTop: Number) -> TableCell",
        "setPaddingTop": "fn(paddingTop: Number) -> TableCell",
        "setText": "fn(text: string) -> TableCell",
        "setTextAlignment": "fn(textAlignment: TextAlignment) -> TableCell",
        "setVerticalAlignment": "fn(alignment: VerticalAlignment) -> TableCell",
        "setWidth": "fn(width: Number) -> TableCell"
      },
      "TableOfContents": {
        "clear": "fn() -> TableOfContents",
        "copy": "fn() -> TableOfContents",
        "editAsText": "fn() -> Text",
        "findElement": "fn(elementType: ElementType) -> RangeElement",
        "findText": "fn(searchPattern: string) -> RangeElement",
        "getAttributes": "fn() -> Object",
        "getChild": "fn(childIndex: Integer) -> Element",
        "getChildIndex": "fn(child: Element) -> Integer",
        "getLinkUrl": "fn() -> string",
        "getNextSibling": "fn() -> Element",
        "getNumChildren": "fn() -> Integer",
        "getParent": "fn() -> ContainerElement",
        "getPreviousSibling": "fn() -> Element",
        "getText": "fn() -> string",
        "getTextAlignment": "fn() -> TextAlignment",
        "getType": "fn() -> ElementType",
        "isAtDocumentEnd": "fn() -> bool",
        "removeFromParent": "fn() -> TableOfContents",
        "replaceText": "fn(searchPattern: string, replacement: string) -> Element",
        "setAttributes": "fn(attributes: Object) -> TableOfContents",
        "setLinkUrl": "fn(url: string) -> TableOfContents",
        "setTextAlignment": "fn(textAlignment: TextAlignment) -> TableOfContents"
      },
      "TableRow": {
        "appendTableCell": "fn() -> TableCell",
        "clear": "fn() -> TableRow",
        "copy": "fn() -> TableRow",
        "editAsText": "fn() -> Text",
        "findElement": "fn(elementType: ElementType) -> RangeElement",
        "findText": "fn(searchPattern: string) -> RangeElement",
        "getAttributes": "fn() -> Object",
        "getCell": "fn(cellIndex: Integer) -> TableCell",
        "getChild": "fn(childIndex: Integer) -> Element",
        "getChildIndex": "fn(child: Element) -> Integer",
        "getLinkUrl": "fn() -> string",
        "getMinimumHeight": "fn() -> Integer",
        "getNextSibling": "fn() -> Element",
        "getNumCells": "fn() -> Integer",
        "getNumChildren": "fn() -> Integer",
        "getParent": "fn() -> ContainerElement",
        "getParentTable": "fn() -> Table",
        "getPreviousSibling": "fn() -> Element",
        "getText": "fn() -> string",
        "getTextAlignment": "fn() -> TextAlignment",
        "getType": "fn() -> ElementType",
        "insertTableCell": "fn(childIndex: Integer) -> TableCell",
        "isAtDocumentEnd": "fn() -> bool",
        "merge": "fn() -> TableRow",
        "removeCell": "fn(cellIndex: Integer) -> TableCell",
        "removeChild": "fn(child: Element) -> TableRow",
        "removeFromParent": "fn() -> TableRow",
        "replaceText": "fn(searchPattern: string, replacement: string) -> Element",
        "setAttributes": "fn(attributes: Object) -> TableRow",
        "setLinkUrl": "fn(url: string) -> TableRow",
        "setMinimumHeight": "fn(minHeight: Integer) -> TableRow",
        "setTextAlignment": "fn(textAlignment: TextAlignment) -> TableRow"
      },
      "Text": {
        "appendText": "fn(text: string) -> Text",
        "copy": "fn() -> Text",
        "deleteText": "fn(startOffset: Integer, endOffsetInclusive: Integer) -> Text",
        "editAsText": "fn() -> Text",
        "findText": "fn(searchPattern: string) -> RangeElement",
        "getAttributes": "fn() -> Object",
        "getBackgroundColor": "fn() -> string",
        "getFontFamily": "fn() -> string",
        "getFontSize": "fn() -> Integer",
        "getForegroundColor": "fn() -> string",
        "getLinkUrl": "fn() -> string",
        "getNextSibling": "fn() -> Element",
        "getParent": "fn() -> ContainerElement",
        "getPreviousSibling": "fn() -> Element",
        "getText": "fn() -> string",
        "getTextAlignment": "fn() -> TextAlignment",
        "getTextAttributeIndices": "fn() -> [Integer]",
        "getType": "fn() -> ElementType",
        "insertText": "fn(offset: Integer, text: string) -> Text",
        "isAtDocumentEnd": "fn() -> bool",
        "isBold": "fn() -> bool",
        "isItalic": "fn() -> bool",
        "isStrikethrough": "fn() -> bool",
        "isUnderline": "fn() -> bool",
        "merge": "fn() -> Text",
        "removeFromParent": "fn() -> Text",
        "replaceText": "fn(searchPattern: string, replacement: string) -> Element",
        "setAttributes": "fn(startOffset: Integer, endOffsetInclusive: Integer, attributes: Object) -> Text",
        "setBackgroundColor": "fn(startOffset: Integer, endOffsetInclusive: Integer, color: string) -> Text",
        "setBold": "fn(bold: bool) -> Text",
        "setFontFamily": "fn(startOffset: Integer, endOffsetInclusive: Integer, fontFamilyName: string) -> Text",
        "setFontSize": "fn(size: Integer) -> Text",
        "setForegroundColor": "fn(startOffset: Integer, endOffsetInclusive: Integer, color: string) -> Text",
        "setItalic": "fn(italic: bool) -> Text",
        "setLinkUrl": "fn(startOffset: Integer, endOffsetInclusive: Integer, url: string) -> Text",
        "setStrikethrough": "fn(strikethrough: bool) -> Text",
        "setText": "fn(text: string) -> Text",
        "setTextAlignment": "fn(startOffset: Integer, endOffsetInclusive: Integer, textAlignment: TextAlignment) -> Text",
        "setUnderline": "fn(underline: bool) -> Text"
      },
      "TextAlignment": "number",
      "UnsupportedElement": {
        "copy": "fn() -> UnsupportedElement",
        "getAttributes": "fn() -> Object",
        "getNextSibling": "fn() -> Element",
        "getParent": "fn() -> ContainerElement",
        "getPreviousSibling": "fn() -> Element",
        "getType": "fn() -> ElementType",
        "isAtDocumentEnd": "fn() -> bool",
        "merge": "fn() -> UnsupportedElement",
        "removeFromParent": "fn() -> UnsupportedElement",
        "setAttributes": "fn(attributes: Object) -> UnsupportedElement"
      },
      "VerticalAlignment": "number"
    }
  },
  "DocumentApp": "GoogleAppsScript.Document.DocumentApp",
  "!name": "google-apps-script.document"
}
