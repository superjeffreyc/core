{
  "String": {
    "add": "fn(str: string, index?: number) -> string",
    "insert": "fn(str: string, index?: number) -> string",
    "assign": "fn(objs: [?]) -> string",
    "at": "fn(index: number, loop?: bool) -> string",
    "camelize": "fn(first?: bool) -> string",
    "capitalize": "fn(all?: bool) -> string",
    "chars": "fn(fn?: fn(c: string)) -> [string]",
    "codes": "fn(fn?: fn(c: string)) -> [number]",
    "compact": "fn() -> string",
    "dasherize": "fn() -> string",
    "decodeBase64": "fn() -> string",
    "each": "fn(search: string, fn?: fn(m: string)) -> [string]",
    "encodeBase64": "fn() -> string",
    "endsWith": "fn(find: string, pos?: number, case_?: bool) -> bool",
    "escapeHTML": "fn() -> string",
    "escapeRegExp": "fn() -> string",
    "escapeURL": "fn(param?: bool) -> string",
    "first": "fn(n?: number) -> string",
    "from": "fn(index?: number) -> string",
    "hankaku": "fn(mode?: string) -> string",
    "has": "fn(find: string) -> bool",
    "hasArabic": "fn() -> bool",
    "hasCyrillic": "fn() -> bool",
    "hasGreek": "fn() -> bool",
    "hasHangul": "fn() -> bool",
    "hasHan": "fn() -> bool",
    "hasKanji": "fn() -> bool",
    "hasHebrew": "fn() -> bool",
    "hasHiragana": "fn() -> bool",
    "hasKana": "fn() -> bool",
    "hasKatakana": "fn() -> bool",
    "hasLatin": "fn() -> bool",
    "hasThai": "fn() -> bool",
    "hasDevanagari": "fn() -> bool",
    "hiragana": "fn(all?: bool) -> string",
    "humanize": "fn() -> string",
    "isBlank": "fn() -> bool",
    "isArabic": "fn() -> bool",
    "isCyrillic": "fn() -> bool",
    "isGreek": "fn() -> bool",
    "isHangul": "fn() -> bool",
    "isHan": "fn() -> bool",
    "isKanji": "fn() -> bool",
    "isHebrew": "fn() -> bool",
    "isHiragana": "fn() -> bool",
    "isKana": "fn() -> bool",
    "isKatakana": "fn() -> bool",
    "isLatin": "fn() -> bool",
    "isThai": "fn() -> bool",
    "isDevanagari": "fn() -> bool",
    "katakana": "fn() -> string",
    "last": "fn(n?: number) -> string",
    "lines": "fn(fn?: fn(l: string)) -> [string]",
    "normalize": "fn() -> string",
    "pad": "fn(padding: string, num?: number) -> string",
    "padLeft": "fn(padding: string, num?: number) -> string",
    "padRight": "fn(padding: string, num?: number) -> string",
    "paragraphs": "fn(fn?: fn(p: string)) -> [string]",
    "parameterize": "fn() -> string",
    "pluralize": "fn() -> string",
    "remove": "fn(find: string) -> string",
    "removeTags": "fn(tags: [string]) -> string",
    "repeat": "fn(num?: number) -> string",
    "reverse": "fn() -> string",
    "shift": "fn(num: number) -> [string]",
    "singularize": "fn() -> string",
    "spacify": "fn() -> string",
    "startsWith": "fn(find: string, pos?: number, case_?: bool) -> bool",
    "stripTags": "fn(tags: [string]) -> string",
    "titleize": "fn() -> string",
    "to": "fn(index?: number) -> string",
    "toNumber": "fn(base?: number) -> number",
    "trimLeft": "fn() -> string",
    "trimRight": "fn() -> string",
    "truncate": "fn(length: number, split?: bool, from?: string, ellipsis?: string) -> string",
    "underscore": "fn() -> string",
    "unescapeHTML": "fn() -> string",
    "unescapeURL": "fn(partial?: bool) -> string",
    "words": "fn(fn?: fn(word: string)) -> [string]",
    "zenkaku": "fn(modes: [string]) -> string"
  },
  "NumberStatic": {
    "random": "fn(n1?: number, n2?: number) -> number"
  },
  "Number": {
    "abbr": "fn(precision?: number) -> string",
    "bytes": "fn(precision?: number, limit?: number) -> string",
    "ceil": "fn(precision?: number) -> number",
    "chr": "fn() -> string",
    "downto": "fn(num: number, fn?: fn(n: number), step?: number) -> [number]",
    "duration": "fn(locale?: string) -> string",
    "floor": "fn(precision?: number) -> number",
    "format": "fn(place?: number, thousands?: string, decimal?: string) -> string",
    "hex": "fn(pad?: number) -> string",
    "isEven": "fn() -> bool",
    "isInteger": "fn() -> bool",
    "isMultipleOf": "fn(num: number) -> bool",
    "isOdd": "fn() -> bool",
    "log": "fn(base?: number) -> number",
    "abs": "fn() -> number",
    "sin": "fn() -> number",
    "asin": "fn() -> number",
    "cos": "fn() -> number",
    "acos": "fn() -> number",
    "tan": "fn() -> number",
    "atan": "fn() -> number",
    "sqrt": "fn() -> number",
    "exp": "fn() -> number",
    "pow": "fn(num: number) -> number",
    "metric": "fn(precision?: number, limit?: number) -> string",
    "ordinalize": "fn() -> string",
    "pad": "fn(place?: number, sign?: bool, base?: number) -> string",
    "round": "fn(precision?: number) -> number",
    "times": "fn(fn: fn(i: number)) -> number",
    "toNumber": "fn() -> number",
    "millisecond": "fn() -> number",
    "milliseconds": "fn() -> number",
    "second": "fn() -> number",
    "seconds": "fn() -> number",
    "minute": "fn() -> number",
    "minutes": "fn() -> number",
    "hour": "fn() -> number",
    "hours": "fn() -> number",
    "day": "fn() -> number",
    "days": "fn() -> number",
    "week": "fn() -> number",
    "weeks": "fn() -> number",
    "month": "fn() -> number",
    "months": "fn() -> number",
    "year": "fn() -> number",
    "years": "fn() -> number",
    "millisecondAfter": "fn(d: string, locale?: string) -> Date",
    "millisecondsAfter": "fn(d: string, locale?: string) -> Date",
    "secondAfter": "fn(d: string, locale?: string) -> Date",
    "secondsAfter": "fn(d: string, locale?: string) -> Date",
    "minuteAfter": "fn(d: string, locale?: string) -> Date",
    "minutesAfter": "fn(d: string, locale?: string) -> Date",
    "hourAfter": "fn(d: string, locale?: string) -> Date",
    "hoursAfter": "fn(d: string, locale?: string) -> Date",
    "dayAfter": "fn(d: string, locale?: string) -> Date",
    "daysAfter": "fn(d: string, locale?: string) -> Date",
    "weekAfter": "fn(d: string, locale?: string) -> Date",
    "weeksAfter": "fn(d: string, locale?: string) -> Date",
    "monthAfter": "fn(d: string, locale?: string) -> Date",
    "monthsAfter": "fn(d: string, locale?: string) -> Date",
    "yearAfter": "fn(d: string, locale?: string) -> Date",
    "yearsAfter": "fn(d: string, locale?: string) -> Date",
    "millisecondAgo": "fn() -> Date",
    "millisecondsAgo": "fn() -> Date",
    "secondAgo": "fn() -> Date",
    "secondsAgo": "fn() -> Date",
    "minuteAgo": "fn() -> Date",
    "minutesAgo": "fn() -> Date",
    "hourAgo": "fn() -> Date",
    "hoursAgo": "fn() -> Date",
    "dayAgo": "fn() -> Date",
    "daysAgo": "fn() -> Date",
    "weekAgo": "fn() -> Date",
    "weeksAgo": "fn() -> Date",
    "monthAgo": "fn() -> Date",
    "monthsAgo": "fn() -> Date",
    "yearAgo": "fn() -> Date",
    "yearsAgo": "fn() -> Date",
    "millisecondBefore": "fn(d: string, locale?: string) -> Date",
    "millisecondsBefore": "fn(d: string, locale?: string) -> Date",
    "secondBefore": "fn(d: string, locale?: string) -> Date",
    "secondsBefore": "fn(d: string, locale?: string) -> Date",
    "minuteBefore": "fn(d: string, locale?: string) -> Date",
    "minutesBefore": "fn(d: string, locale?: string) -> Date",
    "hourBefore": "fn(d: string, locale?: string) -> Date",
    "hoursBefore": "fn(d: string, locale?: string) -> Date",
    "dayBefore": "fn(d: string, locale?: string) -> Date",
    "daysBefore": "fn(d: string, locale?: string) -> Date",
    "weekBefore": "fn(d: string, locale?: string) -> Date",
    "weeksBefore": "fn(d: string, locale?: string) -> Date",
    "monthBefore": "fn(d: string, locale?: string) -> Date",
    "monthsBefore": "fn(d: string, locale?: string) -> Date",
    "yearBefore": "fn(d: string, locale?: string) -> Date",
    "yearsBefore": "fn(d: string, locale?: string) -> Date",
    "millisecondFromNow": "fn() -> Date",
    "millisecondsFromNow": "fn() -> Date",
    "secondFromNow": "fn() -> Date",
    "secondsFromNow": "fn() -> Date",
    "minuteFromNow": "fn() -> Date",
    "minutesFromNow": "fn() -> Date",
    "hourFromNow": "fn() -> Date",
    "hoursFromNow": "fn() -> Date",
    "dayFromNow": "fn() -> Date",
    "daysFromNow": "fn() -> Date",
    "weekFromNow": "fn() -> Date",
    "weeksFromNow": "fn() -> Date",
    "monthFromNow": "fn() -> Date",
    "monthsFromNow": "fn() -> Date",
    "yearFromNow": "fn() -> Date",
    "yearsFromNow": "fn() -> Date",
    "upto": "fn(num: number, fn?: Function, step?: number) -> [number]"
  },
  "ArrayStatic": {
    "create": "fn(args: [T]) -> [T]",
    "isArray": "fn(obj: ?) -> bool"
  },
  "Array": {
    "add": "fn(el: T, index?: number) -> [T]",
    "insert": "fn(el: T, index?: number) -> [T]",
    "at": "fn(index: number, loop?: bool) -> T",
    "average": "fn(map?: fn(e: T)) -> number",
    "clone": "fn() -> [T]",
    "compact": "fn(all?: bool) -> [T]",
    "count": "fn(f: T) -> number",
    "each": "fn(fn: fn(element: T, index?: number, array?: [T]), index?: number, loop?: bool) -> [T]",
    "every": "fn(f: T, scope?: ?) -> bool",
    "all": "fn(f: T, scope?: ?) -> bool",
    "exclude": "fn(f: [T]) -> [T]",
    "filter": "fn(f: T, scope?: ?) -> [T]",
    "find": "fn(f: T, index?: number, loop?: bool) -> T",
    "findAll": "fn(f: T, index?: number, loop?: bool) -> [T]",
    "findIndex": "fn(f: T, startIndex?: number, loop?: bool) -> number",
    "first": "fn() -> T",
    "flatten": "fn(limit?: number) -> [T]",
    "from": "fn(index: number) -> [T]",
    "groupBy": "fn(map: string, fn?: fn(key: string, items: [T])) -> ret",
    "include": "fn(element: T, index?: number) -> [T]",
    "intersect": "fn(args: [T]) -> [T]",
    "isEmpty": "fn() -> bool",
    "last": "fn() -> T",
    "lastIndexOf": "fn(search: ?, fromIndex?: number) -> number",
    "least": "fn(map: string) -> [T]",
    "map": "fn(map: string, scope?: ?) -> [U]",
    "max": "fn(map?: string) -> T",
    "min": "fn(map?: string) -> T",
    "most": "fn(map?: string) -> [T]",
    "none": "fn(f: T) -> bool",
    "randomize": "fn() -> [T]",
    "reduce": "fn(fn: fn(a: T, b: T), init: T) -> T",
    "reduceRight": "fn(fn: fn(a: T, b: T), init: T) -> T",
    "remove": "fn(args: [T]) -> [T]",
    "removeAt": "fn(start: number, end?: number) -> [T]",
    "sample": "fn() -> T",
    "some": "fn(f: T, scope?: ?) -> bool",
    "sortBy": "fn(map: string, desc?: bool) -> [T]",
    "subtract": "fn(args: [T]) -> [T]",
    "sum": "fn(map: string) -> number",
    "to": "fn(index: number) -> [?]",
    "union": "fn(array: [T]) -> [T]",
    "unique": "fn(map?: string) -> [T]"
  },
  "ObjectStatic": {
    "extended": "fn(obj?: ?) -> ?",
    "fromQueryString": "fn(str: string, deep?: bool) -> T",
    "isArray": "fn(obj: ?) -> bool",
    "isObject": "fn(obj: ?) -> bool",
    "isBoolean": "fn(obj: ?) -> bool",
    "isDate": "fn(obj: ?) -> bool",
    "isFunction": "fn(obj: ?) -> bool",
    "isNaN": "fn(obj: ?) -> bool",
    "isNumber": "fn(obj: ?) -> bool",
    "isString": "fn(obj: ?) -> bool",
    "isRegExp": "fn(obj: ?) -> bool",
    "toQueryString": "fn(obj: ?, namespace?: string) -> string",
    "clone": "fn(obj?: T, deep?: bool) -> T",
    "map": "fn(obj: T, map: string) -> U",
    "any": "fn(obj: ?, map: string) -> bool",
    "all": "fn(obj: ?, map: string) -> bool",
    "none": "fn(obj: ?, map: string) -> bool",
    "count": "fn(obj: ?, map: string) -> number",
    "find": "fn(obj: ?, map: string) -> ?",
    "findAll": "fn(obj: ?, map: string) -> [?]",
    "reduce": "fn(obj: ?, map: string, init?: ?) -> ?",
    "isEmpty": "fn(obj: ?) -> bool",
    "sum": "fn(obj: ?, map: string) -> number",
    "average": "fn(obj: ?, map: string) -> number",
    "min": "fn(obj: ?, map: string) -> ?",
    "max": "fn(obj: ?, map: string) -> ?",
    "least": "fn(obj: ?, map: string) -> ?",
    "most": "fn(obj: ?, map: string) -> ?",
    "equal": "fn(a: ?, b: ?) -> bool",
    "has": "fn(obj: ?, key: string) -> bool",
    "keys": "fn(obj: ?, fn?: fn(key: string, value: ?)) -> [string]",
    "merge": "fn(target: ?, source: ?, deep?: bool, resolve?: bool) -> ?",
    "reject": "fn(obj: ?, find: [?]) -> ?",
    "select": "fn(obj: ?, find: [?]) -> ?",
    "size": "fn(obj: Object) -> number",
    "tap": "fn(obj: ?, fn: string) -> ?",
    "values": "fn(obj: ?, fn?: fn(value: ?)) -> [?]",
    "watch": "fn(obj: ?, prop: string, fn: fn(prop?: string, oldVal?: ?, newVal?: ?))"
  },
  "Object": {
    "extended": "fn() -> Object",
    "isArray": "fn() -> bool",
    "isObject": "fn() -> bool",
    "isBoolean": "fn() -> bool",
    "isDate": "fn() -> bool",
    "isFunction": "fn() -> bool",
    "isNaN": "fn() -> bool",
    "isNumber": "fn() -> bool",
    "isString": "fn() -> bool",
    "isRegExp": "fn() -> bool",
    "toQueryString": "fn(namespace?: string) -> string",
    "clone": "fn(deep?: bool) -> ?",
    "map": "fn(map: string) -> U",
    "any": "fn(map: string) -> bool",
    "all": "fn(map: string) -> bool",
    "none": "fn(map: string) -> bool",
    "count": "fn(map: string) -> number",
    "find": "fn(map: string) -> ?",
    "findAll": "fn(map: string) -> [?]",
    "reduce": "fn(map: string, init?: ?) -> ?",
    "isEmpty": "fn() -> bool",
    "sum": "fn(map: string) -> number",
    "average": "fn(map: string) -> number",
    "min": "fn(map: string) -> ?",
    "max": "fn(map: string) -> ?",
    "least": "fn(map: string) -> ?",
    "most": "fn(map: string) -> ?",
    "equal": "fn(b: ?) -> bool",
    "has": "fn(key: string) -> bool",
    "keys": "fn(fn?: fn(key: string, value: ?)) -> [string]",
    "merge": "fn(source: ?, deep?: bool, resolve?: bool) -> ?",
    "reject": "fn(find: [?]) -> ?",
    "select": "fn(find: [?]) -> ?",
    "size": "fn() -> number",
    "tap": "fn(fn: string) -> ?",
    "values": "fn(fn?: fn(value: ?)) -> [?]",
    "watch": "fn(prop: string, fn: fn(prop?: string, oldVal?: ?, newVal?: ?))"
  },
  "Function": {
    "after": "fn(num?: number) -> Function",
    "bind": "fn(scope?: ?, args: [?]) -> Function",
    "cancel": "fn() -> Function",
    "debounce": "fn(ms: number) -> Function",
    "delay": "fn(ms?: number, args: [?]) -> Function",
    "fill": "fn(args: [?]) -> Function",
    "lazy": "fn(ms?: number, limit?: number) -> Function",
    "once": "fn() -> Function",
    "throttle": "fn(ms: number) -> Function"
  },
  "RegExpStatic": {
    "escape": "fn(str: string) -> string"
  },
  "RegExp": {
    "addFlag": "fn(flag: string) -> RegExp",
    "getFlags": "fn() -> string",
    "removeFlag": "fn(flag: string) -> RegExp",
    "setFlags": "fn(flags: string) -> RegExp"
  },
  "Locale": {
    "plural": "bool",
    "months": "string",
    "weekdays": "string",
    "units": "string",
    "numbers": "string",
    "tokens": "[string]",
    "short": "string",
    "long": "string",
    "full": "string",
    "past": "string",
    "future": "string",
    "duration": "string",
    "timeMarker": "string",
    "ampm": "string",
    "modifiers": "[]",
    "dateParse": "[string]",
    "timeParse": "[string]"
  },
  "DateStatic": {
    "addLocale": "fn(code: string, set: Locale) -> Locale",
    "create": "fn(locale?: string) -> Date",
    "future": "fn(d: string, locale?: string) -> Date",
    "getLocale": "fn(code?: string) -> Locale",
    "now": "fn() -> string",
    "past": "fn(d: string, local?: string) -> Date",
    "range": "fn(start: Date, end: Date) -> DateRange",
    "setLocale": "fn(code: string) -> Locale"
  },
  "DateFields": {
    "year": "number",
    "month": "number",
    "day": "number"
  },
  "Date": {
    "addMilliseconds": "fn(num: number, reset?: bool) -> Date",
    "addSeconds": "fn(num: number, reset?: bool) -> Date",
    "addMinutes": "fn(num: number, reset?: bool) -> Date",
    "addHours": "fn(num: number, reset?: bool) -> Date",
    "addDays": "fn(num: number, reset?: bool) -> Date",
    "addWeeks": "fn(num: number, reset?: bool) -> Date",
    "addMonths": "fn(num: number, reset?: bool) -> Date",
    "addYears": "fn(num: number, reset?: bool) -> Date",
    "advance": "fn(set: string, reset?: bool) -> Date",
    "beginningOfDay": "fn() -> Date",
    "beginningOfWeek": "fn() -> Date",
    "beginningOfMonth": "fn() -> Date",
    "beginningOfYear": "fn() -> Date",
    "clone": "fn() -> Date",
    "daysInMonth": "fn() -> number",
    "endOfDay": "fn() -> Date",
    "endOfWeek": "fn() -> Date",
    "endOfMonth": "fn() -> Date",
    "endOfYear": "fn() -> Date",
    "format": "fn(format: string, locale?: string) -> string",
    "short": "fn(locale?: string) -> string",
    "long": "fn(locale?: string) -> string",
    "full": "fn(locale?: string) -> string",
    "getUTCOffset": "fn(iso?: bool) -> string",
    "getISOWeek": "fn() -> number",
    "getWeekday": "fn() -> number",
    "getUTCWeekday": "fn() -> number",
    "is": "fn(d: string, margin?: number) -> bool",
    "isAfter": "fn(d: string, margin?: number) -> bool",
    "isBefore": "fn(d: string, margin?: number) -> bool",
    "isToday": "fn() -> bool",
    "isYesterday": "fn() -> bool",
    "isTomorrow": "fn() -> bool",
    "isWeekday": "fn() -> bool",
    "isWeekend": "fn() -> bool",
    "isSunday": "fn() -> bool",
    "isMonday": "fn() -> bool",
    "isTuesday": "fn() -> bool",
    "isWednesday": "fn() -> bool",
    "isThursday": "fn() -> bool",
    "isFriday": "fn() -> bool",
    "isSaturday": "fn() -> bool",
    "isFuture": "fn() -> bool",
    "isLastWeek": "fn() -> bool",
    "isLastMonth": "fn() -> bool",
    "isLastYear": "fn() -> bool",
    "isLeapYear": "fn() -> bool",
    "isNextWeek": "fn() -> bool",
    "isNextMonth": "fn() -> bool",
    "isNextYear": "fn() -> bool",
    "isPast": "fn() -> bool",
    "isThisWeek": "fn() -> bool",
    "isThisMonth": "fn() -> bool",
    "isThisYear": "fn() -> bool",
    "isUTC": "fn() -> bool",
    "isValid": "fn() -> bool",
    "iso": "fn() -> string",
    "relative": "fn(locale: string) -> string",
    "reset": "fn(unit?: string) -> Date",
    "rewind": "fn(ms: number, reset?: bool) -> Date",
    "set": "fn(ms: number) -> Date",
    "setISOWeek": "fn(week: number)",
    "setWeekday": "fn(day: number)",
    "toJSON": "fn() -> string",
    "millisecondsAgo": "fn() -> number",
    "secondsAgo": "fn() -> number",
    "minutesAgo": "fn() -> number",
    "hoursAgo": "fn() -> number",
    "daysAgo": "fn() -> number",
    "weeksAgo": "fn() -> number",
    "monthsAgo": "fn() -> number",
    "yearsAgo": "fn() -> number",
    "millisecondsFromNow": "fn() -> number",
    "secondsFromNow": "fn() -> number",
    "minutesFromNow": "fn() -> number",
    "hoursFromNow": "fn() -> number",
    "daysFromNow": "fn() -> number",
    "weeksFromNow": "fn() -> number",
    "monthsFromNow": "fn() -> number",
    "yearsFromNow": "fn() -> number",
    "millisecondsSince": "fn(date?: Date, locale?: string) -> number",
    "secondsSince": "fn(date?: Date, locale?: string) -> number",
    "minutesSince": "fn(date?: Date, locale?: string) -> number",
    "hoursSince": "fn(date?: Date, locale?: string) -> number",
    "daysSince": "fn(date?: Date, locale?: string) -> number",
    "weeksSince": "fn(date?: Date, locale?: string) -> number",
    "monthsSince": "fn(date?: Date, locale?: string) -> number",
    "yearsSince": "fn(date?: Date, locale?: string) -> number",
    "millisecondsUntil": "fn(date?: Date, locale?: string) -> number",
    "secondsUntil": "fn(date?: Date, locale?: string) -> number",
    "minutesUntil": "fn(date?: Date, locale?: string) -> number",
    "hoursUntil": "fn(date?: Date, locale?: string) -> number",
    "daysUntil": "fn(date?: Date, locale?: string) -> number",
    "weeksUntil": "fn(date?: Date, locale?: string) -> number",
    "monthsUntil": "fn(date?: Date, locale?: string) -> number",
    "yearsUntil": "fn(date?: Date, locale?: string) -> number",
    "utc": "fn(on?: bool) -> Date"
  },
  "DateRange": {
    "start": "Date",
    "end": "Date",
    "contains": "fn(d: Date) -> bool",
    "duration": "fn() -> number",
    "eachMillisecond": "fn(fn?: fn(d: Date)) -> [Date]",
    "eachSecond": "fn(fn?: fn(d: Date)) -> [Date]",
    "eachMinute": "fn(fn?: fn(d: Date)) -> [Date]",
    "eachHour": "fn(fn?: fn(d: Date)) -> [Date]",
    "eachDay": "fn(fn?: fn(d: Date)) -> [Date]",
    "eachWeek": "fn(fn?: fn(d: Date)) -> [Date]",
    "eachMonth": "fn(fn?: fn(d: Date)) -> [Date]",
    "eachYear": "fn(fn?: fn(d: Date)) -> [Date]",
    "every": "fn(ms: number, fn?: fn(d: Date)) -> [Date]",
    "intersect": "fn(range: DateRange) -> DateRange",
    "isValid": "fn() -> bool",
    "union": "fn(range: DateRange) -> DateRange"
  },
  "!name": "sugar",
  "!define": {
    "ret": {},
    "ret1": {},
    "": {
      "name": "string",
      "src": "string",
      "value": "number"
    }
  }
}
