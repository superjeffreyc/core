{
  "JQueryUI": {
    "UI": {
      "fancytree": "Fancytree.FancytreeStatic"
    }
  },
  "JQuery": {
    "fancytree": "fn(options?: Fancytree.FancytreeOptions) -> Fancytree.Fancytree"
  },
  "Fancytree": {
    "Fancytree": {
      "$div": "JQuery",
      "rootNode": "FancytreeNode",
      "activateKey": "fn(key: string) -> FancytreeNode",
      "applyPatch": "fn(patchList: [NodePatch]) -> ?",
      "changeRefKey": "fn(oldRefKey: string, newRefKey: string)",
      "clearCookies": "fn()",
      "clearFilter": "fn()",
      "count": "fn() -> number",
      "debug": "fn(msg: ?)",
      "filterBranches": "fn(filter: string) -> number",
      "filterNodes": "fn(filter: string, leavesOnly?: bool) -> number",
      "findNextNode": "fn(match: string, startNode?: FancytreeNode) -> FancytreeNode",
      "generateFormElements": "fn(selected?: bool, active?: bool)",
      "getActiveNode": "fn() -> FancytreeNode",
      "getFirstChild": "fn() -> FancytreeNode",
      "getFocusNode": "fn(ifTreeHasFocus?: bool) -> FancytreeNode",
      "getNodeByKey": "fn(key: string, searchRoot?: FancytreeNode) -> FancytreeNode",
      "getNodesByRef": "fn(refKey: string, rootNode?: FancytreeNode) -> [FancytreeNode]",
      "getPersistData": "fn()",
      "getRootNode": "fn() -> FancytreeNode",
      "getSelectedNodes": "fn(stopOnParents?: bool) -> [FancytreeNode]",
      "hasFocus": "fn() -> bool",
      "info": "fn(msg: ?)",
      "isEditing": "fn() -> FancytreeNode",
      "loadKeyPath": "fn(keyPathList: [string], callback: fn(node: FancytreeNode, status: string)) -> ?",
      "reactivate": "fn()",
      "reload": "fn(source?: ?) -> ?",
      "render": "fn(force?: bool, deep?: bool)",
      "setFocus": "fn(flag?: bool)",
      "toDict": "fn(includeRoot?: bool, callback?: fn(node: FancytreeNode)) -> ?",
      "visit": "fn(fn: fn(node: FancytreeNode)) -> bool",
      "warn": "fn(msg: ?)"
    },
    "FancytreeNode": {
      "tree": "Fancytree",
      "parent": "FancytreeNode",
      "key": "string",
      "title": "string",
      "data": "Object",
      "children": "[FancytreeNode]",
      "expanded": "bool",
      "extraClasses": "string",
      "folder": "bool",
      "statusNodeType": "string",
      "lazy": "bool",
      "tooltip": "string",
      "addChildren": "fn(children: [Fancytree.NodeData], insertBefore?: FancytreeNode) -> FancytreeNode",
      "addNode": "fn(node: NodeData, mode?: string) -> FancytreeNode",
      "applyPatch": "fn(patch: NodePatch) -> ?",
      "collapseSiblings": "fn() -> ?",
      "copyTo": "fn(node: FancytreeNode, mode?: string, map?: fn(node: NodeData)) -> FancytreeNode",
      "countChildren": "fn(deep?: bool) -> number",
      "debug": "fn(msg: ?)",
      "editCreateNode": "fn(mode?: string, init?: Object)",
      "editEnd": "fn(applyChanges: bool)",
      "editStart": "fn()",
      "findAll": "fn(match: string) -> [FancytreeNode]",
      "findFirst": "fn(match: string) -> FancytreeNode",
      "fixSelection3AfterClick": "fn()",
      "fixSelection3FromEndNodes": "fn()",
      "fromDict": "fn(dict: NodeData)",
      "getChildren": "fn() -> [FancytreeNode]",
      "getCloneList": "fn(includeSelf?: bool) -> [FancytreeNode]",
      "getFirstChild": "fn() -> FancytreeNode",
      "getIndex": "fn() -> number",
      "getIndexHier": "fn() -> string",
      "getKeyPath": "fn(excludeSelf: bool) -> string",
      "getLastChild": "fn() -> FancytreeNode",
      "getLevel": "fn() -> number",
      "getNextSibling": "fn() -> FancytreeNode",
      "getParent": "fn() -> FancytreeNode",
      "getParentList": "fn(includeRoot: bool, includeSelf: bool) -> [FancytreeNode]",
      "getPrevSibling": "fn() -> FancytreeNode",
      "hasChildren": "fn() -> bool",
      "hasFocus": "fn() -> bool",
      "info": "fn(msg: string)",
      "isActive": "fn() -> bool",
      "isChildOf": "fn(otherNode: FancytreeNode) -> bool",
      "isClone": "fn() -> bool",
      "isDescendantOf": "fn(otherNode: FancytreeNode) -> bool",
      "isEditing": "fn() -> bool",
      "isExpanded": "fn() -> bool",
      "isFirstSibling": "fn() -> bool",
      "isFolder": "fn() -> bool",
      "isLastSibling": "fn() -> bool",
      "isLazy": "fn() -> bool",
      "isLoaded": "fn() -> bool",
      "isLoading": "fn() -> bool",
      "isRootNode": "fn() -> bool",
      "isSelected": "fn() -> bool",
      "isStatusNode": "fn() -> bool",
      "isTopLevel": "fn() -> bool",
      "isUndefined": "fn() -> bool",
      "isVisible": "fn() -> bool",
      "load": "fn(forceReload?: bool) -> ?",
      "makeVisible": "fn(opts?: Object) -> ?",
      "moveTo": "fn(targetNode: FancytreeNode, mode: string, map?: fn(node: FancytreeNode))",
      "navigate": "fn(where: number, activate?: bool) -> ?",
      "remove": "fn()",
      "removeChild": "fn(childNode: FancytreeNode)",
      "removeChildren": "fn()",
      "render": "fn(force?: bool, deep?: bool)",
      "renderStatus": "fn()",
      "renderTitle": "fn()",
      "reRegister": "fn(key: string, refKey: string) -> bool",
      "resetLazy": "fn()",
      "scheduleAction": "fn(mode: string, ms: number)",
      "scrollIntoView": "fn(effects?: bool, options?: Object) -> ?",
      "setActive": "fn(flag?: bool, opts?: Object) -> ?",
      "setExpanded": "fn(flag?: bool, opts?: Object) -> ?",
      "setFocus": "fn(flag?: bool)",
      "setSelected": "fn(flag?: bool)",
      "setStatus": "fn(status: string, message?: string, details?: string)",
      "setTitle": "fn(title: string)",
      "sortChildren": "fn(cmp?: fn(a: FancytreeNode, b: FancytreeNode), deep?: bool)",
      "toDict": "fn(recursive?: bool, callback?: fn(dict: NodeData)) -> NodeData",
      "toggleExpanded": "fn()",
      "toggleSelected": "fn()",
      "visit": "fn(fn: fn(node: FancytreeNode), includeSelf?: bool) -> bool",
      "visitAndLoad": "fn(fn: fn(node: FancytreeNode), includeSelf?: bool) -> ?",
      "visitParents": "fn(fn: fn(node: FancytreeNode), includeSelf?: bool) -> bool",
      "warn": "fn(msg: ?)"
    },
    "FancytreeClickFolderMode": "number",
    "FancytreeSelectMode": "number",
    "EventData": {
      "tree": "Fancytree",
      "widget": "Object",
      "options": "FancytreeOptions",
      "originalEvent": "JQueryEventObject",
      "node": "FancytreeNode",
      "result": "?",
      "targetType": "string",
      "response": "?"
    },
    "FancytreeEvents": {
      "activate": "fn(event: JQueryEventObject, data: EventData)",
      "beforeActivate": "fn(event: JQueryEventObject, data: EventData) -> bool",
      "beforeExpand": "fn(event: JQueryEventObject, data: EventData) -> bool",
      "beforeSelect": "fn(event: JQueryEventObject, data: EventData) -> bool",
      "blur": "fn(event: JQueryEventObject, data: EventData)",
      "blurTree": "fn(event: JQueryEventObject, data: EventData)",
      "click": "fn(event: JQueryEventObject, data: EventData) -> bool",
      "collapse": "fn(event: JQueryEventObject, data: EventData)",
      "create": "fn(event: JQueryEventObject, data: EventData)",
      "createNode": "fn(event: JQueryEventObject, data: EventData)",
      "dblclick": "fn(event: JQueryEventObject, data: EventData) -> bool",
      "deactivate": "fn(event: JQueryEventObject, data: EventData)",
      "expand": "fn(event: JQueryEventObject, data: EventData)",
      "focus": "fn(event: JQueryEventObject, data: EventData)",
      "focusTree": "fn(event: JQueryEventObject, data: EventData)",
      "init": "fn(event: JQueryEventObject, data: EventData)",
      "keydown": "fn(event: JQueryEventObject, data: EventData) -> bool",
      "keypress": "fn(event: JQueryEventObject, data: EventData)",
      "lazyLoad": "fn(event: JQueryEventObject, data: EventData)",
      "loadChildren": "fn(event: JQueryEventObject, data: EventData)",
      "loadError": "fn(event: JQueryEventObject, data: EventData) -> bool",
      "postProcess": "fn(event: JQueryEventObject, data: EventData)",
      "removeNode": "fn(event: JQueryEventObject, data: EventData)",
      "renderColumns": "fn(event: JQueryEventObject, data: EventData)",
      "renderNode": "fn(event: JQueryEventObject, data: EventData)",
      "renderTitle": "fn(event: JQueryEventObject, data: EventData)",
      "restore": "fn(event: JQueryEventObject, data: EventData)",
      "select": "fn(event: JQueryEventObject, data: EventData)"
    },
    "FancytreeOptions": {
      "activeVisible": "bool",
      "ajax": "Object",
      "aria": "bool",
      "autoActivate": "bool",
      "autoCollapse": "bool",
      "autoScroll": "bool",
      "checkbox": "bool",
      "clickFolderMode": "FancytreeClickFolderMode",
      "debugLevel": "number",
      "defaultKey": "fn(node: FancytreeNode)",
      "enableAspx": "bool",
      "extensions": "[string]",
      "focusOnSelect": "bool",
      "generateIds": "bool",
      "icons": "bool",
      "idPrefix": "string",
      "imagePath": "string",
      "keyboard": "bool",
      "keyPathSeparator": "string",
      "minExpandLevel": "number",
      "quicksearch": "bool",
      "scrollOfs": "Object",
      "scrollParent": "JQuery",
      "selectMode": "FancytreeSelectMode",
      "source": "?",
      "strings": "Object",
      "tabbable": "bool",
      "titlesTabbable": "bool",
      "toggleEffect": "Object"
    },
    "NodeData": {
      "title": "string",
      "icon": "string",
      "key": "string",
      "refKey": "string",
      "expanded": "bool",
      "active": "bool",
      "focus": "bool",
      "folder": "bool",
      "hideCheckbox": "bool",
      "lazy": "bool",
      "selected": "bool",
      "unselectable": "bool",
      "children": "[NodeData]",
      "tooltip": "string",
      "extraClasses": "string",
      "data": "Object"
    },
    "NodePatch": {
      "appendChildren": "NodeData",
      "replaceChildren": "NodeData",
      "insertChildren": "NodeData"
    },
    "TreePatch": {},
    "FancytreeStatic": {
      "buildType": "string",
      "debugLevel": "number",
      "version": "string",
      "assert": "fn(cond: bool, msg: string)",
      "debounce": "fn(timeout: number, fn: T, invokeAsap?: bool, ctx?: ?) -> T",
      "debug": "fn(msg: string)",
      "error": "fn(msg: string)",
      "escapeHtml": "fn(s: string) -> string",
      "getEventTarget": "fn(event: Event) -> Object",
      "getEventTargetType": "fn(event: Event) -> string",
      "getNode": "fn(el: JQuery) -> FancytreeNode",
      "info": "fn(msg: string)",
      "keyEventToString": "fn(event: Event) -> string",
      "parseHtml": "fn($ul: JQuery) -> [NodeData]",
      "registerExtension": "fn(definition: Object)",
      "unescapeHtml": "fn(s: string) -> string",
      "warn": "fn(msg: string)"
    }
  },
  "!name": "jquery.fancytree.d.ts"
}
