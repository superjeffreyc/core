{
  "UnderscoreStatic": {
    "str": "UnderscoreStringStatic",
    "string": "UnderscoreStringStatic"
  },
  "s": "UnderscoreStringStatic",
  "UnderscoreStringStatic": {
    "include": "fn(str: string, needle: string) -> bool",
    "contains": "fn(str: string, needle: string) -> bool",
    "reverse": "fn(str: string) -> string"
  },
  "UnderscoreStringStaticExports": {
    "exports": "fn() -> UnderscoreStringStaticExports",
    "isBlank": "fn(str: string) -> bool",
    "stripTags": "fn(str: string) -> string",
    "capitalize": "fn(str: string) -> string",
    "chop": "fn(str: string, step: number) -> [?]",
    "clean": "fn(str: string) -> string",
    "count": "fn(str: string, substr: string) -> number",
    "chars": "fn(str: string) -> [?]",
    "swapCase": "fn(str: string) -> string",
    "escapeHTML": "fn(str: string) -> string",
    "unescapeHTML": "fn(str: string) -> string",
    "escapeRegExp": "fn(str: string) -> string",
    "splice": "fn(str: string, i: number, howmany: number, substr?: string) -> string",
    "insert": "fn(str: string, i: number, substr: string) -> string",
    "join": "fn(separator: string, args: [string]) -> string",
    "lines": "fn(str: string) -> [?]",
    "startsWith": "fn(str: string, starts: string) -> bool",
    "endsWith": "fn(value: string, starts: string) -> bool",
    "succ": "fn(str: string) -> string",
    "titleize": "fn(str: string) -> string",
    "camelize": "fn(str: string) -> string",
    "underscored": "fn(str: string) -> string",
    "dasherize": "fn(str: string) -> string",
    "classify": "fn(str: string) -> string",
    "humanize": "fn(str: string) -> string",
    "trim": "fn(str: string, characters?: string) -> string",
    "strip": "fn(str: string, characters?: string) -> string",
    "ltrim": "fn(str: string, characters?: string) -> string",
    "lstrip": "fn(str: string, characters?: string) -> string",
    "rtrim": "fn(str: string, characters?: string) -> string",
    "rstrip": "fn(str: string, characters?: string) -> string",
    "truncate": "fn(str: string, length: number, truncateStr?: string) -> string",
    "prune": "fn(str: string, length: number, pruneStr?: string) -> string",
    "words": "fn(str: string) -> [string]",
    "pad": "fn(str: string, length: number, padStr?: string, type?: string) -> string",
    "lpad": "fn(str: string, length: number, padStr?: string) -> string",
    "rjust": "fn(str: string, length: number, padStr?: string) -> string",
    "rpad": "fn(str: string, length: number, padStr?: string) -> string",
    "ljust": "fn(str: string, length: number, padStr?: string) -> string",
    "lrpad": "fn(str: string, length: number, padStr?: string) -> string",
    "center": "fn(str: string, length: number, padStr?: string) -> string",
    "sprintf": "fn(format: string, args: [?]) -> string",
    "toNumber": "fn(str: string, decimals?: number) -> number",
    "numberFormat": "fn(number: number, dec?: number, dsep?: string, tsep?: string) -> string",
    "strRight": "fn(str: string, sep: string) -> string",
    "strRightBack": "fn(str: string, sep: string) -> string",
    "strLeft": "fn(str: string, sep: string) -> string",
    "strLeftBack": "fn(str: string, sep: string) -> string",
    "toSentence": "fn(array: [?], separator?: string, lastSeparator?: string, serial?: bool) -> string",
    "toSentenceSerial": "fn(array: [?], separator?: string, lastSeparator?: string) -> string",
    "slugify": "fn(str: string) -> string",
    "surround": "fn(str: string, wrapper: string) -> string",
    "quote": "fn(str: string, quoteChar?: string) -> string",
    "q": "fn(str: string, quoteChar?: string) -> string",
    "unquote": "fn(str: string, quoteChar?: string) -> string",
    "repeat": "fn(value: string, count: number, separator?: string) -> string",
    "naturalCmp": "fn(str1: string, str2: string) -> number",
    "levenshtein": "fn(str1: string, str2: string) -> number",
    "toBoolean": "fn(str: string, trueValues?: [?], falseValues?: [?]) -> bool"
  },
  "'underscore.string'": "underscoreString",
  "!name": "underscore.string"
}
