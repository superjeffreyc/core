{
  "dojox": {
    "gauges": {
      "_Gauge": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attributeMap": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret",
          "background": "Object",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "defaultColors": "[?]",
          "dir": "string",
          "domNode": "HTMLElement",
          "focused": "bool",
          "gaugeContent": "[?]",
          "height": "number",
          "hideValues": "bool",
          "id": "string",
          "image": "string",
          "lang": "string",
          "majorTicks": "Object",
          "max": "number",
          "min": "number",
          "minorTicks": "Object",
          "observer": "string",
          "ownerDocument": "Object",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "surface": "Object",
          "title": "string",
          "tooltip": "string",
          "useRangeStyles": "number",
          "useTooltip": "bool",
          "width": "number",
          "addIndicator": "fn(indicator: dojox.gauges._Indicator) -> ?",
          "addRange": "fn(range: dojox.gauges.Range)",
          "addRanges": "fn(ranges: [?])",
          "attr": "fn(name: String, value: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "createSurface": "fn()",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "draw": "fn()",
          "drawBackground": "fn(group: ?)",
          "drawForeground": "fn(group: ?)",
          "drawText": "fn(group: dojox.gfx.Group, txt: String, x: number, y: number, align: String, color: String, font: Object) -> ?",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "handleMouseDown": "fn(e: Object)",
          "handleMouseMove": "fn(e: Object)",
          "handleMouseOut": "fn(e: Object)",
          "handleMouseOver": "fn(e: Object)",
          "handleTouchEnd": "fn(e: Object)",
          "handleTouchMove": "fn(e: Object)",
          "handleTouchStart": "fn(e: Object)",
          "handleTouchStartIndicator": "fn(indicator: dojox.gauges._Indicator, e: Object)",
          "hasChildren": "fn() -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "moveIndicatorToFront": "fn(indicator: dojox.gauges._Indicator)",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "removeIndicator": "fn(indicator: dojox.gauges._Indicator)",
          "removeText": "fn(t: String)",
          "setAttribute": "fn(attr: String, value: ?)",
          "setBackground": "fn(background: Object)",
          "setMajorTicks": "fn(ticks: Object)",
          "setMinorTicks": "fn(ticks: Object)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "updateTooltip": "fn(txt: String, e: Event)",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "_Indicator": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attributeMap": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret30",
          "baseClass": "string",
          "class": "string",
          "color": "string",
          "containerNode": "HTMLElement",
          "dir": "string",
          "domNode": "HTMLElement",
          "duration": "number",
          "focused": "bool",
          "font": "Object",
          "front": "bool",
          "hideValue": "bool",
          "hover": "string",
          "id": "string",
          "interactionMode": "string",
          "label": "string",
          "lang": "string",
          "length": "number",
          "noChange": "bool",
          "observer": "string",
          "offset": "number",
          "ownerDocument": "Object",
          "srcNodeRef": "HTMLElement",
          "strokeColor": "string",
          "style": "string",
          "title": "string",
          "tooltip": "string",
          "type": "string",
          "value": "number",
          "width": "number",
          "attr": "fn(name: String, value: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "draw": "fn(dontAnimate: bool)",
          "easing": "fn(n: number) -> number",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "handleMouseDown": "fn(e: ?)",
          "handleMouseOut": "fn(e: ?)",
          "handleMouseOver": "fn(e: ?)",
          "handleTouchStart": "fn(e: ?)",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "remove": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "update": "fn(value: ?, animate: ?)",
          "valueChanged": "fn()",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onDragMove": "fn()",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "AnalogArcIndicator": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attributeMap": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret61",
          "baseClass": "string",
          "class": "string",
          "color": "string",
          "containerNode": "HTMLElement",
          "dir": "string",
          "domNode": "HTMLElement",
          "duration": "number",
          "focused": "bool",
          "font": "Object",
          "front": "bool",
          "hideValue": "bool",
          "hover": "string",
          "id": "string",
          "interactionMode": "string",
          "label": "string",
          "lang": "string",
          "length": "number",
          "noChange": "bool",
          "observer": "string",
          "offset": "number",
          "ownerDocument": "Object",
          "srcNodeRef": "HTMLElement",
          "strokeColor": "string",
          "style": "string",
          "title": "string",
          "tooltip": "string",
          "type": "string",
          "value": "number",
          "width": "number",
          "attr": "fn(name: String, value: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "draw": "fn(group: ?, dontAnimate: bool)",
          "easing": "fn(n: number) -> number",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "handleMouseDown": "fn(e: ?)",
          "handleMouseOut": "fn(e: ?)",
          "handleMouseOver": "fn(e: ?)",
          "handleTouchStart": "fn(e: ?)",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "remove": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "update": "fn(value: ?, animate: ?)",
          "valueChanged": "fn()",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onDragMove": "fn()",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "AnalogArrowIndicator": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attributeMap": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret92",
          "baseClass": "string",
          "class": "string",
          "color": "string",
          "containerNode": "HTMLElement",
          "dir": "string",
          "domNode": "HTMLElement",
          "duration": "number",
          "focused": "bool",
          "font": "Object",
          "front": "bool",
          "hideValue": "bool",
          "hover": "string",
          "id": "string",
          "interactionMode": "string",
          "label": "string",
          "lang": "string",
          "length": "number",
          "noChange": "bool",
          "observer": "string",
          "offset": "number",
          "ownerDocument": "Object",
          "srcNodeRef": "HTMLElement",
          "strokeColor": "string",
          "style": "string",
          "title": "string",
          "tooltip": "string",
          "type": "string",
          "value": "number",
          "width": "number",
          "attr": "fn(name: String, value: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "draw": "fn(group: Object, dontAnimate: bool)",
          "easing": "fn(n: number) -> number",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "handleMouseDown": "fn(e: ?)",
          "handleMouseOut": "fn(e: ?)",
          "handleMouseOver": "fn(e: ?)",
          "handleTouchStart": "fn(e: ?)",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "remove": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "update": "fn(value: ?, animate: ?)",
          "valueChanged": "fn()",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onDragMove": "fn()",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "AnalogIndicatorBase": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attributeMap": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret123",
          "baseClass": "string",
          "class": "string",
          "color": "string",
          "containerNode": "HTMLElement",
          "dir": "string",
          "domNode": "HTMLElement",
          "duration": "number",
          "focused": "bool",
          "font": "Object",
          "front": "bool",
          "hideValue": "bool",
          "hover": "string",
          "id": "string",
          "interactionMode": "string",
          "label": "string",
          "lang": "string",
          "length": "number",
          "noChange": "bool",
          "observer": "string",
          "offset": "number",
          "ownerDocument": "Object",
          "srcNodeRef": "HTMLElement",
          "strokeColor": "string",
          "style": "string",
          "title": "string",
          "tooltip": "string",
          "type": "string",
          "value": "number",
          "width": "number",
          "attr": "fn(name: String, value: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "draw": "fn(group?: Object, dontAnimate?: bool)",
          "easing": "fn(n: number) -> number",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "handleMouseDown": "fn(e: ?)",
          "handleMouseOut": "fn(e: ?)",
          "handleMouseOver": "fn(e: ?)",
          "handleTouchStart": "fn(e: ?)",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "remove": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "update": "fn(value: ?, animate: ?)",
          "valueChanged": "fn()",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onDragMove": "fn()",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "AnalogCircleIndicator": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attributeMap": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret154",
          "baseClass": "string",
          "class": "string",
          "color": "string",
          "containerNode": "HTMLElement",
          "dir": "string",
          "domNode": "HTMLElement",
          "duration": "number",
          "focused": "bool",
          "font": "Object",
          "front": "bool",
          "hideValue": "bool",
          "hover": "string",
          "id": "string",
          "interactionMode": "string",
          "label": "string",
          "lang": "string",
          "length": "number",
          "noChange": "bool",
          "observer": "string",
          "offset": "number",
          "ownerDocument": "Object",
          "srcNodeRef": "HTMLElement",
          "strokeColor": "string",
          "style": "string",
          "title": "string",
          "tooltip": "string",
          "type": "string",
          "value": "number",
          "width": "number",
          "attr": "fn(name: String, value: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "draw": "fn(group: Object, dontAnimate: bool)",
          "easing": "fn(n: number) -> number",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "handleMouseDown": "fn(e: ?)",
          "handleMouseOut": "fn(e: ?)",
          "handleMouseOver": "fn(e: ?)",
          "handleTouchStart": "fn(e: ?)",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "remove": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "update": "fn(value: ?, animate: ?)",
          "valueChanged": "fn()",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onDragMove": "fn()",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "AnalogLineIndicator": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attributeMap": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret185",
          "baseClass": "string",
          "class": "string",
          "color": "string",
          "containerNode": "HTMLElement",
          "dir": "string",
          "domNode": "HTMLElement",
          "duration": "number",
          "focused": "bool",
          "font": "Object",
          "front": "bool",
          "hideValue": "bool",
          "hover": "string",
          "id": "string",
          "interactionMode": "string",
          "label": "string",
          "lang": "string",
          "length": "number",
          "noChange": "bool",
          "observer": "string",
          "offset": "number",
          "ownerDocument": "Object",
          "srcNodeRef": "HTMLElement",
          "strokeColor": "string",
          "style": "string",
          "title": "string",
          "tooltip": "string",
          "type": "string",
          "value": "number",
          "width": "number",
          "attr": "fn(name: String, value: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "draw": "fn(group: Object, dontAnimate: bool)",
          "easing": "fn(n: number) -> number",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "handleMouseDown": "fn(e: ?)",
          "handleMouseOut": "fn(e: ?)",
          "handleMouseOver": "fn(e: ?)",
          "handleTouchStart": "fn(e: ?)",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "remove": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "update": "fn(value: ?, animate: ?)",
          "valueChanged": "fn()",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onDragMove": "fn()",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "AnalogGauge": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attributeMap": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret216",
          "background": "Object",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "cx": "number",
          "cy": "number",
          "defaultColors": "[?]",
          "dir": "string",
          "domNode": "HTMLElement",
          "endAngle": "number",
          "focused": "bool",
          "gaugeContent": "[?]",
          "height": "number",
          "hideValues": "bool",
          "id": "string",
          "image": "string",
          "lang": "string",
          "majorTicks": "Object",
          "max": "number",
          "min": "number",
          "minorTicks": "Object",
          "observer": "string",
          "orientation": "string",
          "ownerDocument": "Object",
          "radius": "number",
          "srcNodeRef": "HTMLElement",
          "startAngle": "number",
          "style": "string",
          "surface": "Object",
          "title": "string",
          "tooltip": "string",
          "useRangeStyles": "number",
          "useTooltip": "bool",
          "width": "number",
          "addIndicator": "fn(indicator: dojox.gauges._Indicator) -> ?",
          "addRange": "fn(range: dojox.gauges.Range)",
          "addRanges": "fn(ranges: [?])",
          "attr": "fn(name: String, value: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "createSurface": "fn()",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "draw": "fn()",
          "drawBackground": "fn(group: ?)",
          "drawForeground": "fn(group: ?)",
          "drawRange": "fn(group: Object, range: Object)",
          "drawText": "fn(group: dojox.gfx.Group, txt: String, x: number, y: number, align: String, color: String, font: Object) -> ?",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "getRangeUnderMouse": "fn(e: Object) -> ?",
          "handleMouseDown": "fn(e: Object)",
          "handleMouseMove": "fn(e: Object)",
          "handleMouseOut": "fn(e: Object)",
          "handleMouseOver": "fn(e: Object)",
          "handleTouchEnd": "fn(e: Object)",
          "handleTouchMove": "fn(e: Object)",
          "handleTouchStart": "fn(e: Object)",
          "handleTouchStartIndicator": "fn(indicator: dojox.gauges._Indicator, e: Object)",
          "hasChildren": "fn() -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "moveIndicatorToFront": "fn(indicator: dojox.gauges._Indicator)",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "removeIndicator": "fn(indicator: dojox.gauges._Indicator)",
          "removeText": "fn(t: String)",
          "setAttribute": "fn(attr: String, value: ?)",
          "setBackground": "fn(background: Object)",
          "setMajorTicks": "fn(ticks: Object)",
          "setMinorTicks": "fn(ticks: Object)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "updateTooltip": "fn(txt: String, e: Event)",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "AnalogNeedleIndicator": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attributeMap": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret252",
          "baseClass": "string",
          "class": "string",
          "color": "string",
          "containerNode": "HTMLElement",
          "dir": "string",
          "domNode": "HTMLElement",
          "duration": "number",
          "focused": "bool",
          "font": "Object",
          "front": "bool",
          "hideValue": "bool",
          "hover": "string",
          "id": "string",
          "interactionMode": "string",
          "label": "string",
          "lang": "string",
          "length": "number",
          "noChange": "bool",
          "observer": "string",
          "offset": "number",
          "ownerDocument": "Object",
          "srcNodeRef": "HTMLElement",
          "strokeColor": "string",
          "style": "string",
          "title": "string",
          "tooltip": "string",
          "type": "string",
          "value": "number",
          "width": "number",
          "attr": "fn(name: String, value: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "draw": "fn(group: Object, dontAnimate: bool)",
          "easing": "fn(n: number) -> number",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "handleMouseDown": "fn(e: ?)",
          "handleMouseOut": "fn(e: ?)",
          "handleMouseOver": "fn(e: ?)",
          "handleTouchStart": "fn(e: ?)",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "remove": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "update": "fn(value: ?, animate: ?)",
          "valueChanged": "fn()",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onDragMove": "fn()",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "BarCircleIndicator": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attributeMap": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret283",
          "baseClass": "string",
          "class": "string",
          "color": "string",
          "containerNode": "HTMLElement",
          "dir": "string",
          "domNode": "HTMLElement",
          "duration": "number",
          "focused": "bool",
          "font": "Object",
          "front": "bool",
          "hideValue": "bool",
          "hover": "string",
          "id": "string",
          "interactionMode": "string",
          "label": "string",
          "lang": "string",
          "length": "number",
          "noChange": "bool",
          "observer": "string",
          "offset": "number",
          "ownerDocument": "Object",
          "srcNodeRef": "HTMLElement",
          "strokeColor": "string",
          "style": "string",
          "title": "string",
          "tooltip": "string",
          "type": "string",
          "value": "number",
          "width": "number",
          "attr": "fn(name: String, value: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "draw": "fn(group: Object, dontAnimate: bool)",
          "easing": "fn(n: number) -> number",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "handleMouseDown": "fn(e: ?)",
          "handleMouseOut": "fn(e: ?)",
          "handleMouseOver": "fn(e: ?)",
          "handleTouchStart": "fn(e: ?)",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "remove": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "update": "fn(value: ?, animate: ?)",
          "valueChanged": "fn()",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onDragMove": "fn()",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "BarLineIndicator": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attributeMap": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret314",
          "baseClass": "string",
          "class": "string",
          "color": "string",
          "containerNode": "HTMLElement",
          "dir": "string",
          "domNode": "HTMLElement",
          "duration": "number",
          "focused": "bool",
          "font": "Object",
          "front": "bool",
          "hideValue": "bool",
          "hover": "string",
          "id": "string",
          "interactionMode": "string",
          "label": "string",
          "lang": "string",
          "length": "number",
          "noChange": "bool",
          "observer": "string",
          "offset": "number",
          "ownerDocument": "Object",
          "srcNodeRef": "HTMLElement",
          "strokeColor": "string",
          "style": "string",
          "title": "string",
          "tooltip": "string",
          "type": "string",
          "value": "number",
          "width": "number",
          "attr": "fn(name: String, value: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "draw": "fn(group?: Object, dontAnimate?: bool)",
          "easing": "fn(n: number) -> number",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "handleMouseDown": "fn(e: ?)",
          "handleMouseOut": "fn(e: ?)",
          "handleMouseOver": "fn(e: ?)",
          "handleTouchStart": "fn(e: ?)",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "remove": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "update": "fn(value: ?, animate: ?)",
          "valueChanged": "fn()",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onDragMove": "fn()",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "BarIndicator": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attributeMap": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret345",
          "baseClass": "string",
          "class": "string",
          "color": "string",
          "containerNode": "HTMLElement",
          "dir": "string",
          "domNode": "HTMLElement",
          "duration": "number",
          "focused": "bool",
          "font": "Object",
          "front": "bool",
          "hideValue": "bool",
          "hover": "string",
          "id": "string",
          "interactionMode": "string",
          "label": "string",
          "lang": "string",
          "length": "number",
          "noChange": "bool",
          "observer": "string",
          "offset": "number",
          "ownerDocument": "Object",
          "srcNodeRef": "HTMLElement",
          "strokeColor": "string",
          "style": "string",
          "title": "string",
          "tooltip": "string",
          "type": "string",
          "value": "number",
          "width": "number",
          "attr": "fn(name: String, value: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "draw": "fn(group: Object, dontAnimate: bool)",
          "easing": "fn(n: number) -> number",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "handleMouseDown": "fn(e: ?)",
          "handleMouseOut": "fn(e: ?)",
          "handleMouseOver": "fn(e: ?)",
          "handleTouchStart": "fn(e: ?)",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "remove": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "update": "fn(value: ?, animate: ?)",
          "valueChanged": "fn()",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onDragMove": "fn()",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "BarGauge": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attributeMap": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret376",
          "background": "Object",
          "baseClass": "string",
          "class": "string",
          "containerNode": "HTMLElement",
          "dataHeight": "number",
          "dataWidth": "number",
          "dataX": "number",
          "dataY": "number",
          "defaultColors": "[?]",
          "dir": "string",
          "domNode": "HTMLElement",
          "focused": "bool",
          "gaugeContent": "[?]",
          "height": "number",
          "hideValues": "bool",
          "id": "string",
          "image": "string",
          "lang": "string",
          "majorTicks": "Object",
          "max": "number",
          "min": "number",
          "minorTicks": "Object",
          "observer": "string",
          "ownerDocument": "Object",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "surface": "Object",
          "title": "string",
          "tooltip": "string",
          "useRangeStyles": "number",
          "useTooltip": "bool",
          "width": "number",
          "addIndicator": "fn(indicator: dojox.gauges._Indicator) -> ?",
          "addRange": "fn(range: dojox.gauges.Range)",
          "addRanges": "fn(ranges: [?])",
          "attr": "fn(name: String, value: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "createSurface": "fn()",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "draw": "fn()",
          "drawBackground": "fn(group: ?)",
          "drawForeground": "fn(group: ?)",
          "drawRange": "fn(group: Object, range: Object)",
          "drawText": "fn(group: dojox.gfx.Group, txt: String, x: number, y: number, align: String, color: String, font: Object) -> ?",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "getRangeUnderMouse": "fn(e: Object) -> ?",
          "handleMouseDown": "fn(e: Object)",
          "handleMouseMove": "fn(e: Object)",
          "handleMouseOut": "fn(e: Object)",
          "handleMouseOver": "fn(e: Object)",
          "handleTouchEnd": "fn(e: Object)",
          "handleTouchMove": "fn(e: Object)",
          "handleTouchStart": "fn(e: Object)",
          "handleTouchStartIndicator": "fn(indicator: dojox.gauges._Indicator, e: Object)",
          "hasChildren": "fn() -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "moveIndicatorToFront": "fn(indicator: dojox.gauges._Indicator)",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "removeIndicator": "fn(indicator: dojox.gauges._Indicator)",
          "removeText": "fn(t: String)",
          "setAttribute": "fn(attr: String, value: ?)",
          "setBackground": "fn(background: Object)",
          "setMajorTicks": "fn(ticks: Object)",
          "setMinorTicks": "fn(ticks: Object)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "updateTooltip": "fn(txt: String, e: Event)",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "GlossyHorizontalGaugeMarker": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attributeMap": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret410",
          "baseClass": "string",
          "class": "string",
          "color": "string",
          "containerNode": "HTMLElement",
          "dir": "string",
          "domNode": "HTMLElement",
          "duration": "number",
          "focused": "bool",
          "font": "Object",
          "front": "bool",
          "hideValue": "bool",
          "hover": "string",
          "id": "string",
          "interactionMode": "string",
          "label": "string",
          "lang": "string",
          "length": "number",
          "noChange": "bool",
          "observer": "string",
          "offset": "number",
          "ownerDocument": "Object",
          "srcNodeRef": "HTMLElement",
          "strokeColor": "string",
          "style": "string",
          "title": "string",
          "tooltip": "string",
          "type": "string",
          "value": "number",
          "width": "number",
          "attr": "fn(name: String, value: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "draw": "fn(group: Object, dontAnimate: bool)",
          "easing": "fn(n: number) -> number",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "handleMouseDown": "fn(e: ?)",
          "handleMouseOut": "fn(e: ?)",
          "handleMouseOver": "fn(e: ?)",
          "handleTouchStart": "fn(e: ?)",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "remove": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "update": "fn(value: ?, animate: ?)",
          "valueChanged": "fn()",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onDragMove": "fn()",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "GlossyCircularGauge": {
        "!type": "fn()",
        "prototype": {
          "attributeMap": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret441",
          "background": "Object",
          "baseClass": "string",
          "class": "string",
          "color": "string",
          "containerNode": "HTMLElement",
          "cx": "number",
          "cy": "number",
          "defaultColors": "[?]",
          "dir": "string",
          "domNode": "HTMLElement",
          "endAngle": "number",
          "focused": "bool",
          "font": "Object",
          "gaugeContent": "[?]",
          "height": "number",
          "hideValues": "bool",
          "id": "string",
          "image": "string",
          "lang": "string",
          "majorTicks": "Object",
          "majorTicksColor": "Object",
          "majorTicksInterval": "number",
          "majorTicksLabelPlacement": "string",
          "max": "number",
          "min": "number",
          "minorTicks": "Object",
          "minorTicksColor": "Object",
          "minorTicksInterval": "number",
          "needleColor": "Object",
          "noChange": "bool",
          "observer": "string",
          "orientation": "string",
          "ownerDocument": "Object",
          "radius": "number",
          "scalePrecision": "number",
          "srcNodeRef": "HTMLElement",
          "startAngle": "number",
          "style": "string",
          "surface": "Object",
          "textIndicatorColor": "Object",
          "textIndicatorFont": "string",
          "textIndicatorPrecision": "number",
          "textIndicatorVisible": "bool",
          "title": "string",
          "tooltip": "string",
          "useRangeStyles": "number",
          "useTooltip": "bool",
          "value": "number",
          "width": "number",
          "addIndicator": "fn(indicator: dojox.gauges._Indicator) -> ?",
          "addRange": "fn(range: dojox.gauges.Range)",
          "addRanges": "fn(ranges: [?])",
          "attr": "fn(name: String, value: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "createSurface": "fn()",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "draw": "fn()",
          "drawBackground": "fn(group: Object)",
          "drawForeground": "fn(group: Object)",
          "drawRange": "fn(group: Object, range: Object)",
          "drawText": "fn(group: dojox.gfx.Group, txt: String, x: number, y: number, align: String, color: String, font: Object) -> ?",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getMajorTicksLength": "fn() -> ?",
          "getMajorTicksOffset": "fn() -> ?",
          "getMinorTicksLength": "fn() -> ?",
          "getMinorTicksOffset": "fn() -> ?",
          "getParent": "fn() -> ?",
          "getRangeUnderMouse": "fn(e: Object) -> ?",
          "handleMouseDown": "fn(e: Object)",
          "handleMouseMove": "fn(e: Object)",
          "handleMouseOut": "fn(e: Object)",
          "handleMouseOver": "fn(e: Object)",
          "handleTouchEnd": "fn(e: Object)",
          "handleTouchMove": "fn(e: Object)",
          "handleTouchStart": "fn(e: Object)",
          "handleTouchStartIndicator": "fn(indicator: dojox.gauges._Indicator, e: Object)",
          "hasChildren": "fn() -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "moveIndicatorToFront": "fn(indicator: dojox.gauges._Indicator)",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "removeIndicator": "fn(indicator: dojox.gauges._Indicator)",
          "removeText": "fn(t: String)",
          "setAttribute": "fn(attr: String, value: ?)",
          "setBackground": "fn(background: Object)",
          "setMajorTicks": "fn(ticks: Object)",
          "setMajorTicksLength": "fn(length: ?) -> Function",
          "setMajorTicksOffset": "fn(offset: ?) -> Function",
          "setMinorTicks": "fn(ticks: Object)",
          "setMinorTicksLength": "fn(length: ?) -> Function",
          "setMinorTicksOffset": "fn(offset: ?) -> Function",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "updateTooltip": "fn(txt: String, e: Event)",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()",
          "onValueChanged": "fn()"
        }
      },
      "GlossyCircularGaugeNeedle": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attributeMap": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret492",
          "baseClass": "string",
          "class": "string",
          "color": "string",
          "containerNode": "HTMLElement",
          "dir": "string",
          "domNode": "HTMLElement",
          "duration": "number",
          "focused": "bool",
          "font": "Object",
          "front": "bool",
          "hideValue": "bool",
          "hover": "string",
          "id": "string",
          "interactionMode": "string",
          "label": "string",
          "lang": "string",
          "length": "number",
          "noChange": "bool",
          "observer": "string",
          "offset": "number",
          "ownerDocument": "Object",
          "srcNodeRef": "HTMLElement",
          "strokeColor": "string",
          "style": "string",
          "title": "string",
          "tooltip": "string",
          "type": "string",
          "value": "number",
          "width": "number",
          "attr": "fn(name: String, value: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "draw": "fn(group: Object, dontAnimate: bool)",
          "easing": "fn(n: number) -> number",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "handleMouseDown": "fn(e: ?)",
          "handleMouseOut": "fn(e: ?)",
          "handleMouseOver": "fn(e: ?)",
          "handleTouchStart": "fn(e: ?)",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "remove": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "update": "fn(value: ?, animate: ?)",
          "valueChanged": "fn()",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onDragMove": "fn()",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "GlossyCircularGaugeBase": {
        "!type": "fn()",
        "prototype": {
          "attributeMap": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret523",
          "background": "Object",
          "baseClass": "string",
          "class": "string",
          "color": "string",
          "containerNode": "HTMLElement",
          "cx": "number",
          "cy": "number",
          "defaultColors": "[?]",
          "dir": "string",
          "domNode": "HTMLElement",
          "endAngle": "number",
          "focused": "bool",
          "font": "Object",
          "gaugeContent": "[?]",
          "height": "number",
          "hideValues": "bool",
          "id": "string",
          "image": "string",
          "lang": "string",
          "majorTicks": "Object",
          "majorTicksColor": "Object",
          "majorTicksInterval": "number",
          "majorTicksLabelPlacement": "string",
          "max": "number",
          "min": "number",
          "minorTicks": "Object",
          "minorTicksColor": "Object",
          "minorTicksInterval": "number",
          "needleColor": "Object",
          "noChange": "bool",
          "observer": "string",
          "orientation": "string",
          "ownerDocument": "Object",
          "radius": "number",
          "scalePrecision": "number",
          "srcNodeRef": "HTMLElement",
          "startAngle": "number",
          "style": "string",
          "surface": "Object",
          "textIndicatorColor": "Object",
          "textIndicatorFont": "string",
          "textIndicatorPrecision": "number",
          "textIndicatorVisible": "bool",
          "title": "string",
          "tooltip": "string",
          "useRangeStyles": "number",
          "useTooltip": "bool",
          "value": "number",
          "width": "number",
          "addIndicator": "fn(indicator: dojox.gauges._Indicator) -> ?",
          "addRange": "fn(range: dojox.gauges.Range)",
          "addRanges": "fn(ranges: [?])",
          "attr": "fn(name: String, value: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "createSurface": "fn()",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "draw": "fn()",
          "drawBackground": "fn(group: ?)",
          "drawForeground": "fn(group: ?)",
          "drawRange": "fn(group: Object, range: Object)",
          "drawText": "fn(group: dojox.gfx.Group, txt: String, x: number, y: number, align: String, color: String, font: Object) -> ?",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getMajorTicksLength": "fn() -> ?",
          "getMajorTicksOffset": "fn() -> ?",
          "getMinorTicksLength": "fn() -> ?",
          "getMinorTicksOffset": "fn() -> ?",
          "getParent": "fn() -> ?",
          "getRangeUnderMouse": "fn(e: Object) -> ?",
          "handleMouseDown": "fn(e: Object)",
          "handleMouseMove": "fn(e: Object)",
          "handleMouseOut": "fn(e: Object)",
          "handleMouseOver": "fn(e: Object)",
          "handleTouchEnd": "fn(e: Object)",
          "handleTouchMove": "fn(e: Object)",
          "handleTouchStart": "fn(e: Object)",
          "handleTouchStartIndicator": "fn(indicator: dojox.gauges._Indicator, e: Object)",
          "hasChildren": "fn() -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "moveIndicatorToFront": "fn(indicator: dojox.gauges._Indicator)",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "removeIndicator": "fn(indicator: dojox.gauges._Indicator)",
          "removeText": "fn(t: String)",
          "setAttribute": "fn(attr: String, value: ?)",
          "setBackground": "fn(background: Object)",
          "setMajorTicks": "fn(ticks: Object)",
          "setMajorTicksLength": "fn(length: ?) -> Function",
          "setMajorTicksOffset": "fn(offset: ?) -> Function",
          "setMinorTicks": "fn(ticks: Object)",
          "setMinorTicksLength": "fn(length: ?) -> Function",
          "setMinorTicksOffset": "fn(offset: ?) -> Function",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "updateTooltip": "fn(txt: String, e: Event)",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()",
          "onValueChanged": "fn()"
        }
      },
      "GlossyHorizontalGauge": {
        "!type": "fn()",
        "prototype": {
          "attributeMap": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret574",
          "background": "Object",
          "baseClass": "string",
          "class": "string",
          "color": "string",
          "containerNode": "HTMLElement",
          "dataHeight": "number",
          "dataWidth": "number",
          "dataX": "number",
          "dataY": "number",
          "defaultColors": "[?]",
          "dir": "string",
          "domNode": "HTMLElement",
          "focused": "bool",
          "font": "Object",
          "gaugeContent": "[?]",
          "height": "number",
          "hideValues": "bool",
          "id": "string",
          "image": "string",
          "lang": "string",
          "majorTicks": "Object",
          "majorTicksColor": "Object",
          "majorTicksInterval": "number",
          "markerColor": "string",
          "max": "number",
          "min": "number",
          "minorTicks": "Object",
          "minorTicksColor": "Object",
          "minorTicksInterval": "number",
          "noChange": "bool",
          "observer": "string",
          "ownerDocument": "Object",
          "scalePrecision": "number",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "surface": "Object",
          "title": "string",
          "tooltip": "string",
          "useRangeStyles": "number",
          "useTooltip": "bool",
          "value": "number",
          "width": "number",
          "addIndicator": "fn(indicator: dojox.gauges._Indicator) -> ?",
          "addRange": "fn(range: dojox.gauges.Range)",
          "addRanges": "fn(ranges: [?])",
          "attr": "fn(name: String, value: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "createSurface": "fn()",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "draw": "fn()",
          "drawBackground": "fn(group: Object)",
          "drawForeground": "fn(group: ?)",
          "drawRange": "fn(group: Object, range: Object)",
          "drawText": "fn(group: dojox.gfx.Group, txt: String, x: number, y: number, align: String, color: String, font: Object) -> ?",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getMajorTicksLength": "fn() -> ?",
          "getMinorTicksLength": "fn() -> ?",
          "getParent": "fn() -> ?",
          "getRangeUnderMouse": "fn(e: Object) -> ?",
          "handleMouseDown": "fn(e: Object)",
          "handleMouseMove": "fn(e: Object)",
          "handleMouseOut": "fn(e: Object)",
          "handleMouseOver": "fn(e: Object)",
          "handleTouchEnd": "fn(e: Object)",
          "handleTouchMove": "fn(e: Object)",
          "handleTouchStart": "fn(e: Object)",
          "handleTouchStartIndicator": "fn(indicator: dojox.gauges._Indicator, e: Object)",
          "hasChildren": "fn() -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "moveIndicatorToFront": "fn(indicator: dojox.gauges._Indicator)",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "removeIndicator": "fn(indicator: dojox.gauges._Indicator)",
          "removeText": "fn(t: String)",
          "setAttribute": "fn(attr: String, value: ?)",
          "setBackground": "fn(background: Object)",
          "setMajorTicks": "fn(ticks: Object)",
          "setMajorTicksLength": "fn(length: ?) -> Function",
          "setMinorTicks": "fn(ticks: Object)",
          "setMinorTicksLength": "fn(length: ?) -> Function",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "updateTooltip": "fn(txt: String, e: Event)",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()",
          "onValueChanged": "fn()"
        }
      },
      "Range": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "attributeMap": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret618",
          "baseClass": "string",
          "class": "string",
          "color": "Object",
          "containerNode": "HTMLElement",
          "dir": "string",
          "domNode": "HTMLElement",
          "focused": "bool",
          "high": "number",
          "hover": "string",
          "id": "string",
          "lang": "string",
          "low": "number",
          "observer": "string",
          "ownerDocument": "Object",
          "size": "number",
          "srcNodeRef": "HTMLElement",
          "style": "string",
          "title": "string",
          "tooltip": "string",
          "attr": "fn(name: String, value: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "TextIndicator": {
        "!type": "fn(params?: Object, srcNodeRef?: HTMLElement)",
        "prototype": {
          "align": "string",
          "set": "fn(property: string, value: string)",
          "get": "fn(property: string) -> string",
          "watch": "fn(property: string, callback: ?) -> ret639",
          "attributeMap": "Object",
          "baseClass": "string",
          "class": "string",
          "color": "string",
          "containerNode": "HTMLElement",
          "dir": "string",
          "domNode": "HTMLElement",
          "duration": "number",
          "fixedPrecision": "bool",
          "focused": "bool",
          "font": "Object",
          "front": "bool",
          "hideValue": "bool",
          "hover": "string",
          "id": "string",
          "interactionMode": "string",
          "label": "string",
          "lang": "string",
          "length": "number",
          "noChange": "bool",
          "observer": "string",
          "offset": "number",
          "ownerDocument": "Object",
          "precision": "number",
          "srcNodeRef": "HTMLElement",
          "strokeColor": "string",
          "style": "string",
          "title": "string",
          "tooltip": "string",
          "type": "string",
          "value": "number",
          "width": "number",
          "x": "number",
          "y": "number",
          "attr": "fn(name: String, value: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "draw": "fn(group?: ?, dontAnimate?: bool)",
          "easing": "fn(n: number) -> number",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getParent": "fn() -> ?",
          "handleMouseDown": "fn(e: ?)",
          "handleMouseOut": "fn(e: ?)",
          "handleMouseOver": "fn(e: ?)",
          "handleTouchStart": "fn(e: ?)",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "remove": "fn()",
          "setAttribute": "fn(attr: String, value: ?)",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "update": "fn(value: ?, animate: ?)",
          "valueChanged": "fn()",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onDragMove": "fn()",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()"
        }
      },
      "GlossySemiCircularGauge": {
        "!type": "fn()",
        "prototype": {
          "attributeMap": "Object",
          "set": "fn(property: string, value: Object)",
          "get": "fn(property: string) -> Object",
          "watch": "fn(property: string, callback: ?) -> ret675",
          "background": "Object",
          "baseClass": "string",
          "class": "string",
          "color": "string",
          "containerNode": "HTMLElement",
          "cx": "number",
          "cy": "number",
          "defaultColors": "[?]",
          "dir": "string",
          "domNode": "HTMLElement",
          "endAngle": "number",
          "focused": "bool",
          "font": "Object",
          "gaugeContent": "[?]",
          "height": "number",
          "hideValues": "bool",
          "id": "string",
          "image": "string",
          "lang": "string",
          "majorTicks": "Object",
          "majorTicksColor": "Object",
          "majorTicksInterval": "number",
          "majorTicksLabelPlacement": "string",
          "max": "number",
          "min": "number",
          "minorTicks": "Object",
          "minorTicksColor": "Object",
          "minorTicksInterval": "number",
          "needleColor": "Object",
          "noChange": "bool",
          "observer": "string",
          "orientation": "string",
          "ownerDocument": "Object",
          "radius": "number",
          "scalePrecision": "number",
          "srcNodeRef": "HTMLElement",
          "startAngle": "number",
          "style": "string",
          "surface": "Object",
          "textIndicatorColor": "Object",
          "textIndicatorFont": "string",
          "textIndicatorPrecision": "number",
          "textIndicatorVisible": "bool",
          "title": "string",
          "tooltip": "string",
          "useRangeStyles": "number",
          "useTooltip": "bool",
          "value": "number",
          "width": "number",
          "addIndicator": "fn(indicator: dojox.gauges._Indicator) -> ?",
          "addRange": "fn(range: dojox.gauges.Range)",
          "addRanges": "fn(ranges: [?])",
          "attr": "fn(name: String, value: Object) -> ?",
          "buildRendering": "fn()",
          "connect": "fn(obj: Object, event: String, method: String) -> ?",
          "createSurface": "fn()",
          "defer": "fn(fcn: Function, delay: number) -> Object",
          "destroy": "fn(preserveDom?: bool)",
          "destroyDescendants": "fn(preserveDom: bool)",
          "destroyRecursive": "fn(preserveDom: bool)",
          "destroyRendering": "fn(preserveDom?: bool)",
          "disconnect": "fn(handle: ?)",
          "draw": "fn()",
          "drawBackground": "fn(group: Object)",
          "drawForeground": "fn(group: Object)",
          "drawRange": "fn(group: Object, range: Object)",
          "drawText": "fn(group: dojox.gfx.Group, txt: String, x: number, y: number, align: String, color: String, font: Object) -> ?",
          "emit": "fn(type: String, eventObj: Object, callbackArgs: [?]) -> ?",
          "getChildren": "fn() -> [?]",
          "getDescendants": "fn() -> [?]",
          "getMajorTicksLength": "fn() -> ?",
          "getMajorTicksOffset": "fn() -> ?",
          "getMinorTicksLength": "fn() -> ?",
          "getMinorTicksOffset": "fn() -> ?",
          "getParent": "fn() -> ?",
          "getRangeUnderMouse": "fn(e: Object) -> ?",
          "handleMouseDown": "fn(e: Object)",
          "handleMouseMove": "fn(e: Object)",
          "handleMouseOut": "fn(e: Object)",
          "handleMouseOver": "fn(e: Object)",
          "handleTouchEnd": "fn(e: Object)",
          "handleTouchMove": "fn(e: Object)",
          "handleTouchStart": "fn(e: Object)",
          "handleTouchStartIndicator": "fn(indicator: dojox.gauges._Indicator, e: Object)",
          "hasChildren": "fn() -> bool",
          "isFocusable": "fn() -> ?",
          "isLeftToRight": "fn() -> ?",
          "moveIndicatorToFront": "fn(indicator: dojox.gauges._Indicator)",
          "on": "fn(type: String, func: Function) -> ?",
          "own": "fn() -> ?",
          "placeAt": "fn(reference: String, position: String) -> ?",
          "postCreate": "fn()",
          "postMixInProperties": "fn()",
          "removeIndicator": "fn(indicator: dojox.gauges._Indicator)",
          "removeText": "fn(t: String)",
          "setAttribute": "fn(attr: String, value: ?)",
          "setBackground": "fn(background: Object)",
          "setMajorTicks": "fn(ticks: Object)",
          "setMajorTicksLength": "fn(length: ?) -> Function",
          "setMajorTicksOffset": "fn(offset: ?) -> Function",
          "setMinorTicks": "fn(ticks: Object)",
          "setMinorTicksLength": "fn(length: ?) -> Function",
          "setMinorTicksOffset": "fn(offset: ?) -> Function",
          "startup": "fn()",
          "subscribe": "fn(t: String, method: Function) -> ?",
          "uninitialize": "fn() -> bool",
          "unsubscribe": "fn(handle: Object)",
          "updateTooltip": "fn(txt: String, e: Event)",
          "onBlur": "fn()",
          "onClick": "fn(event: ?)",
          "onClose": "fn() -> bool",
          "onDblClick": "fn(event: ?)",
          "onFocus": "fn()",
          "onHide": "fn()",
          "onKeyDown": "fn(event: ?)",
          "onKeyPress": "fn(event: ?)",
          "onKeyUp": "fn(event: ?)",
          "onMouseDown": "fn(event: ?)",
          "onMouseEnter": "fn(event: ?)",
          "onMouseLeave": "fn(event: ?)",
          "onMouseMove": "fn(event: ?)",
          "onMouseOut": "fn(event: ?)",
          "onMouseOver": "fn(event: ?)",
          "onMouseUp": "fn(event: ?)",
          "onShow": "fn()",
          "onValueChanged": "fn()"
        }
      }
    }
  },
  "dojox/gauges/_Indicator": "exp",
  "dojox/gauges/_Gauge": "exp",
  "dojox/gauges/AnalogArrowIndicator": "exp",
  "dojox/gauges/AnalogCircleIndicator": "exp",
  "dojox/gauges/AnalogArcIndicator": "exp",
  "dojox/gauges/AnalogGauge": "exp",
  "dojox/gauges/AnalogIndicatorBase": "exp",
  "dojox/gauges/AnalogLineIndicator": "exp",
  "dojox/gauges/BarCircleIndicator": "exp",
  "dojox/gauges/AnalogNeedleIndicator": "exp",
  "dojox/gauges/BarGauge": "exp",
  "dojox/gauges/BarLineIndicator": "exp",
  "dojox/gauges/BarIndicator": "exp",
  "dojox/gauges/GlossyCircularGaugeNeedle": "exp",
  "dojox/gauges/GlossyHorizontalGaugeMarker": "exp",
  "dojox/gauges/GlossyCircularGauge": "exp",
  "dojox/gauges/Range": "exp",
  "dojox/gauges/GlossyCircularGaugeBase": "exp",
  "dojox/gauges/GlossyHorizontalGauge": "exp",
  "dojox/gauges/GlossySemiCircularGauge": "exp",
  "dojox/gauges/TextIndicator": "exp",
  "!name": "dojox.gauges.d.ts",
  "!define": {
    "ret": {
      "unwatch": "fn()"
    },
    "ret1": {
      "unwatch": "fn()"
    },
    "ret2": {
      "unwatch": "fn()"
    },
    "ret3": {
      "unwatch": "fn()"
    },
    "ret4": {
      "unwatch": "fn()"
    },
    "ret5": {
      "unwatch": "fn()"
    },
    "ret6": {
      "unwatch": "fn()"
    },
    "ret7": {
      "unwatch": "fn()"
    },
    "ret8": {
      "unwatch": "fn()"
    },
    "ret9": {
      "unwatch": "fn()"
    },
    "ret10": {
      "unwatch": "fn()"
    },
    "ret11": {
      "unwatch": "fn()"
    },
    "ret12": {
      "unwatch": "fn()"
    },
    "ret13": {
      "unwatch": "fn()"
    },
    "ret14": {
      "unwatch": "fn()"
    },
    "ret15": {
      "unwatch": "fn()"
    },
    "ret16": {
      "unwatch": "fn()"
    },
    "ret17": {
      "unwatch": "fn()"
    },
    "ret18": {
      "unwatch": "fn()"
    },
    "ret19": {
      "unwatch": "fn()"
    },
    "ret20": {
      "unwatch": "fn()"
    },
    "ret21": {
      "unwatch": "fn()"
    },
    "ret22": {
      "unwatch": "fn()"
    },
    "ret23": {
      "unwatch": "fn()"
    },
    "ret24": {
      "unwatch": "fn()"
    },
    "ret25": {
      "unwatch": "fn()"
    },
    "ret26": {
      "unwatch": "fn()"
    },
    "ret27": {
      "unwatch": "fn()"
    },
    "ret28": {
      "unwatch": "fn()"
    },
    "ret29": {
      "unwatch": "fn()"
    },
    "ret30": {
      "unwatch": "fn()"
    },
    "ret31": {
      "unwatch": "fn()"
    },
    "ret32": {
      "unwatch": "fn()"
    },
    "ret33": {
      "unwatch": "fn()"
    },
    "ret34": {
      "unwatch": "fn()"
    },
    "ret35": {
      "unwatch": "fn()"
    },
    "ret36": {
      "unwatch": "fn()"
    },
    "ret37": {
      "unwatch": "fn()"
    },
    "ret38": {
      "unwatch": "fn()"
    },
    "ret39": {
      "unwatch": "fn()"
    },
    "ret40": {
      "unwatch": "fn()"
    },
    "ret41": {
      "unwatch": "fn()"
    },
    "ret42": {
      "unwatch": "fn()"
    },
    "ret43": {
      "unwatch": "fn()"
    },
    "ret44": {
      "unwatch": "fn()"
    },
    "ret45": {
      "unwatch": "fn()"
    },
    "ret46": {
      "unwatch": "fn()"
    },
    "ret47": {
      "unwatch": "fn()"
    },
    "ret48": {
      "unwatch": "fn()"
    },
    "ret49": {
      "unwatch": "fn()"
    },
    "ret50": {
      "unwatch": "fn()"
    },
    "ret51": {
      "unwatch": "fn()"
    },
    "ret52": {
      "unwatch": "fn()"
    },
    "ret53": {
      "unwatch": "fn()"
    },
    "ret54": {
      "unwatch": "fn()"
    },
    "ret55": {
      "unwatch": "fn()"
    },
    "ret56": {
      "unwatch": "fn()"
    },
    "ret57": {
      "unwatch": "fn()"
    },
    "ret58": {
      "unwatch": "fn()"
    },
    "ret59": {
      "unwatch": "fn()"
    },
    "ret60": {
      "unwatch": "fn()"
    },
    "ret61": {
      "unwatch": "fn()"
    },
    "ret62": {
      "unwatch": "fn()"
    },
    "ret63": {
      "unwatch": "fn()"
    },
    "ret64": {
      "unwatch": "fn()"
    },
    "ret65": {
      "unwatch": "fn()"
    },
    "ret66": {
      "unwatch": "fn()"
    },
    "ret67": {
      "unwatch": "fn()"
    },
    "ret68": {
      "unwatch": "fn()"
    },
    "ret69": {
      "unwatch": "fn()"
    },
    "ret70": {
      "unwatch": "fn()"
    },
    "ret71": {
      "unwatch": "fn()"
    },
    "ret72": {
      "unwatch": "fn()"
    },
    "ret73": {
      "unwatch": "fn()"
    },
    "ret74": {
      "unwatch": "fn()"
    },
    "ret75": {
      "unwatch": "fn()"
    },
    "ret76": {
      "unwatch": "fn()"
    },
    "ret77": {
      "unwatch": "fn()"
    },
    "ret78": {
      "unwatch": "fn()"
    },
    "ret79": {
      "unwatch": "fn()"
    },
    "ret80": {
      "unwatch": "fn()"
    },
    "ret81": {
      "unwatch": "fn()"
    },
    "ret82": {
      "unwatch": "fn()"
    },
    "ret83": {
      "unwatch": "fn()"
    },
    "ret84": {
      "unwatch": "fn()"
    },
    "ret85": {
      "unwatch": "fn()"
    },
    "ret86": {
      "unwatch": "fn()"
    },
    "ret87": {
      "unwatch": "fn()"
    },
    "ret88": {
      "unwatch": "fn()"
    },
    "ret89": {
      "unwatch": "fn()"
    },
    "ret90": {
      "unwatch": "fn()"
    },
    "ret91": {
      "unwatch": "fn()"
    },
    "ret92": {
      "unwatch": "fn()"
    },
    "ret93": {
      "unwatch": "fn()"
    },
    "ret94": {
      "unwatch": "fn()"
    },
    "ret95": {
      "unwatch": "fn()"
    },
    "ret96": {
      "unwatch": "fn()"
    },
    "ret97": {
      "unwatch": "fn()"
    },
    "ret98": {
      "unwatch": "fn()"
    },
    "ret99": {
      "unwatch": "fn()"
    },
    "ret100": {
      "unwatch": "fn()"
    },
    "ret101": {
      "unwatch": "fn()"
    },
    "ret102": {
      "unwatch": "fn()"
    },
    "ret103": {
      "unwatch": "fn()"
    },
    "ret104": {
      "unwatch": "fn()"
    },
    "ret105": {
      "unwatch": "fn()"
    },
    "ret106": {
      "unwatch": "fn()"
    },
    "ret107": {
      "unwatch": "fn()"
    },
    "ret108": {
      "unwatch": "fn()"
    },
    "ret109": {
      "unwatch": "fn()"
    },
    "ret110": {
      "unwatch": "fn()"
    },
    "ret111": {
      "unwatch": "fn()"
    },
    "ret112": {
      "unwatch": "fn()"
    },
    "ret113": {
      "unwatch": "fn()"
    },
    "ret114": {
      "unwatch": "fn()"
    },
    "ret115": {
      "unwatch": "fn()"
    },
    "ret116": {
      "unwatch": "fn()"
    },
    "ret117": {
      "unwatch": "fn()"
    },
    "ret118": {
      "unwatch": "fn()"
    },
    "ret119": {
      "unwatch": "fn()"
    },
    "ret120": {
      "unwatch": "fn()"
    },
    "ret121": {
      "unwatch": "fn()"
    },
    "ret122": {
      "unwatch": "fn()"
    },
    "ret123": {
      "unwatch": "fn()"
    },
    "ret124": {
      "unwatch": "fn()"
    },
    "ret125": {
      "unwatch": "fn()"
    },
    "ret126": {
      "unwatch": "fn()"
    },
    "ret127": {
      "unwatch": "fn()"
    },
    "ret128": {
      "unwatch": "fn()"
    },
    "ret129": {
      "unwatch": "fn()"
    },
    "ret130": {
      "unwatch": "fn()"
    },
    "ret131": {
      "unwatch": "fn()"
    },
    "ret132": {
      "unwatch": "fn()"
    },
    "ret133": {
      "unwatch": "fn()"
    },
    "ret134": {
      "unwatch": "fn()"
    },
    "ret135": {
      "unwatch": "fn()"
    },
    "ret136": {
      "unwatch": "fn()"
    },
    "ret137": {
      "unwatch": "fn()"
    },
    "ret138": {
      "unwatch": "fn()"
    },
    "ret139": {
      "unwatch": "fn()"
    },
    "ret140": {
      "unwatch": "fn()"
    },
    "ret141": {
      "unwatch": "fn()"
    },
    "ret142": {
      "unwatch": "fn()"
    },
    "ret143": {
      "unwatch": "fn()"
    },
    "ret144": {
      "unwatch": "fn()"
    },
    "ret145": {
      "unwatch": "fn()"
    },
    "ret146": {
      "unwatch": "fn()"
    },
    "ret147": {
      "unwatch": "fn()"
    },
    "ret148": {
      "unwatch": "fn()"
    },
    "ret149": {
      "unwatch": "fn()"
    },
    "ret150": {
      "unwatch": "fn()"
    },
    "ret151": {
      "unwatch": "fn()"
    },
    "ret152": {
      "unwatch": "fn()"
    },
    "ret153": {
      "unwatch": "fn()"
    },
    "ret154": {
      "unwatch": "fn()"
    },
    "ret155": {
      "unwatch": "fn()"
    },
    "ret156": {
      "unwatch": "fn()"
    },
    "ret157": {
      "unwatch": "fn()"
    },
    "ret158": {
      "unwatch": "fn()"
    },
    "ret159": {
      "unwatch": "fn()"
    },
    "ret160": {
      "unwatch": "fn()"
    },
    "ret161": {
      "unwatch": "fn()"
    },
    "ret162": {
      "unwatch": "fn()"
    },
    "ret163": {
      "unwatch": "fn()"
    },
    "ret164": {
      "unwatch": "fn()"
    },
    "ret165": {
      "unwatch": "fn()"
    },
    "ret166": {
      "unwatch": "fn()"
    },
    "ret167": {
      "unwatch": "fn()"
    },
    "ret168": {
      "unwatch": "fn()"
    },
    "ret169": {
      "unwatch": "fn()"
    },
    "ret170": {
      "unwatch": "fn()"
    },
    "ret171": {
      "unwatch": "fn()"
    },
    "ret172": {
      "unwatch": "fn()"
    },
    "ret173": {
      "unwatch": "fn()"
    },
    "ret174": {
      "unwatch": "fn()"
    },
    "ret175": {
      "unwatch": "fn()"
    },
    "ret176": {
      "unwatch": "fn()"
    },
    "ret177": {
      "unwatch": "fn()"
    },
    "ret178": {
      "unwatch": "fn()"
    },
    "ret179": {
      "unwatch": "fn()"
    },
    "ret180": {
      "unwatch": "fn()"
    },
    "ret181": {
      "unwatch": "fn()"
    },
    "ret182": {
      "unwatch": "fn()"
    },
    "ret183": {
      "unwatch": "fn()"
    },
    "ret184": {
      "unwatch": "fn()"
    },
    "ret185": {
      "unwatch": "fn()"
    },
    "ret186": {
      "unwatch": "fn()"
    },
    "ret187": {
      "unwatch": "fn()"
    },
    "ret188": {
      "unwatch": "fn()"
    },
    "ret189": {
      "unwatch": "fn()"
    },
    "ret190": {
      "unwatch": "fn()"
    },
    "ret191": {
      "unwatch": "fn()"
    },
    "ret192": {
      "unwatch": "fn()"
    },
    "ret193": {
      "unwatch": "fn()"
    },
    "ret194": {
      "unwatch": "fn()"
    },
    "ret195": {
      "unwatch": "fn()"
    },
    "ret196": {
      "unwatch": "fn()"
    },
    "ret197": {
      "unwatch": "fn()"
    },
    "ret198": {
      "unwatch": "fn()"
    },
    "ret199": {
      "unwatch": "fn()"
    },
    "ret200": {
      "unwatch": "fn()"
    },
    "ret201": {
      "unwatch": "fn()"
    },
    "ret202": {
      "unwatch": "fn()"
    },
    "ret203": {
      "unwatch": "fn()"
    },
    "ret204": {
      "unwatch": "fn()"
    },
    "ret205": {
      "unwatch": "fn()"
    },
    "ret206": {
      "unwatch": "fn()"
    },
    "ret207": {
      "unwatch": "fn()"
    },
    "ret208": {
      "unwatch": "fn()"
    },
    "ret209": {
      "unwatch": "fn()"
    },
    "ret210": {
      "unwatch": "fn()"
    },
    "ret211": {
      "unwatch": "fn()"
    },
    "ret212": {
      "unwatch": "fn()"
    },
    "ret213": {
      "unwatch": "fn()"
    },
    "ret214": {
      "unwatch": "fn()"
    },
    "ret215": {
      "unwatch": "fn()"
    },
    "ret216": {
      "unwatch": "fn()"
    },
    "ret217": {
      "unwatch": "fn()"
    },
    "ret218": {
      "unwatch": "fn()"
    },
    "ret219": {
      "unwatch": "fn()"
    },
    "ret220": {
      "unwatch": "fn()"
    },
    "ret221": {
      "unwatch": "fn()"
    },
    "ret222": {
      "unwatch": "fn()"
    },
    "ret223": {
      "unwatch": "fn()"
    },
    "ret224": {
      "unwatch": "fn()"
    },
    "ret225": {
      "unwatch": "fn()"
    },
    "ret226": {
      "unwatch": "fn()"
    },
    "ret227": {
      "unwatch": "fn()"
    },
    "ret228": {
      "unwatch": "fn()"
    },
    "ret229": {
      "unwatch": "fn()"
    },
    "ret230": {
      "unwatch": "fn()"
    },
    "ret231": {
      "unwatch": "fn()"
    },
    "ret232": {
      "unwatch": "fn()"
    },
    "ret233": {
      "unwatch": "fn()"
    },
    "ret234": {
      "unwatch": "fn()"
    },
    "ret235": {
      "unwatch": "fn()"
    },
    "ret236": {
      "unwatch": "fn()"
    },
    "ret237": {
      "unwatch": "fn()"
    },
    "ret238": {
      "unwatch": "fn()"
    },
    "ret239": {
      "unwatch": "fn()"
    },
    "ret240": {
      "unwatch": "fn()"
    },
    "ret241": {
      "unwatch": "fn()"
    },
    "ret242": {
      "unwatch": "fn()"
    },
    "ret243": {
      "unwatch": "fn()"
    },
    "ret244": {
      "unwatch": "fn()"
    },
    "ret245": {
      "unwatch": "fn()"
    },
    "ret246": {
      "unwatch": "fn()"
    },
    "ret247": {
      "unwatch": "fn()"
    },
    "ret248": {
      "unwatch": "fn()"
    },
    "ret249": {
      "unwatch": "fn()"
    },
    "ret250": {
      "unwatch": "fn()"
    },
    "ret251": {
      "unwatch": "fn()"
    },
    "ret252": {
      "unwatch": "fn()"
    },
    "ret253": {
      "unwatch": "fn()"
    },
    "ret254": {
      "unwatch": "fn()"
    },
    "ret255": {
      "unwatch": "fn()"
    },
    "ret256": {
      "unwatch": "fn()"
    },
    "ret257": {
      "unwatch": "fn()"
    },
    "ret258": {
      "unwatch": "fn()"
    },
    "ret259": {
      "unwatch": "fn()"
    },
    "ret260": {
      "unwatch": "fn()"
    },
    "ret261": {
      "unwatch": "fn()"
    },
    "ret262": {
      "unwatch": "fn()"
    },
    "ret263": {
      "unwatch": "fn()"
    },
    "ret264": {
      "unwatch": "fn()"
    },
    "ret265": {
      "unwatch": "fn()"
    },
    "ret266": {
      "unwatch": "fn()"
    },
    "ret267": {
      "unwatch": "fn()"
    },
    "ret268": {
      "unwatch": "fn()"
    },
    "ret269": {
      "unwatch": "fn()"
    },
    "ret270": {
      "unwatch": "fn()"
    },
    "ret271": {
      "unwatch": "fn()"
    },
    "ret272": {
      "unwatch": "fn()"
    },
    "ret273": {
      "unwatch": "fn()"
    },
    "ret274": {
      "unwatch": "fn()"
    },
    "ret275": {
      "unwatch": "fn()"
    },
    "ret276": {
      "unwatch": "fn()"
    },
    "ret277": {
      "unwatch": "fn()"
    },
    "ret278": {
      "unwatch": "fn()"
    },
    "ret279": {
      "unwatch": "fn()"
    },
    "ret280": {
      "unwatch": "fn()"
    },
    "ret281": {
      "unwatch": "fn()"
    },
    "ret282": {
      "unwatch": "fn()"
    },
    "ret283": {
      "unwatch": "fn()"
    },
    "ret284": {
      "unwatch": "fn()"
    },
    "ret285": {
      "unwatch": "fn()"
    },
    "ret286": {
      "unwatch": "fn()"
    },
    "ret287": {
      "unwatch": "fn()"
    },
    "ret288": {
      "unwatch": "fn()"
    },
    "ret289": {
      "unwatch": "fn()"
    },
    "ret290": {
      "unwatch": "fn()"
    },
    "ret291": {
      "unwatch": "fn()"
    },
    "ret292": {
      "unwatch": "fn()"
    },
    "ret293": {
      "unwatch": "fn()"
    },
    "ret294": {
      "unwatch": "fn()"
    },
    "ret295": {
      "unwatch": "fn()"
    },
    "ret296": {
      "unwatch": "fn()"
    },
    "ret297": {
      "unwatch": "fn()"
    },
    "ret298": {
      "unwatch": "fn()"
    },
    "ret299": {
      "unwatch": "fn()"
    },
    "ret300": {
      "unwatch": "fn()"
    },
    "ret301": {
      "unwatch": "fn()"
    },
    "ret302": {
      "unwatch": "fn()"
    },
    "ret303": {
      "unwatch": "fn()"
    },
    "ret304": {
      "unwatch": "fn()"
    },
    "ret305": {
      "unwatch": "fn()"
    },
    "ret306": {
      "unwatch": "fn()"
    },
    "ret307": {
      "unwatch": "fn()"
    },
    "ret308": {
      "unwatch": "fn()"
    },
    "ret309": {
      "unwatch": "fn()"
    },
    "ret310": {
      "unwatch": "fn()"
    },
    "ret311": {
      "unwatch": "fn()"
    },
    "ret312": {
      "unwatch": "fn()"
    },
    "ret313": {
      "unwatch": "fn()"
    },
    "ret314": {
      "unwatch": "fn()"
    },
    "ret315": {
      "unwatch": "fn()"
    },
    "ret316": {
      "unwatch": "fn()"
    },
    "ret317": {
      "unwatch": "fn()"
    },
    "ret318": {
      "unwatch": "fn()"
    },
    "ret319": {
      "unwatch": "fn()"
    },
    "ret320": {
      "unwatch": "fn()"
    },
    "ret321": {
      "unwatch": "fn()"
    },
    "ret322": {
      "unwatch": "fn()"
    },
    "ret323": {
      "unwatch": "fn()"
    },
    "ret324": {
      "unwatch": "fn()"
    },
    "ret325": {
      "unwatch": "fn()"
    },
    "ret326": {
      "unwatch": "fn()"
    },
    "ret327": {
      "unwatch": "fn()"
    },
    "ret328": {
      "unwatch": "fn()"
    },
    "ret329": {
      "unwatch": "fn()"
    },
    "ret330": {
      "unwatch": "fn()"
    },
    "ret331": {
      "unwatch": "fn()"
    },
    "ret332": {
      "unwatch": "fn()"
    },
    "ret333": {
      "unwatch": "fn()"
    },
    "ret334": {
      "unwatch": "fn()"
    },
    "ret335": {
      "unwatch": "fn()"
    },
    "ret336": {
      "unwatch": "fn()"
    },
    "ret337": {
      "unwatch": "fn()"
    },
    "ret338": {
      "unwatch": "fn()"
    },
    "ret339": {
      "unwatch": "fn()"
    },
    "ret340": {
      "unwatch": "fn()"
    },
    "ret341": {
      "unwatch": "fn()"
    },
    "ret342": {
      "unwatch": "fn()"
    },
    "ret343": {
      "unwatch": "fn()"
    },
    "ret344": {
      "unwatch": "fn()"
    },
    "ret345": {
      "unwatch": "fn()"
    },
    "ret346": {
      "unwatch": "fn()"
    },
    "ret347": {
      "unwatch": "fn()"
    },
    "ret348": {
      "unwatch": "fn()"
    },
    "ret349": {
      "unwatch": "fn()"
    },
    "ret350": {
      "unwatch": "fn()"
    },
    "ret351": {
      "unwatch": "fn()"
    },
    "ret352": {
      "unwatch": "fn()"
    },
    "ret353": {
      "unwatch": "fn()"
    },
    "ret354": {
      "unwatch": "fn()"
    },
    "ret355": {
      "unwatch": "fn()"
    },
    "ret356": {
      "unwatch": "fn()"
    },
    "ret357": {
      "unwatch": "fn()"
    },
    "ret358": {
      "unwatch": "fn()"
    },
    "ret359": {
      "unwatch": "fn()"
    },
    "ret360": {
      "unwatch": "fn()"
    },
    "ret361": {
      "unwatch": "fn()"
    },
    "ret362": {
      "unwatch": "fn()"
    },
    "ret363": {
      "unwatch": "fn()"
    },
    "ret364": {
      "unwatch": "fn()"
    },
    "ret365": {
      "unwatch": "fn()"
    },
    "ret366": {
      "unwatch": "fn()"
    },
    "ret367": {
      "unwatch": "fn()"
    },
    "ret368": {
      "unwatch": "fn()"
    },
    "ret369": {
      "unwatch": "fn()"
    },
    "ret370": {
      "unwatch": "fn()"
    },
    "ret371": {
      "unwatch": "fn()"
    },
    "ret372": {
      "unwatch": "fn()"
    },
    "ret373": {
      "unwatch": "fn()"
    },
    "ret374": {
      "unwatch": "fn()"
    },
    "ret375": {
      "unwatch": "fn()"
    },
    "ret376": {
      "unwatch": "fn()"
    },
    "ret377": {
      "unwatch": "fn()"
    },
    "ret378": {
      "unwatch": "fn()"
    },
    "ret379": {
      "unwatch": "fn()"
    },
    "ret380": {
      "unwatch": "fn()"
    },
    "ret381": {
      "unwatch": "fn()"
    },
    "ret382": {
      "unwatch": "fn()"
    },
    "ret383": {
      "unwatch": "fn()"
    },
    "ret384": {
      "unwatch": "fn()"
    },
    "ret385": {
      "unwatch": "fn()"
    },
    "ret386": {
      "unwatch": "fn()"
    },
    "ret387": {
      "unwatch": "fn()"
    },
    "ret388": {
      "unwatch": "fn()"
    },
    "ret389": {
      "unwatch": "fn()"
    },
    "ret390": {
      "unwatch": "fn()"
    },
    "ret391": {
      "unwatch": "fn()"
    },
    "ret392": {
      "unwatch": "fn()"
    },
    "ret393": {
      "unwatch": "fn()"
    },
    "ret394": {
      "unwatch": "fn()"
    },
    "ret395": {
      "unwatch": "fn()"
    },
    "ret396": {
      "unwatch": "fn()"
    },
    "ret397": {
      "unwatch": "fn()"
    },
    "ret398": {
      "unwatch": "fn()"
    },
    "ret399": {
      "unwatch": "fn()"
    },
    "ret400": {
      "unwatch": "fn()"
    },
    "ret401": {
      "unwatch": "fn()"
    },
    "ret402": {
      "unwatch": "fn()"
    },
    "ret403": {
      "unwatch": "fn()"
    },
    "ret404": {
      "unwatch": "fn()"
    },
    "ret405": {
      "unwatch": "fn()"
    },
    "ret406": {
      "unwatch": "fn()"
    },
    "ret407": {
      "unwatch": "fn()"
    },
    "ret408": {
      "unwatch": "fn()"
    },
    "ret409": {
      "unwatch": "fn()"
    },
    "ret410": {
      "unwatch": "fn()"
    },
    "ret411": {
      "unwatch": "fn()"
    },
    "ret412": {
      "unwatch": "fn()"
    },
    "ret413": {
      "unwatch": "fn()"
    },
    "ret414": {
      "unwatch": "fn()"
    },
    "ret415": {
      "unwatch": "fn()"
    },
    "ret416": {
      "unwatch": "fn()"
    },
    "ret417": {
      "unwatch": "fn()"
    },
    "ret418": {
      "unwatch": "fn()"
    },
    "ret419": {
      "unwatch": "fn()"
    },
    "ret420": {
      "unwatch": "fn()"
    },
    "ret421": {
      "unwatch": "fn()"
    },
    "ret422": {
      "unwatch": "fn()"
    },
    "ret423": {
      "unwatch": "fn()"
    },
    "ret424": {
      "unwatch": "fn()"
    },
    "ret425": {
      "unwatch": "fn()"
    },
    "ret426": {
      "unwatch": "fn()"
    },
    "ret427": {
      "unwatch": "fn()"
    },
    "ret428": {
      "unwatch": "fn()"
    },
    "ret429": {
      "unwatch": "fn()"
    },
    "ret430": {
      "unwatch": "fn()"
    },
    "ret431": {
      "unwatch": "fn()"
    },
    "ret432": {
      "unwatch": "fn()"
    },
    "ret433": {
      "unwatch": "fn()"
    },
    "ret434": {
      "unwatch": "fn()"
    },
    "ret435": {
      "unwatch": "fn()"
    },
    "ret436": {
      "unwatch": "fn()"
    },
    "ret437": {
      "unwatch": "fn()"
    },
    "ret438": {
      "unwatch": "fn()"
    },
    "ret439": {
      "unwatch": "fn()"
    },
    "ret440": {
      "unwatch": "fn()"
    },
    "ret441": {
      "unwatch": "fn()"
    },
    "ret442": {
      "unwatch": "fn()"
    },
    "ret443": {
      "unwatch": "fn()"
    },
    "ret444": {
      "unwatch": "fn()"
    },
    "ret445": {
      "unwatch": "fn()"
    },
    "ret446": {
      "unwatch": "fn()"
    },
    "ret447": {
      "unwatch": "fn()"
    },
    "ret448": {
      "unwatch": "fn()"
    },
    "ret449": {
      "unwatch": "fn()"
    },
    "ret450": {
      "unwatch": "fn()"
    },
    "ret451": {
      "unwatch": "fn()"
    },
    "ret452": {
      "unwatch": "fn()"
    },
    "ret453": {
      "unwatch": "fn()"
    },
    "ret454": {
      "unwatch": "fn()"
    },
    "ret455": {
      "unwatch": "fn()"
    },
    "ret456": {
      "unwatch": "fn()"
    },
    "ret457": {
      "unwatch": "fn()"
    },
    "ret458": {
      "unwatch": "fn()"
    },
    "ret459": {
      "unwatch": "fn()"
    },
    "ret460": {
      "unwatch": "fn()"
    },
    "ret461": {
      "unwatch": "fn()"
    },
    "ret462": {
      "unwatch": "fn()"
    },
    "ret463": {
      "unwatch": "fn()"
    },
    "ret464": {
      "unwatch": "fn()"
    },
    "ret465": {
      "unwatch": "fn()"
    },
    "ret466": {
      "unwatch": "fn()"
    },
    "ret467": {
      "unwatch": "fn()"
    },
    "ret468": {
      "unwatch": "fn()"
    },
    "ret469": {
      "unwatch": "fn()"
    },
    "ret470": {
      "unwatch": "fn()"
    },
    "ret471": {
      "unwatch": "fn()"
    },
    "ret472": {
      "unwatch": "fn()"
    },
    "ret473": {
      "unwatch": "fn()"
    },
    "ret474": {
      "unwatch": "fn()"
    },
    "ret475": {
      "unwatch": "fn()"
    },
    "ret476": {
      "unwatch": "fn()"
    },
    "ret477": {
      "unwatch": "fn()"
    },
    "ret478": {
      "unwatch": "fn()"
    },
    "ret479": {
      "unwatch": "fn()"
    },
    "ret480": {
      "unwatch": "fn()"
    },
    "ret481": {
      "unwatch": "fn()"
    },
    "ret482": {
      "unwatch": "fn()"
    },
    "ret483": {
      "unwatch": "fn()"
    },
    "ret484": {
      "unwatch": "fn()"
    },
    "ret485": {
      "unwatch": "fn()"
    },
    "ret486": {
      "unwatch": "fn()"
    },
    "ret487": {
      "unwatch": "fn()"
    },
    "ret488": {
      "unwatch": "fn()"
    },
    "ret489": {
      "unwatch": "fn()"
    },
    "ret490": {
      "unwatch": "fn()"
    },
    "ret491": {
      "unwatch": "fn()"
    },
    "ret492": {
      "unwatch": "fn()"
    },
    "ret493": {
      "unwatch": "fn()"
    },
    "ret494": {
      "unwatch": "fn()"
    },
    "ret495": {
      "unwatch": "fn()"
    },
    "ret496": {
      "unwatch": "fn()"
    },
    "ret497": {
      "unwatch": "fn()"
    },
    "ret498": {
      "unwatch": "fn()"
    },
    "ret499": {
      "unwatch": "fn()"
    },
    "ret500": {
      "unwatch": "fn()"
    },
    "ret501": {
      "unwatch": "fn()"
    },
    "ret502": {
      "unwatch": "fn()"
    },
    "ret503": {
      "unwatch": "fn()"
    },
    "ret504": {
      "unwatch": "fn()"
    },
    "ret505": {
      "unwatch": "fn()"
    },
    "ret506": {
      "unwatch": "fn()"
    },
    "ret507": {
      "unwatch": "fn()"
    },
    "ret508": {
      "unwatch": "fn()"
    },
    "ret509": {
      "unwatch": "fn()"
    },
    "ret510": {
      "unwatch": "fn()"
    },
    "ret511": {
      "unwatch": "fn()"
    },
    "ret512": {
      "unwatch": "fn()"
    },
    "ret513": {
      "unwatch": "fn()"
    },
    "ret514": {
      "unwatch": "fn()"
    },
    "ret515": {
      "unwatch": "fn()"
    },
    "ret516": {
      "unwatch": "fn()"
    },
    "ret517": {
      "unwatch": "fn()"
    },
    "ret518": {
      "unwatch": "fn()"
    },
    "ret519": {
      "unwatch": "fn()"
    },
    "ret520": {
      "unwatch": "fn()"
    },
    "ret521": {
      "unwatch": "fn()"
    },
    "ret522": {
      "unwatch": "fn()"
    },
    "ret523": {
      "unwatch": "fn()"
    },
    "ret524": {
      "unwatch": "fn()"
    },
    "ret525": {
      "unwatch": "fn()"
    },
    "ret526": {
      "unwatch": "fn()"
    },
    "ret527": {
      "unwatch": "fn()"
    },
    "ret528": {
      "unwatch": "fn()"
    },
    "ret529": {
      "unwatch": "fn()"
    },
    "ret530": {
      "unwatch": "fn()"
    },
    "ret531": {
      "unwatch": "fn()"
    },
    "ret532": {
      "unwatch": "fn()"
    },
    "ret533": {
      "unwatch": "fn()"
    },
    "ret534": {
      "unwatch": "fn()"
    },
    "ret535": {
      "unwatch": "fn()"
    },
    "ret536": {
      "unwatch": "fn()"
    },
    "ret537": {
      "unwatch": "fn()"
    },
    "ret538": {
      "unwatch": "fn()"
    },
    "ret539": {
      "unwatch": "fn()"
    },
    "ret540": {
      "unwatch": "fn()"
    },
    "ret541": {
      "unwatch": "fn()"
    },
    "ret542": {
      "unwatch": "fn()"
    },
    "ret543": {
      "unwatch": "fn()"
    },
    "ret544": {
      "unwatch": "fn()"
    },
    "ret545": {
      "unwatch": "fn()"
    },
    "ret546": {
      "unwatch": "fn()"
    },
    "ret547": {
      "unwatch": "fn()"
    },
    "ret548": {
      "unwatch": "fn()"
    },
    "ret549": {
      "unwatch": "fn()"
    },
    "ret550": {
      "unwatch": "fn()"
    },
    "ret551": {
      "unwatch": "fn()"
    },
    "ret552": {
      "unwatch": "fn()"
    },
    "ret553": {
      "unwatch": "fn()"
    },
    "ret554": {
      "unwatch": "fn()"
    },
    "ret555": {
      "unwatch": "fn()"
    },
    "ret556": {
      "unwatch": "fn()"
    },
    "ret557": {
      "unwatch": "fn()"
    },
    "ret558": {
      "unwatch": "fn()"
    },
    "ret559": {
      "unwatch": "fn()"
    },
    "ret560": {
      "unwatch": "fn()"
    },
    "ret561": {
      "unwatch": "fn()"
    },
    "ret562": {
      "unwatch": "fn()"
    },
    "ret563": {
      "unwatch": "fn()"
    },
    "ret564": {
      "unwatch": "fn()"
    },
    "ret565": {
      "unwatch": "fn()"
    },
    "ret566": {
      "unwatch": "fn()"
    },
    "ret567": {
      "unwatch": "fn()"
    },
    "ret568": {
      "unwatch": "fn()"
    },
    "ret569": {
      "unwatch": "fn()"
    },
    "ret570": {
      "unwatch": "fn()"
    },
    "ret571": {
      "unwatch": "fn()"
    },
    "ret572": {
      "unwatch": "fn()"
    },
    "ret573": {
      "unwatch": "fn()"
    },
    "ret574": {
      "unwatch": "fn()"
    },
    "ret575": {
      "unwatch": "fn()"
    },
    "ret576": {
      "unwatch": "fn()"
    },
    "ret577": {
      "unwatch": "fn()"
    },
    "ret578": {
      "unwatch": "fn()"
    },
    "ret579": {
      "unwatch": "fn()"
    },
    "ret580": {
      "unwatch": "fn()"
    },
    "ret581": {
      "unwatch": "fn()"
    },
    "ret582": {
      "unwatch": "fn()"
    },
    "ret583": {
      "unwatch": "fn()"
    },
    "ret584": {
      "unwatch": "fn()"
    },
    "ret585": {
      "unwatch": "fn()"
    },
    "ret586": {
      "unwatch": "fn()"
    },
    "ret587": {
      "unwatch": "fn()"
    },
    "ret588": {
      "unwatch": "fn()"
    },
    "ret589": {
      "unwatch": "fn()"
    },
    "ret590": {
      "unwatch": "fn()"
    },
    "ret591": {
      "unwatch": "fn()"
    },
    "ret592": {
      "unwatch": "fn()"
    },
    "ret593": {
      "unwatch": "fn()"
    },
    "ret594": {
      "unwatch": "fn()"
    },
    "ret595": {
      "unwatch": "fn()"
    },
    "ret596": {
      "unwatch": "fn()"
    },
    "ret597": {
      "unwatch": "fn()"
    },
    "ret598": {
      "unwatch": "fn()"
    },
    "ret599": {
      "unwatch": "fn()"
    },
    "ret600": {
      "unwatch": "fn()"
    },
    "ret601": {
      "unwatch": "fn()"
    },
    "ret602": {
      "unwatch": "fn()"
    },
    "ret603": {
      "unwatch": "fn()"
    },
    "ret604": {
      "unwatch": "fn()"
    },
    "ret605": {
      "unwatch": "fn()"
    },
    "ret606": {
      "unwatch": "fn()"
    },
    "ret607": {
      "unwatch": "fn()"
    },
    "ret608": {
      "unwatch": "fn()"
    },
    "ret609": {
      "unwatch": "fn()"
    },
    "ret610": {
      "unwatch": "fn()"
    },
    "ret611": {
      "unwatch": "fn()"
    },
    "ret612": {
      "unwatch": "fn()"
    },
    "ret613": {
      "unwatch": "fn()"
    },
    "ret614": {
      "unwatch": "fn()"
    },
    "ret615": {
      "unwatch": "fn()"
    },
    "ret616": {
      "unwatch": "fn()"
    },
    "ret617": {
      "unwatch": "fn()"
    },
    "ret618": {
      "unwatch": "fn()"
    },
    "ret619": {
      "unwatch": "fn()"
    },
    "ret620": {
      "unwatch": "fn()"
    },
    "ret621": {
      "unwatch": "fn()"
    },
    "ret622": {
      "unwatch": "fn()"
    },
    "ret623": {
      "unwatch": "fn()"
    },
    "ret624": {
      "unwatch": "fn()"
    },
    "ret625": {
      "unwatch": "fn()"
    },
    "ret626": {
      "unwatch": "fn()"
    },
    "ret627": {
      "unwatch": "fn()"
    },
    "ret628": {
      "unwatch": "fn()"
    },
    "ret629": {
      "unwatch": "fn()"
    },
    "ret630": {
      "unwatch": "fn()"
    },
    "ret631": {
      "unwatch": "fn()"
    },
    "ret632": {
      "unwatch": "fn()"
    },
    "ret633": {
      "unwatch": "fn()"
    },
    "ret634": {
      "unwatch": "fn()"
    },
    "ret635": {
      "unwatch": "fn()"
    },
    "ret636": {
      "unwatch": "fn()"
    },
    "ret637": {
      "unwatch": "fn()"
    },
    "ret638": {
      "unwatch": "fn()"
    },
    "ret639": {
      "unwatch": "fn()"
    },
    "ret640": {
      "unwatch": "fn()"
    },
    "ret641": {
      "unwatch": "fn()"
    },
    "ret642": {
      "unwatch": "fn()"
    },
    "ret643": {
      "unwatch": "fn()"
    },
    "ret644": {
      "unwatch": "fn()"
    },
    "ret645": {
      "unwatch": "fn()"
    },
    "ret646": {
      "unwatch": "fn()"
    },
    "ret647": {
      "unwatch": "fn()"
    },
    "ret648": {
      "unwatch": "fn()"
    },
    "ret649": {
      "unwatch": "fn()"
    },
    "ret650": {
      "unwatch": "fn()"
    },
    "ret651": {
      "unwatch": "fn()"
    },
    "ret652": {
      "unwatch": "fn()"
    },
    "ret653": {
      "unwatch": "fn()"
    },
    "ret654": {
      "unwatch": "fn()"
    },
    "ret655": {
      "unwatch": "fn()"
    },
    "ret656": {
      "unwatch": "fn()"
    },
    "ret657": {
      "unwatch": "fn()"
    },
    "ret658": {
      "unwatch": "fn()"
    },
    "ret659": {
      "unwatch": "fn()"
    },
    "ret660": {
      "unwatch": "fn()"
    },
    "ret661": {
      "unwatch": "fn()"
    },
    "ret662": {
      "unwatch": "fn()"
    },
    "ret663": {
      "unwatch": "fn()"
    },
    "ret664": {
      "unwatch": "fn()"
    },
    "ret665": {
      "unwatch": "fn()"
    },
    "ret666": {
      "unwatch": "fn()"
    },
    "ret667": {
      "unwatch": "fn()"
    },
    "ret668": {
      "unwatch": "fn()"
    },
    "ret669": {
      "unwatch": "fn()"
    },
    "ret670": {
      "unwatch": "fn()"
    },
    "ret671": {
      "unwatch": "fn()"
    },
    "ret672": {
      "unwatch": "fn()"
    },
    "ret673": {
      "unwatch": "fn()"
    },
    "ret674": {
      "unwatch": "fn()"
    },
    "ret675": {
      "unwatch": "fn()"
    },
    "ret676": {
      "unwatch": "fn()"
    },
    "ret677": {
      "unwatch": "fn()"
    },
    "ret678": {
      "unwatch": "fn()"
    },
    "ret679": {
      "unwatch": "fn()"
    },
    "ret680": {
      "unwatch": "fn()"
    },
    "ret681": {
      "unwatch": "fn()"
    },
    "ret682": {
      "unwatch": "fn()"
    },
    "ret683": {
      "unwatch": "fn()"
    },
    "ret684": {
      "unwatch": "fn()"
    },
    "ret685": {
      "unwatch": "fn()"
    },
    "ret686": {
      "unwatch": "fn()"
    },
    "ret687": {
      "unwatch": "fn()"
    },
    "ret688": {
      "unwatch": "fn()"
    },
    "ret689": {
      "unwatch": "fn()"
    },
    "ret690": {
      "unwatch": "fn()"
    },
    "ret691": {
      "unwatch": "fn()"
    },
    "ret692": {
      "unwatch": "fn()"
    },
    "ret693": {
      "unwatch": "fn()"
    },
    "ret694": {
      "unwatch": "fn()"
    },
    "ret695": {
      "unwatch": "fn()"
    },
    "ret696": {
      "unwatch": "fn()"
    },
    "ret697": {
      "unwatch": "fn()"
    },
    "ret698": {
      "unwatch": "fn()"
    },
    "ret699": {
      "unwatch": "fn()"
    },
    "ret700": {
      "unwatch": "fn()"
    },
    "ret701": {
      "unwatch": "fn()"
    },
    "ret702": {
      "unwatch": "fn()"
    },
    "ret703": {
      "unwatch": "fn()"
    },
    "ret704": {
      "unwatch": "fn()"
    },
    "ret705": {
      "unwatch": "fn()"
    },
    "ret706": {
      "unwatch": "fn()"
    },
    "ret707": {
      "unwatch": "fn()"
    },
    "ret708": {
      "unwatch": "fn()"
    },
    "ret709": {
      "unwatch": "fn()"
    },
    "ret710": {
      "unwatch": "fn()"
    },
    "ret711": {
      "unwatch": "fn()"
    },
    "ret712": {
      "unwatch": "fn()"
    },
    "ret713": {
      "unwatch": "fn()"
    },
    "ret714": {
      "unwatch": "fn()"
    },
    "ret715": {
      "unwatch": "fn()"
    },
    "ret716": {
      "unwatch": "fn()"
    },
    "ret717": {
      "unwatch": "fn()"
    },
    "ret718": {
      "unwatch": "fn()"
    },
    "ret719": {
      "unwatch": "fn()"
    },
    "ret720": {
      "unwatch": "fn()"
    },
    "ret721": {
      "unwatch": "fn()"
    },
    "ret722": {
      "unwatch": "fn()"
    },
    "ret723": {
      "unwatch": "fn()"
    },
    "ret724": {
      "unwatch": "fn()"
    },
    "ret725": {
      "unwatch": "fn()"
    }
  }
}
