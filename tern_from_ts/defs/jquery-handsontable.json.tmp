{
  "Handsontable": {
    "CellPosition": {
      "row": "number",
      "col": "number"
    },
    "Options": {
      "data": "?",
      "width": "?",
      "height": "?",
      "minRows": "number",
      "minCols": "number",
      "maxRows": "number",
      "maxCols": "number",
      "startRows": "number",
      "startCols": "number",
      "rowHeaders": "?",
      "colHeaders": "?",
      "colWidths": "?",
      "columns": "[?]",
      "cells": "fn(row: number, col: number, prop: string)",
      "dataSchema": "?",
      "minSpareRows": "number",
      "minSpareCols": "number",
      "multiSelect": "bool",
      "fillHandle": "?",
      "contextMenu": "?",
      "undo": "bool",
      "outsideClickDeselects": "bool",
      "enterBeginsEditing": "bool",
      "enterMoves": "?",
      "tabMoves": "?",
      "autoWrapRow": "bool",
      "autoWrapCol": "bool",
      "autoComplete": "[?]",
      "copyRowsLimit": "number",
      "copyColsLimit": "number",
      "pasteMode": "string",
      "stretchH": "string",
      "isEmptyRow": "fn(row: number)",
      "isEmptyCol": "fn(col: number)",
      "manualColumnResize": "?",
      "manualColumnMove": "?",
      "columnSorting": "bool",
      "persistentState": "bool",
      "currentRowClassName": "string",
      "currentColClassName": "string",
      "fixedRowsTop": "number",
      "fixedColumnsLeft": "number",
      "fragmentSelection": "bool",
      "wordWrap": "bool",
      "noWordWrapClassName": "string",
      "placeholder": "?",
      "placeholderCellClassName": "string",
      "invalidCellClassName": "string",
      "readOnlyCellClassName": "string",
      "debug": "bool",
      "observeDOMVisibility": "bool",
      "autoColumnSize": "bool",
      "observeChanges": "bool",
      "manualRowResize": "bool",
      "copyPaste": "bool",
      "search": "bool",
      "mergeCells": "?",
      "beforeInitWalkontable": "Function",
      "beforeInit": "Function",
      "beforeRender": "fn(isForced: bool)",
      "beforeChange": "fn(changes: [[?]], source: string)",
      "beforeChangeRender": "Function",
      "beforeColumnSort": "fn(column: number, order: bool)",
      "beforeSet": "fn(v: Object)",
      "beforeGetCellMeta": "fn(row: number, col: number, cellProperties: Object)",
      "beforeAutofill": "fn(start: CellPosition, end: CellPosition, data: [[string]])",
      "beforeKeyDown": "fn(event: KeyboardEvent)",
      "beforeValidate": "fn(value: ?, row: number, prop: string, source: string)",
      "afterInit": "Function",
      "afterLoadData": "Function",
      "afterRender": "fn(isForced: bool)",
      "afterChange": "fn(changes: [?], source: string)",
      "afterColumnSort": "fn(column: number, order: bool)",
      "afterSelection": "fn(r: number, c: number, r2: number, c2: number)",
      "afterSelectionByProp": "fn(r: number, p: string, r2: number, p2: string)",
      "afterSelectionEnd": "fn(r: number, c: number, r2: number, c2: number)",
      "afterSelectionEndByProp": "fn(r: number, p: string, r2: number, p2: string)",
      "afterDeselect": "Function",
      "afterGetCellMeta": "fn(row: number, col: number, cellProperties: Object)",
      "afterGetColHeader": "fn(col: number, TH: HTMLTableHeaderCellElement)",
      "afterGetColWidth": "fn(col: number, response: Object)",
      "afterDestroy": "Function",
      "afterCreateRow": "fn(index: number, amount: number)",
      "afterCreateCol": "fn(index: number, amount: number)",
      "beforeRemoveRow": "fn(index: number, amount: number)",
      "afterRemoveRow": "fn(index: number, amount: number)",
      "beforeRemoveCol": "fn(index: number, amount: number)",
      "afterRemoveCol": "fn(index: number, amount: number)",
      "afterColumnResize": "fn(col: number, size: number)",
      "afterColumnMove": "fn(oldIndex: number, newIndex: number)",
      "afterCopyLimit": "fn(selectedRowsCount: number, selectedColsCount: number, copyRowsLimit: number, copyColsLimit: number)",
      "afterValidate": "fn(isValid: bool, value: ?, row: number, prop: string, source: string)",
      "beforeSetRangeEnd": "fn(coords: [?])",
      "afterUpdateSettings": "Function",
      "afterRenderer": "fn(TD: HTMLTableDataCellElement, row: number, col: number, prop: string, value: string, cellProperties: Object)",
      "afterOnCellMouseDown": "fn(event: MouseEvent, coords: CellPosition, TD: HTMLTableDataCellElement)",
      "afterOnCellMouseOver": "fn(event: MouseEvent, coords: CellPosition, TD: HTMLTableDataCellElement)",
      "afterOnCellCornerMouseDown": "fn(event: MouseEvent)",
      "afterScrollVertically": "Function",
      "afterScrollHorizontally": "Function",
      "afterCellMetaReset": "Function",
      "modifyColWidth": "fn(width: number, col: number)",
      "modifyRowHeight": "fn(height: number, row: number)",
      "modifyRow": "fn(row: number)",
      "modifyCol": "fn(col: number)",
      "afterSetCellMeta": "Function",
      "onSelection": "fn(r: number, p: number, r2: number, p2: number)",
      "onSelectionByProp": "fn(r: number, p: number, r2: number, p2: number)",
      "onSelectionEnd": "fn(r: number, p: number, r2: number, p2: number)",
      "onSelectionEndByProp": "fn(r: number, p: number, r2: number, p2: number)",
      "onBeforeChange": "fn(changes: [?], source: string)",
      "onChange": "fn(changes: [?], source: string)",
      "onCopyLimit": "fn(selectedRowsCount: number, selectedColsCount: number, copyRowsLimit: number, copyColsLimit: number)"
    },
    "Context": {
      "updateSettings": "fn(options: Options)",
      "getSettings": "fn() -> Options",
      "loadData": "fn(data: [?])",
      "listen": "fn()",
      "getCellRenderer": "fn(row: number, col: number) -> string",
      "unlisten": "fn()",
      "isListening": "fn() -> bool",
      "render": "fn()",
      "destroy": "fn()",
      "validateCells": "fn(callback: Function)",
      "getData": "fn() -> ?",
      "getDataAtCell": "fn(row: number, col: number) -> ?",
      "getDataAtRowProp": "fn(row: number, prop: string) -> ?",
      "getDataAtRow": "fn(row: number) -> ?",
      "getSourceDataAtRow": "fn(row: number) -> ?",
      "getDataAtCol": "fn(col: number) -> [?]",
      "getSourceDataAtCol": "fn(col: number) -> [?]",
      "getDataAtProp": "fn(prop: string) -> [?]",
      "getCopyableData": "fn(startRow: number, startCol: number, endRow: number, endCol: number) -> ?",
      "getValue": "fn() -> ?",
      "setDataAtCell": "fn(row: number, col: number, value: ?, source?: string)",
      "setDataAtRowProp": "fn(row: number, prop: string, value: ?, source?: string)",
      "populateFromArray": "fn(row: number, col: number, input: [?], endRow: number, endCol: number, source?: string, populateMethod?: string)",
      "spliceCol": "fn(col: number, index: number, amount: number, elements: [?])",
      "spliceRow": "fn(row: number, index: number, amount: number, elements: [?])",
      "alter": "fn(type: string, index: number, amount?: number, source?: string)",
      "getCell": "fn(row: number, col: number) -> ?",
      "getCellMeta": "fn(row: number, col: number) -> ?",
      "setCellMeta": "fn(row: number, col: number, key: string, val: string)",
      "destroyEditor": "fn(revertOriginal?: bool)",
      "selectCell": "fn(row: number, col: number, row2: number, col2: number, scrollToSelection?: bool)",
      "deselectCell": "fn()",
      "getSelected": "fn()",
      "getSelectedRange": "fn()",
      "clear": "fn()",
      "countRows": "fn() -> number",
      "countCols": "fn() -> number",
      "colToProp": "fn(column: number) -> string",
      "rowOffset": "fn() -> number",
      "colOffset": "fn() -> number",
      "countVisibleRows": "fn() -> number",
      "countVisibleCols": "fn() -> number",
      "countEmptyRows": "fn(ending?: bool) -> number",
      "countEmptyCols": "fn(ending?: bool) -> number",
      "isEmptyRow": "fn(row: number) -> bool",
      "isEmptyCol": "fn(col: number) -> bool",
      "getRowHeader": "fn(row: number) -> ?",
      "getColHeader": "fn(col: number) -> ?",
      "hasRowHeaders": "fn() -> bool",
      "hasColHeaders": "fn() -> bool",
      "getColWidth": "fn(col: number) -> number",
      "getRowHeight": "fn(row: number) -> number",
      "propToCol": "fn(property: string) -> number",
      "clearUndo": "fn()",
      "isUndoAvailable": "fn() -> bool",
      "isRedoAvailable": "fn() -> bool",
      "undo": "fn()",
      "redo": "fn()",
      "sort": "fn(column: number, order: bool)"
    }
  },
  "JQuery": {
    "handsontable": "fn() -> JQuery"
  },
  "!name": "jquery-handsontable.d.ts"
}
