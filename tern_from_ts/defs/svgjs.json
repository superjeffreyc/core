{
  "SVG": "svgjs.Library",
  "svgjs": {
    "LinkedHTMLElement": {
      "instance": "Element"
    },
    "Library": {
      "create": "fn(name: string) -> ?",
      "Element": "ElementStatic",
      "supported": "bool",
      "get": "fn(id: string) -> Element",
      "extend": "fn(parent: Object, obj: Object)"
    },
    "Doc": {
      "svg": "fn(data: string) -> ?",
      "pattern": "fn(w: number, h: number, add: fn(e: Element)) -> Element",
      "defs": "fn() -> Defs",
      "clear": "fn()",
      "mask": "fn() -> Mask"
    },
    "Filter": {
      "gaussianBlur": "fn(values: string) -> Filter",
      "colorMatrix": "fn(name: string, value: number) -> Filter",
      "componentTransfer": "fn(components: ?) -> Filter",
      "offset": "fn(x: number, y: number) -> Filter",
      "blend": "fn() -> Filter",
      "in": "fn(source: FilterSource) -> Filter",
      "sourceAlpha": "FilterSource",
      "source": "FilterSource"
    },
    "FilterSource": {},
    "FilterComponentTransfer": {
      "type": "string",
      "tableValues": "string",
      "slope": "number",
      "intercept": "number",
      "amplitude": "number",
      "exponent": "number",
      "offset": "number"
    },
    "Element": {
      "node": "LinkedHTMLElement",
      "nested": "fn() -> Doc",
      "animate": "fn(duration?: number, ease?: string, delay?: number) -> Animation",
      "attr": "fn(name: string) -> ?",
      "viewbox": "fn() -> Viewbox",
      "move": "fn(x: number, y: number, anchor?: bool) -> Element",
      "x": "fn(x: number, anchor?: bool) -> Element",
      "y": "fn(y: number, anchor?: bool) -> Element",
      "center": "fn(x: number, y: number, anchor?: bool) -> Element",
      "cx": "fn(x: number, anchor?: bool) -> Element",
      "cy": "fn(y: number, anchor?: bool) -> Element",
      "size": "fn(w: number, h: number, anchor?: bool) -> Element",
      "show": "fn() -> Element",
      "hide": "fn() -> Element",
      "visible": "fn() -> bool",
      "remove": "fn()",
      "each": "fn(iterator: fn(i?: number, children?: [Element]), deep?: bool)",
      "filter": "fn(adder: fn(filter: Filter)) -> Element",
      "transform": "fn(t: Transform) -> Element",
      "style": "fn(name: string, value: string) -> Element",
      "bbox": "fn() -> BBox",
      "rbox": "fn() -> RBox",
      "doc": "fn() -> Doc",
      "data": "fn(name: string) -> ?",
      "remember": "fn(name: string, value: ?) -> Element",
      "forget": "fn(keys: [string]) -> Element",
      "fill": "fn(fill: ?) -> Element",
      "stroke": "fn(data: ?) -> Element",
      "opacity": "fn(o: number) -> Element",
      "rotate": "fn(d: number, cx?: number, cy?: number) -> Element",
      "skew": "fn(x: number, y: number) -> Element",
      "scale": "fn(x: number, y: number) -> Element",
      "translate": "fn(x: number, y: number) -> Element",
      "maskWith": "fn(element: Element) -> Element",
      "masker": "Element",
      "unmask": "fn() -> Element",
      "clipWith": "fn(element: Element) -> Element",
      "clipper": "Element",
      "unclip": "fn() -> Element",
      "front": "fn() -> Element",
      "back": "fn() -> Element",
      "forward": "fn() -> Element",
      "backward": "fn() -> Element",
      "siblings": "fn() -> [Element]",
      "position": "fn() -> number",
      "next": "fn() -> Element",
      "previous": "fn() -> Element",
      "before": "fn(element: Element) -> Element",
      "after": "fn(element: Element) -> Element",
      "click": "fn(cb: Function)",
      "on": "fn(event: string, cb: Function)",
      "off": "fn(event: string, cb: Function)"
    },
    "Mask": {
      "add": "fn(element: Element) -> Mask"
    },
    "Text": {
      "content": "string",
      "font": "fn(font: ?) -> Element",
      "tspan": "fn(text: string) -> Element",
      "path": "fn(data: string) -> Element",
      "plot": "fn(data: string) -> Element",
      "track": "Element"
    },
    "ElementStatic": {},
    "Defs": {},
    "Animation": {
      "stop": "fn() -> Animation",
      "attr": "fn(name: string, value: ?, namespace?: string) -> Animation",
      "viewbox": "fn(x: number, y: number, w: number, h: number) -> Animation",
      "move": "fn(x: number, y: number, anchor?: bool) -> Animation",
      "x": "fn(x: number, anchor?: bool) -> Animation",
      "y": "fn(y: number, anchor?: bool) -> Animation",
      "center": "fn(x: number, y: number, anchor?: bool) -> Animation",
      "cx": "fn(x: number, anchor?: bool) -> Animation",
      "cy": "fn(y: number, anchor?: bool) -> Animation",
      "size": "fn(w: number, h: number, anchor?: bool) -> Animation",
      "during": "fn(cb: fn(pos: number)) -> Animation",
      "to": "fn(value: number) -> Animation",
      "after": "fn(cb: fn()) -> Animation"
    },
    "Parent": {
      "put": "fn(element: Element, i?: number) -> Element",
      "add": "fn(element: Element, i?: number) -> Element",
      "children": "fn() -> [Element]",
      "rect": "fn(w: number, h: number) -> Element",
      "ellipse": "fn(w: number, h: number) -> Element",
      "circle": "fn(diameter: number) -> Element",
      "line": "fn(x1: number, y1: number, x2: number, y2: number) -> Element",
      "polyline": "fn(data: string) -> Element",
      "polygon": "fn(data: string) -> Element",
      "path": "fn(data: string) -> Element",
      "image": "fn(url: string, w?: number, h?: number) -> Element",
      "text": "fn(text: string) -> Element",
      "use": "fn(element: Element) -> Element",
      "group": "fn() -> Element"
    },
    "BBox": {
      "height": "number",
      "width": "number",
      "y": "number",
      "x": "number",
      "cx": "number",
      "cy": "number",
      "merge": "fn(bbox: BBox) -> BBox"
    },
    "RBox": {},
    "Attributes": {},
    "Viewbox": {
      "x": "number",
      "y": "number",
      "width": "number",
      "height": "number",
      "zoom": "number"
    },
    "Transform": {
      "x": "number",
      "y": "number",
      "rotation": "number",
      "cx": "number",
      "cy": "number",
      "scaleX": "number",
      "scaleY": "number",
      "skewX": "number",
      "skewY": "number",
      "matrix": "string",
      "a": "number",
      "b": "number",
      "c": "number",
      "d": "number",
      "e": "number",
      "f": "number"
    }
  },
  "svg.js": "svgjs",
  "!name": "svgjs"
}
